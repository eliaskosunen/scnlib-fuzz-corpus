_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|    858|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  2.66M|{
 3803|  2.66M|    if constexpr (sizeof(U) == 1) {
 3804|  2.66M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|  2.66M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  2.66M|{
 3767|  2.66M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  2.66M|    SCN_GCC_COMPAT_PUSH
 3770|  2.66M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  2.66M|    constexpr char lengths[] =
 3772|  2.66M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  2.66M|        "\1\1\1\1\1\1\1\1"
 3774|  2.66M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  2.66M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  2.66M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  2.66M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  2.66M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  2.66M|    SCN_GCC_COMPAT_POP
 3781|  2.66M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  2.46M|{
 4009|  2.46M|    if constexpr (sizeof(CharT) == 1) {
 4010|  2.46M|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|  2.46M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  2.46M|{
 3822|  2.46M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  2.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  2.46M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  2.46M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  2.46M|    };
 3827|       |
 3828|  2.46M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 2.15M, False: 311k]
  ------------------
 3829|  2.15M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 84, False: 2.15M]
  ------------------
 3830|     84|            SCN_UNLIKELY_ATTR
 3831|     84|            return invalid_code_point;
 3832|     84|        }
 3833|  2.15M|        return static_cast<char32_t>(input[0]);
 3834|  2.15M|    }
 3835|       |
 3836|   311k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 280k, False: 31.5k]
  ------------------
 3837|   280k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 18, False: 280k]
  ------------------
 3838|     18|            SCN_UNLIKELY_ATTR
 3839|     18|            return invalid_code_point;
 3840|     18|        }
 3841|   280k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 3.18k, False: 277k]
  ------------------
 3842|  3.18k|            SCN_UNLIKELY_ATTR
 3843|  3.18k|            return invalid_code_point;
 3844|  3.18k|        }
 3845|       |
 3846|   277k|        char32_t cp{};
 3847|   277k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|   277k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|   277k|        return cp;
 3850|   280k|    }
 3851|       |
 3852|  31.5k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 26.8k, False: 4.73k]
  ------------------
 3853|  26.8k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 18, False: 26.7k]
  ------------------
 3854|     18|            SCN_UNLIKELY_ATTR
 3855|     18|            return invalid_code_point;
 3856|     18|        }
 3857|  26.7k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 2.69k, False: 24.0k]
  ------------------
 3858|  26.7k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 306, False: 23.7k]
  ------------------
 3859|  3.00k|            SCN_UNLIKELY_ATTR
 3860|  3.00k|            return invalid_code_point;
 3861|  3.00k|        }
 3862|       |
 3863|  23.7k|        char32_t cp{};
 3864|  23.7k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  23.7k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  23.7k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  23.7k|        return cp;
 3868|  26.7k|    }
 3869|       |
 3870|  4.73k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 4.73k, False: 0]
  ------------------
 3871|  4.73k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 4.73k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  4.73k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 453, False: 4.28k]
  ------------------
 3876|    453|            SCN_UNLIKELY_ATTR
 3877|    453|            return invalid_code_point;
 3878|    453|        }
 3879|  4.28k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 694, False: 3.58k]
  ------------------
 3880|  4.28k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 379, False: 3.20k]
  ------------------
 3881|  4.28k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 271, False: 2.93k]
  ------------------
 3882|  1.34k|            SCN_UNLIKELY_ATTR
 3883|  1.34k|            return invalid_code_point;
 3884|  1.34k|        }
 3885|       |
 3886|  2.93k|        char32_t cp{};
 3887|  2.93k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  2.93k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  2.93k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  2.93k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  2.93k|        return cp;
 3892|  4.28k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|   342k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   342k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   342k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|   967k|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|   967k|    else {
 3701|   967k|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|   967k|                                       to_address(first), to_address(last)))};
 3703|   967k|    }
 3704|   967k|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.94M|{
  326|  2.94M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.94M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  2.99M|{
  304|  2.99M|    return p;
  305|  2.99M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|   569k|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|   569k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|   569k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|   569k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|   569k|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|   569k|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8877|  4.23k|{
 8878|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  4.23k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  4.23k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5405|  8.47k|{
 5406|  8.47k|    detail::check_scan_arg_types<Args...>();
 5407|  8.47k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  8.47k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5144|  8.47k|{
 5145|  8.47k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  8.47k|                  "Scan argument types must be default constructible");
 5147|  8.47k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  8.47k|                  "Scan argument types must be Destructible");
 5149|  8.47k|    static_assert(
 5150|  8.47k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  8.47k|        "Scan argument types must not be references");
 5152|  8.47k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5357|  8.47k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  8.47k|    {
 5359|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  8.47k|    {
 5370|  8.47k|        return {detail::make_arg<
 5371|  8.47k|            kind, Context,
 5372|  8.47k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  8.47k|                                 typename Context::char_type>::value>(args)...};
 5374|  8.47k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5179|  8.47k|{
 5180|  8.47k|    return make_value<Context>(value).ref_value;
 5181|  8.47k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5129|  8.47k|{
 5130|  8.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  8.47k|                                  needs_context_tag>) {
 5134|  8.47k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  8.47k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4997|  8.47k|    {
 4998|       |        if constexpr (std::is_same_v<char_type, char> &&
 4999|  8.47k|                      !is_type_disabled<char_type>) {
 5000|  8.47k|            return val;
 5001|       |        }
 5002|       |        else if constexpr (is_type_disabled<char_type>) {
 5003|       |            return unscannable_disabled{val};
 5004|       |        }
 5005|       |        else {
 5006|       |            SCN_UNUSED(val);
 5007|       |            return unscannable_char{};
 5008|       |        }
 5009|  8.47k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5098|  8.47k|{
 5099|  8.47k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  8.47k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  8.47k|    constexpr bool scannable_char =
 5103|  8.47k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  8.47k|    static_assert(scannable_char,
 5105|  8.47k|                  "Cannot scan an argument of an unsupported character "
 5106|  8.47k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  8.47k|    constexpr bool scannable_const =
 5109|  8.47k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  8.47k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  8.47k|    constexpr bool scannable_disabled =
 5113|  8.47k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  8.47k|    static_assert(scannable_disabled,
 5115|  8.47k|                  "Cannot scan an argument that has been disabled by "
 5116|  8.47k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  8.47k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  8.47k|    static_assert(
 5120|  8.47k|        scannable,
 5121|  8.47k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  8.47k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  8.47k|    return arg_value{arg};
 5125|  8.47k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4909|  8.47k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  8.47k|    {
 4911|  8.47k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|  38.1k|{
 8665|  38.1k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|  38.1k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8601|  38.1k|{
 8602|  38.1k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|  38.1k|    auto result = vscan_impl(buffer, format, args);
 8605|  38.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.6k, False: 1.46k]
  |  |  ------------------
  ------------------
 8606|  36.6k|        return unexpected(result.error());
 8607|  36.6k|    }
 8608|  1.46k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|  38.1k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4728|  76.3k|{
 4729|  76.3k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  76.3k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  76.3k|                  "\n"
 4733|  76.3k|                  "Unsupported range type given as input to a scanning "
 4734|  76.3k|                  "function.\n"
 4735|  76.3k|                  "A range needs to have a character type (value type) "
 4736|  76.3k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  76.3k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  76.3k|                  "to be included.\n"
 4739|  76.3k|                  "See the scnlib documentation for more details.");
 4740|  76.3k|    static_assert(
 4741|  76.3k|        !std::is_same_v<T, custom_char_traits>,
 4742|  76.3k|        "\n"
 4743|  76.3k|        "Unsupported range type given as input to a scanning "
 4744|  76.3k|        "function.\n"
 4745|  76.3k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  76.3k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  76.3k|        "not supported.");
 4748|  76.3k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  76.3k|                  "\n"
 4750|  76.3k|                  "Unsupported range type given as input to a scanning "
 4751|  76.3k|                  "function.\n"
 4752|  76.3k|                  "file_marker_found cannot be used as an "
 4753|  76.3k|                  "source range type to scn::scan.\n"
 4754|  76.3k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  76.3k|                  "and do not provide an explicit source range, "
 4756|  76.3k|                  "or use scn::scan with a FILE* directly.");
 4757|  76.3k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  76.3k|                  "\n"
 4759|  76.3k|                  "Unsupported range type given as input to a scanning "
 4760|  76.3k|                  "function.\n"
 4761|  76.3k|                  "In order to be scannable, a range needs to satisfy "
 4762|  76.3k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  76.3k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  76.3k|                  "\n"
 4765|  76.3k|                  "Unsupported range type given as input to a scanning "
 4766|  76.3k|                  "function.\n"
 4767|  76.3k|                  "A range needs to model forward_range and have a valid "
 4768|  76.3k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  76.3k|                  "Examples of scannable ranges are std::string, "
 4770|  76.3k|                  "std::string_view, "
 4771|  76.3k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  76.3k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  76.3k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  76.3k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4620|  76.3k|{
 4621|  76.3k|    if constexpr (is_valid_char_type<CharT>) {
 4622|  76.3k|        return r;
 4623|       |        // return make_string_scan_buffer(r);
 4624|       |    }
 4625|       |    else {
 4626|       |        return invalid_char_type{};
 4627|       |    }
 4628|  76.3k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|   232k|    {
 1598|   232k|        return has_value();
 1599|   232k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|   464k|    {
  485|   464k|        return m_has_value;
  486|   464k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   227k|    {
 1604|   227k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   227k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   227k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   227k|        return this->get_unexpected().error();
 1606|   227k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   227k|    {
  468|   227k|        return m_unexpected;
  469|   227k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  1.34M|    {
  361|  1.34M|        return m_unexpected;
  362|  1.34M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|   761k|        : m_unexpected(std::forward<Err>(e))
  346|   761k|    {
  347|   761k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   761k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   761k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  73.3k|        : base(unexpect, std::move(e.error())),
 1474|  73.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  73.3k|    {
 1476|  73.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  73.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  73.3k|          m_has_value(false)
  446|  73.3k|    {
  447|  73.3k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|   789k|        : m_unexpected(std::forward<Args>(args)...)
  355|   789k|    {
  356|   789k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   789k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   789k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  76.3k|    {
 1177|  76.3k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5932|  2.93k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  2.93k|                      ranges::iterator_t<SourceRange>>) {
 5935|  2.93k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  2.93k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.93k|    {
 2724|  2.93k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.93k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.93k|    {
 2705|  2.93k|        return decay_copy(t.begin());
 2706|  2.93k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  48.5k|{
 1949|  48.5k|    return SCN_FWD(t);
  ------------------
  |  |  930|  48.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  48.5k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5919|  2.93k|{
 5920|  2.93k|    return ranges::end(source);
 5921|  2.93k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.93k|    {
 2781|  2.93k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.93k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.93k|    {
 2763|  2.93k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.93k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|   446k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   446k|    static_cast<    \
  |  |  929|   446k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   446k|    static_cast<    \
  |  |  929|   446k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   446k|    {
 3312|   446k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  4.36k|    {
 1653|  4.36k|        return value();
 1654|  4.36k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  4.36k|    {
 1627|  4.36k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.36k|        return this->get_value();
 1629|  4.36k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  4.36k|    {
  451|  4.36k|        return m_value;
  452|  4.36k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  2.93k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.93k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.93k|    {
 1430|  2.93k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  2.93k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.93k|    {
  437|  2.93k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7985|  8.47k|    {
 7986|  8.47k|        return m_str;
 7987|  8.47k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  8.47k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  8.47k|    {
 5436|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5388|  8.47k|    {
 5389|  8.47k|        return m_argptrs;
 5390|  8.47k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|  76.3k|        : m_desc(desc), m_builtin_values(data)
 5487|  76.3k|    {
 5488|  76.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  8.47k|{
 8831|  8.47k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.26k, False: 210]
  |  |  ------------------
  ------------------
 8832|  8.26k|        return unexpected(result.error());
 8833|  8.26k|    }
 8834|    210|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    210|    static_cast<    \
  |  |  929|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    210|    static_cast<    \
  |  |  929|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  8.47k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  76.3k|    {
 1598|  76.3k|        return has_value();
 1599|  76.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   152k|    {
  485|   152k|        return m_has_value;
  486|   152k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  73.3k|    {
 1604|  73.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  73.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  73.3k|        return this->get_unexpected().error();
 1606|  73.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  73.3k|    {
  468|  73.3k|        return m_unexpected;
  469|  73.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  8.26k|        : base(unexpect, std::move(e.error())),
 1474|  8.26k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  8.26k|    {
 1476|  8.26k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  8.26k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  8.26k|          m_has_value(false)
  446|  8.26k|    {
  447|  8.26k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.47k|    {
 1177|  8.47k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  2.93k|    {
 1653|  2.93k|        return value();
 1654|  2.93k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  2.93k|    {
 1627|  2.93k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.93k|        return this->get_value();
 1629|  2.93k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.93k|    {
  451|  2.93k|        return m_value;
  452|  2.93k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5838|    210|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    210|    static_cast<    \
  |  |  929|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    210|    static_cast<    \
  |  |  929|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    210|    {
 5840|    210|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|  2.93k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  2.93k|    static_cast<    \
  |  |  929|  2.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  2.93k|    {
 5691|  2.93k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5624|    210|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|    210|    static_cast<    \
  |  |  929|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|    210|    {
 5626|    210|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    210|        : base(std::in_place, std::forward<U>(val)),
 1428|    210|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    210|    {
 1430|    210|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    210|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    210|    {
  437|    210|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5383|  8.47k|    {
 5384|  8.47k|        return m_args;
 5385|  8.47k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7701|  76.3k|{
 7702|  76.3k|    return s;
 7703|  76.3k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7678|  76.3k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  8.47k|        : m_str(r.str)
 7981|  8.47k|    {
 7982|  8.47k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8944|  4.23k|{
 8945|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  4.23k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  4.23k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|  38.1k|{
 8683|  38.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|  38.1k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8617|  38.1k|{
 8618|  38.1k|#if !SCN_DISABLE_LOCALE
 8619|  38.1k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|  38.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|  38.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|  38.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|  38.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.6k, False: 1.46k]
  |  |  ------------------
  ------------------
 8626|  36.6k|        return unexpected(result.error());
 8627|  36.6k|    }
 8628|  1.46k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|  38.1k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8877|  4.23k|{
 8878|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  4.23k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  4.23k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5405|  8.47k|{
 5406|  8.47k|    detail::check_scan_arg_types<Args...>();
 5407|  8.47k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  8.47k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5144|  25.4k|{
 5145|  25.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  25.4k|                  "Scan argument types must be default constructible");
 5147|  25.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  25.4k|                  "Scan argument types must be Destructible");
 5149|  25.4k|    static_assert(
 5150|  25.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  25.4k|        "Scan argument types must not be references");
 5152|  25.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5357|  8.47k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  8.47k|    {
 5359|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  8.47k|    {
 5370|  8.47k|        return {detail::make_arg<
 5371|  8.47k|            kind, Context,
 5372|  8.47k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  8.47k|                                 typename Context::char_type>::value>(args)...};
 5374|  8.47k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5179|  8.47k|{
 5180|  8.47k|    return make_value<Context>(value).ref_value;
 5181|  8.47k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5129|  8.47k|{
 5130|  8.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  8.47k|                                  needs_context_tag>) {
 5134|  8.47k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  8.47k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4968|  8.47k|    {                                                                        \
 4969|  8.47k|        return val;                                                          \
 4970|  8.47k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5098|  25.4k|{
 5099|  25.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  25.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  25.4k|    constexpr bool scannable_char =
 5103|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  25.4k|    static_assert(scannable_char,
 5105|  25.4k|                  "Cannot scan an argument of an unsupported character "
 5106|  25.4k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  25.4k|    constexpr bool scannable_const =
 5109|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  25.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  25.4k|    constexpr bool scannable_disabled =
 5113|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  25.4k|    static_assert(scannable_disabled,
 5115|  25.4k|                  "Cannot scan an argument that has been disabled by "
 5116|  25.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  25.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  25.4k|    static_assert(
 5120|  25.4k|        scannable,
 5121|  25.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  25.4k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  25.4k|    return arg_value{arg};
 5125|  25.4k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4909|  25.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  25.4k|    {
 4911|  25.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7985|  8.47k|    {
 7986|  8.47k|        return m_str;
 7987|  8.47k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  8.47k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  8.47k|    {
 5436|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5388|  8.47k|    {
 5389|  8.47k|        return m_argptrs;
 5390|  8.47k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  8.47k|{
 8831|  8.47k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.47k, False: 0]
  |  |  ------------------
  ------------------
 8832|  8.47k|        return unexpected(result.error());
 8833|  8.47k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  8.47k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  8.47k|        : base(unexpect, std::move(e.error())),
 1474|  8.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  8.47k|    {
 1476|  8.47k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  8.47k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  8.47k|          m_has_value(false)
  446|  8.47k|    {
  447|  8.47k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.47k|    {
 1177|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5383|  8.47k|    {
 5384|  8.47k|        return m_args;
 5385|  8.47k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  8.47k|        : m_str(r.str)
 7981|  8.47k|    {
 7982|  8.47k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8944|  4.23k|{
 8945|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  4.23k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  4.23k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8877|  4.23k|{
 8878|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  4.23k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  4.23k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5405|  8.47k|{
 5406|  8.47k|    detail::check_scan_arg_types<Args...>();
 5407|  8.47k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  8.47k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5144|  25.4k|{
 5145|  25.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  25.4k|                  "Scan argument types must be default constructible");
 5147|  25.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  25.4k|                  "Scan argument types must be Destructible");
 5149|  25.4k|    static_assert(
 5150|  25.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  25.4k|        "Scan argument types must not be references");
 5152|  25.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5357|  8.47k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  8.47k|    {
 5359|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  8.47k|    {
 5370|  8.47k|        return {detail::make_arg<
 5371|  8.47k|            kind, Context,
 5372|  8.47k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  8.47k|                                 typename Context::char_type>::value>(args)...};
 5374|  8.47k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5179|  8.47k|{
 5180|  8.47k|    return make_value<Context>(value).ref_value;
 5181|  8.47k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5129|  8.47k|{
 5130|  8.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  8.47k|                                  needs_context_tag>) {
 5134|  8.47k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  8.47k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4968|  8.47k|    {                                                                        \
 4969|  8.47k|        return val;                                                          \
 4970|  8.47k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5098|  25.4k|{
 5099|  25.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  25.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  25.4k|    constexpr bool scannable_char =
 5103|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  25.4k|    static_assert(scannable_char,
 5105|  25.4k|                  "Cannot scan an argument of an unsupported character "
 5106|  25.4k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  25.4k|    constexpr bool scannable_const =
 5109|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  25.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  25.4k|    constexpr bool scannable_disabled =
 5113|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  25.4k|    static_assert(scannable_disabled,
 5115|  25.4k|                  "Cannot scan an argument that has been disabled by "
 5116|  25.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  25.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  25.4k|    static_assert(
 5120|  25.4k|        scannable,
 5121|  25.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  25.4k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  25.4k|    return arg_value{arg};
 5125|  25.4k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4909|  25.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  25.4k|    {
 4911|  25.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7985|  8.47k|    {
 7986|  8.47k|        return m_str;
 7987|  8.47k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  8.47k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  8.47k|    {
 5436|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5388|  8.47k|    {
 5389|  8.47k|        return m_argptrs;
 5390|  8.47k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  8.47k|{
 8831|  8.47k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.47k, False: 0]
  |  |  ------------------
  ------------------
 8832|  8.47k|        return unexpected(result.error());
 8833|  8.47k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  8.47k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  8.47k|        : base(unexpect, std::move(e.error())),
 1474|  8.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  8.47k|    {
 1476|  8.47k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  8.47k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  8.47k|          m_has_value(false)
  446|  8.47k|    {
  447|  8.47k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.47k|    {
 1177|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5383|  8.47k|    {
 5384|  8.47k|        return m_args;
 5385|  8.47k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  8.47k|        : m_str(r.str)
 7981|  8.47k|    {
 7982|  8.47k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8944|  4.23k|{
 8945|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  4.23k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  4.23k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8877|  4.23k|{
 8878|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  4.23k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  4.23k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5405|  8.47k|{
 5406|  8.47k|    detail::check_scan_arg_types<Args...>();
 5407|  8.47k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  8.47k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5144|  25.4k|{
 5145|  25.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  25.4k|                  "Scan argument types must be default constructible");
 5147|  25.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  25.4k|                  "Scan argument types must be Destructible");
 5149|  25.4k|    static_assert(
 5150|  25.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  25.4k|        "Scan argument types must not be references");
 5152|  25.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5357|  8.47k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  8.47k|    {
 5359|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  8.47k|    {
 5370|  8.47k|        return {detail::make_arg<
 5371|  8.47k|            kind, Context,
 5372|  8.47k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  8.47k|                                 typename Context::char_type>::value>(args)...};
 5374|  8.47k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|  8.47k|{
 5180|  8.47k|    return make_value<Context>(value).ref_value;
 5181|  8.47k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5129|  8.47k|{
 5130|  8.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  8.47k|                                  needs_context_tag>) {
 5134|  8.47k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  8.47k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4968|  8.47k|    {                                                                        \
 4969|  8.47k|        return val;                                                          \
 4970|  8.47k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5098|  25.4k|{
 5099|  25.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  25.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  25.4k|    constexpr bool scannable_char =
 5103|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  25.4k|    static_assert(scannable_char,
 5105|  25.4k|                  "Cannot scan an argument of an unsupported character "
 5106|  25.4k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  25.4k|    constexpr bool scannable_const =
 5109|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  25.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  25.4k|    constexpr bool scannable_disabled =
 5113|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  25.4k|    static_assert(scannable_disabled,
 5115|  25.4k|                  "Cannot scan an argument that has been disabled by "
 5116|  25.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  25.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  25.4k|    static_assert(
 5120|  25.4k|        scannable,
 5121|  25.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  25.4k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  25.4k|    return arg_value{arg};
 5125|  25.4k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4909|  25.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  25.4k|    {
 4911|  25.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7985|  8.47k|    {
 7986|  8.47k|        return m_str;
 7987|  8.47k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  8.47k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  8.47k|    {
 5436|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5388|  8.47k|    {
 5389|  8.47k|        return m_argptrs;
 5390|  8.47k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  8.47k|{
 8831|  8.47k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.47k, False: 0]
  |  |  ------------------
  ------------------
 8832|  8.47k|        return unexpected(result.error());
 8833|  8.47k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  8.47k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  8.47k|        : base(unexpect, std::move(e.error())),
 1474|  8.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  8.47k|    {
 1476|  8.47k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  8.47k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  8.47k|          m_has_value(false)
  446|  8.47k|    {
  447|  8.47k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.47k|    {
 1177|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5383|  8.47k|    {
 5384|  8.47k|        return m_args;
 5385|  8.47k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  8.47k|        : m_str(r.str)
 7981|  8.47k|    {
 7982|  8.47k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8944|  4.23k|{
 8945|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  4.23k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  4.23k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8877|  4.23k|{
 8878|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  4.23k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  4.23k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5405|  8.47k|{
 5406|  8.47k|    detail::check_scan_arg_types<Args...>();
 5407|  8.47k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  8.47k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5144|  25.4k|{
 5145|  25.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  25.4k|                  "Scan argument types must be default constructible");
 5147|  25.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  25.4k|                  "Scan argument types must be Destructible");
 5149|  25.4k|    static_assert(
 5150|  25.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  25.4k|        "Scan argument types must not be references");
 5152|  25.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5357|  8.47k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  8.47k|    {
 5359|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  8.47k|    {
 5370|  8.47k|        return {detail::make_arg<
 5371|  8.47k|            kind, Context,
 5372|  8.47k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  8.47k|                                 typename Context::char_type>::value>(args)...};
 5374|  8.47k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5179|  8.47k|{
 5180|  8.47k|    return make_value<Context>(value).ref_value;
 5181|  8.47k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5129|  8.47k|{
 5130|  8.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  8.47k|                                  needs_context_tag>) {
 5134|  8.47k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  8.47k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4968|  8.47k|    {                                                                        \
 4969|  8.47k|        return val;                                                          \
 4970|  8.47k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5098|  25.4k|{
 5099|  25.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  25.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  25.4k|    constexpr bool scannable_char =
 5103|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  25.4k|    static_assert(scannable_char,
 5105|  25.4k|                  "Cannot scan an argument of an unsupported character "
 5106|  25.4k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  25.4k|    constexpr bool scannable_const =
 5109|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  25.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  25.4k|    constexpr bool scannable_disabled =
 5113|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  25.4k|    static_assert(scannable_disabled,
 5115|  25.4k|                  "Cannot scan an argument that has been disabled by "
 5116|  25.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  25.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  25.4k|    static_assert(
 5120|  25.4k|        scannable,
 5121|  25.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  25.4k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  25.4k|    return arg_value{arg};
 5125|  25.4k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4909|  25.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  25.4k|    {
 4911|  25.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7985|  8.47k|    {
 7986|  8.47k|        return m_str;
 7987|  8.47k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  8.47k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  8.47k|    {
 5436|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5388|  8.47k|    {
 5389|  8.47k|        return m_argptrs;
 5390|  8.47k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  8.47k|{
 8831|  8.47k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.47k, False: 0]
  |  |  ------------------
  ------------------
 8832|  8.47k|        return unexpected(result.error());
 8833|  8.47k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  8.47k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  8.47k|        : base(unexpect, std::move(e.error())),
 1474|  8.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  8.47k|    {
 1476|  8.47k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  8.47k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  8.47k|          m_has_value(false)
  446|  8.47k|    {
  447|  8.47k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.47k|    {
 1177|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5383|  8.47k|    {
 5384|  8.47k|        return m_args;
 5385|  8.47k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  8.47k|        : m_str(r.str)
 7981|  8.47k|    {
 7982|  8.47k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8944|  4.23k|{
 8945|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  4.23k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  4.23k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8877|  4.23k|{
 8878|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  4.23k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  4.23k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5405|  8.47k|{
 5406|  8.47k|    detail::check_scan_arg_types<Args...>();
 5407|  8.47k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  8.47k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5144|  25.4k|{
 5145|  25.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  25.4k|                  "Scan argument types must be default constructible");
 5147|  25.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  25.4k|                  "Scan argument types must be Destructible");
 5149|  25.4k|    static_assert(
 5150|  25.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  25.4k|        "Scan argument types must not be references");
 5152|  25.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5357|  8.47k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  8.47k|    {
 5359|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5369|  8.47k|    {
 5370|  8.47k|        return {detail::make_arg<
 5371|  8.47k|            kind, Context,
 5372|  8.47k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  8.47k|                                 typename Context::char_type>::value>(args)...};
 5374|  8.47k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5179|  8.47k|{
 5180|  8.47k|    return make_value<Context>(value).ref_value;
 5181|  8.47k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5129|  8.47k|{
 5130|  8.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  8.47k|                                  needs_context_tag>) {
 5134|  8.47k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  8.47k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4968|  8.47k|    {                                                                        \
 4969|  8.47k|        return val;                                                          \
 4970|  8.47k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5098|  25.4k|{
 5099|  25.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  25.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  25.4k|    constexpr bool scannable_char =
 5103|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  25.4k|    static_assert(scannable_char,
 5105|  25.4k|                  "Cannot scan an argument of an unsupported character "
 5106|  25.4k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  25.4k|    constexpr bool scannable_const =
 5109|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  25.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  25.4k|    constexpr bool scannable_disabled =
 5113|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  25.4k|    static_assert(scannable_disabled,
 5115|  25.4k|                  "Cannot scan an argument that has been disabled by "
 5116|  25.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  25.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  25.4k|    static_assert(
 5120|  25.4k|        scannable,
 5121|  25.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  25.4k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  25.4k|    return arg_value{arg};
 5125|  25.4k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4909|  25.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  25.4k|    {
 4911|  25.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7985|  8.47k|    {
 7986|  8.47k|        return m_str;
 7987|  8.47k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  8.47k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  8.47k|    {
 5436|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5388|  8.47k|    {
 5389|  8.47k|        return m_argptrs;
 5390|  8.47k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8830|  8.47k|{
 8831|  8.47k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.47k, False: 0]
  |  |  ------------------
  ------------------
 8832|  8.47k|        return unexpected(result.error());
 8833|  8.47k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  8.47k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1473|  8.47k|        : base(unexpect, std::move(e.error())),
 1474|  8.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  8.47k|    {
 1476|  8.47k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  444|  8.47k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  8.47k|          m_has_value(false)
  446|  8.47k|    {
  447|  8.47k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.47k|    {
 1177|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5383|  8.47k|    {
 5384|  8.47k|        return m_args;
 5385|  8.47k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  8.47k|        : m_str(r.str)
 7981|  8.47k|    {
 7982|  8.47k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8944|  4.23k|{
 8945|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  4.23k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  4.23k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8877|  4.23k|{
 8878|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  4.23k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  4.23k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5405|  8.47k|{
 5406|  8.47k|    detail::check_scan_arg_types<Args...>();
 5407|  8.47k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  8.47k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5144|  25.4k|{
 5145|  25.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  25.4k|                  "Scan argument types must be default constructible");
 5147|  25.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  25.4k|                  "Scan argument types must be Destructible");
 5149|  25.4k|    static_assert(
 5150|  25.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  25.4k|        "Scan argument types must not be references");
 5152|  25.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5357|  8.47k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  8.47k|    {
 5359|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  8.47k|    {
 5370|  8.47k|        return {detail::make_arg<
 5371|  8.47k|            kind, Context,
 5372|  8.47k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  8.47k|                                 typename Context::char_type>::value>(args)...};
 5374|  8.47k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5179|  8.47k|{
 5180|  8.47k|    return make_value<Context>(value).ref_value;
 5181|  8.47k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5129|  8.47k|{
 5130|  8.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  8.47k|                                  needs_context_tag>) {
 5134|  8.47k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  8.47k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4968|  8.47k|    {                                                                        \
 4969|  8.47k|        return val;                                                          \
 4970|  8.47k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5098|  25.4k|{
 5099|  25.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  25.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  25.4k|    constexpr bool scannable_char =
 5103|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  25.4k|    static_assert(scannable_char,
 5105|  25.4k|                  "Cannot scan an argument of an unsupported character "
 5106|  25.4k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  25.4k|    constexpr bool scannable_const =
 5109|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  25.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  25.4k|    constexpr bool scannable_disabled =
 5113|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  25.4k|    static_assert(scannable_disabled,
 5115|  25.4k|                  "Cannot scan an argument that has been disabled by "
 5116|  25.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  25.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  25.4k|    static_assert(
 5120|  25.4k|        scannable,
 5121|  25.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  25.4k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  25.4k|    return arg_value{arg};
 5125|  25.4k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4909|  25.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  25.4k|    {
 4911|  25.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7985|  8.47k|    {
 7986|  8.47k|        return m_str;
 7987|  8.47k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  8.47k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  8.47k|    {
 5436|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5388|  8.47k|    {
 5389|  8.47k|        return m_argptrs;
 5390|  8.47k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8830|  8.47k|{
 8831|  8.47k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.57k, False: 908]
  |  |  ------------------
  ------------------
 8832|  7.57k|        return unexpected(result.error());
 8833|  7.57k|    }
 8834|    908|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    908|    static_cast<    \
  |  |  929|    908|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    908|    static_cast<    \
  |  |  929|    908|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  8.47k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  7.57k|        : base(unexpect, std::move(e.error())),
 1474|  7.57k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  7.57k|    {
 1476|  7.57k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  7.57k|        : m_has_value(false)
  625|  7.57k|    {
  626|  7.57k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  7.57k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  7.57k|    {
  689|  7.57k|        scn::detail::construct_at(unexpected_ptr(),
  690|  7.57k|                                  std::forward<Args>(args)...);
  691|  7.57k|        m_has_value = false;
  692|  7.57k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  48.2k|{
  392|  48.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  48.2k|        T(std::forward<Args>(args)...);
  394|  48.2k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  15.1k|    {
  718|  15.1k|        return reinterpret_cast<unexpected<E>*>(
  719|  15.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  15.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  15.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.47k|    {
 1177|  8.47k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|    908|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    908|    static_cast<    \
  |  |  929|    908|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    908|    static_cast<    \
  |  |  929|    908|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    908|    {
 5840|    908|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|  1.35k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.35k|    static_cast<    \
  |  |  929|  1.35k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.35k|    {
 5626|  1.35k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|    908|        : base(std::in_place, std::forward<U>(val)),
 1428|    908|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    908|    {
 1430|    908|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|    908|        : m_has_value(true)
  615|    908|    {
  616|    908|        construct(std::forward<Args>(args)...);
  617|    908|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    908|    {
  682|    908|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    908|        m_has_value = true;
  684|    908|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    908|{
  392|    908|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    908|        T(std::forward<Args>(args)...);
  394|    908|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5831|    908|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.81k|    {
  706|  1.81k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.81k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.81k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5835|  1.81k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5383|  8.47k|    {
 5384|  8.47k|        return m_args;
 5385|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5380|  8.47k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  8.47k|        : m_str(r.str)
 7981|  8.47k|    {
 7982|  8.47k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  8.47k|    {
  631|  8.47k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 908, False: 7.57k]
  ------------------
  632|    908|            destroy_value();
  633|    908|        }
  634|  7.57k|        else {
  635|  7.57k|            destroy_unexpected();
  636|  7.57k|        }
  637|  8.47k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  8.47k|    {
  675|  8.47k|        return m_has_value;
  676|  8.47k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    908|    {
  696|    908|        scn::detail::destroy_at(value_ptr());
  697|    908|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    908|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    908|    else {
  404|    908|        p->~T();
  405|    908|    }
  406|    908|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  7.57k|    {
  700|  7.57k|        scn::detail::destroy_at(unexpected_ptr());
  701|  7.57k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  48.2k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  48.2k|    else {
  404|  48.2k|        p->~T();
  405|  48.2k|    }
  406|  48.2k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8944|  4.23k|{
 8945|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  4.23k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  4.23k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8877|  4.23k|{
 8878|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  4.23k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  4.23k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5405|  8.47k|{
 5406|  8.47k|    detail::check_scan_arg_types<Args...>();
 5407|  8.47k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  8.47k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5144|  25.4k|{
 5145|  25.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  25.4k|                  "Scan argument types must be default constructible");
 5147|  25.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  25.4k|                  "Scan argument types must be Destructible");
 5149|  25.4k|    static_assert(
 5150|  25.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  25.4k|        "Scan argument types must not be references");
 5152|  25.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5357|  8.47k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  8.47k|    {
 5359|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  8.47k|    {
 5370|  8.47k|        return {detail::make_arg<
 5371|  8.47k|            kind, Context,
 5372|  8.47k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  8.47k|                                 typename Context::char_type>::value>(args)...};
 5374|  8.47k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5179|  8.47k|{
 5180|  8.47k|    return make_value<Context>(value).ref_value;
 5181|  8.47k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5129|  8.47k|{
 5130|  8.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  8.47k|                                  needs_context_tag>) {
 5134|  8.47k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  8.47k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4968|  8.47k|    {                                                                        \
 4969|  8.47k|        return val;                                                          \
 4970|  8.47k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5098|  25.4k|{
 5099|  25.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  25.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  25.4k|    constexpr bool scannable_char =
 5103|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  25.4k|    static_assert(scannable_char,
 5105|  25.4k|                  "Cannot scan an argument of an unsupported character "
 5106|  25.4k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  25.4k|    constexpr bool scannable_const =
 5109|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  25.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  25.4k|    constexpr bool scannable_disabled =
 5113|  25.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  25.4k|    static_assert(scannable_disabled,
 5115|  25.4k|                  "Cannot scan an argument that has been disabled by "
 5116|  25.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  25.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  25.4k|    static_assert(
 5120|  25.4k|        scannable,
 5121|  25.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  25.4k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  25.4k|    return arg_value{arg};
 5125|  25.4k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4909|  25.4k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  25.4k|    {
 4911|  25.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7985|  8.47k|    {
 7986|  8.47k|        return m_str;
 7987|  8.47k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  8.47k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  8.47k|    {
 5436|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5388|  8.47k|    {
 5389|  8.47k|        return m_argptrs;
 5390|  8.47k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8830|  8.47k|{
 8831|  8.47k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.57k, False: 908]
  |  |  ------------------
  ------------------
 8832|  7.57k|        return unexpected(result.error());
 8833|  7.57k|    }
 8834|    908|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    908|    static_cast<    \
  |  |  929|    908|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    908|    static_cast<    \
  |  |  929|    908|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  8.47k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  7.57k|        : base(unexpect, std::move(e.error())),
 1474|  7.57k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  7.57k|    {
 1476|  7.57k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  7.57k|        : m_has_value(false)
  625|  7.57k|    {
  626|  7.57k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  7.57k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  7.57k|    {
  689|  7.57k|        scn::detail::construct_at(unexpected_ptr(),
  690|  7.57k|                                  std::forward<Args>(args)...);
  691|  7.57k|        m_has_value = false;
  692|  7.57k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  15.1k|    {
  718|  15.1k|        return reinterpret_cast<unexpected<E>*>(
  719|  15.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  15.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  15.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.47k|    {
 1177|  8.47k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|    908|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    908|    static_cast<    \
  |  |  929|    908|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    908|    static_cast<    \
  |  |  929|    908|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    908|    {
 5840|    908|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|  1.35k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.35k|    static_cast<    \
  |  |  929|  1.35k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.35k|    {
 5626|  1.35k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|    908|        : base(std::in_place, std::forward<U>(val)),
 1428|    908|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    908|    {
 1430|    908|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|    908|        : m_has_value(true)
  615|    908|    {
  616|    908|        construct(std::forward<Args>(args)...);
  617|    908|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    908|    {
  682|    908|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    908|        m_has_value = true;
  684|    908|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    908|{
  392|    908|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    908|        T(std::forward<Args>(args)...);
  394|    908|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5831|    908|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.81k|    {
  706|  1.81k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.81k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.81k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5835|  1.81k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5383|  8.47k|    {
 5384|  8.47k|        return m_args;
 5385|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5380|  8.47k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  8.47k|        : m_str(r.str)
 7981|  8.47k|    {
 7982|  8.47k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  8.47k|    {
  631|  8.47k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 908, False: 7.57k]
  ------------------
  632|    908|            destroy_value();
  633|    908|        }
  634|  7.57k|        else {
  635|  7.57k|            destroy_unexpected();
  636|  7.57k|        }
  637|  8.47k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  8.47k|    {
  675|  8.47k|        return m_has_value;
  676|  8.47k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    908|    {
  696|    908|        scn::detail::destroy_at(value_ptr());
  697|    908|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    908|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    908|    else {
  404|    908|        p->~T();
  405|    908|    }
  406|    908|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  7.57k|    {
  700|  7.57k|        scn::detail::destroy_at(unexpected_ptr());
  701|  7.57k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8944|  4.23k|{
 8945|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  4.23k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  4.23k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8877|  4.23k|{
 8878|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  4.23k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  4.23k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5405|  8.47k|{
 5406|  8.47k|    detail::check_scan_arg_types<Args...>();
 5407|  8.47k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  8.47k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5144|  8.47k|{
 5145|  8.47k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  8.47k|                  "Scan argument types must be default constructible");
 5147|  8.47k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  8.47k|                  "Scan argument types must be Destructible");
 5149|  8.47k|    static_assert(
 5150|  8.47k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  8.47k|        "Scan argument types must not be references");
 5152|  8.47k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5357|  8.47k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  8.47k|    {
 5359|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  8.47k|    {
 5370|  8.47k|        return {detail::make_arg<
 5371|  8.47k|            kind, Context,
 5372|  8.47k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  8.47k|                                 typename Context::char_type>::value>(args)...};
 5374|  8.47k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5179|  8.47k|{
 5180|  8.47k|    return make_value<Context>(value).ref_value;
 5181|  8.47k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5129|  8.47k|{
 5130|  8.47k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  8.47k|                                  needs_context_tag>) {
 5134|  8.47k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  8.47k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4968|  8.47k|    {                                                                        \
 4969|  8.47k|        return val;                                                          \
 4970|  8.47k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5098|  8.47k|{
 5099|  8.47k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  8.47k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  8.47k|    constexpr bool scannable_char =
 5103|  8.47k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  8.47k|    static_assert(scannable_char,
 5105|  8.47k|                  "Cannot scan an argument of an unsupported character "
 5106|  8.47k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  8.47k|    constexpr bool scannable_const =
 5109|  8.47k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  8.47k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  8.47k|    constexpr bool scannable_disabled =
 5113|  8.47k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  8.47k|    static_assert(scannable_disabled,
 5115|  8.47k|                  "Cannot scan an argument that has been disabled by "
 5116|  8.47k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  8.47k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  8.47k|    static_assert(
 5120|  8.47k|        scannable,
 5121|  8.47k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  8.47k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  8.47k|    return arg_value{arg};
 5125|  8.47k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4909|  8.47k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  8.47k|    {
 4911|  8.47k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7985|  8.47k|    {
 7986|  8.47k|        return m_str;
 7987|  8.47k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  8.47k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  8.47k|    {
 5436|  8.47k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5388|  8.47k|    {
 5389|  8.47k|        return m_argptrs;
 5390|  8.47k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8830|  8.47k|{
 8831|  8.47k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.57k, False: 908]
  |  |  ------------------
  ------------------
 8832|  7.57k|        return unexpected(result.error());
 8833|  7.57k|    }
 8834|    908|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    908|    static_cast<    \
  |  |  929|    908|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    908|    static_cast<    \
  |  |  929|    908|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  8.47k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  7.57k|        : base(unexpect, std::move(e.error())),
 1474|  7.57k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  7.57k|    {
 1476|  7.57k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  7.57k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  7.57k|          m_has_value(false)
  446|  7.57k|    {
  447|  7.57k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.47k|    {
 1177|  8.47k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|    908|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    908|    static_cast<    \
  |  |  929|    908|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    908|    static_cast<    \
  |  |  929|    908|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    908|    {
 5840|    908|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|    908|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|    908|    static_cast<    \
  |  |  929|    908|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|    908|    {
 5626|    908|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|    908|        : base(std::in_place, std::forward<U>(val)),
 1428|    908|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    908|    {
 1430|    908|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|    908|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    908|    {
  437|    908|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5383|  8.47k|    {
 5384|  8.47k|        return m_args;
 5385|  8.47k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  8.47k|        : m_str(r.str)
 7981|  8.47k|    {
 7982|  8.47k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8944|  4.23k|{
 8945|  4.23k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  4.23k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  4.23k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  4.23k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5405|  16.9k|{
 5406|  16.9k|    detail::check_scan_arg_types<Args...>();
 5407|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  16.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5144|  16.9k|{
 5145|  16.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  16.9k|                  "Scan argument types must be default constructible");
 5147|  16.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  16.9k|                  "Scan argument types must be Destructible");
 5149|  16.9k|    static_assert(
 5150|  16.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  16.9k|        "Scan argument types must not be references");
 5152|  16.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5357|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  16.9k|    {
 5359|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  16.9k|    {
 5370|  16.9k|        return {detail::make_arg<
 5371|  16.9k|            kind, Context,
 5372|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5179|  16.9k|{
 5180|  16.9k|    return make_value<Context>(value).ref_value;
 5181|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5129|  16.9k|{
 5130|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  16.9k|                                  needs_context_tag>) {
 5134|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  16.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4968|  16.9k|    {                                                                        \
 4969|  16.9k|        return val;                                                          \
 4970|  16.9k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5098|  16.9k|{
 5099|  16.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  16.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  16.9k|    constexpr bool scannable_char =
 5103|  16.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  16.9k|    static_assert(scannable_char,
 5105|  16.9k|                  "Cannot scan an argument of an unsupported character "
 5106|  16.9k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  16.9k|    constexpr bool scannable_const =
 5109|  16.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  16.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  16.9k|    constexpr bool scannable_disabled =
 5113|  16.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  16.9k|    static_assert(scannable_disabled,
 5115|  16.9k|                  "Cannot scan an argument that has been disabled by "
 5116|  16.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  16.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  16.9k|    static_assert(
 5120|  16.9k|        scannable,
 5121|  16.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  16.9k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  16.9k|    return arg_value{arg};
 5125|  16.9k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4909|  16.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  16.9k|    {
 4911|  16.9k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8601|  76.3k|{
 8602|  76.3k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|  76.3k|    auto result = vscan_impl(buffer, format, args);
 8605|  76.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  76.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.5k, False: 715]
  |  |  ------------------
  ------------------
 8606|  75.5k|        return unexpected(result.error());
 8607|  75.5k|    }
 8608|    715|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    715|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|  76.3k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4728|   152k|{
 4729|   152k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   152k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   152k|                  "\n"
 4733|   152k|                  "Unsupported range type given as input to a scanning "
 4734|   152k|                  "function.\n"
 4735|   152k|                  "A range needs to have a character type (value type) "
 4736|   152k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   152k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   152k|                  "to be included.\n"
 4739|   152k|                  "See the scnlib documentation for more details.");
 4740|   152k|    static_assert(
 4741|   152k|        !std::is_same_v<T, custom_char_traits>,
 4742|   152k|        "\n"
 4743|   152k|        "Unsupported range type given as input to a scanning "
 4744|   152k|        "function.\n"
 4745|   152k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   152k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   152k|        "not supported.");
 4748|   152k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   152k|                  "\n"
 4750|   152k|                  "Unsupported range type given as input to a scanning "
 4751|   152k|                  "function.\n"
 4752|   152k|                  "file_marker_found cannot be used as an "
 4753|   152k|                  "source range type to scn::scan.\n"
 4754|   152k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   152k|                  "and do not provide an explicit source range, "
 4756|   152k|                  "or use scn::scan with a FILE* directly.");
 4757|   152k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   152k|                  "\n"
 4759|   152k|                  "Unsupported range type given as input to a scanning "
 4760|   152k|                  "function.\n"
 4761|   152k|                  "In order to be scannable, a range needs to satisfy "
 4762|   152k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   152k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   152k|                  "\n"
 4765|   152k|                  "Unsupported range type given as input to a scanning "
 4766|   152k|                  "function.\n"
 4767|   152k|                  "A range needs to model forward_range and have a valid "
 4768|   152k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   152k|                  "Examples of scannable ranges are std::string, "
 4770|   152k|                  "std::string_view, "
 4771|   152k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   152k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   152k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   152k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4620|   152k|{
 4621|   152k|    if constexpr (is_valid_char_type<CharT>) {
 4622|   152k|        return r;
 4623|       |        // return make_string_scan_buffer(r);
 4624|       |    }
 4625|       |    else {
 4626|       |        return invalid_char_type{};
 4627|       |    }
 4628|   152k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   151k|        : base(unexpect, std::move(e.error())),
 1474|   151k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   151k|    {
 1476|   151k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   151k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   151k|          m_has_value(false)
  446|   151k|    {
  447|   151k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   152k|    {
 1177|   152k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5932|  1.43k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  1.43k|                      ranges::iterator_t<SourceRange>>) {
 5935|  1.43k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  1.43k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.43k|    {
 2724|  1.43k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.43k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.43k|    {
 2705|  1.43k|        return decay_copy(t.begin());
 2706|  1.43k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  18.9k|{
 1949|  18.9k|    return SCN_FWD(t);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  18.9k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5919|  1.43k|{
 5920|  1.43k|    return ranges::end(source);
 5921|  1.43k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.43k|    {
 2781|  1.43k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.43k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.43k|    {
 2763|  1.43k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.43k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|   256k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   256k|    static_cast<    \
  |  |  929|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   256k|    static_cast<    \
  |  |  929|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   256k|    {
 3312|   256k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.43k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.43k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.43k|    {
 1430|  1.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  1.43k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.43k|    {
  437|  1.43k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7985|  16.9k|    {
 7986|  16.9k|        return m_str;
 7987|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  16.9k|    {
 5436|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5388|  16.9k|    {
 5389|  16.9k|        return m_argptrs;
 5390|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|   152k|        : m_desc(desc), m_builtin_values(data)
 5487|   152k|    {
 5488|   152k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  16.9k|{
 8831|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 98]
  |  |  ------------------
  ------------------
 8832|  16.8k|        return unexpected(result.error());
 8833|  16.8k|    }
 8834|     98|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  16.9k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   152k|    {
 1598|   152k|        return has_value();
 1599|   152k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   305k|    {
  485|   305k|        return m_has_value;
  486|   305k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   151k|    {
 1604|   151k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   151k|        return this->get_unexpected().error();
 1606|   151k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   151k|    {
  468|   151k|        return m_unexpected;
  469|   151k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  16.8k|        : base(unexpect, std::move(e.error())),
 1474|  16.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.8k|    {
 1476|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  16.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.8k|          m_has_value(false)
  446|  16.8k|    {
  447|  16.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.43k|    {
 1653|  1.43k|        return value();
 1654|  1.43k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  1.43k|    {
 1627|  1.43k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.43k|        return this->get_value();
 1629|  1.43k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.43k|    {
  451|  1.43k|        return m_value;
  452|  1.43k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5838|     98|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|     98|    {
 5840|     98|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|  1.43k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.43k|    static_cast<    \
  |  |  929|  1.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  1.43k|    {
 5691|  1.43k|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5624|     98|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|     98|    {
 5626|     98|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|     98|        : base(std::in_place, std::forward<U>(val)),
 1428|     98|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|     98|    {
 1430|     98|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|     98|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|     98|    {
  437|     98|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5383|  16.9k|    {
 5384|  16.9k|        return m_args;
 5385|  16.9k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7706|   152k|{
 7707|   152k|    return s;
 7708|   152k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7678|   152k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  16.9k|        : m_str(r.str)
 7981|  16.9k|    {
 7982|  16.9k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8617|  76.3k|{
 8618|  76.3k|#if !SCN_DISABLE_LOCALE
 8619|  76.3k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|  76.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|  76.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|  76.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|  76.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  76.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.5k, False: 715]
  |  |  ------------------
  ------------------
 8626|  75.5k|        return unexpected(result.error());
 8627|  75.5k|    }
 8628|    715|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    715|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|  76.3k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5405|  16.9k|{
 5406|  16.9k|    detail::check_scan_arg_types<Args...>();
 5407|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  16.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5357|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  16.9k|    {
 5359|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  16.9k|    {
 5370|  16.9k|        return {detail::make_arg<
 5371|  16.9k|            kind, Context,
 5372|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5179|  16.9k|{
 5180|  16.9k|    return make_value<Context>(value).ref_value;
 5181|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5129|  16.9k|{
 5130|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  16.9k|                                  needs_context_tag>) {
 5134|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  16.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4968|  16.9k|    {                                                                        \
 4969|  16.9k|        return val;                                                          \
 4970|  16.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7985|  16.9k|    {
 7986|  16.9k|        return m_str;
 7987|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  16.9k|    {
 5436|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5388|  16.9k|    {
 5389|  16.9k|        return m_argptrs;
 5390|  16.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  16.9k|{
 8831|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.9k, False: 0]
  |  |  ------------------
  ------------------
 8832|  16.9k|        return unexpected(result.error());
 8833|  16.9k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  16.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  16.9k|        : base(unexpect, std::move(e.error())),
 1474|  16.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.9k|    {
 1476|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  16.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.9k|          m_has_value(false)
  446|  16.9k|    {
  447|  16.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5383|  16.9k|    {
 5384|  16.9k|        return m_args;
 5385|  16.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  16.9k|        : m_str(r.str)
 7981|  16.9k|    {
 7982|  16.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5405|  16.9k|{
 5406|  16.9k|    detail::check_scan_arg_types<Args...>();
 5407|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  16.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5357|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  16.9k|    {
 5359|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  16.9k|    {
 5370|  16.9k|        return {detail::make_arg<
 5371|  16.9k|            kind, Context,
 5372|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5179|  16.9k|{
 5180|  16.9k|    return make_value<Context>(value).ref_value;
 5181|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5129|  16.9k|{
 5130|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  16.9k|                                  needs_context_tag>) {
 5134|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  16.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4968|  16.9k|    {                                                                        \
 4969|  16.9k|        return val;                                                          \
 4970|  16.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7985|  16.9k|    {
 7986|  16.9k|        return m_str;
 7987|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  16.9k|    {
 5436|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5388|  16.9k|    {
 5389|  16.9k|        return m_argptrs;
 5390|  16.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  16.9k|{
 8831|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.9k, False: 0]
  |  |  ------------------
  ------------------
 8832|  16.9k|        return unexpected(result.error());
 8833|  16.9k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  16.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  16.9k|        : base(unexpect, std::move(e.error())),
 1474|  16.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.9k|    {
 1476|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  16.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.9k|          m_has_value(false)
  446|  16.9k|    {
  447|  16.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5383|  16.9k|    {
 5384|  16.9k|        return m_args;
 5385|  16.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  16.9k|        : m_str(r.str)
 7981|  16.9k|    {
 7982|  16.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5405|  16.9k|{
 5406|  16.9k|    detail::check_scan_arg_types<Args...>();
 5407|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  16.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5357|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  16.9k|    {
 5359|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  16.9k|    {
 5370|  16.9k|        return {detail::make_arg<
 5371|  16.9k|            kind, Context,
 5372|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|  16.9k|{
 5180|  16.9k|    return make_value<Context>(value).ref_value;
 5181|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5129|  16.9k|{
 5130|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  16.9k|                                  needs_context_tag>) {
 5134|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  16.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4968|  16.9k|    {                                                                        \
 4969|  16.9k|        return val;                                                          \
 4970|  16.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7985|  16.9k|    {
 7986|  16.9k|        return m_str;
 7987|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  16.9k|    {
 5436|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5388|  16.9k|    {
 5389|  16.9k|        return m_argptrs;
 5390|  16.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  16.9k|{
 8831|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.9k, False: 0]
  |  |  ------------------
  ------------------
 8832|  16.9k|        return unexpected(result.error());
 8833|  16.9k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  16.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  16.9k|        : base(unexpect, std::move(e.error())),
 1474|  16.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.9k|    {
 1476|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  16.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.9k|          m_has_value(false)
  446|  16.9k|    {
  447|  16.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5383|  16.9k|    {
 5384|  16.9k|        return m_args;
 5385|  16.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  16.9k|        : m_str(r.str)
 7981|  16.9k|    {
 7982|  16.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5405|  16.9k|{
 5406|  16.9k|    detail::check_scan_arg_types<Args...>();
 5407|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  16.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5357|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  16.9k|    {
 5359|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  16.9k|    {
 5370|  16.9k|        return {detail::make_arg<
 5371|  16.9k|            kind, Context,
 5372|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5179|  16.9k|{
 5180|  16.9k|    return make_value<Context>(value).ref_value;
 5181|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5129|  16.9k|{
 5130|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  16.9k|                                  needs_context_tag>) {
 5134|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  16.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4968|  16.9k|    {                                                                        \
 4969|  16.9k|        return val;                                                          \
 4970|  16.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7985|  16.9k|    {
 7986|  16.9k|        return m_str;
 7987|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  16.9k|    {
 5436|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5388|  16.9k|    {
 5389|  16.9k|        return m_argptrs;
 5390|  16.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  16.9k|{
 8831|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.9k, False: 0]
  |  |  ------------------
  ------------------
 8832|  16.9k|        return unexpected(result.error());
 8833|  16.9k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  16.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  16.9k|        : base(unexpect, std::move(e.error())),
 1474|  16.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.9k|    {
 1476|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  16.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.9k|          m_has_value(false)
  446|  16.9k|    {
  447|  16.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5383|  16.9k|    {
 5384|  16.9k|        return m_args;
 5385|  16.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  16.9k|        : m_str(r.str)
 7981|  16.9k|    {
 7982|  16.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5405|  16.9k|{
 5406|  16.9k|    detail::check_scan_arg_types<Args...>();
 5407|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  16.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5357|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  16.9k|    {
 5359|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5369|  16.9k|    {
 5370|  16.9k|        return {detail::make_arg<
 5371|  16.9k|            kind, Context,
 5372|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5179|  16.9k|{
 5180|  16.9k|    return make_value<Context>(value).ref_value;
 5181|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5129|  16.9k|{
 5130|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  16.9k|                                  needs_context_tag>) {
 5134|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  16.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4968|  16.9k|    {                                                                        \
 4969|  16.9k|        return val;                                                          \
 4970|  16.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7985|  16.9k|    {
 7986|  16.9k|        return m_str;
 7987|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  16.9k|    {
 5436|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5388|  16.9k|    {
 5389|  16.9k|        return m_argptrs;
 5390|  16.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8830|  16.9k|{
 8831|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.9k, False: 0]
  |  |  ------------------
  ------------------
 8832|  16.9k|        return unexpected(result.error());
 8833|  16.9k|    }
 8834|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  16.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1473|  16.9k|        : base(unexpect, std::move(e.error())),
 1474|  16.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.9k|    {
 1476|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  444|  16.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.9k|          m_has_value(false)
  446|  16.9k|    {
  447|  16.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5383|  16.9k|    {
 5384|  16.9k|        return m_args;
 5385|  16.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  16.9k|        : m_str(r.str)
 7981|  16.9k|    {
 7982|  16.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5405|  16.9k|{
 5406|  16.9k|    detail::check_scan_arg_types<Args...>();
 5407|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  16.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5357|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  16.9k|    {
 5359|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  16.9k|    {
 5370|  16.9k|        return {detail::make_arg<
 5371|  16.9k|            kind, Context,
 5372|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5179|  16.9k|{
 5180|  16.9k|    return make_value<Context>(value).ref_value;
 5181|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5129|  16.9k|{
 5130|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  16.9k|                                  needs_context_tag>) {
 5134|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  16.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4968|  16.9k|    {                                                                        \
 4969|  16.9k|        return val;                                                          \
 4970|  16.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7985|  16.9k|    {
 7986|  16.9k|        return m_str;
 7987|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  16.9k|    {
 5436|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5388|  16.9k|    {
 5389|  16.9k|        return m_argptrs;
 5390|  16.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8830|  16.9k|{
 8831|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.5k, False: 444]
  |  |  ------------------
  ------------------
 8832|  16.5k|        return unexpected(result.error());
 8833|  16.5k|    }
 8834|    444|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    444|    static_cast<    \
  |  |  929|    444|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    444|    static_cast<    \
  |  |  929|    444|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  16.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  16.5k|        : base(unexpect, std::move(e.error())),
 1474|  16.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.5k|    {
 1476|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  16.5k|        : m_has_value(false)
  625|  16.5k|    {
  626|  16.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  16.5k|    {
  689|  16.5k|        scn::detail::construct_at(unexpected_ptr(),
  690|  16.5k|                                  std::forward<Args>(args)...);
  691|  16.5k|        m_has_value = false;
  692|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  33.0k|    {
  718|  33.0k|        return reinterpret_cast<unexpected<E>*>(
  719|  33.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  33.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  33.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|    444|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    444|    static_cast<    \
  |  |  929|    444|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    444|    static_cast<    \
  |  |  929|    444|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    444|    {
 5840|    444|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|    444|        : base(std::in_place, std::forward<U>(val)),
 1428|    444|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    444|    {
 1430|    444|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|    444|        : m_has_value(true)
  615|    444|    {
  616|    444|        construct(std::forward<Args>(args)...);
  617|    444|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    444|    {
  682|    444|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    444|        m_has_value = true;
  684|    444|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    444|{
  392|    444|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    444|        T(std::forward<Args>(args)...);
  394|    444|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5831|    444|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    888|    {
  706|    888|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    888|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    888|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5835|    888|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5383|  16.9k|    {
 5384|  16.9k|        return m_args;
 5385|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5380|  16.9k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  16.9k|        : m_str(r.str)
 7981|  16.9k|    {
 7982|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  16.9k|    {
  631|  16.9k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 444, False: 16.5k]
  ------------------
  632|    444|            destroy_value();
  633|    444|        }
  634|  16.5k|        else {
  635|  16.5k|            destroy_unexpected();
  636|  16.5k|        }
  637|  16.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  16.9k|    {
  675|  16.9k|        return m_has_value;
  676|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    444|    {
  696|    444|        scn::detail::destroy_at(value_ptr());
  697|    444|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    444|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    444|    else {
  404|    444|        p->~T();
  405|    444|    }
  406|    444|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  16.5k|    {
  700|  16.5k|        scn::detail::destroy_at(unexpected_ptr());
  701|  16.5k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5405|  16.9k|{
 5406|  16.9k|    detail::check_scan_arg_types<Args...>();
 5407|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  16.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5357|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  16.9k|    {
 5359|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  16.9k|    {
 5370|  16.9k|        return {detail::make_arg<
 5371|  16.9k|            kind, Context,
 5372|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5179|  16.9k|{
 5180|  16.9k|    return make_value<Context>(value).ref_value;
 5181|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5129|  16.9k|{
 5130|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  16.9k|                                  needs_context_tag>) {
 5134|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  16.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4968|  16.9k|    {                                                                        \
 4969|  16.9k|        return val;                                                          \
 4970|  16.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7985|  16.9k|    {
 7986|  16.9k|        return m_str;
 7987|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  16.9k|    {
 5436|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5388|  16.9k|    {
 5389|  16.9k|        return m_argptrs;
 5390|  16.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8830|  16.9k|{
 8831|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.5k, False: 444]
  |  |  ------------------
  ------------------
 8832|  16.5k|        return unexpected(result.error());
 8833|  16.5k|    }
 8834|    444|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    444|    static_cast<    \
  |  |  929|    444|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    444|    static_cast<    \
  |  |  929|    444|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  16.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  16.5k|        : base(unexpect, std::move(e.error())),
 1474|  16.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.5k|    {
 1476|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  16.5k|        : m_has_value(false)
  625|  16.5k|    {
  626|  16.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  16.5k|    {
  689|  16.5k|        scn::detail::construct_at(unexpected_ptr(),
  690|  16.5k|                                  std::forward<Args>(args)...);
  691|  16.5k|        m_has_value = false;
  692|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  33.0k|    {
  718|  33.0k|        return reinterpret_cast<unexpected<E>*>(
  719|  33.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  33.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  33.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|    444|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    444|    static_cast<    \
  |  |  929|    444|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    444|    static_cast<    \
  |  |  929|    444|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    444|    {
 5840|    444|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|    444|        : base(std::in_place, std::forward<U>(val)),
 1428|    444|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    444|    {
 1430|    444|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|    444|        : m_has_value(true)
  615|    444|    {
  616|    444|        construct(std::forward<Args>(args)...);
  617|    444|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    444|    {
  682|    444|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    444|        m_has_value = true;
  684|    444|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    444|{
  392|    444|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    444|        T(std::forward<Args>(args)...);
  394|    444|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5831|    444|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    888|    {
  706|    888|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    888|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    888|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5835|    888|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5383|  16.9k|    {
 5384|  16.9k|        return m_args;
 5385|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5380|  16.9k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  16.9k|        : m_str(r.str)
 7981|  16.9k|    {
 7982|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  16.9k|    {
  631|  16.9k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 444, False: 16.5k]
  ------------------
  632|    444|            destroy_value();
  633|    444|        }
  634|  16.5k|        else {
  635|  16.5k|            destroy_unexpected();
  636|  16.5k|        }
  637|  16.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  16.9k|    {
  675|  16.9k|        return m_has_value;
  676|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    444|    {
  696|    444|        scn::detail::destroy_at(value_ptr());
  697|    444|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    444|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    444|    else {
  404|    444|        p->~T();
  405|    444|    }
  406|    444|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  16.5k|    {
  700|  16.5k|        scn::detail::destroy_at(unexpected_ptr());
  701|  16.5k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5405|  16.9k|{
 5406|  16.9k|    detail::check_scan_arg_types<Args...>();
 5407|  16.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  16.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5144|  16.9k|{
 5145|  16.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  16.9k|                  "Scan argument types must be default constructible");
 5147|  16.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  16.9k|                  "Scan argument types must be Destructible");
 5149|  16.9k|    static_assert(
 5150|  16.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  16.9k|        "Scan argument types must not be references");
 5152|  16.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5357|  16.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  16.9k|    {
 5359|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  16.9k|    {
 5370|  16.9k|        return {detail::make_arg<
 5371|  16.9k|            kind, Context,
 5372|  16.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  16.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  16.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5179|  16.9k|{
 5180|  16.9k|    return make_value<Context>(value).ref_value;
 5181|  16.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5129|  16.9k|{
 5130|  16.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  16.9k|                                  needs_context_tag>) {
 5134|  16.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  16.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4968|  16.9k|    {                                                                        \
 4969|  16.9k|        return val;                                                          \
 4970|  16.9k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5098|  16.9k|{
 5099|  16.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  16.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  16.9k|    constexpr bool scannable_char =
 5103|  16.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  16.9k|    static_assert(scannable_char,
 5105|  16.9k|                  "Cannot scan an argument of an unsupported character "
 5106|  16.9k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  16.9k|    constexpr bool scannable_const =
 5109|  16.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  16.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  16.9k|    constexpr bool scannable_disabled =
 5113|  16.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  16.9k|    static_assert(scannable_disabled,
 5115|  16.9k|                  "Cannot scan an argument that has been disabled by "
 5116|  16.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  16.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  16.9k|    static_assert(
 5120|  16.9k|        scannable,
 5121|  16.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  16.9k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  16.9k|    return arg_value{arg};
 5125|  16.9k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4909|  16.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  16.9k|    {
 4911|  16.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7985|  16.9k|    {
 7986|  16.9k|        return m_str;
 7987|  16.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  16.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  16.9k|    {
 5436|  16.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5388|  16.9k|    {
 5389|  16.9k|        return m_argptrs;
 5390|  16.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8830|  16.9k|{
 8831|  16.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.5k, False: 444]
  |  |  ------------------
  ------------------
 8832|  16.5k|        return unexpected(result.error());
 8833|  16.5k|    }
 8834|    444|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    444|    static_cast<    \
  |  |  929|    444|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    444|    static_cast<    \
  |  |  929|    444|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  16.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  16.5k|        : base(unexpect, std::move(e.error())),
 1474|  16.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.5k|    {
 1476|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  16.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.5k|          m_has_value(false)
  446|  16.5k|    {
  447|  16.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9k|    {
 1177|  16.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|    444|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    444|    static_cast<    \
  |  |  929|    444|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    444|    static_cast<    \
  |  |  929|    444|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    444|    {
 5840|    444|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|    444|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|    444|    static_cast<    \
  |  |  929|    444|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|    444|    {
 5626|    444|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|    444|        : base(std::in_place, std::forward<U>(val)),
 1428|    444|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    444|    {
 1430|    444|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|    444|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    444|    {
  437|    444|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5383|  16.9k|    {
 5384|  16.9k|        return m_args;
 5385|  16.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  16.9k|        : m_str(r.str)
 7981|  16.9k|    {
 7982|  16.9k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|   510k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|   510k|    {
 3564|   510k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   510k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|   510k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  1.99M|    {
 3570|  1.99M|        return m_code == good;
 3571|  1.99M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|  59.4k|    {
 3581|  59.4k|        return m_code;
 3582|  59.4k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6190|  3.29k|    {
 6191|  3.29k|        return m_size;
 6192|  3.29k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6231|  3.95k|    {
 6232|  3.95k|        SCN_GCC_COMPAT_PUSH
 6233|  3.95k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6234|  3.95k|        switch (type) {
 6235|  1.70k|            case presentation_type::none:
  ------------------
  |  Branch (6235:13): [True: 1.70k, False: 2.25k]
  ------------------
 6236|  1.70k|                return 10;
 6237|     74|            case presentation_type::int_generic:
  ------------------
  |  Branch (6237:13): [True: 74, False: 3.87k]
  ------------------
 6238|     74|                return 0;
 6239|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6239:13): [True: 0, False: 3.95k]
  ------------------
 6240|      0|                return arbitrary_base;
 6241|       |
 6242|     38|            case presentation_type::int_binary:
  ------------------
  |  Branch (6242:13): [True: 38, False: 3.91k]
  ------------------
 6243|     38|                return 2;
 6244|     70|            case presentation_type::int_octal:
  ------------------
  |  Branch (6244:13): [True: 70, False: 3.88k]
  ------------------
 6245|     70|                return 8;
 6246|     40|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6246:13): [True: 40, False: 3.91k]
  ------------------
 6247|     84|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6247:13): [True: 44, False: 3.90k]
  ------------------
 6248|     84|                return 10;
 6249|  1.98k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6249:13): [True: 1.98k, False: 1.96k]
  ------------------
 6250|  1.98k|                return 16;
 6251|       |
 6252|      0|            default:
  ------------------
  |  Branch (6252:13): [True: 0, False: 3.95k]
  ------------------
 6253|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6254|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6255|  3.95k|        }
 6256|  3.95k|        SCN_GCC_COMPAT_POP
 6257|  3.95k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  65.3k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6272|  6.63k|    {
 6273|  6.63k|        m_specs.align = align;
 6274|  6.63k|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6292|  9.43k|    {
 6293|  9.43k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6293:13): [True: 0, False: 9.43k]
  |  Branch (6293:39): [True: 0, False: 0]
  ------------------
 6294|       |            // clang-format off
 6295|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6296|       |            // clang-format on
 6297|      0|        }
 6298|       |
 6299|  9.43k|        m_specs.width = width;
 6300|  9.43k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6302|  8.08k|    {
 6303|  8.08k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6303:13): [True: 68, False: 8.01k]
  ------------------
 6304|       |            // clang-format off
 6305|     68|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6306|       |            // clang-format on
 6307|     68|        }
 6308|       |
 6309|  8.01k|        m_specs.precision = prec;
 6310|  8.01k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6313|  62.6k|    {
 6314|  62.6k|        m_specs.type = type;
 6315|  62.6k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6318|  1.00M|    {
 6319|  1.00M|        const auto cp_value = static_cast<unsigned>(cp);
 6320|  1.00M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  1.00M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 867k, False: 142k]
  |  |  ------------------
  ------------------
 6321|   867k|            m_specs.charset_literals[cp_value / 8] |=
 6322|   867k|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6323|   867k|        }
 6324|   142k|        else {
 6325|   142k|            m_specs.charset_has_nonascii = true;
 6326|   142k|        }
 6327|  1.00M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6330|  9.05k|    {
 6331|  9.05k|        const auto begin_value = static_cast<unsigned>(begin);
 6332|  9.05k|        const auto end_value = static_cast<unsigned>(end);
 6333|  9.05k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  9.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6334|       |
 6335|  9.05k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  9.05k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.68k, False: 4.36k]
  |  |  ------------------
  ------------------
 6336|       |            // No need to bit-twiddle with a mask, because with the
 6337|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6338|  4.68k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  4.68k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6339|   314k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6339:40): [True: 310k, False: 4.68k]
  ------------------
 6340|   310k|                m_specs.charset_literals[v / 8] |=
 6341|   310k|                    static_cast<unsigned char>(1ul << (v % 8));
 6342|   310k|            }
 6343|  4.68k|        }
 6344|  4.36k|        else {
 6345|  4.36k|            m_specs.charset_has_nonascii = true;
 6346|  4.36k|        }
 6347|  9.05k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6350|  2.86k|    {
 6351|  2.86k|        m_specs.charset_is_inverted = true;
 6352|  2.86k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6369|  36.2k|    {
 6370|  36.2k|        m_specs.regexp_flags = flags;
 6371|  36.2k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6375|  9.92k|    {
 6376|  9.92k|        SCN_UNLIKELY_ATTR
 6377|  9.92k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6378|  9.92k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6386|  1.09M|    {
 6387|  1.09M|        return static_cast<bool>(m_error);
 6388|  1.09M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|  59.4k|{
 3605|  59.4k|    return a.code() == b;
 3606|  59.4k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|  59.4k|{
 3609|  59.4k|    return !(a == b);
 3610|  59.4k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3903|  94.9k|{
 3904|  94.9k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  94.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3905|       |
 3906|  94.9k|    const auto is_trailing_code_unit = [](char ch) {
 3907|  94.9k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3908|  94.9k|    };
 3909|       |
 3910|  94.9k|    if (input.size() == 1) {
  ------------------
  |  Branch (3910:9): [True: 83.2k, False: 11.7k]
  ------------------
 3911|  83.2k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|  83.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3912|  83.2k|        return static_cast<char32_t>(input[0]);
 3913|  83.2k|    }
 3914|       |
 3915|  11.7k|    if (input.size() == 2) {
  ------------------
  |  Branch (3915:9): [True: 11.0k, False: 682]
  ------------------
 3916|  11.0k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  11.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3917|  11.0k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  11.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3918|       |
 3919|  11.0k|        char32_t cp{};
 3920|  11.0k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3921|  11.0k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3922|  11.0k|        return cp;
 3923|  11.0k|    }
 3924|       |
 3925|    682|    if (input.size() == 3) {
  ------------------
  |  Branch (3925:9): [True: 562, False: 120]
  ------------------
 3926|    562|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|    562|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    562|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3927|    562|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    562|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    562|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3928|    562|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    562|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    562|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3929|       |
 3930|    562|        char32_t cp{};
 3931|    562|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3932|    562|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3933|    562|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3934|    562|        return cp;
 3935|    562|    }
 3936|       |
 3937|    120|    if (input.size() == 4) {
  ------------------
  |  Branch (3937:9): [True: 120, False: 0]
  ------------------
 3938|    120|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    120|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    120|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3939|    120|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    120|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    120|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3940|    120|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    120|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    120|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3941|    120|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    120|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    120|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3942|    120|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    120|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    120|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|       |
 3944|    120|        char32_t cp{};
 3945|    120|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3946|    120|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3947|    120|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3948|    120|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3949|    120|        return cp;
 3950|    120|    }
 3951|       |
 3952|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3953|       |    // gcc 7 thinks we'll get here, even when we won't
 3954|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3955|      0|#endif
 3956|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3957|      0|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|   312M|{
 4043|       |    // Pattern_White_Space property
 4044|   312M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 141k, False: 312M]
  |  Branch (4044:27): [True: 7.74k, False: 133k]
  ------------------
 4045|   312M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 4.17k, False: 312M]
  ------------------
 4046|   312M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 5.00k, False: 312M]
  ------------------
 4047|   312M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 1.87k, False: 312M]
  ------------------
 4048|   312M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 3.31k, False: 312M]
  ------------------
 4049|   312M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 1.24k, False: 312M]
  ------------------
 4050|   312M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 96, False: 312M]
  ------------------
 4051|   312M|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6120|  51.8k|{
 6121|  51.8k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6122|  51.8k|                                    static_cast<unsigned>(b));
 6123|  51.8k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6125|  3.85k|{
 6126|  3.85k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6127|  3.85k|                                    static_cast<unsigned>(b));
 6128|  3.85k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6140|  3.85k|{
 6141|  3.85k|    return a = a | b;
 6142|  3.85k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7073|    928|{
 7074|    928|    switch (type) {
 7075|    100|        case arg_type::none_type:
  ------------------
  |  Branch (7075:9): [True: 100, False: 828]
  ------------------
 7076|    100|            return arg_type_category::none;
 7077|       |
 7078|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 928]
  ------------------
 7079|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 928]
  ------------------
 7080|     92|        case arg_type::int_type:
  ------------------
  |  Branch (7080:9): [True: 92, False: 836]
  ------------------
 7081|     92|        case arg_type::long_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 928]
  ------------------
 7082|     92|        case arg_type::llong_type:
  ------------------
  |  Branch (7082:9): [True: 0, False: 928]
  ------------------
 7083|     92|            return arg_type_category::integer;
 7084|       |
 7085|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 928]
  ------------------
 7086|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 928]
  ------------------
 7087|     92|        case arg_type::uint_type:
  ------------------
  |  Branch (7087:9): [True: 92, False: 836]
  ------------------
 7088|     92|        case arg_type::ulong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 928]
  ------------------
 7089|     92|        case arg_type::ullong_type:
  ------------------
  |  Branch (7089:9): [True: 0, False: 928]
  ------------------
 7090|     92|            return arg_type_category::unsigned_integer;
 7091|       |
 7092|     92|        case arg_type::pointer_type:
  ------------------
  |  Branch (7092:9): [True: 92, False: 836]
  ------------------
 7093|     92|            return arg_type_category::pointer;
 7094|     92|        case arg_type::bool_type:
  ------------------
  |  Branch (7094:9): [True: 92, False: 836]
  ------------------
 7095|     92|            return arg_type_category::boolean;
 7096|     46|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7096:9): [True: 46, False: 882]
  ------------------
 7097|     92|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7097:9): [True: 46, False: 882]
  ------------------
 7098|     92|        case arg_type::code_point_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 928]
  ------------------
 7099|     92|            return arg_type_category::character;
 7100|       |
 7101|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 928]
  ------------------
 7102|     92|        case arg_type::double_type:
  ------------------
  |  Branch (7102:9): [True: 92, False: 836]
  ------------------
 7103|     92|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7103:9): [True: 0, False: 928]
  ------------------
 7104|     92|            return arg_type_category::floating;
 7105|       |
 7106|     46|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7106:9): [True: 46, False: 882]
  ------------------
 7107|    138|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7107:9): [True: 92, False: 836]
  ------------------
 7108|    184|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7108:9): [True: 46, False: 882]
  ------------------
 7109|    276|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7109:9): [True: 92, False: 836]
  ------------------
 7110|    276|            return arg_type_category::string;
 7111|       |
 7112|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7112:9): [True: 0, False: 928]
  ------------------
 7113|      0|            return arg_type_category::custom;
 7114|       |
 7115|      0|            SCN_CLANG_PUSH
 7116|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7117|      0|        default:
  ------------------
  |  Branch (7117:9): [True: 0, False: 928]
  ------------------
 7118|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|    928|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7120|    928|            SCN_CLANG_POP
 7121|    928|    }
 7122|       |
 7123|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7124|    928|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|  1.22k|{
 3650|  1.22k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.22k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7159|  13.3k|{
 7160|  13.3k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.2k, False: 2.00k]
  |  |  ------------------
  ------------------
 7161|  11.2k|        return handler.on_error("Invalid type specifier for integer type");
 7162|  11.2k|    }
 7163|  2.00k|    if (specs.localized) {
  ------------------
  |  Branch (7163:9): [True: 124, False: 1.88k]
  ------------------
 7164|    124|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|    124|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 116]
  |  |  ------------------
  ------------------
 7165|       |            // clang-format off
 7166|      8|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7167|       |            // clang-format on
 7168|      8|            return;
 7169|      8|        }
 7170|    116|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|    116|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 116]
  |  |  ------------------
  ------------------
 7171|       |            // clang-format off
 7172|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7173|       |            // clang-format on
 7174|      0|        }
 7175|    116|    }
 7176|  2.00k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|     52|{
 1949|     52|    return SCN_FWD(t);
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|     52|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  1.92k|{
 3650|  1.92k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.92k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7203|  6.65k|{
 7204|  6.65k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7204:9): [True: 5.77k, False: 872]
  ------------------
 7205|  6.65k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7205:10): [True: 130, False: 5.64k]
  ------------------
 7206|  5.77k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7206:10): [True: 5.55k, False: 96]
  ------------------
 7207|  5.68k|        SCN_UNLIKELY_ATTR
 7208|  5.68k|        return handler.on_error("Invalid type specifier for float type");
 7209|  5.68k|    }
 7210|  6.65k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  484|  23.9k|    {
  485|  23.9k|        return m_has_value;
  486|  23.9k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1597|  11.9k|    {
 1598|  11.9k|        return has_value();
 1599|  11.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  450|  11.9k|    {
  451|  11.9k|        return m_value;
  452|  11.9k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  11.9k|    {
 1627|  11.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  11.9k|        return this->get_value();
 1629|  11.9k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  11.9k|    {
 1663|  11.9k|        return std::move(value());
 1664|  11.9k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3649|  5.53k|{
 3650|  5.53k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  5.53k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3649|  3.88k|{
 3650|  3.88k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  3.88k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  3.88k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3649|    162|{
 3650|    162|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    162|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    162|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3649|     36|{
 3650|     36|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|     36|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3649|    960|{
 3650|    960|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    960|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    960|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7215|  19.7k|{
 7216|  19.7k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7216:9): [True: 2.53k, False: 17.1k]
  ------------------
 7217|  19.7k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7217:9): [True: 750, False: 16.4k]
  ------------------
 7218|  19.7k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7218:9): [True: 3.68k, False: 12.7k]
  ------------------
 7219|  19.7k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7219:9): [True: 11.5k, False: 1.24k]
  ------------------
 7220|  19.7k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7220:9): [True: 510, False: 732]
  ------------------
 7221|  18.9k|        return;
 7222|  18.9k|    }
 7223|    732|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7223:9): [True: 132, False: 600]
  ------------------
 7224|    132|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 120]
  |  |  ------------------
  ------------------
 7225|       |            // clang-format off
 7226|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7227|       |            // clang-format on
 7228|     12|        }
 7229|    120|        return;
 7230|    132|    }
 7231|    600|    SCN_UNLIKELY_ATTR
 7232|    600|    handler.on_error("Invalid type specifier for string");
 7233|    600|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3649|  4.21k|{
 3650|  4.21k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  4.21k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3649|     40|{
 3650|     40|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     40|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|     40|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7249|  6.65k|{
 7250|  6.65k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7250:9): [True: 5.77k, False: 872]
  ------------------
 7251|  6.65k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7251:9): [True: 5.51k, False: 262]
  ------------------
 7252|  6.65k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7252:9): [True: 5.48k, False: 30]
  ------------------
 7253|  6.65k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7253:9): [True: 5.46k, False: 22]
  ------------------
 7254|  6.65k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7254:9): [True: 5.44k, False: 18]
  ------------------
 7255|  6.65k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7255:9): [True: 5.43k, False: 16]
  ------------------
 7256|  6.65k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7256:9): [True: 5.40k, False: 28]
  ------------------
 7257|  6.65k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7257:9): [True: 5.38k, False: 16]
  ------------------
 7258|  5.38k|        SCN_UNLIKELY_ATTR
 7259|  5.38k|        return handler.on_error("Invalid type specifier for boolean");
 7260|  5.38k|    }
 7261|  6.65k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7181|  6.57k|{
 7182|  6.57k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7182:9): [True: 5.63k, False: 940]
  ------------------
 7183|  6.57k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7183:9): [True: 0, False: 940]
  ------------------
 7184|  5.63k|        SCN_UNLIKELY_ATTR
 7185|  5.63k|        return handler.on_error("Invalid type specifier for character type");
 7186|  5.63k|    }
 7187|  6.57k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7238|  6.57k|{
 7239|  6.57k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7239:9): [True: 5.72k, False: 844]
  ------------------
 7240|  6.57k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7240:9): [True: 5.71k, False: 12]
  ------------------
 7241|  5.71k|        SCN_UNLIKELY_ATTR
 7242|  5.71k|        return handler.on_error("Invalid type specifier for pointer");
 7243|  5.71k|    }
 7244|  6.57k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA79_KcEEEDaDpOT_:
 3649|     88|{
 3650|     88|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|     88|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  50.2k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|  50.2k|    else {
 3716|  50.2k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  50.2k|    }
 3718|  50.2k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   312M|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   312M|    else {
 3716|   312M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   312M|    }
 3718|   312M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  1.00M|    {
 3326|  1.00M|        return m_iterator;
 3327|  1.00M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  1.00M|    {
 3330|  1.00M|        return m_sentinel;
 3331|  1.00M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|   381k|    {
 3326|   381k|        return m_iterator;
 3327|   381k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|   625M|    {
 3330|   625M|        return m_sentinel;
 3331|   625M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8001|   120k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    174|{
 1211|    174|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    174|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  2.15k|    {
  361|  2.15k|        return m_unexpected;
  362|  2.15k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3649|  5.01k|{
 3650|  5.01k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  5.01k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|  24.7k|        : m_unexpected(std::forward<Err>(e))
  346|  24.7k|    {
  347|  24.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  24.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  24.7k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  65.7k|        : base(unexpect, std::move(e.error())),
 1474|  65.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  65.7k|    {
 1476|  65.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  66.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  66.6k|          m_has_value(false)
  446|  66.6k|    {
  447|  66.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  94.0k|    {
 1177|  94.0k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  25.8k|        : base(std::in_place, std::forward<U>(val)),
 1428|  25.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  25.8k|    {
 1430|  25.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  25.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  25.8k|    {
  437|  25.8k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  94.9k|    {
 1598|  94.9k|        return has_value();
 1599|  94.9k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   187k|    {
  485|   187k|        return m_has_value;
  486|   187k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  65.7k|    {
 1604|  65.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  65.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  65.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  65.7k|        return this->get_unexpected().error();
 1606|  65.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  65.7k|    {
  468|  65.7k|        return m_unexpected;
  469|  65.7k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  18.6k|    {
 1663|  18.6k|        return std::move(value());
 1664|  18.6k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  26.4k|    {
 1627|  26.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  26.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  26.4k|        return this->get_value();
 1629|  26.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  26.4k|    {
  451|  26.4k|        return m_value;
  452|  26.4k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  38.9k|        : base(unexpect, std::move(e.error())),
 1474|  38.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  38.9k|    {
 1476|  38.9k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  39.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  39.7k|          m_has_value(false)
  446|  39.7k|    {
  447|  39.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  58.8k|    {
 1177|  58.8k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  18.8k|        : base(std::in_place, std::forward<U>(val)),
 1428|  18.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  18.8k|    {
 1430|  18.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  18.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  18.8k|    {
  437|  18.8k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  59.6k|    {
 1598|  59.6k|        return has_value();
 1599|  59.6k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|   116k|    {
  485|   116k|        return m_has_value;
  486|   116k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  38.9k|    {
 1604|  38.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  38.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  38.9k|        return this->get_unexpected().error();
 1606|  38.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  38.9k|    {
  468|  38.9k|        return m_unexpected;
  469|  38.9k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  14.6k|    {
 1663|  14.6k|        return std::move(value());
 1664|  14.6k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  18.3k|    {
 1627|  18.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  18.3k|        return this->get_value();
 1629|  18.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  18.3k|    {
  451|  18.3k|        return m_value;
  452|  18.3k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  8.31k|    {
 1837|  8.31k|        return detail::transform_error_impl(std::move(*this),
 1838|  8.31k|                                            std::forward<F>(f));
 1839|  8.31k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  8.31k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  8.31k|    else {
 1333|  8.31k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  8.31k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.31k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.31k, False: 0]
  |  |  ------------------
  ------------------
 1335|  8.31k|                   ? result(*std::forward<Exp>(exp))
 1336|  8.31k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  8.31k|    }
 1340|  8.31k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  62.2k|    {
  485|  62.2k|        return m_has_value;
  486|  62.2k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  10.1k|    {
 1663|  10.1k|        return std::move(value());
 1664|  10.1k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  28.2k|    {
 1627|  28.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  28.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  28.2k|        return this->get_value();
 1629|  28.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  28.2k|    {
  451|  28.2k|        return m_value;
  452|  28.2k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|    102|    {
 1614|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    102|        return std::move(this->get_unexpected().error());
 1616|    102|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    102|    {
  468|    102|        return m_unexpected;
  469|    102|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|    926|        : base(unexpect, std::forward<Args>(args)...),
 1484|    926|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    926|    {
 1486|    926|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|   339k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6196|  1.63k|    {
 6197|  1.63k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  1.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6198|  1.63k|        CharT r{};
 6199|  1.63k|        std::memcpy(&r, m_data, m_size);
 6200|  1.63k|        return r;
 6201|  1.63k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|  1.10k|        : m_unexpected(std::forward<Err>(e))
  346|  1.10k|    {
  347|  1.10k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.10k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.10k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  1.27k|        : m_unexpected(std::forward<Args>(args)...)
  355|  1.27k|    {
  356|  1.27k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.27k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.27k|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6205|    794|    {
 6206|    794|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6207|    794|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2961|     52|    {
 2962|     52|        return fn::impl(std::forward<T>(t));
 2963|     52|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2952|     52|    {
 2953|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|     52|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|     52|    {
 2930|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|     52|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2895|     52|    {
 2896|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|     52|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|    174|        : m_unexpected(std::forward<Err>(e))
  346|    174|    {
  347|    174|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    174|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|    174|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|      8|        : m_unexpected(std::forward<Err>(e))
  346|      8|    {
  347|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  17.0k|    {
  361|  17.0k|        return m_unexpected;
  362|  17.0k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  3.44k|        : m_unexpected(std::forward<Args>(args)...)
  355|  3.44k|    {
  356|  3.44k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.44k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.44k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  25.9k|        : m_unexpected(std::forward<Err>(e))
  346|  25.9k|    {
  347|  25.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  25.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  25.9k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  25.9k|    {
  361|  25.9k|        return m_unexpected;
  362|  25.9k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  25.9k|        : m_unexpected(std::forward<Args>(args)...)
  355|  25.9k|    {
  356|  25.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  25.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  25.9k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    706|{
 1211|    706|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    706|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  2.73k|        : m_unexpected(std::forward<Err>(e))
  346|  2.73k|    {
  347|  2.73k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.73k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.73k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|    996|{
 1211|    996|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    996|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  50.1k|{
  326|  50.1k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  50.1k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  57.3k|    {
 3342|  57.3k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  57.3k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|    418|        : base(unexpect, std::move(e.error())),
 1474|    418|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    418|    {
 1476|    418|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|    418|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    418|          m_has_value(false)
  446|    418|    {
  447|    418|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.9k|    {
 1177|  33.9k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  33.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  33.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  33.5k|    {
 1430|  33.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  33.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  33.5k|    {
  437|  33.5k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  23.6k|    {
 1598|  23.6k|        return has_value();
 1599|  23.6k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  18.0k|    {
 1653|  18.0k|        return value();
 1654|  18.0k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1427|  6.09k|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.09k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.09k|    {
 1430|  6.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  6.09k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.09k|    {
  437|  6.09k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.43k|    {
 1177|  6.43k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    344|        : base(unexpect, std::move(e.error())),
 1474|    344|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    344|    {
 1476|    344|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    344|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    344|          m_has_value(false)
  446|    344|    {
  447|    344|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1597|  4.15k|    {
 1598|  4.15k|        return has_value();
 1599|  4.15k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  11.4k|    {
  485|  11.4k|        return m_has_value;
  486|  11.4k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1652|  2.75k|    {
 1653|  2.75k|        return value();
 1654|  2.75k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  4.72k|    {
 1627|  4.72k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.72k|        return this->get_value();
 1629|  4.72k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  4.72k|    {
  451|  4.72k|        return m_value;
  452|  4.72k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|    174|        : base(unexpect, std::move(e.error())),
 1474|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    174|    {
 1476|    174|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|    174|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    174|          m_has_value(false)
  446|    174|    {
  447|    174|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.31k|    {
 1177|  3.31k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  3.14k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.14k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.14k|    {
 1430|  3.14k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  435|  3.14k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.14k|    {
  437|  3.14k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    668|    {
 1837|    668|        return detail::transform_error_impl(std::move(*this),
 1838|    668|                                            std::forward<F>(f));
 1839|    668|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|    668|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    668|    else {
 1333|    668|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    668|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    668|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 668, False: 0]
  |  |  ------------------
  ------------------
 1335|    668|                   ? result(*std::forward<Exp>(exp))
 1336|    668|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    668|    }
 1340|    668|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.96k|    {
 1663|  1.96k|        return std::move(value());
 1664|  1.96k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1427|  1.94k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.94k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.94k|    {
 1430|  1.94k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  1.94k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.94k|    {
  437|  1.94k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.59k|    {
 1177|  6.59k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1613|    316|    {
 1614|    316|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    316|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    316|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    316|        return std::move(this->get_unexpected().error());
 1616|    316|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    316|    {
  468|    316|        return m_unexpected;
  469|    316|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.21k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.21k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.21k|    {
 1486|  1.21k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  4.08k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  4.08k|          m_has_value(false)
  446|  4.08k|    {
  447|  4.08k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.43k|    {
 2724|  1.43k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.43k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.43k|    {
 2705|  1.43k|        return decay_copy(t.begin());
 2706|  1.43k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1948|  3.11k|{
 1949|  3.11k|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.11k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3325|  1.43k|    {
 3326|  1.43k|        return m_iterator;
 3327|  1.43k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.43k|    {
 2781|  1.43k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.43k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.43k|    {
 2763|  1.43k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.43k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3329|  1.43k|    {
 3330|  1.43k|        return m_sentinel;
 3331|  1.43k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3310|  1.43k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.43k|    static_cast<    \
  |  |  929|  1.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.43k|    static_cast<    \
  |  |  929|  1.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.43k|    {
 3312|  1.43k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  3.31k|    {
 1598|  3.31k|        return has_value();
 1599|  3.31k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.62k|    {
  485|  6.62k|        return m_has_value;
  486|  6.62k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1603|    174|    {
 1604|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    174|        return this->get_unexpected().error();
 1606|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  3.14k|    {
 1663|  3.14k|        return std::move(value());
 1664|  3.14k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  3.14k|    {
 1627|  3.14k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.14k|        return this->get_value();
 1629|  3.14k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.14k|    {
  451|  3.14k|        return m_value;
  452|  3.14k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.6k|    {
 1177|  16.6k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  16.6k|        : base(std::in_place, std::forward<U>(val)),
 1428|  16.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  16.6k|    {
 1430|  16.6k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  16.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  16.6k|    {
  437|  16.6k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  16.6k|    {
 1598|  16.6k|        return has_value();
 1599|  16.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  33.3k|    {
  485|  33.3k|        return m_has_value;
  486|  33.3k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  16.6k|    {
 1663|  16.6k|        return std::move(value());
 1664|  16.6k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  16.6k|    {
 1627|  16.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  16.6k|        return this->get_value();
 1629|  16.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  16.6k|    {
  451|  16.6k|        return m_value;
  452|  16.6k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  2.86k|        : base(unexpect, std::move(e.error())),
 1474|  2.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.86k|    {
 1476|  2.86k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    560|        : base(unexpect, std::move(e.error())),
 1474|    560|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    560|    {
 1476|    560|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    876|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    876|          m_has_value(false)
  446|    876|    {
  447|    876|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.99k|    {
 1177|  5.99k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  3.82k|        : base(unexpect, std::move(e.error())),
 1474|  3.82k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.82k|    {
 1476|  3.82k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  3.82k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.82k|          m_has_value(false)
  446|  3.82k|    {
  447|  3.82k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1597|  5.51k|    {
 1598|  5.51k|        return has_value();
 1599|  5.51k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  10.7k|    {
  485|  10.7k|        return m_has_value;
  486|  10.7k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1603|  2.03k|    {
 1604|  2.03k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.03k|        return this->get_unexpected().error();
 1606|  2.03k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  2.76k|    {
  468|  2.76k|        return m_unexpected;
  469|  2.76k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1427|    988|        : base(std::in_place, std::forward<U>(val)),
 1428|    988|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    988|    {
 1430|    988|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|    988|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    988|    {
  437|    988|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    988|    {
 1177|    988|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.30k|    {
 1627|  1.30k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.30k|        return this->get_value();
 1629|  1.30k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.30k|    {
  451|  1.30k|        return m_value;
  452|  1.30k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    744|    {
 1598|    744|        return has_value();
 1599|    744|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  1.97k|    {
  485|  1.97k|        return m_has_value;
  486|  1.97k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    744|    {
 1177|    744|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|    988|    {
 1663|    988|        return std::move(value());
 1664|    988|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    988|    {
 1627|    988|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    988|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    988|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    988|        return this->get_value();
 1629|    988|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|    988|    {
  451|    988|        return m_value;
  452|    988|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3329|  49.9k|    {
 3330|  49.9k|        return m_sentinel;
 3331|  49.9k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.61k|    {
 1837|  1.61k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.61k|                                            std::forward<F>(f));
 1839|  1.61k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|  1.61k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.61k|    else {
 1333|  1.61k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.61k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.61k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.30k, False: 316]
  |  |  ------------------
  ------------------
 1335|  1.61k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.61k|                   : result(unexpect,
 1337|    316|                            trivial_invoke(std::forward<F>(f),
 1338|    316|                                           std::forward<Exp>(exp).error()));
 1339|  1.61k|    }
 1340|  1.61k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1427|  1.30k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.30k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.30k|    {
 1430|  1.30k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  1.30k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.30k|    {
  437|  1.30k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|    316|        : base(unexpect, std::forward<Args>(args)...),
 1484|    316|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    316|    {
 1486|    316|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.30k|    {
 1663|  1.30k|        return std::move(value());
 1664|  1.30k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3325|  58.9k|    {
 3326|  58.9k|        return m_iterator;
 3327|  58.9k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1427|    744|        : base(std::in_place, std::forward<U>(val)),
 1428|    744|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    744|    {
 1430|    744|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    744|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    744|    {
  437|    744|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    744|    {
 1837|    744|        return detail::transform_error_impl(std::move(*this),
 1838|    744|                                            std::forward<F>(f));
 1839|    744|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1322|    744|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    744|    else {
 1333|    744|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    744|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    744|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 744, False: 0]
  |  |  ------------------
  ------------------
 1335|    744|                   ? result(*std::forward<Exp>(exp))
 1336|    744|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    744|    }
 1340|    744|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.48k|    {
  485|  1.48k|        return m_has_value;
  486|  1.48k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    744|    {
 1663|    744|        return std::move(value());
 1664|    744|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    744|    {
 1627|    744|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    744|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    744|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    744|        return this->get_value();
 1629|    744|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    744|    {
  451|    744|        return m_value;
  452|    744|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1427|    744|        : base(std::in_place, std::forward<U>(val)),
 1428|    744|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    744|    {
 1430|    744|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    744|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    744|    {
  437|    744|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    744|    {
 1177|    744|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    744|    {
 1598|    744|        return has_value();
 1599|    744|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.48k|    {
  485|  1.48k|        return m_has_value;
  486|  1.48k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    744|    {
 1663|    744|        return std::move(value());
 1664|    744|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    744|    {
 1627|    744|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    744|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    744|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    744|        return this->get_value();
 1629|    744|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    744|    {
  451|    744|        return m_value;
  452|    744|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    724|    {
 1837|    724|        return detail::transform_error_impl(std::move(*this),
 1838|    724|                                            std::forward<F>(f));
 1839|    724|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|    724|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    724|    else {
 1333|    724|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    724|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    724|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 724]
  |  |  ------------------
  ------------------
 1335|    724|                   ? result(*std::forward<Exp>(exp))
 1336|    724|                   : result(unexpect,
 1337|    724|                            trivial_invoke(std::forward<F>(f),
 1338|    724|                                           std::forward<Exp>(exp).error()));
 1339|    724|    }
 1340|    724|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1613|    724|    {
 1614|    724|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    724|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    724|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    724|        return std::move(this->get_unexpected().error());
 1616|    724|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3642|  1.21k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|  1.21k|    {
 3644|  1.21k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3310|  23.6k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  23.6k|    static_cast<    \
  |  |  929|  23.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  23.6k|    static_cast<    \
  |  |  929|  23.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  23.6k|    {
 3312|  23.6k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|     20|        : base(unexpect, std::move(e.error())),
 1474|     20|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     20|    {
 1476|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  624|     20|        : m_has_value(false)
  625|     20|    {
  626|     20|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|     20|    {
  689|     20|        scn::detail::construct_at(unexpected_ptr(),
  690|     20|                                  std::forward<Args>(args)...);
  691|     20|        m_has_value = false;
  692|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     60|    {
  718|     60|        return reinterpret_cast<unexpected<E>*>(
  719|     60|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     60|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     60|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     20|    {
 1177|     20|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1597|     20|    {
 1598|     20|        return has_value();
 1599|     20|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     60|    {
  675|     60|        return m_has_value;
  676|     60|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1603|     20|    {
 1604|     20|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     20|        return this->get_unexpected().error();
 1606|     20|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     20|    {
  658|     20|        return *unexpected_ptr();
  659|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  630|     20|    {
  631|     20|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 20]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     20|        else {
  635|     20|            destroy_unexpected();
  636|     20|        }
  637|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     20|    {
  700|     20|        scn::detail::destroy_at(unexpected_ptr());
  701|     20|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1597|  6.83k|    {
 1598|  6.83k|        return has_value();
 1599|  6.83k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  13.1k|    {
  485|  13.1k|        return m_has_value;
  486|  13.1k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1603|  3.83k|    {
 1604|  3.83k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.83k|        return this->get_unexpected().error();
 1606|  3.83k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  3.83k|    {
  468|  3.83k|        return m_unexpected;
  469|  3.83k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.94k|    {
 1663|  1.94k|        return std::move(value());
 1664|  1.94k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  2.51k|    {
 1627|  2.51k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.51k|        return this->get_value();
 1629|  2.51k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.51k|    {
  451|  2.51k|        return m_value;
  452|  2.51k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.01k|        : base(unexpect, std::move(e.error())),
 1474|  1.01k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.01k|    {
 1476|  1.01k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.11k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.11k|          m_has_value(false)
  446|  1.11k|    {
  447|  1.11k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  14.0k|    {
 1177|  14.0k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  11.0k|        : base(unexpect, std::move(e.error())),
 1474|  11.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.0k|    {
 1476|  11.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  11.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.0k|          m_has_value(false)
  446|  11.0k|    {
  447|  11.0k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  14.9k|    {
 1598|  14.9k|        return has_value();
 1599|  14.9k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  23.3k|    {
  485|  23.3k|        return m_has_value;
  486|  23.3k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  5.53k|    {
 1604|  5.53k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.53k|        return this->get_unexpected().error();
 1606|  5.53k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.53k|    {
  468|  5.53k|        return m_unexpected;
  469|  5.53k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  3.60k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.60k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.60k|    {
 1430|  3.60k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  3.60k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.60k|    {
  437|  3.60k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.60k|    {
 1177|  3.60k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.88k|    {
 1627|  1.88k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.88k|        return this->get_value();
 1629|  1.88k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.88k|    {
  451|  1.88k|        return m_value;
  452|  1.88k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.70k|    {
 1598|  2.70k|        return has_value();
 1599|  2.70k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  7.21k|    {
  485|  7.21k|        return m_has_value;
  486|  7.21k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.70k|    {
 1177|  2.70k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  3.60k|    {
 1663|  3.60k|        return std::move(value());
 1664|  3.60k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  3.60k|    {
 1627|  3.60k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.60k|        return this->get_value();
 1629|  3.60k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.60k|    {
  451|  3.60k|        return m_value;
  452|  3.60k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  42.6k|    {
 3221|  42.6k|        return detail::to_address(ranges::begin(derived()));
 3222|  42.6k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  42.6k|    {
 2724|  42.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  42.6k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  42.6k|    {
 2705|  42.6k|        return decay_copy(t.begin());
 2706|  42.6k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  42.6k|    {
 3180|  42.6k|        return static_cast<D&>(*this);
 3181|  42.6k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  1.88k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.88k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.88k|    {
 1430|  1.88k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.88k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.88k|    {
  437|  1.88k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|  2.70k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.70k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.70k|    {
 1430|  2.70k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.70k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.70k|    {
  437|  2.70k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.70k|    {
 1837|  2.70k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.70k|                                            std::forward<F>(f));
 1839|  2.70k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|  2.70k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.70k|    else {
 1333|  2.70k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.70k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.70k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.70k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.70k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.70k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.70k|    }
 1340|  2.70k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.40k|    {
  485|  5.40k|        return m_has_value;
  486|  5.40k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.70k|    {
 1663|  2.70k|        return std::move(value());
 1664|  2.70k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.70k|    {
 1627|  2.70k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.70k|        return this->get_value();
 1629|  2.70k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.70k|    {
  451|  2.70k|        return m_value;
  452|  2.70k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  2.70k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.70k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.70k|    {
 1430|  2.70k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.70k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.70k|    {
  437|  2.70k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.70k|    {
 1177|  2.70k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|  2.70k|    {
 1598|  2.70k|        return has_value();
 1599|  2.70k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.40k|    {
  485|  5.40k|        return m_has_value;
  486|  5.40k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.70k|    {
 1663|  2.70k|        return std::move(value());
 1664|  2.70k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.70k|    {
 1627|  2.70k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.70k|        return this->get_value();
 1629|  2.70k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.70k|    {
  451|  2.70k|        return m_value;
  452|  2.70k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1473|     28|        : base(unexpect, std::move(e.error())),
 1474|     28|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     28|    {
 1476|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  624|     28|        : m_has_value(false)
  625|     28|    {
  626|     28|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|     28|    {
  689|     28|        scn::detail::construct_at(unexpected_ptr(),
  690|     28|                                  std::forward<Args>(args)...);
  691|     28|        m_has_value = false;
  692|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     84|    {
  718|     84|        return reinterpret_cast<unexpected<E>*>(
  719|     84|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     84|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     84|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     28|    {
 1177|     28|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|     28|    {
 1598|     28|        return has_value();
 1599|     28|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     84|    {
  675|     84|        return m_has_value;
  676|     84|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|     28|    {
 1604|     28|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     28|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     28|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     28|        return this->get_unexpected().error();
 1606|     28|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     28|    {
  658|     28|        return *unexpected_ptr();
  659|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|     28|    {
  631|     28|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 28]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     28|        else {
  635|     28|            destroy_unexpected();
  636|     28|        }
  637|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     28|    {
  700|     28|        scn::detail::destroy_at(unexpected_ptr());
  701|     28|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  29.5k|    {
 2855|  29.5k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  29.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  29.5k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  29.5k|    {
 2836|  29.5k|        return t.data();
 2837|  29.5k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   227k|        : base(unexpect, std::move(e.error())),
 1474|   227k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   227k|    {
 1476|   227k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   227k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   227k|          m_has_value(false)
  446|   227k|    {
  447|   227k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   232k|    {
 1177|   232k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  4.36k|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.36k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.36k|    {
 1430|  4.36k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  4.36k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.36k|    {
  437|  4.36k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  2.38k|{
 1211|  2.38k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  2.38k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    244|    {
 1837|    244|        return detail::transform_error_impl(std::move(*this),
 1838|    244|                                            std::forward<F>(f));
 1839|    244|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1322|    244|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    244|    else {
 1333|    244|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    244|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    244|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 244, False: 0]
  |  |  ------------------
  ------------------
 1335|    244|                   ? result(*std::forward<Exp>(exp))
 1336|    244|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    244|    }
 1340|    244|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1427|    244|        : base(std::in_place, std::forward<U>(val)),
 1428|    244|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    244|    {
 1430|    244|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|    244|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    244|    {
  437|    244|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    244|    {
 1177|    244|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    244|    {
 1598|    244|        return has_value();
 1599|    244|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    488|    {
  485|    488|        return m_has_value;
  486|    488|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|    244|    {
 1663|    244|        return std::move(value());
 1664|    244|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    244|    {
 1627|    244|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    244|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    244|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    244|        return this->get_value();
 1629|    244|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    244|    {
  451|    244|        return m_value;
  452|    244|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1822|    488|    {
 1823|    488|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    488|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSI_OT0_:
 1322|    488|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    488|    else {
 1333|    488|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    488|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    488|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 488]
  |  |  ------------------
  ------------------
 1335|    488|                   ? result(*std::forward<Exp>(exp))
 1336|    488|                   : result(unexpect,
 1337|    488|                            trivial_invoke(std::forward<F>(f),
 1338|    488|                                           std::forward<Exp>(exp).error()));
 1339|    488|    }
 1340|    488|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1652|    570|    {
 1653|    570|        return value();
 1654|    570|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|      4|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    240|    {
 2724|    240|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    240|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    240|    {
 2705|    240|        return decay_copy(t.begin());
 2706|    240|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|    222|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    904|    {
 1837|    904|        return detail::transform_error_impl(std::move(*this),
 1838|    904|                                            std::forward<F>(f));
 1839|    904|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|    904|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    904|    else {
 1333|    904|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    904|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    904|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 904, False: 0]
  |  |  ------------------
  ------------------
 1335|    904|                   ? result(*std::forward<Exp>(exp))
 1336|    904|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    904|    }
 1340|    904|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|    904|        : base(std::in_place, std::forward<U>(val)),
 1428|    904|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    904|    {
 1430|    904|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|    904|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    904|    {
  437|    904|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    904|    {
 1177|    904|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    904|    {
 1598|    904|        return has_value();
 1599|    904|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.80k|    {
  485|  1.80k|        return m_has_value;
  486|  1.80k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|    904|    {
 1663|    904|        return std::move(value());
 1664|    904|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|    904|    {
 1627|    904|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    904|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    904|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    904|        return this->get_value();
 1629|    904|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    904|    {
  451|    904|        return m_value;
  452|    904|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|    926|    {
 1823|    926|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    926|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|    926|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    926|    else {
 1333|    926|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    926|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    926|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 926]
  |  |  ------------------
  ------------------
 1335|    926|                   ? result(*std::forward<Exp>(exp))
 1336|    926|                   : result(unexpect,
 1337|    926|                            trivial_invoke(std::forward<F>(f),
 1338|    926|                                           std::forward<Exp>(exp).error()));
 1339|    926|    }
 1340|    926|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|    926|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|    926|    static_cast<    \
  |  |  929|    926|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|    926|    {
 3644|    926|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  7.82k|    {
 1653|  7.82k|        return value();
 1654|  7.82k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6707|  2.51k|{
 6708|  2.51k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  2.51k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  2.51k|    auto start = begin;
 6712|  2.51k|    ++begin;
 6713|       |
 6714|  2.51k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.51k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  2.51k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 330, False: 2.18k]
  ------------------
 6721|    330|        handler.on_charset_inverted();
 6722|    330|        ++begin;
 6723|    330|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|    330|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 6, False: 324]
  ------------------
 6730|      6|            handler.on_charset_single(char32_t{']'});
 6731|      6|            ++begin;
 6732|      6|        }
 6733|    330|    }
 6734|  2.18k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 2.18k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|   335k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 335k, False: 0]
  ------------------
 6739|   335k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 335k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|   335k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 2.51k, False: 333k]
  ------------------
 6744|  2.51k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  2.51k|        }
 6746|       |
 6747|   333k|        parse_presentation_set_literal(begin, end, handler);
 6748|   333k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  2.51k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6671|   333k|{
 6672|   333k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   333k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   333k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|   333k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|   333k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|   333k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 333k, False: 0]
  |  Branch (6679:25): [True: 2.37k, False: 330k]
  |  Branch (6679:49): [True: 2.37k, False: 0]
  ------------------
 6680|   333k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 2.31k, False: 66]
  ------------------
 6681|  2.31k|        ++begin;
 6682|       |
 6683|  2.31k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  2.31k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  2.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.31k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  2.31k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  2.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.31k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  2.31k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  2.31k|        return;
 6697|  2.31k|    }
 6698|       |
 6699|   330k|    handler.on_charset_single(cp_first);
 6700|   330k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6647|   335k|{
 6648|   335k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   335k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   335k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|   335k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|   335k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|   670k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 335k]
  |  |  |  Branch (859:45): [True: 0, False: 335k]
  |  |  |  Branch (859:45): [True: 0, False: 335k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|   335k|    const auto cp =
 6657|   335k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|   335k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 335k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|   335k|    begin += len;
 6664|   335k|    return cp;
 6665|   335k|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.9k|    {
 1177|  11.9k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1427|  11.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  11.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  11.9k|    {
 1430|  11.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  435|  11.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  11.9k|    {
  437|  11.9k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6261|  9.99k|    {
 6262|  9.99k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6263|  9.99k|                charset_string_size};
 6264|  9.99k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1427|    570|        : base(std::in_place, std::forward<U>(val)),
 1428|    570|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    570|    {
 1430|    570|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  435|    570|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    570|    {
  437|    570|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|  1.47k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.47k|    {
 1430|  1.47k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.47k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.47k|    {
  437|  1.47k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4028|  94.9k|{
 4029|  94.9k|    if constexpr (sizeof(CharT) == 1) {
 4030|  94.9k|        return decode_utf8_code_point_exhaustive_valid(input);
 4031|       |    }
 4032|       |    else if constexpr (sizeof(CharT) == 2) {
 4033|       |        return decode_utf16_code_point_exhaustive_valid(input);
 4034|       |    }
 4035|       |    else {
 4036|       |        SCN_EXPECT(input.size() == 1);
 4037|       |        return static_cast<char32_t>(input.front());
 4038|       |    }
 4039|  94.9k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3906|  12.5k|    const auto is_trailing_code_unit = [](char ch) {
 3907|  12.5k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3908|  12.5k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6196|    866|    {
 6197|    866|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|    866|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    866|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6198|    866|        CharT r{};
 6199|    866|        std::memcpy(&r, m_data, m_size);
 6200|    866|        return r;
 6201|    866|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   312M|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|   312M|    else {
 3810|       |        // utf-32
 3811|   312M|        static_assert(sizeof(U) == 4);
 3812|   312M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   312M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   312M|        return 1;
 3814|   312M|    }
 3815|   312M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   312M|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|   312M|    else {
 4016|   312M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   312M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   312M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   312M|        auto cp = static_cast<char32_t>(input.front());
 4018|   312M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   312M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.5k, False: 312M]
  |  |  ------------------
  ------------------
 4019|  55.5k|            return invalid_code_point;
 4020|  55.5k|        }
 4021|   312M|        return cp;
 4022|   312M|    }
 4023|   312M|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  45.4k|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  45.4k|    else {
 3701|  45.4k|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  45.4k|                                       to_address(first), to_address(last)))};
 3703|  45.4k|    }
 3704|  45.4k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   141k|{
  326|   141k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   141k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   158k|{
  304|   158k|    return p;
  305|   158k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  7.04k|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  7.04k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  7.04k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.04k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  7.04k|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  7.04k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  17.4k|{
  326|  17.4k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  17.4k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  17.5k|    {
 3342|  17.5k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  17.5k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|    134|        : base(unexpect, std::move(e.error())),
 1474|    134|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    134|    {
 1476|    134|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|    134|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    134|          m_has_value(false)
  446|    134|    {
  447|    134|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.1k|    {
 1177|  17.1k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  17.0k|        : base(std::in_place, std::forward<U>(val)),
 1428|  17.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  17.0k|    {
 1430|  17.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  17.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  17.0k|    {
  437|  17.0k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  4.78k|    {
 1598|  4.78k|        return has_value();
 1599|  4.78k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  29.5k|    {
  485|  29.5k|        return m_has_value;
  486|  29.5k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  12.2k|    {
 1627|  12.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  12.2k|        return this->get_value();
 1629|  12.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  12.2k|    {
  451|  12.2k|        return m_value;
  452|  12.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1427|  1.37k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.37k|    {
 1430|  1.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  1.37k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.37k|    {
  437|  1.37k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.53k|    {
 1177|  1.53k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    154|        : base(unexpect, std::move(e.error())),
 1474|    154|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    154|    {
 1476|    154|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    154|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    154|          m_has_value(false)
  446|    154|    {
  447|    154|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1597|    654|    {
 1598|    654|        return has_value();
 1599|    654|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  2.41k|    {
  485|  2.41k|        return m_has_value;
  486|  2.41k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|    724|    {
 1627|    724|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    724|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    724|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    724|        return this->get_value();
 1629|    724|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|    724|    {
  451|    724|        return m_value;
  452|    724|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.14k|    {
 1177|  1.14k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  1.14k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.14k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.14k|    {
 1430|  1.14k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  435|  1.14k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.14k|    {
  437|  1.14k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    244|    {
 1837|    244|        return detail::transform_error_impl(std::move(*this),
 1838|    244|                                            std::forward<F>(f));
 1839|    244|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|    244|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    244|    else {
 1333|    244|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    244|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    244|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 244, False: 0]
  |  |  ------------------
  ------------------
 1335|    244|                   ? result(*std::forward<Exp>(exp))
 1336|    244|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    244|    }
 1340|    244|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|    724|    {
 1663|    724|        return std::move(value());
 1664|    724|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1427|    680|        : base(std::in_place, std::forward<U>(val)),
 1428|    680|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    680|    {
 1430|    680|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|    680|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    680|    {
  437|    680|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.40k|    {
 1177|  2.40k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1613|    154|    {
 1614|    154|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    154|        return std::move(this->get_unexpected().error());
 1616|    154|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    154|    {
  468|    154|        return m_unexpected;
  469|    154|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|    456|        : base(unexpect, std::forward<Args>(args)...),
 1484|    456|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    456|    {
 1486|    456|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.54k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.54k|          m_has_value(false)
  446|  1.54k|    {
  447|  1.54k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    326|    {
 2724|    326|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    326|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    326|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    326|    {
 2705|    326|        return decay_copy(t.begin());
 2706|    326|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1948|    738|{
 1949|    738|    return SCN_FWD(t);
  ------------------
  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|    738|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3325|    326|    {
 3326|    326|        return m_iterator;
 3327|    326|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    326|    {
 2781|    326|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    326|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    326|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    326|    {
 2763|    326|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    326|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    326|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3329|    326|    {
 3330|    326|        return m_sentinel;
 3331|    326|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3310|    326|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|    326|    static_cast<    \
  |  |  929|    326|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|    326|    static_cast<    \
  |  |  929|    326|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|    326|    {
 3312|    326|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  1.14k|    {
 1598|  1.14k|        return has_value();
 1599|  1.14k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.29k|    {
  485|  2.29k|        return m_has_value;
  486|  2.29k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.14k|    {
 1663|  1.14k|        return std::move(value());
 1664|  1.14k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.14k|    {
 1627|  1.14k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.14k|        return this->get_value();
 1629|  1.14k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.14k|    {
  451|  1.14k|        return m_value;
  452|  1.14k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.71k|    {
 1177|  9.71k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  9.71k|        : base(std::in_place, std::forward<U>(val)),
 1428|  9.71k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  9.71k|    {
 1430|  9.71k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  9.71k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  9.71k|    {
  437|  9.71k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  7.56k|    {
 1837|  7.56k|        return detail::transform_error_impl(std::move(*this),
 1838|  7.56k|                                            std::forward<F>(f));
 1839|  7.56k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  7.56k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  7.56k|    else {
 1333|  7.56k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  7.56k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  7.56k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.56k, False: 0]
  |  |  ------------------
  ------------------
 1335|  7.56k|                   ? result(*std::forward<Exp>(exp))
 1336|  7.56k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  7.56k|    }
 1340|  7.56k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  12.2k|    {
 1663|  12.2k|        return std::move(value());
 1664|  12.2k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|    134|    {
 1614|    134|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    134|        return std::move(this->get_unexpected().error());
 1616|    134|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    134|    {
  468|    134|        return m_unexpected;
  469|    134|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|    790|        : base(unexpect, std::forward<Args>(args)...),
 1484|    790|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    790|    {
 1486|    790|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  9.71k|    {
 1598|  9.71k|        return has_value();
 1599|  9.71k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  19.4k|    {
  485|  19.4k|        return m_has_value;
  486|  19.4k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  9.71k|    {
 1663|  9.71k|        return std::move(value());
 1664|  9.71k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  9.71k|    {
 1627|  9.71k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.71k|        return this->get_value();
 1629|  9.71k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  9.71k|    {
  451|  9.71k|        return m_value;
  452|  9.71k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.08k|        : base(unexpect, std::move(e.error())),
 1474|  1.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.08k|    {
 1476|  1.08k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    246|        : base(unexpect, std::move(e.error())),
 1474|    246|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    246|    {
 1476|    246|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    400|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    400|          m_has_value(false)
  446|    400|    {
  447|    400|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.41k|    {
 1177|  2.41k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  1.53k|        : base(unexpect, std::move(e.error())),
 1474|  1.53k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.53k|    {
 1476|  1.53k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  1.53k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.53k|          m_has_value(false)
  446|  1.53k|    {
  447|  1.53k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1597|  2.23k|    {
 1598|  2.23k|        return has_value();
 1599|  2.23k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  4.27k|    {
  485|  4.27k|        return m_has_value;
  486|  4.27k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1603|    830|    {
 1604|    830|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    830|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    830|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    830|        return this->get_unexpected().error();
 1606|    830|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  1.10k|    {
  468|  1.10k|        return m_unexpected;
  469|  1.10k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1427|    400|        : base(std::in_place, std::forward<U>(val)),
 1428|    400|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    400|    {
 1430|    400|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|    400|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    400|    {
  437|    400|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    400|    {
 1177|    400|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|    480|    {
 1627|    480|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    480|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    480|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    480|        return this->get_value();
 1629|    480|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|    480|    {
  451|    480|        return m_value;
  452|    480|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    308|    {
 1598|    308|        return has_value();
 1599|    308|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|    800|    {
  485|    800|        return m_has_value;
  486|    800|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    308|    {
 1177|    308|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|    400|    {
 1663|    400|        return std::move(value());
 1664|    400|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    400|    {
 1627|    400|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    400|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    400|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    400|        return this->get_value();
 1629|    400|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|    400|    {
  451|    400|        return m_value;
  452|    400|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3329|  14.3k|    {
 3330|  14.3k|        return m_sentinel;
 3331|  14.3k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    634|    {
 1837|    634|        return detail::transform_error_impl(std::move(*this),
 1838|    634|                                            std::forward<F>(f));
 1839|    634|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|    634|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    634|    else {
 1333|    634|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    634|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    634|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 480, False: 154]
  |  |  ------------------
  ------------------
 1335|    634|                   ? result(*std::forward<Exp>(exp))
 1336|    634|                   : result(unexpect,
 1337|    154|                            trivial_invoke(std::forward<F>(f),
 1338|    154|                                           std::forward<Exp>(exp).error()));
 1339|    634|    }
 1340|    634|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1427|    480|        : base(std::in_place, std::forward<U>(val)),
 1428|    480|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    480|    {
 1430|    480|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|    480|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    480|    {
  437|    480|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|    154|        : base(unexpect, std::forward<Args>(args)...),
 1484|    154|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    154|    {
 1486|    154|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|    480|    {
 1663|    480|        return std::move(value());
 1664|    480|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3325|  17.2k|    {
 3326|  17.2k|        return m_iterator;
 3327|  17.2k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1427|    308|        : base(std::in_place, std::forward<U>(val)),
 1428|    308|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    308|    {
 1430|    308|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    308|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    308|    {
  437|    308|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    308|    {
 1837|    308|        return detail::transform_error_impl(std::move(*this),
 1838|    308|                                            std::forward<F>(f));
 1839|    308|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1322|    308|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    308|    else {
 1333|    308|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    308|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    308|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 308, False: 0]
  |  |  ------------------
  ------------------
 1335|    308|                   ? result(*std::forward<Exp>(exp))
 1336|    308|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    308|    }
 1340|    308|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|    616|    {
  485|    616|        return m_has_value;
  486|    616|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    308|    {
 1663|    308|        return std::move(value());
 1664|    308|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    308|    {
 1627|    308|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    308|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    308|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    308|        return this->get_value();
 1629|    308|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    308|    {
  451|    308|        return m_value;
  452|    308|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1427|    308|        : base(std::in_place, std::forward<U>(val)),
 1428|    308|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    308|    {
 1430|    308|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    308|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    308|    {
  437|    308|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    308|    {
 1177|    308|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    308|    {
 1598|    308|        return has_value();
 1599|    308|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    616|    {
  485|    616|        return m_has_value;
  486|    616|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    308|    {
 1663|    308|        return std::move(value());
 1664|    308|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    308|    {
 1627|    308|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    308|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    308|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    308|        return this->get_value();
 1629|    308|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    308|    {
  451|    308|        return m_value;
  452|    308|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    272|    {
 1837|    272|        return detail::transform_error_impl(std::move(*this),
 1838|    272|                                            std::forward<F>(f));
 1839|    272|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSJ_OT0_:
 1322|    272|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    272|    else {
 1333|    272|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    272|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    272|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 272]
  |  |  ------------------
  ------------------
 1335|    272|                   ? result(*std::forward<Exp>(exp))
 1336|    272|                   : result(unexpect,
 1337|    272|                            trivial_invoke(std::forward<F>(f),
 1338|    272|                                           std::forward<Exp>(exp).error()));
 1339|    272|    }
 1340|    272|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1613|    272|    {
 1614|    272|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    272|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    272|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    272|        return std::move(this->get_unexpected().error());
 1616|    272|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3642|    456|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|    456|    static_cast<    \
  |  |  929|    456|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|    456|    {
 3644|    456|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3310|  5.95k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.95k|    static_cast<    \
  |  |  929|  5.95k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.95k|    static_cast<    \
  |  |  929|  5.95k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  5.95k|    {
 3312|  5.95k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISK_OT_EEvE4typeELPv0ETnPNSN_IXsr3stdE16is_convertible_vISP_SK_EEvE4typeELST_0EEEONS0_10unexpectedISO_EE:
 1473|     36|        : base(unexpect, std::move(e.error())),
 1474|     36|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     36|    {
 1476|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  624|     36|        : m_has_value(false)
  625|     36|    {
  626|     36|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  688|     36|    {
  689|     36|        scn::detail::construct_at(unexpected_ptr(),
  690|     36|                                  std::forward<Args>(args)...);
  691|     36|        m_has_value = false;
  692|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    108|    {
  718|    108|        return reinterpret_cast<unexpected<E>*>(
  719|    108|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    108|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    108|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     36|    {
 1177|     36|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     36|    {
 1598|     36|        return has_value();
 1599|     36|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    108|    {
  675|    108|        return m_has_value;
  676|    108|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     36|    {
 1604|     36|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     36|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     36|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     36|        return this->get_unexpected().error();
 1606|     36|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     36|    {
  658|     36|        return *unexpected_ptr();
  659|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     36|    {
  631|     36|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 36]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     36|        else {
  635|     36|            destroy_unexpected();
  636|     36|        }
  637|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     36|    {
  700|     36|        scn::detail::destroy_at(unexpected_ptr());
  701|     36|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1597|  2.49k|    {
 1598|  2.49k|        return has_value();
 1599|  2.49k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.81k|    {
  485|  4.81k|        return m_has_value;
  486|  4.81k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1603|  1.44k|    {
 1604|  1.44k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.44k|        return this->get_unexpected().error();
 1606|  1.44k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.44k|    {
  468|  1.44k|        return m_unexpected;
  469|  1.44k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|    680|    {
 1663|    680|        return std::move(value());
 1664|    680|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|    866|    {
 1627|    866|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    866|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    866|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    866|        return this->get_value();
 1629|    866|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|    866|    {
  451|    866|        return m_value;
  452|    866|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|    918|        : base(unexpect, std::move(e.error())),
 1474|    918|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    918|    {
 1476|    918|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.05k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.05k|          m_has_value(false)
  446|  1.05k|    {
  447|  1.05k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  15.2k|    {
 1177|  15.2k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  9.50k|        : base(unexpect, std::move(e.error())),
 1474|  9.50k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  9.50k|    {
 1476|  9.50k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  9.50k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  9.50k|          m_has_value(false)
  446|  9.50k|    {
  447|  9.50k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  16.0k|    {
 1598|  16.0k|        return has_value();
 1599|  16.0k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  26.3k|    {
  485|  26.3k|        return m_has_value;
  486|  26.3k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  4.86k|    {
 1604|  4.86k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.86k|        return this->get_unexpected().error();
 1606|  4.86k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  4.86k|    {
  468|  4.86k|        return m_unexpected;
  469|  4.86k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  3.16k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.16k|    {
 1430|  3.16k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  3.16k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.16k|    {
  437|  3.16k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.16k|    {
 1177|  3.16k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  4.69k|    {
 1627|  4.69k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.69k|        return this->get_value();
 1629|  4.69k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  4.69k|    {
  451|  4.69k|        return m_value;
  452|  4.69k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.37k|    {
 1598|  2.37k|        return has_value();
 1599|  2.37k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  6.32k|    {
  485|  6.32k|        return m_has_value;
  486|  6.32k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.37k|    {
 1177|  2.37k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  3.16k|    {
 1663|  3.16k|        return std::move(value());
 1664|  3.16k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  3.16k|    {
 1627|  3.16k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.16k|        return this->get_value();
 1629|  3.16k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.16k|    {
  451|  3.16k|        return m_value;
  452|  3.16k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  4.82k|    {
 1837|  4.82k|        return detail::transform_error_impl(std::move(*this),
 1838|  4.82k|                                            std::forward<F>(f));
 1839|  4.82k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  4.82k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  4.82k|    else {
 1333|  4.82k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  4.82k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  4.82k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.69k, False: 134]
  |  |  ------------------
  ------------------
 1335|  4.82k|                   ? result(*std::forward<Exp>(exp))
 1336|  4.82k|                   : result(unexpect,
 1337|    134|                            trivial_invoke(std::forward<F>(f),
 1338|    134|                                           std::forward<Exp>(exp).error()));
 1339|  4.82k|    }
 1340|  4.82k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  4.69k|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.69k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.69k|    {
 1430|  4.69k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  4.69k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.69k|    {
  437|  4.69k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|    134|        : base(unexpect, std::forward<Args>(args)...),
 1484|    134|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    134|    {
 1486|    134|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  4.69k|    {
 1663|  4.69k|        return std::move(value());
 1664|  4.69k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|  2.37k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.37k|    {
 1430|  2.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.37k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.37k|    {
  437|  2.37k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.37k|    {
 1837|  2.37k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.37k|                                            std::forward<F>(f));
 1839|  2.37k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|  2.37k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.37k|    else {
 1333|  2.37k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.37k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.37k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.37k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.37k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.37k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.37k|    }
 1340|  2.37k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.75k|    {
  485|  4.75k|        return m_has_value;
  486|  4.75k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.37k|    {
 1663|  2.37k|        return std::move(value());
 1664|  2.37k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.37k|    {
 1627|  2.37k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.37k|        return this->get_value();
 1629|  2.37k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.37k|    {
  451|  2.37k|        return m_value;
  452|  2.37k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  2.37k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.37k|    {
 1430|  2.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.37k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.37k|    {
  437|  2.37k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.37k|    {
 1177|  2.37k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|  2.37k|    {
 1598|  2.37k|        return has_value();
 1599|  2.37k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.75k|    {
  485|  4.75k|        return m_has_value;
  486|  4.75k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.37k|    {
 1663|  2.37k|        return std::move(value());
 1664|  2.37k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.37k|    {
 1627|  2.37k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.37k|        return this->get_value();
 1629|  2.37k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.37k|    {
  451|  2.37k|        return m_value;
  452|  2.37k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|     32|        : base(unexpect, std::move(e.error())),
 1474|     32|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     32|    {
 1476|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  624|     32|        : m_has_value(false)
  625|     32|    {
  626|     32|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|     32|    {
  689|     32|        scn::detail::construct_at(unexpected_ptr(),
  690|     32|                                  std::forward<Args>(args)...);
  691|     32|        m_has_value = false;
  692|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     96|    {
  718|     96|        return reinterpret_cast<unexpected<E>*>(
  719|     96|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     96|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     96|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     32|    {
 1177|     32|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     32|    {
 1598|     32|        return has_value();
 1599|     32|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|     96|    {
  675|     96|        return m_has_value;
  676|     96|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     32|    {
 1604|     32|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     32|        return this->get_unexpected().error();
 1606|     32|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     32|    {
  658|     32|        return *unexpected_ptr();
  659|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     32|    {
  631|     32|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 32]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     32|        else {
  635|     32|            destroy_unexpected();
  636|     32|        }
  637|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     32|    {
  700|     32|        scn::detail::destroy_at(unexpected_ptr());
  701|     32|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  10.2k|    {
 2855|  10.2k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  10.2k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  10.2k|    {
 2836|  10.2k|        return t.data();
 2837|  10.2k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  16.1k|    {
 3221|  16.1k|        return detail::to_address(ranges::begin(derived()));
 3222|  16.1k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  16.1k|    {
 2724|  16.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  16.1k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  16.1k|    {
 2705|  16.1k|        return decay_copy(t.begin());
 2706|  16.1k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  16.1k|    {
 3180|  16.1k|        return static_cast<D&>(*this);
 3181|  16.1k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|     92|    {
 1837|     92|        return detail::transform_error_impl(std::move(*this),
 1838|     92|                                            std::forward<F>(f));
 1839|     92|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1322|     92|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|     92|    else {
 1333|     92|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|     92|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|     92|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 92, False: 0]
  |  |  ------------------
  ------------------
 1335|     92|                   ? result(*std::forward<Exp>(exp))
 1336|     92|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|     92|    }
 1340|     92|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1427|     92|        : base(std::in_place, std::forward<U>(val)),
 1428|     92|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|     92|    {
 1430|     92|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|     92|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|     92|    {
  437|     92|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     92|    {
 1177|     92|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|     92|    {
 1598|     92|        return has_value();
 1599|     92|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    184|    {
  485|    184|        return m_has_value;
  486|    184|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|     92|    {
 1663|     92|        return std::move(value());
 1664|     92|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|     92|    {
 1627|     92|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|     92|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     92|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|     92|        return this->get_value();
 1629|     92|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|     92|    {
  451|     92|        return m_value;
  452|     92|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1822|    184|    {
 1823|    184|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    184|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSK_OT0_:
 1322|    184|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    184|    else {
 1333|    184|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    184|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    184|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 184]
  |  |  ------------------
  ------------------
 1335|    184|                   ? result(*std::forward<Exp>(exp))
 1336|    184|                   : result(unexpect,
 1337|    184|                            trivial_invoke(std::forward<F>(f),
 1338|    184|                                           std::forward<Exp>(exp).error()));
 1339|    184|    }
 1340|    184|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1652|    186|    {
 1653|    186|        return value();
 1654|    186|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|     86|    {
 2724|     86|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|     86|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|     86|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|     86|    {
 2705|     86|        return decay_copy(t.begin());
 2706|     86|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|     78|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    784|    {
 1837|    784|        return detail::transform_error_impl(std::move(*this),
 1838|    784|                                            std::forward<F>(f));
 1839|    784|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|    784|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    784|    else {
 1333|    784|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    784|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    784|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 784, False: 0]
  |  |  ------------------
  ------------------
 1335|    784|                   ? result(*std::forward<Exp>(exp))
 1336|    784|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    784|    }
 1340|    784|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|    784|        : base(std::in_place, std::forward<U>(val)),
 1428|    784|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    784|    {
 1430|    784|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|    784|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    784|    {
  437|    784|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    784|    {
 1177|    784|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    784|    {
 1598|    784|        return has_value();
 1599|    784|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.56k|    {
  485|  1.56k|        return m_has_value;
  486|  1.56k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|    784|    {
 1663|    784|        return std::move(value());
 1664|    784|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|    784|    {
 1627|    784|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    784|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    784|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    784|        return this->get_value();
 1629|    784|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    784|    {
  451|    784|        return m_value;
  452|    784|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|    790|    {
 1823|    790|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    790|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|    790|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    790|    else {
 1333|    790|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    790|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    790|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 790]
  |  |  ------------------
  ------------------
 1335|    790|                   ? result(*std::forward<Exp>(exp))
 1336|    790|                   : result(unexpect,
 1337|    790|                            trivial_invoke(std::forward<F>(f),
 1338|    790|                                           std::forward<Exp>(exp).error()));
 1339|    790|    }
 1340|    790|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|    790|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|    790|    static_cast<    \
  |  |  929|    790|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|    790|    {
 3644|    790|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  3.72k|    {
 1653|  3.72k|        return value();
 1654|  3.72k|    }
_ZN3scn2v36detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6707|    432|{
 6708|    432|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    432|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    432|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|    432|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    432|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    432|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|    432|    auto start = begin;
 6712|    432|    ++begin;
 6713|       |
 6714|    432|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 432]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|    432|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 222, False: 210]
  ------------------
 6721|    222|        handler.on_charset_inverted();
 6722|    222|        ++begin;
 6723|    222|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|    222|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 6, False: 216]
  ------------------
 6730|      6|            handler.on_charset_single(char32_t{']'});
 6731|      6|            ++begin;
 6732|      6|        }
 6733|    222|    }
 6734|    210|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 210]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  3.97k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 3.97k, False: 0]
  ------------------
 6739|  3.97k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  3.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.97k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  3.97k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 432, False: 3.54k]
  ------------------
 6744|    432|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|    432|        }
 6746|       |
 6747|  3.54k|        parse_presentation_set_literal(begin, end, handler);
 6748|  3.54k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|    432|}
_ZN3scn2v36detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6671|  3.54k|{
 6672|  3.54k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  3.54k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  3.54k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  3.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.54k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  3.54k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 3.54k, False: 0]
  |  Branch (6679:25): [True: 252, False: 3.29k]
  |  Branch (6679:49): [True: 252, False: 0]
  ------------------
 6680|  3.54k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 246, False: 6]
  ------------------
 6681|    246|        ++begin;
 6682|       |
 6683|    246|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|    246|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|    246|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|    246|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|    246|        return;
 6697|    246|    }
 6698|       |
 6699|  3.30k|    handler.on_charset_single(cp_first);
 6700|  3.30k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6647|  3.79k|{
 6648|  3.79k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  3.79k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  3.79k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  7.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.79k]
  |  |  |  Branch (859:45): [True: 0, False: 3.79k]
  |  |  |  Branch (859:45): [True: 0, False: 3.79k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  3.79k|    const auto cp =
 6657|  3.79k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  3.79k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  3.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.79k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  3.79k|    begin += len;
 6664|  3.79k|    return cp;
 6665|  3.79k|}
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6261|  4.96k|    {
 6262|  4.96k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6263|  4.96k|                charset_string_size};
 6264|  4.96k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1427|    186|        : base(std::in_place, std::forward<U>(val)),
 1428|    186|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    186|    {
 1430|    186|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  435|    186|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    186|    {
  437|    186|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|    342|        : base(std::in_place, std::forward<U>(val)),
 1428|    342|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    342|    {
 1430|    342|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|    342|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    342|    {
  437|    342|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3649|  1.66k|{
 3650|  1.66k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.66k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  6.10k|    {
 2855|  6.10k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  6.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  6.10k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  6.10k|    {
 2836|  6.10k|        return t.data();
 2837|  6.10k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|  76.3k|    {
 5476|  76.3k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  76.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.3k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  76.3k|        return static_cast<std::size_t>(m_desc &
 5481|  76.3k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  76.3k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|   124k|    {
 5501|   124k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|   124k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|  48.1k|    {
 5444|  48.1k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  48.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 48.1k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  48.1k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  48.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 48.0k]
  |  |  ------------------
  ------------------
 5452|     68|            return {};
 5453|     68|        }
 5454|       |
 5455|  48.0k|        const auto t = type(id);
 5456|  48.0k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  48.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.29k, False: 46.7k]
  |  |  ------------------
  ------------------
 5457|  1.29k|            return {};
 5458|  1.29k|        }
 5459|       |
 5460|  46.7k|        basic_scan_arg<Context> arg;
 5461|  46.7k|        arg.m_type = t;
 5462|  46.7k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 46.7k, False: 0]
  ------------------
 5463|  46.7k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  46.7k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  46.7k|        return arg;
 5469|  48.0k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|  48.1k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|  75.3k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|  48.0k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  48.0k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  48.0k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  48.0k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  48.0k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|  46.7k|    {
 5505|  46.7k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  46.7k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|  92.8k|    {
 5257|  92.8k|        return m_type != detail::arg_type::none_type;
 5258|  92.8k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  5.65k|{
 8428|  5.65k|#define SCN_VISIT(Type)                                         \
 8429|  5.65k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  5.65k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  5.65k|    }                                                           \
 8432|  5.65k|    else {                                                      \
 8433|  5.65k|        return vis(monostate_val);                              \
 8434|  5.65k|    }
 8435|       |
 8436|  5.65k|    monostate monostate_val{};
 8437|       |
 8438|  5.65k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 5.65k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 5.65k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|    628|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 628, False: 5.02k]
  ------------------
 8444|    628|            SCN_VISIT(int);
  ------------------
  |  | 8429|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    628|    }                                                           \
  |  | 8432|    628|    else {                                                      \
  |  | 8433|    628|        return vis(monostate_val);                              \
  |  | 8434|    628|    }
  ------------------
 8445|    628|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 5.65k]
  ------------------
 8446|    628|            SCN_VISIT(long);
  ------------------
  |  | 8429|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    628|    }                                                           \
  |  | 8432|    628|    else {                                                      \
  |  | 8433|    628|        return vis(monostate_val);                              \
  |  | 8434|    628|    }
  ------------------
 8447|    628|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 5.65k]
  ------------------
 8448|    628|            SCN_VISIT(long long);
  ------------------
  |  | 8429|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    628|    }                                                           \
  |  | 8432|    628|    else {                                                      \
  |  | 8433|    628|        return vis(monostate_val);                              \
  |  | 8434|    628|    }
  ------------------
 8449|    628|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 5.65k]
  ------------------
 8450|    628|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    628|    }                                                           \
  |  | 8432|    628|    else {                                                      \
  |  | 8433|    628|        return vis(monostate_val);                              \
  |  | 8434|    628|    }
  ------------------
 8451|    628|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 5.65k]
  ------------------
 8452|    628|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    628|    }                                                           \
  |  | 8432|    628|    else {                                                      \
  |  | 8433|    628|        return vis(monostate_val);                              \
  |  | 8434|    628|    }
  ------------------
 8453|  1.25k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 628, False: 5.02k]
  ------------------
 8454|  1.25k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  1.25k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.25k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.25k|    }                                                           \
  |  | 8432|  1.25k|    else {                                                      \
  |  | 8433|  1.25k|        return vis(monostate_val);                              \
  |  | 8434|  1.25k|    }
  ------------------
 8455|  1.25k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 5.65k]
  ------------------
 8456|  1.25k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  1.25k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.25k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.25k|    }                                                           \
  |  | 8432|  1.25k|    else {                                                      \
  |  | 8433|  1.25k|        return vis(monostate_val);                              \
  |  | 8434|  1.25k|    }
  ------------------
 8457|  1.25k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 5.65k]
  ------------------
 8458|  1.25k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  1.25k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.25k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.25k|    }                                                           \
  |  | 8432|  1.25k|    else {                                                      \
  |  | 8433|  1.25k|        return vis(monostate_val);                              \
  |  | 8434|  1.25k|    }
  ------------------
 8459|  1.88k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 628, False: 5.02k]
  ------------------
 8460|  1.88k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  1.88k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.88k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.88k|    }                                                           \
  |  | 8432|  1.88k|    else {                                                      \
  |  | 8433|  1.88k|        return vis(monostate_val);                              \
  |  | 8434|  1.88k|    }
  ------------------
 8461|  2.51k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 628, False: 5.02k]
  ------------------
 8462|  2.51k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  2.51k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.51k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.51k|    }                                                           \
  |  | 8432|  2.51k|    else {                                                      \
  |  | 8433|  2.51k|        return vis(monostate_val);                              \
  |  | 8434|  2.51k|    }
  ------------------
 8463|  3.14k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 628, False: 5.02k]
  ------------------
 8464|  3.14k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  3.14k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.14k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.14k|    }                                                           \
  |  | 8432|  3.14k|    else {                                                      \
  |  | 8433|  3.14k|        return vis(monostate_val);                              \
  |  | 8434|  3.14k|    }
  ------------------
 8465|  3.14k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 5.65k]
  ------------------
 8466|  3.14k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  3.14k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.14k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.14k|    }                                                           \
  |  | 8432|  3.14k|    else {                                                      \
  |  | 8433|  3.14k|        return vis(monostate_val);                              \
  |  | 8434|  3.14k|    }
  ------------------
 8467|  3.14k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 5.65k]
  ------------------
 8468|  3.14k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  3.14k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.14k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.14k|    }                                                           \
  |  | 8432|  3.14k|    else {                                                      \
  |  | 8433|  3.14k|        return vis(monostate_val);                              \
  |  | 8434|  3.14k|    }
  ------------------
 8469|  3.14k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 5.65k]
  ------------------
 8470|  3.14k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  3.14k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.14k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.14k|    }                                                           \
  |  | 8432|  3.14k|    else {                                                      \
  |  | 8433|  3.14k|        return vis(monostate_val);                              \
  |  | 8434|  3.14k|    }
  ------------------
 8471|  3.76k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 628, False: 5.02k]
  ------------------
 8472|  3.76k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  3.76k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.76k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.76k|    }                                                           \
  |  | 8432|  3.76k|    else {                                                      \
  |  | 8433|  3.76k|        return vis(monostate_val);                              \
  |  | 8434|  3.76k|    }
  ------------------
 8473|  3.76k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 5.65k]
  ------------------
 8474|  3.76k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  3.76k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.76k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.76k|    }                                                           \
  |  | 8432|  3.76k|    else {                                                      \
  |  | 8433|  3.76k|        return vis(monostate_val);                              \
  |  | 8434|  3.76k|    }
  ------------------
 8475|  4.39k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 628, False: 5.02k]
  ------------------
 8476|  4.39k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  4.39k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.39k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.39k|    }                                                           \
  |  | 8432|  4.39k|    else {                                                      \
  |  | 8433|  4.39k|        return vis(monostate_val);                              \
  |  | 8434|  4.39k|    }
  ------------------
 8477|  5.02k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 628, False: 5.02k]
  ------------------
 8478|  5.02k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  5.02k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  5.02k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  5.02k|    }                                                           \
  |  | 8432|  5.02k|    else {                                                      \
  |  | 8433|  5.02k|        return vis(monostate_val);                              \
  |  | 8434|  5.02k|    }
  ------------------
 8479|  5.02k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 5.65k]
  ------------------
 8480|  5.02k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  5.02k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  5.02k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  5.02k|    }                                                           \
  |  | 8432|  5.02k|    else {                                                      \
  |  | 8433|  5.02k|        return vis(monostate_val);                              \
  |  | 8434|  5.02k|    }
  ------------------
 8481|  5.65k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 628, False: 5.02k]
  ------------------
 8482|  5.65k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  5.65k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  5.65k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  5.65k|    }                                                           \
  |  | 8432|  5.65k|    else {                                                      \
  |  | 8433|  5.65k|        return vis(monostate_val);                              \
  |  | 8434|  5.65k|    }
  ------------------
 8483|  5.65k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 5.65k]
  ------------------
 8484|  5.65k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  5.65k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  5.65k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  5.65k|    }                                                           \
  |  | 8432|  5.65k|    else {                                                      \
  |  | 8433|  5.65k|        return vis(monostate_val);                              \
  |  | 8434|  5.65k|    }
  ------------------
 8485|  5.65k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 5.65k]
  ------------------
 8486|  5.65k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  5.65k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  5.65k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  5.65k|    }                                                           \
  |  | 8432|  5.65k|    else {                                                      \
  |  | 8433|  5.65k|        return vis(monostate_val);                              \
  |  | 8434|  5.65k|    }
  ------------------
 8487|       |
 8488|  5.65k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 5.65k]
  ------------------
 8489|  5.65k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  5.65k|            return vis(
 8491|  5.65k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 5.65k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 5.65k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  5.65k|            SCN_CLANG_POP
 8506|  5.65k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.98k|    {
 1837|  1.98k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.98k|                                            std::forward<F>(f));
 1839|  1.98k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.98k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.98k|    else {
 1333|  1.98k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.98k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.98k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.88k, False: 102]
  |  |  ------------------
  ------------------
 1335|  1.98k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.98k|                   : result(unexpect,
 1337|    102|                            trivial_invoke(std::forward<F>(f),
 1338|    102|                                           std::forward<Exp>(exp).error()));
 1339|  1.98k|    }
 1340|  1.98k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|    102|        : base(unexpect, std::forward<Args>(args)...),
 1484|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    102|    {
 1486|    102|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.88k|    {
 1663|  1.88k|        return std::move(value());
 1664|  1.88k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|  76.2k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|  76.2k|    {
 5555|  76.2k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8065|  76.2k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  76.2k|    static_cast<    \
  |  |  929|  76.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  76.2k|    static_cast<    \
  |  |  929|  76.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|  76.2k|    {
 8067|  76.2k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|  76.2k|{
 7055|  76.2k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|  76.2k|    handler.check_args_exhausted();
 7057|  76.2k|    return handler.get_error();
 7058|  76.2k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|  76.2k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|  76.2k|    auto begin = format.data();
 7024|  76.2k|    auto it = begin;
 7025|  76.2k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   155k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 148k, False: 6.60k]
  ------------------
 7028|   148k|        const auto ch = *it++;
 7029|   148k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 80.2k, False: 68.5k]
  ------------------
 7030|  80.2k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|  80.2k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|  80.2k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 68.9k, False: 11.3k]
  ------------------
 7034|  68.9k|                return;
 7035|  68.9k|            }
 7036|  80.2k|        }
 7037|  68.5k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 1.91k, False: 66.6k]
  ------------------
 7038|  1.91k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  3.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 750, False: 1.16k]
  |  |  |  Branch (859:45): [True: 228, False: 1.68k]
  |  |  |  Branch (859:45): [True: 522, False: 1.16k]
  |  |  ------------------
  ------------------
 7039|    750|                handler.on_error("Unmatched '}' in format string");
 7040|    750|                return;
 7041|    750|            }
 7042|       |
 7043|  1.16k|            handler.on_literal_text(begin, it);
 7044|  1.16k|            begin = ++it;
 7045|  1.16k|        }
 7046|   148k|    }
 7047|       |
 7048|  6.60k|    handler.on_literal_text(begin, end);
 7049|  6.60k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6952|  80.2k|{
 6953|  80.2k|    struct id_adapter {
 6954|  80.2k|        constexpr void operator()()
 6955|  80.2k|        {
 6956|  80.2k|            arg_id = handler.on_arg_id();
 6957|  80.2k|        }
 6958|  80.2k|        constexpr void operator()(std::size_t id)
 6959|  80.2k|        {
 6960|  80.2k|            arg_id = handler.on_arg_id(id);
 6961|  80.2k|        }
 6962|       |
 6963|  80.2k|        constexpr void on_error(const char* msg)
 6964|  80.2k|        {
 6965|  80.2k|            SCN_UNLIKELY_ATTR
 6966|  80.2k|            handler.on_error(msg);
 6967|  80.2k|        }
 6968|       |
 6969|  80.2k|        Handler& handler;
 6970|  80.2k|        std::size_t arg_id;
 6971|  80.2k|    };
 6972|       |
 6973|  80.2k|    ++begin;
 6974|  80.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  80.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 122, False: 80.1k]
  |  |  ------------------
  ------------------
 6975|    122|        handler.on_error("Unexpected end of replacement field");
 6976|    122|        return begin;
 6977|    122|    }
 6978|       |
 6979|  80.1k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 5.62k, False: 74.5k]
  ------------------
 6980|  5.62k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|  5.62k|    }
 6982|  74.5k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 5.15k, False: 69.3k]
  ------------------
 6983|  5.15k|        handler.on_literal_text(begin, begin + 1);
 6984|  5.15k|    }
 6985|  69.3k|    else {
 6986|  69.3k|        auto adapter = id_adapter{handler, 0};
 6987|  69.3k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|  69.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  69.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 69.2k]
  |  |  ------------------
  ------------------
 6990|    110|            handler.on_error("Missing '}' in format string");
 6991|    110|            return begin;
 6992|    110|        }
 6993|       |
 6994|  69.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 140, False: 69.1k]
  ------------------
 6995|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|    140|        }
 6997|  69.1k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 42.4k, False: 26.7k]
  ------------------
 6998|  42.4k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  42.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 42.3k]
  |  |  ------------------
  ------------------
 6999|     74|                handler.on_error("Unexpected end of replacement field");
 7000|     74|                return begin;
 7001|     74|            }
 7002|  42.3k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|  42.3k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  84.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.83k, False: 39.4k]
  |  |  |  Branch (859:45): [True: 0, False: 42.3k]
  |  |  |  Branch (859:45): [True: 2.83k, False: 39.4k]
  |  |  ------------------
  ------------------
 7004|  2.83k|                handler.on_error("Unknown format specifier");
 7005|  2.83k|                return begin;
 7006|  2.83k|            }
 7007|  42.3k|        }
 7008|  26.7k|        else {
 7009|  26.7k|            SCN_UNLIKELY_ATTR
 7010|  26.7k|            handler.on_error("Missing '}' in format string");
 7011|  26.7k|            return begin;
 7012|  26.7k|        }
 7013|  69.2k|    }
 7014|  50.4k|    return begin + 1;
 7015|  80.1k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8049|  48.0k|    {
 8050|  48.0k|        return m_args.get(id);
 8051|  48.0k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8054|  5.76k|    {
 8055|  5.76k|        return m_args;
 8056|  5.76k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8059|  44.9k|    {
 8060|  44.9k|        return m_locale;
 8061|  44.9k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|  46.5k|    {
 5576|  46.5k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  46.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 46.4k]
  |  |  ------------------
  ------------------
 5577|     42|            on_error(
 5578|     42|                "Cannot switch from manual to automatic argument indexing");
 5579|     42|            return 0;
 5580|     42|        }
 5581|       |
 5582|  46.4k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  46.4k|        do_check_arg_id(id);
 5584|  46.4k|        return id;
 5585|  46.5k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5599|    112|    {
 5600|    112|        return detail::handle_error(
 5601|    112|            scan_error{scan_error::invalid_format_string, msg});
 5602|    112|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|  48.0k|{
 6064|  48.0k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  48.0k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  48.0k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|  69.3k|{
 6454|  69.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  69.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|  69.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 69.3k, False: 0]
  |  Branch (6455:26): [True: 28.5k, False: 40.8k]
  ------------------
 6456|  28.5k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|  28.5k|    }
 6458|       |
 6459|  40.8k|    handler();
 6460|  40.8k|    return begin;
 6461|  69.3k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6423|  28.5k|{
 6424|  28.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  28.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6425|       |
 6426|  28.5k|    CharT c = *begin;
 6427|  28.5k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6427:9): [True: 26.6k, False: 1.90k]
  |  Branch (6427:27): [True: 58, False: 1.84k]
  ------------------
 6428|  26.6k|        handler.on_error("Invalid argument ID");
 6429|  26.6k|        return begin;
 6430|  26.6k|    }
 6431|       |
 6432|  1.84k|    int idx = 0;
 6433|  1.84k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6433:9): [True: 306, False: 1.53k]
  ------------------
 6434|    306|        idx = parse_simple_int(begin, end);
 6435|    306|    }
 6436|  1.53k|    else {
 6437|  1.53k|        ++begin;
 6438|  1.53k|    }
 6439|       |
 6440|  1.84k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6440:9): [True: 110, False: 1.73k]
  |  Branch (6440:26): [True: 1.59k, False: 140]
  |  Branch (6440:50): [True: 78, False: 1.51k]
  ------------------
 6441|    188|        handler.on_error("Invalid argument ID");
 6442|    188|        return begin;
 6443|    188|    }
 6444|  1.65k|    handler(idx);
 6445|       |
 6446|  1.65k|    return begin;
 6447|  1.84k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6964|  26.8k|        {
 6965|  26.8k|            SCN_UNLIKELY_ATTR
 6966|  26.8k|            handler.on_error(msg);
 6967|  26.8k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6402|  9.34k|{
 6403|  9.34k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|  9.34k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  9.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|       |
 6406|  9.34k|    unsigned long long value = 0;
 6407|  22.6k|    do {
 6408|  22.6k|        value *= 10;
 6409|  22.6k|        value += static_cast<unsigned long long>(*begin - '0');
 6410|  22.6k|        if (value >
  ------------------
  |  Branch (6410:13): [True: 116, False: 22.5k]
  ------------------
 6411|  22.6k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6412|    116|            return -1;
 6413|    116|        }
 6414|  22.5k|        ++begin;
 6415|  22.5k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6415:14): [True: 22.2k, False: 294]
  |  Branch (6415:30): [True: 21.3k, False: 888]
  |  Branch (6415:47): [True: 13.3k, False: 8.04k]
  ------------------
 6416|  9.22k|    return static_cast<int>(value);
 6417|  9.34k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6959|  1.65k|        {
 6960|  1.65k|            arg_id = handler.on_arg_id(id);
 6961|  1.65k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5588|  1.65k|    {
 5589|  1.65k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  1.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 1.58k]
  |  |  ------------------
  ------------------
 5590|     70|            on_error(
 5591|     70|                "Cannot switch from manual to automatic argument indexing");
 5592|     70|            return;
 5593|     70|        }
 5594|  1.58k|        m_next_arg_id = -1;
 5595|  1.58k|        do_check_arg_id(id);
 5596|  1.58k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|  40.8k|        {
 6956|  40.8k|            arg_id = handler.on_arg_id();
 6957|  40.8k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|  84.6k|    {
 5262|  84.6k|        return m_type;
 5263|  84.6k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|  39.2k|    {
 5571|  39.2k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  39.2k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|  81.5k|    {
 5560|  81.5k|        return m_format.data();
 5561|  81.5k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|  42.3k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|  42.3k|    {
 7133|  42.3k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  42.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|  42.3k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6868|  42.3k|{
 6869|  42.3k|    auto do_presentation = [&]() -> const CharT* {
 6870|  42.3k|        if (*begin == CharT{'['}) {
 6871|  42.3k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  42.3k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|  42.3k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|  42.3k|                return begin;
 6877|  42.3k|            }
 6878|  42.3k|            handler.on_character_set_string(set);
 6879|  42.3k|            return begin;
 6880|  42.3k|        }
 6881|  42.3k|        if (*begin == CharT{'/'}) {
 6882|  42.3k|            return parse_presentation_regex(begin, end, handler);
 6883|  42.3k|        }
 6884|  42.3k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  42.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|  42.3k|            handler.on_error("Invalid type specifier in format string");
 6887|  42.3k|            return begin;
 6888|  42.3k|        }
 6889|  42.3k|        handler.on_type(type);
 6890|  42.3k|        return begin;
 6891|  42.3k|    };
 6892|       |
 6893|  42.3k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 41.2k, False: 1.07k]
  |  Branch (6893:28): [True: 2.23k, False: 39.0k]
  ------------------
 6894|  42.3k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 878, False: 1.35k]
  |  Branch (6894:36): [True: 826, False: 52]
  ------------------
 6895|    826|        return do_presentation();
 6896|    826|    }
 6897|       |
 6898|  41.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.5k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  41.5k|    begin = parse_align(begin, end, handler);
 6904|  41.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 41.3k]
  |  |  ------------------
  ------------------
 6905|    126|        handler.on_error("Unexpected end of format string");
 6906|    126|        return begin;
 6907|    126|    }
 6908|       |
 6909|  41.3k|    begin = parse_width(begin, end, handler);
 6910|  41.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 41.2k]
  |  |  ------------------
  ------------------
 6911|    102|        handler.on_error("Unexpected end of format string");
 6912|    102|        return begin;
 6913|    102|    }
 6914|       |
 6915|  41.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 5.94k, False: 35.3k]
  ------------------
 6916|  5.94k|        ++begin;
 6917|  5.94k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  5.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 5.91k]
  |  |  ------------------
  ------------------
 6918|     34|            handler.on_error("Unexpected end of format string");
 6919|     34|            return begin;
 6920|     34|        }
 6921|  5.91k|        begin = parse_precision(begin, end, handler);
 6922|  5.91k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  5.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 5.79k]
  |  |  ------------------
  ------------------
 6923|    114|            handler.on_error("Unexpected end of format string");
 6924|    114|            return begin;
 6925|    114|        }
 6926|  5.91k|    }
 6927|       |
 6928|  41.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 464, False: 40.6k]
  ------------------
 6929|    464|        handler.on_localized();
 6930|    464|        ++begin;
 6931|    464|    }
 6932|  41.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 41.0k]
  |  |  ------------------
  ------------------
 6933|     52|        handler.on_error("Unexpected end of format string");
 6934|     52|        return begin;
 6935|     52|    }
 6936|       |
 6937|  41.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 41.0k, False: 0]
  |  Branch (6937:25): [True: 36.6k, False: 4.46k]
  ------------------
 6938|  36.6k|        do_presentation();
 6939|  36.6k|    }
 6940|  41.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.95k, False: 39.1k]
  |  |  ------------------
  ------------------
 6941|  1.95k|        handler.on_error("Unexpected end of format string");
 6942|  1.95k|        return begin;
 6943|  1.95k|    }
 6944|       |
 6945|  39.1k|    return begin;
 6946|  41.0k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6517|  2.23k|{
 6518|  2.23k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 824, False: 1.41k]
  |  Branch (6518:33): [True: 772, False: 52]
  ------------------
 6519|  2.23k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 268, False: 1.19k]
  |  Branch (6519:33): [True: 106, False: 162]
  ------------------
 6520|  2.23k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|  37.4k|    auto do_presentation = [&]() -> const CharT* {
 6870|  37.4k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 10.0k, False: 27.3k]
  ------------------
 6871|  10.0k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  10.0k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 810, False: 9.27k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|    810|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|    810|                return begin;
 6877|    810|            }
 6878|  9.27k|            handler.on_character_set_string(set);
 6879|  9.27k|            return begin;
 6880|  10.0k|        }
 6881|  27.3k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 22.9k, False: 4.42k]
  ------------------
 6882|  22.9k|            return parse_presentation_regex(begin, end, handler);
 6883|  22.9k|        }
 6884|  4.42k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  4.42k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 458, False: 3.96k]
  |  |  ------------------
  ------------------
 6886|    458|            handler.on_error("Invalid type specifier in format string");
 6887|    458|            return begin;
 6888|    458|        }
 6889|  3.96k|        handler.on_type(type);
 6890|  3.96k|        return begin;
 6891|  4.42k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6707|  10.0k|{
 6708|  10.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  10.0k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  10.0k|    auto start = begin;
 6712|  10.0k|    ++begin;
 6713|       |
 6714|  10.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 10.0k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|     42|        return {};
 6719|     42|    }
 6720|  10.0k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 1.83k, False: 8.21k]
  ------------------
 6721|  1.83k|        handler.on_charset_inverted();
 6722|  1.83k|        ++begin;
 6723|  1.83k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.79k]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|     34|            return {};
 6728|     34|        }
 6729|  1.79k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 52, False: 1.74k]
  ------------------
 6730|     52|            handler.on_charset_single(char32_t{']'});
 6731|     52|            ++begin;
 6732|     52|        }
 6733|  1.79k|    }
 6734|  8.21k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 34, False: 8.17k]
  ------------------
 6735|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|     34|    }
 6737|       |
 6738|  1.01M|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 1.01M, False: 484]
  ------------------
 6739|  1.01M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 216, False: 1.01M]
  |  |  ------------------
  ------------------
 6740|    216|            break;
 6741|    216|        }
 6742|       |
 6743|  1.01M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 9.27k, False: 1.00M]
  ------------------
 6744|  9.27k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  9.27k|        }
 6746|       |
 6747|  1.00M|        parse_presentation_set_literal(begin, end, handler);
 6748|  1.00M|    }
 6749|       |
 6750|    700|    SCN_UNLIKELY_ATTR
 6751|    700|    handler.on_error("Invalid [character set] specifier in format string");
 6752|    700|    return {};
 6753|  9.97k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6671|  1.00M|{
 6672|  1.00M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  1.00M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  1.00M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 94, False: 1.00M]
  |  |  ------------------
  ------------------
 6676|     94|        return;
 6677|     94|    }
 6678|       |
 6679|  1.00M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 1.00M, False: 188]
  |  Branch (6679:25): [True: 8.31k, False: 995k]
  |  Branch (6679:49): [True: 8.27k, False: 34]
  ------------------
 6680|  1.00M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 8.04k, False: 232]
  ------------------
 6681|  8.04k|        ++begin;
 6682|       |
 6683|  8.04k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  8.04k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  8.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 7.97k]
  |  |  ------------------
  ------------------
 6685|     70|            return;
 6686|     70|        }
 6687|       |
 6688|  7.97k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  7.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 7.94k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|     34|            return;
 6693|     34|        }
 6694|       |
 6695|  7.94k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  7.94k|        return;
 6697|  7.97k|    }
 6698|       |
 6699|   995k|    handler.on_charset_single(cp_first);
 6700|   995k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6647|  1.01M|{
 6648|  1.01M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  1.01M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  1.01M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  2.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 1.01M]
  |  |  |  Branch (859:45): [True: 70, False: 1.01M]
  |  |  |  Branch (859:45): [True: 26, False: 1.01M]
  |  |  ------------------
  ------------------
 6652|     96|        handler.on_error("Invalid encoding in format string");
 6653|     96|        return invalid_code_point;
 6654|     96|    }
 6655|       |
 6656|  1.01M|    const auto cp =
 6657|  1.01M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  1.01M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 1.01M]
  |  |  ------------------
  ------------------
 6659|     68|        handler.on_error("Invalid encoding in format string");
 6660|     68|        return invalid_code_point;
 6661|     68|    }
 6662|       |
 6663|  1.01M|    begin += len;
 6664|  1.01M|    return cp;
 6665|  1.01M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6356|  9.27k|    {
 6357|  9.27k|        m_specs.charset_string_data = fmt.data();
 6358|  9.27k|        m_specs.charset_string_size = fmt.size();
 6359|  9.27k|        on_type(presentation_type::string_set);
 6360|  9.27k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6759|  22.9k|{
 6760|  22.9k|#if !SCN_DISABLE_REGEX
 6761|  22.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  22.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6762|  22.9k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  22.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6763|       |
 6764|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 6765|       |                  std::is_same_v<CharT, wchar_t>) {
 6766|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 6767|       |        return begin;
 6768|       |    }
 6769|       |
 6770|  22.9k|    auto start = begin;
 6771|  22.9k|    ++begin;
 6772|       |
 6773|  22.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 22.8k]
  |  |  ------------------
  ------------------
 6774|     34|        handler.on_error("Unexpected end of regex in format string");
 6775|     34|        return begin;
 6776|     34|    }
 6777|       |
 6778|  22.8k|    handler.on_type(presentation_type::regex);
 6779|  2.04M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6779:12): [True: 2.04M, False: 176]
  ------------------
 6780|  2.04M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6780:13): [True: 28.5k, False: 2.01M]
  ------------------
 6781|  28.5k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6781:17): [True: 22.7k, False: 5.81k]
  ------------------
 6782|  22.7k|                break;
 6783|  22.7k|            }
 6784|  5.81k|            else {
 6785|  5.81k|                handler.on_type(presentation_type::regex_escaped);
 6786|  5.81k|            }
 6787|  28.5k|        }
 6788|  2.04M|    }
 6789|  22.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 176, False: 22.7k]
  |  |  ------------------
  ------------------
 6790|    176|        handler.on_error("Unexpected end of regex in format string");
 6791|    176|        return begin;
 6792|    176|    }
 6793|       |
 6794|  22.7k|    auto regex_end = begin;
 6795|  22.7k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6796|  22.7k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 22.6k]
  |  |  ------------------
  ------------------
 6797|     34|        handler.on_error("Invalid (empty) regex in format string");
 6798|     34|        return begin;
 6799|     34|    }
 6800|  22.6k|    handler.on_regex_pattern(regex_pattern);
 6801|  22.6k|    ++begin;
 6802|       |
 6803|  22.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 22.6k]
  |  |  ------------------
  ------------------
 6804|     34|        handler.on_error("Unexpected end of regex in format string");
 6805|     34|        return begin;
 6806|     34|    }
 6807|       |
 6808|  22.6k|    regex_flags flags{regex_flags::none};
 6809|  22.6k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6810|  22.6k|        {{'m', regex_flags::multiline},
 6811|  22.6k|         {'s', regex_flags::singleline},
 6812|  22.6k|         {'i', regex_flags::nocase},
 6813|  22.6k|         {'n', regex_flags::nocapture}}};
 6814|  25.1k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6814:12): [True: 25.0k, False: 58]
  ------------------
 6815|  25.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6815:13): [True: 22.4k, False: 2.56k]
  ------------------
 6816|  22.4k|            break;
 6817|  22.4k|        }
 6818|  2.56k|        bool found_flag = false;
 6819|  6.47k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6819:24): [True: 6.47k, False: 80]
  ------------------
 6820|  6.47k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6820:17): [True: 3.98k, False: 2.48k]
  ------------------
 6821|  3.98k|                continue;
 6822|  3.98k|            }
 6823|  2.48k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6823:17): [True: 34, False: 2.45k]
  ------------------
 6824|     34|                handler.on_error("Flag set multiple times in regex");
 6825|     34|                return begin;
 6826|     34|            }
 6827|  2.45k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6828|  2.45k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6828:17): [True: 48, False: 2.40k]
  ------------------
 6829|       |                // clang-format off
 6830|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6831|       |                // clang-format on
 6832|     48|            }
 6833|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6834|       |            if (*begin == CharT{'m'}) {
 6835|       |                // clang-format off
 6836|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6837|       |                // clang-format on
 6838|       |            }
 6839|       |#endif
 6840|  2.45k|#endif
 6841|  2.45k|            flags |= flag.second;
 6842|  2.45k|            found_flag = true;
 6843|  2.45k|            break;
 6844|  2.48k|        }
 6845|  2.53k|        if (!found_flag) {
  ------------------
  |  Branch (6845:13): [True: 80, False: 2.45k]
  ------------------
 6846|     80|            handler.on_error("Invalid flag in regex");
 6847|     80|            return begin;
 6848|     80|        }
 6849|  2.53k|    }
 6850|  22.5k|    handler.on_regex_flags(flags);
 6851|       |
 6852|  22.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 22.4k]
  |  |  ------------------
  ------------------
 6853|     58|        handler.on_error("Unexpected end of regex in format string");
 6854|     58|        return begin;
 6855|     58|    }
 6856|       |
 6857|  22.4k|    return begin;
 6858|       |#else
 6859|       |    handler.on_error("Regular expression support is disabled");
 6860|       |    return {};
 6861|       |#endif
 6862|  22.5k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6364|  22.6k|    {
 6365|  22.6k|        m_specs.charset_string_data = pattern.data();
 6366|  22.6k|        m_specs.charset_string_size = pattern.size();
 6367|  22.6k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6465|  4.42k|{
 6466|  4.42k|    switch (type) {
 6467|    106|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 106, False: 4.32k]
  ------------------
 6468|    158|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 52, False: 4.37k]
  ------------------
 6469|    158|            return presentation_type::int_binary;
 6470|    108|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 108, False: 4.31k]
  ------------------
 6471|    108|            return presentation_type::int_decimal;
 6472|    178|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 178, False: 4.24k]
  ------------------
 6473|    178|            return presentation_type::int_generic;
 6474|     70|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 70, False: 4.35k]
  ------------------
 6475|     70|            return presentation_type::int_unsigned_decimal;
 6476|    196|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 196, False: 4.23k]
  ------------------
 6477|    196|            return presentation_type::int_octal;
 6478|    116|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 116, False: 4.31k]
  ------------------
 6479|    168|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 52, False: 4.37k]
  ------------------
 6480|    168|            return presentation_type::int_hex;
 6481|     34|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 34, False: 4.39k]
  ------------------
 6482|     68|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 34, False: 4.39k]
  ------------------
 6483|     68|            return presentation_type::int_arbitrary_base;
 6484|    106|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 106, False: 4.32k]
  ------------------
 6485|    194|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 88, False: 4.33k]
  ------------------
 6486|    194|            return presentation_type::float_hex;
 6487|     70|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 70, False: 4.35k]
  ------------------
 6488|    140|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 70, False: 4.35k]
  ------------------
 6489|    140|            return presentation_type::float_scientific;
 6490|    214|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 214, False: 4.21k]
  ------------------
 6491|    320|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 106, False: 4.32k]
  ------------------
 6492|    320|            return presentation_type::float_fixed;
 6493|    132|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 132, False: 4.29k]
  ------------------
 6494|    190|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 58, False: 4.36k]
  ------------------
 6495|    190|            return presentation_type::float_general;
 6496|  1.74k|        case 's':
  ------------------
  |  Branch (6496:9): [True: 1.74k, False: 2.68k]
  ------------------
 6497|  1.74k|            return presentation_type::string;
 6498|    322|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 322, False: 4.10k]
  ------------------
 6499|    322|            return presentation_type::character;
 6500|     34|        case '?':
  ------------------
  |  Branch (6500:9): [True: 34, False: 4.39k]
  ------------------
 6501|     34|            return presentation_type::escaped_character;
 6502|     78|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 78, False: 4.34k]
  ------------------
 6503|     78|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 4.42k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 4.42k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|    458|        default:
  ------------------
  |  Branch (6510:9): [True: 458, False: 3.96k]
  ------------------
 6511|    458|            return presentation_type::none;
 6512|  4.42k|    }
 6513|  4.42k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6542|  41.5k|{
 6543|  41.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  41.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  41.5k|    auto check_align = [](wchar_t ch) {
 6546|  41.5k|        switch (ch) {
 6547|  41.5k|            case L'<':
 6548|  41.5k|                return align_type::left;
 6549|  41.5k|            case L'>':
 6550|  41.5k|                return align_type::right;
 6551|  41.5k|            case L'^':
 6552|  41.5k|                return align_type::center;
 6553|  41.5k|            default:
 6554|  41.5k|                return align_type::none;
 6555|  41.5k|        }
 6556|  41.5k|    };
 6557|       |
 6558|  41.5k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  41.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  82.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 41.4k]
  |  |  |  Branch (859:45): [True: 38, False: 41.4k]
  |  |  |  Branch (859:45): [True: 4, False: 41.4k]
  |  |  ------------------
  ------------------
 6560|  41.5k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|     42|        handler.on_error("Invalid encoding in fill character");
 6562|     42|        return begin;
 6563|     42|    }
 6564|       |
 6565|  41.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  41.4k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  41.4k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  41.4k|    const auto begin_before_fill = begin;
 6570|  41.4k|    begin += potential_fill_len;
 6571|       |
 6572|  41.4k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 1.03k, False: 40.4k]
  ------------------
 6573|  1.03k|        return begin_before_fill;
 6574|  1.03k|    }
 6575|       |
 6576|  40.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  40.4k|    const auto begin_after_fill = begin;
 6578|  40.4k|    ++begin;
 6579|       |
 6580|  40.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 39.1k, False: 1.30k]
  ------------------
 6581|  39.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  39.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60, False: 39.0k]
  |  |  ------------------
  ------------------
 6582|     60|            handler.on_error("Invalid fill character '{' in format string");
 6583|     60|            return begin;
 6584|     60|        }
 6585|  39.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 7.53k, False: 31.5k]
  ------------------
 6586|  7.53k|            return begin_before_fill;
 6587|  7.53k|        }
 6588|  39.0k|    }
 6589|       |
 6590|  32.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 30.2k, False: 2.54k]
  ------------------
 6591|  30.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 2.30k, False: 27.9k]
  ------------------
 6592|  2.30k|            handler.on_align(potential_align_on_fill);
 6593|  2.30k|            return begin_after_fill;
 6594|  2.30k|        }
 6595|  27.9k|        return begin_before_fill;
 6596|  30.2k|    }
 6597|       |
 6598|  2.54k|    handler.on_fill(potential_fill);
 6599|  2.54k|    handler.on_align(potential_align_after_fill);
 6600|  2.54k|    return begin;
 6601|  32.8k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6524|  41.5k|{
 6525|  41.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  41.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|       |    if constexpr (sizeof(CharT) != 1) {
 6527|       |        return 1;
 6528|       |    }
 6529|  41.5k|    else {
 6530|  41.5k|        const auto lengths =
 6531|  41.5k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|  41.5k|            "\3\4";
 6533|  41.5k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|  41.5k|        return len;
 6535|  41.5k|    }
 6536|  41.5k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|  81.8k|    auto check_align = [](wchar_t ch) {
 6546|  81.8k|        switch (ch) {
 6547|  1.25k|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 1.25k, False: 80.6k]
  ------------------
 6548|  1.25k|                return align_type::left;
 6549|    814|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 814, False: 81.0k]
  ------------------
 6550|    814|                return align_type::right;
 6551|  3.77k|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 3.77k, False: 78.1k]
  ------------------
 6552|  3.77k|                return align_type::center;
 6553|  76.0k|            default:
  ------------------
  |  Branch (6553:13): [True: 76.0k, False: 5.84k]
  ------------------
 6554|  76.0k|                return align_type::none;
 6555|  81.8k|        }
 6556|  81.8k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6277|  2.54k|    {
 6278|  2.54k|        m_specs.fill = fill;
 6279|  2.54k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6158|  2.54k|    {
 6159|  2.54k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  2.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6160|  2.54k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  2.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6161|  2.54k|        if constexpr (sizeof(CharT) == 1) {
 6162|  7.18k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6162:32): [True: 4.63k, False: 2.54k]
  ------------------
 6163|  4.63k|                SCN_GCC_PUSH
 6164|  4.63k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6165|  4.63k|                m_data[i] = s[i];
 6166|  4.63k|                SCN_GCC_POP
 6167|  4.63k|            }
 6168|  2.54k|            m_size = static_cast<unsigned char>(s.size());
 6169|       |        }
 6170|       |        else if constexpr (sizeof(CharT) == 2) {
 6171|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6172|       |            m_data[1] =
 6173|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6174|       |            if (s.size() == 1) {
 6175|       |                return;
 6176|       |            }
 6177|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6178|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6179|       |        }
 6180|       |        else {
 6181|       |            const auto front = static_cast<unsigned>(s.front());
 6182|       |            m_data[0] = static_cast<char>(front);
 6183|       |            m_data[1] = static_cast<char>(front >> 8);
 6184|       |            m_data[2] = static_cast<char>(front >> 16);
 6185|       |            m_data[3] = static_cast<char>(front >> 24);
 6186|       |        }
 6187|  2.54k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6607|  41.3k|{
 6608|  41.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  41.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  41.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 13.1k, False: 28.2k]
  |  Branch (6610:33): [True: 3.21k, False: 9.93k]
  ------------------
 6611|  3.21k|        int width = parse_simple_int(begin, end);
 6612|  3.21k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  3.21k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.17k, False: 34]
  |  |  ------------------
  ------------------
 6613|  3.17k|            handler.on_width(width);
 6614|  3.17k|        }
 6615|     34|        else {
 6616|     34|            handler.on_error("Invalid field width");
 6617|     34|            return begin;
 6618|     34|        }
 6619|  3.21k|    }
 6620|  41.3k|    return begin;
 6621|  41.3k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6627|  5.91k|{
 6628|  5.91k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6629|       |
 6630|  5.91k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6630:9): [True: 5.87k, False: 34]
  |  Branch (6630:33): [True: 5.82k, False: 52]
  ------------------
 6631|  5.82k|        int prec = parse_simple_int(begin, end);
 6632|  5.82k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  5.82k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.77k, False: 48]
  |  |  ------------------
  ------------------
 6633|  5.77k|            handler.on_precision(prec);
 6634|  5.77k|        }
 6635|     48|        else {
 6636|     48|            handler.on_error("Invalid field precision");
 6637|     48|            return begin;
 6638|     48|        }
 6639|  5.82k|    }
 6640|  5.86k|    return begin;
 6641|  5.91k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7137|    464|    {
 7138|    464|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|    464|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 418, False: 46]
  ------------------
 7140|    464|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 372, False: 46]
  ------------------
 7141|    464|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 326, False: 46]
  ------------------
 7142|    464|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 280, False: 46]
  ------------------
 7143|    280|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|    280|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|    280|        }
 7148|       |
 7149|    184|        Handler::on_localized();
 7150|    184|    }
_ZN3scn2v36detail12specs_setter12on_localizedILb1EEEvv:
 6282|    368|    {
 6283|    368|        if constexpr (!SCN_DISABLE_LOCALE) {
 6284|    368|            m_specs.localized = true;
 6285|       |        }
 6286|       |        else {
 6287|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6288|       |        }
 6289|    368|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  39.1k|{
 8428|  39.1k|#define SCN_VISIT(Type)                                         \
 8429|  39.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  39.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  39.1k|    }                                                           \
 8432|  39.1k|    else {                                                      \
 8433|  39.1k|        return vis(monostate_val);                              \
 8434|  39.1k|    }
 8435|       |
 8436|  39.1k|    monostate monostate_val{};
 8437|       |
 8438|  39.1k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 39.1k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 39.1k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|  4.36k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 4.36k, False: 34.7k]
  ------------------
 8444|  4.36k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  4.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.36k|    }                                                           \
  |  | 8432|  4.36k|    else {                                                      \
  |  | 8433|  4.36k|        return vis(monostate_val);                              \
  |  | 8434|  4.36k|    }
  ------------------
 8445|  4.36k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 39.1k]
  ------------------
 8446|  4.36k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  4.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.36k|    }                                                           \
  |  | 8432|  4.36k|    else {                                                      \
  |  | 8433|  4.36k|        return vis(monostate_val);                              \
  |  | 8434|  4.36k|    }
  ------------------
 8447|  4.36k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 39.1k]
  ------------------
 8448|  4.36k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  4.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.36k|    }                                                           \
  |  | 8432|  4.36k|    else {                                                      \
  |  | 8433|  4.36k|        return vis(monostate_val);                              \
  |  | 8434|  4.36k|    }
  ------------------
 8449|  4.36k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 39.1k]
  ------------------
 8450|  4.36k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  4.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.36k|    }                                                           \
  |  | 8432|  4.36k|    else {                                                      \
  |  | 8433|  4.36k|        return vis(monostate_val);                              \
  |  | 8434|  4.36k|    }
  ------------------
 8451|  4.36k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 39.1k]
  ------------------
 8452|  4.36k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  4.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.36k|    }                                                           \
  |  | 8432|  4.36k|    else {                                                      \
  |  | 8433|  4.36k|        return vis(monostate_val);                              \
  |  | 8434|  4.36k|    }
  ------------------
 8453|  8.73k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 4.36k, False: 34.7k]
  ------------------
 8454|  8.73k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  8.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  8.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  8.73k|    }                                                           \
  |  | 8432|  8.73k|    else {                                                      \
  |  | 8433|  8.73k|        return vis(monostate_val);                              \
  |  | 8434|  8.73k|    }
  ------------------
 8455|  8.73k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 39.1k]
  ------------------
 8456|  8.73k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  8.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  8.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  8.73k|    }                                                           \
  |  | 8432|  8.73k|    else {                                                      \
  |  | 8433|  8.73k|        return vis(monostate_val);                              \
  |  | 8434|  8.73k|    }
  ------------------
 8457|  8.73k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 39.1k]
  ------------------
 8458|  8.73k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  8.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  8.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  8.73k|    }                                                           \
  |  | 8432|  8.73k|    else {                                                      \
  |  | 8433|  8.73k|        return vis(monostate_val);                              \
  |  | 8434|  8.73k|    }
  ------------------
 8459|  13.0k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 4.33k, False: 34.7k]
  ------------------
 8460|  13.0k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  13.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  13.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  13.0k|    }                                                           \
  |  | 8432|  13.0k|    else {                                                      \
  |  | 8433|  13.0k|        return vis(monostate_val);                              \
  |  | 8434|  13.0k|    }
  ------------------
 8461|  17.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 4.36k, False: 34.7k]
  ------------------
 8462|  17.4k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  17.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.4k|    }                                                           \
  |  | 8432|  17.4k|    else {                                                      \
  |  | 8433|  17.4k|        return vis(monostate_val);                              \
  |  | 8434|  17.4k|    }
  ------------------
 8463|  21.7k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 4.33k, False: 34.7k]
  ------------------
 8464|  21.7k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  21.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  21.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  21.7k|    }                                                           \
  |  | 8432|  21.7k|    else {                                                      \
  |  | 8433|  21.7k|        return vis(monostate_val);                              \
  |  | 8434|  21.7k|    }
  ------------------
 8465|  21.7k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 39.1k]
  ------------------
 8466|  21.7k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  21.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  21.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  21.7k|    }                                                           \
  |  | 8432|  21.7k|    else {                                                      \
  |  | 8433|  21.7k|        return vis(monostate_val);                              \
  |  | 8434|  21.7k|    }
  ------------------
 8467|  21.7k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 39.1k]
  ------------------
 8468|  21.7k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  21.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  21.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  21.7k|    }                                                           \
  |  | 8432|  21.7k|    else {                                                      \
  |  | 8433|  21.7k|        return vis(monostate_val);                              \
  |  | 8434|  21.7k|    }
  ------------------
 8469|  21.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 39.1k]
  ------------------
 8470|  21.7k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  21.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  21.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  21.7k|    }                                                           \
  |  | 8432|  21.7k|    else {                                                      \
  |  | 8433|  21.7k|        return vis(monostate_val);                              \
  |  | 8434|  21.7k|    }
  ------------------
 8471|  26.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 4.36k, False: 34.7k]
  ------------------
 8472|  26.1k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8473|  26.1k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 39.1k]
  ------------------
 8474|  26.1k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8475|  30.4k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 4.33k, False: 34.7k]
  ------------------
 8476|  30.4k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  30.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  30.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  30.4k|    }                                                           \
  |  | 8432|  30.4k|    else {                                                      \
  |  | 8433|  30.4k|        return vis(monostate_val);                              \
  |  | 8434|  30.4k|    }
  ------------------
 8477|  34.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 4.33k, False: 34.7k]
  ------------------
 8478|  34.7k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  34.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.7k|    }                                                           \
  |  | 8432|  34.7k|    else {                                                      \
  |  | 8433|  34.7k|        return vis(monostate_val);                              \
  |  | 8434|  34.7k|    }
  ------------------
 8479|  34.7k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 39.1k]
  ------------------
 8480|  34.7k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  34.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.7k|    }                                                           \
  |  | 8432|  34.7k|    else {                                                      \
  |  | 8433|  34.7k|        return vis(monostate_val);                              \
  |  | 8434|  34.7k|    }
  ------------------
 8481|  39.1k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 4.33k, False: 34.7k]
  ------------------
 8482|  39.1k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  39.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  39.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  39.1k|    }                                                           \
  |  | 8432|  39.1k|    else {                                                      \
  |  | 8433|  39.1k|        return vis(monostate_val);                              \
  |  | 8434|  39.1k|    }
  ------------------
 8483|  39.1k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 39.1k]
  ------------------
 8484|  39.1k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  39.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  39.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  39.1k|    }                                                           \
  |  | 8432|  39.1k|    else {                                                      \
  |  | 8433|  39.1k|        return vis(monostate_val);                              \
  |  | 8434|  39.1k|    }
  ------------------
 8485|  39.1k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 39.1k]
  ------------------
 8486|  39.1k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  39.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  39.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  39.1k|    }                                                           \
  |  | 8432|  39.1k|    else {                                                      \
  |  | 8433|  39.1k|        return vis(monostate_val);                              \
  |  | 8434|  39.1k|    }
  ------------------
 8487|       |
 8488|  39.1k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 39.1k]
  ------------------
 8489|  39.1k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  39.1k|            return vis(
 8491|  39.1k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 39.1k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 39.1k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  39.1k|            SCN_CLANG_POP
 8506|  39.1k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3325|  10.4k|    {
 3326|  10.4k|        return m_iterator;
 3327|  10.4k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1427|  1.77k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.77k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.77k|    {
 1430|  1.77k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  1.77k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.77k|    {
  437|  1.77k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.00k|    {
 1177|  2.00k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3329|  6.12k|    {
 3330|  6.12k|        return m_sentinel;
 3331|  6.12k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1473|    226|        : base(unexpect, std::move(e.error())),
 1474|    226|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    226|    {
 1476|    226|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  444|    226|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    226|          m_has_value(false)
  446|    226|    {
  447|    226|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3310|  4.82k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  4.82k|    static_cast<    \
  |  |  929|  4.82k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  4.82k|    static_cast<    \
  |  |  929|  4.82k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  4.82k|    {
 3312|  4.82k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1597|    254|    {
 1598|    254|        return has_value();
 1599|    254|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  3.95k|    {
  485|  3.95k|        return m_has_value;
  486|  3.95k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1652|    202|    {
 1653|    202|        return value();
 1654|    202|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  1.77k|    {
 1627|  1.77k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.77k|        return this->get_value();
 1629|  1.77k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.77k|    {
  451|  1.77k|        return m_value;
  452|  1.77k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  1.74k|    {
 1837|  1.74k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.74k|                                            std::forward<F>(f));
 1839|  1.74k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1322|  1.74k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.74k|    else {
 1333|  1.74k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.74k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.74k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.57k, False: 174]
  |  |  ------------------
  ------------------
 1335|  1.74k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.74k|                   : result(unexpect,
 1337|    174|                            trivial_invoke(std::forward<F>(f),
 1338|    174|                                           std::forward<Exp>(exp).error()));
 1339|  1.74k|    }
 1340|  1.74k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  1.57k|    {
 1663|  1.57k|        return std::move(value());
 1664|  1.57k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.57k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.57k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.57k|    {
 1430|  1.57k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  1.57k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.57k|    {
  437|  1.57k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.74k|    {
 1177|  1.74k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1613|    174|    {
 1614|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    174|        return std::move(this->get_unexpected().error());
 1616|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1483|    174|        : base(unexpect, std::forward<Args>(args)...),
 1484|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    174|    {
 1486|    174|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  444|    174|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    174|          m_has_value(false)
  446|    174|    {
  447|    174|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  1.74k|    {
 1598|  1.74k|        return has_value();
 1599|  1.74k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.49k|    {
  485|  3.49k|        return m_has_value;
  486|  3.49k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1603|    174|    {
 1604|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    174|        return this->get_unexpected().error();
 1606|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  1.57k|    {
 1663|  1.57k|        return std::move(value());
 1664|  1.57k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  1.57k|    {
 1627|  1.57k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.57k|        return this->get_value();
 1629|  1.57k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.57k|    {
  451|  1.57k|        return m_value;
  452|  1.57k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|   152k|    {
 5476|   152k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 152k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   152k|        return static_cast<std::size_t>(m_desc &
 5481|   152k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   152k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|   179k|    {
 5501|   179k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|   179k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|  27.2k|    {
 5444|  27.2k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.2k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  27.2k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 27.2k]
  |  |  ------------------
  ------------------
 5452|     68|            return {};
 5453|     68|        }
 5454|       |
 5455|  27.2k|        const auto t = type(id);
 5456|  27.2k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.10k, False: 26.0k]
  |  |  ------------------
  ------------------
 5457|  1.10k|            return {};
 5458|  1.10k|        }
 5459|       |
 5460|  26.0k|        basic_scan_arg<Context> arg;
 5461|  26.0k|        arg.m_type = t;
 5462|  26.0k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 26.0k, False: 0]
  ------------------
 5463|  26.0k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  26.0k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  26.0k|        return arg;
 5469|  27.2k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|  27.2k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|  27.2k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  27.2k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  27.2k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  27.2k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  27.2k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|  26.0k|    {
 5505|  26.0k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  26.0k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|  51.7k|    {
 5257|  51.7k|        return m_type != detail::arg_type::none_type;
 5258|  51.7k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  4.15k|{
 8428|  4.15k|#define SCN_VISIT(Type)                                         \
 8429|  4.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  4.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  4.15k|    }                                                           \
 8432|  4.15k|    else {                                                      \
 8433|  4.15k|        return vis(monostate_val);                              \
 8434|  4.15k|    }
 8435|       |
 8436|  4.15k|    monostate monostate_val{};
 8437|       |
 8438|  4.15k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 4.15k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 4.15k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|    462|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 462, False: 3.69k]
  ------------------
 8444|    462|            SCN_VISIT(int);
  ------------------
  |  | 8429|    462|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    462|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    462|    }                                                           \
  |  | 8432|    462|    else {                                                      \
  |  | 8433|    462|        return vis(monostate_val);                              \
  |  | 8434|    462|    }
  ------------------
 8445|    462|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 4.15k]
  ------------------
 8446|    462|            SCN_VISIT(long);
  ------------------
  |  | 8429|    462|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    462|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    462|    }                                                           \
  |  | 8432|    462|    else {                                                      \
  |  | 8433|    462|        return vis(monostate_val);                              \
  |  | 8434|    462|    }
  ------------------
 8447|    462|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 4.15k]
  ------------------
 8448|    462|            SCN_VISIT(long long);
  ------------------
  |  | 8429|    462|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    462|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    462|    }                                                           \
  |  | 8432|    462|    else {                                                      \
  |  | 8433|    462|        return vis(monostate_val);                              \
  |  | 8434|    462|    }
  ------------------
 8449|    462|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 4.15k]
  ------------------
 8450|    462|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|    462|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    462|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    462|    }                                                           \
  |  | 8432|    462|    else {                                                      \
  |  | 8433|    462|        return vis(monostate_val);                              \
  |  | 8434|    462|    }
  ------------------
 8451|    462|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 4.15k]
  ------------------
 8452|    462|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|    462|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    462|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    462|    }                                                           \
  |  | 8432|    462|    else {                                                      \
  |  | 8433|    462|        return vis(monostate_val);                              \
  |  | 8434|    462|    }
  ------------------
 8453|    924|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 462, False: 3.69k]
  ------------------
 8454|    924|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|    924|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    924|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    924|    }                                                           \
  |  | 8432|    924|    else {                                                      \
  |  | 8433|    924|        return vis(monostate_val);                              \
  |  | 8434|    924|    }
  ------------------
 8455|    924|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 4.15k]
  ------------------
 8456|    924|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|    924|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    924|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    924|    }                                                           \
  |  | 8432|    924|    else {                                                      \
  |  | 8433|    924|        return vis(monostate_val);                              \
  |  | 8434|    924|    }
  ------------------
 8457|    924|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 4.15k]
  ------------------
 8458|    924|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|    924|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|    924|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|    924|    }                                                           \
  |  | 8432|    924|    else {                                                      \
  |  | 8433|    924|        return vis(monostate_val);                              \
  |  | 8434|    924|    }
  ------------------
 8459|  1.38k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 462, False: 3.69k]
  ------------------
 8460|  1.38k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  1.38k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.38k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.38k|    }                                                           \
  |  | 8432|  1.38k|    else {                                                      \
  |  | 8433|  1.38k|        return vis(monostate_val);                              \
  |  | 8434|  1.38k|    }
  ------------------
 8461|  1.84k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 462, False: 3.69k]
  ------------------
 8462|  1.84k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  1.84k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.84k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.84k|    }                                                           \
  |  | 8432|  1.84k|    else {                                                      \
  |  | 8433|  1.84k|        return vis(monostate_val);                              \
  |  | 8434|  1.84k|    }
  ------------------
 8463|  1.84k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 4.15k]
  ------------------
 8464|  1.84k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  1.84k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.84k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.84k|    }                                                           \
  |  | 8432|  1.84k|    else {                                                      \
  |  | 8433|  1.84k|        return vis(monostate_val);                              \
  |  | 8434|  1.84k|    }
  ------------------
 8465|  2.31k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 462, False: 3.69k]
  ------------------
 8466|  2.31k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  2.31k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.31k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.31k|    }                                                           \
  |  | 8432|  2.31k|    else {                                                      \
  |  | 8433|  2.31k|        return vis(monostate_val);                              \
  |  | 8434|  2.31k|    }
  ------------------
 8467|  2.31k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 4.15k]
  ------------------
 8468|  2.31k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  2.31k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.31k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.31k|    }                                                           \
  |  | 8432|  2.31k|    else {                                                      \
  |  | 8433|  2.31k|        return vis(monostate_val);                              \
  |  | 8434|  2.31k|    }
  ------------------
 8469|  2.31k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 4.15k]
  ------------------
 8470|  2.31k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  2.31k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.31k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.31k|    }                                                           \
  |  | 8432|  2.31k|    else {                                                      \
  |  | 8433|  2.31k|        return vis(monostate_val);                              \
  |  | 8434|  2.31k|    }
  ------------------
 8471|  2.77k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 462, False: 3.69k]
  ------------------
 8472|  2.77k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  2.77k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.77k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.77k|    }                                                           \
  |  | 8432|  2.77k|    else {                                                      \
  |  | 8433|  2.77k|        return vis(monostate_val);                              \
  |  | 8434|  2.77k|    }
  ------------------
 8473|  2.77k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 4.15k]
  ------------------
 8474|  2.77k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  2.77k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.77k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.77k|    }                                                           \
  |  | 8432|  2.77k|    else {                                                      \
  |  | 8433|  2.77k|        return vis(monostate_val);                              \
  |  | 8434|  2.77k|    }
  ------------------
 8475|  2.77k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 4.15k]
  ------------------
 8476|  2.77k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  2.77k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.77k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.77k|    }                                                           \
  |  | 8432|  2.77k|    else {                                                      \
  |  | 8433|  2.77k|        return vis(monostate_val);                              \
  |  | 8434|  2.77k|    }
  ------------------
 8477|  3.23k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 462, False: 3.69k]
  ------------------
 8478|  3.23k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  3.23k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.23k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.23k|    }                                                           \
  |  | 8432|  3.23k|    else {                                                      \
  |  | 8433|  3.23k|        return vis(monostate_val);                              \
  |  | 8434|  3.23k|    }
  ------------------
 8479|  3.69k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 462, False: 3.69k]
  ------------------
 8480|  3.69k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  3.69k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  3.69k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  3.69k|    }                                                           \
  |  | 8432|  3.69k|    else {                                                      \
  |  | 8433|  3.69k|        return vis(monostate_val);                              \
  |  | 8434|  3.69k|    }
  ------------------
 8481|  4.15k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 462, False: 3.69k]
  ------------------
 8482|  4.15k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  4.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.15k|    }                                                           \
  |  | 8432|  4.15k|    else {                                                      \
  |  | 8433|  4.15k|        return vis(monostate_val);                              \
  |  | 8434|  4.15k|    }
  ------------------
 8483|  4.15k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 4.15k]
  ------------------
 8484|  4.15k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  4.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.15k|    }                                                           \
  |  | 8432|  4.15k|    else {                                                      \
  |  | 8433|  4.15k|        return vis(monostate_val);                              \
  |  | 8434|  4.15k|    }
  ------------------
 8485|  4.15k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 4.15k]
  ------------------
 8486|  4.15k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  4.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.15k|    }                                                           \
  |  | 8432|  4.15k|    else {                                                      \
  |  | 8433|  4.15k|        return vis(monostate_val);                              \
  |  | 8434|  4.15k|    }
  ------------------
 8487|       |
 8488|  4.15k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 4.15k]
  ------------------
 8489|  4.15k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  4.15k|            return vis(
 8491|  4.15k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 4.15k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 4.15k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  4.15k|            SCN_CLANG_POP
 8506|  4.15k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|   152k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   152k|    {
 5555|   152k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8065|   152k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   152k|    {
 8067|   152k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   152k|{
 7055|   152k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   152k|    handler.check_args_exhausted();
 7057|   152k|    return handler.get_error();
 7058|   152k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   152k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   152k|    auto begin = format.data();
 7024|   152k|    auto it = begin;
 7025|   152k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   313M|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 313M, False: 51.5k]
  ------------------
 7028|   313M|        const auto ch = *it++;
 7029|   313M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 104k, False: 313M]
  ------------------
 7030|   104k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   104k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   104k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 100k, False: 3.49k]
  ------------------
 7034|   100k|                return;
 7035|   100k|            }
 7036|   104k|        }
 7037|   313M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 1.29k, False: 313M]
  ------------------
 7038|  1.29k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  2.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 258, False: 1.04k]
  |  |  |  Branch (859:45): [True: 88, False: 1.21k]
  |  |  |  Branch (859:45): [True: 170, False: 1.04k]
  |  |  ------------------
  ------------------
 7039|    258|                handler.on_error("Unmatched '}' in format string");
 7040|    258|                return;
 7041|    258|            }
 7042|       |
 7043|  1.04k|            handler.on_literal_text(begin, it);
 7044|  1.04k|            begin = ++it;
 7045|  1.04k|        }
 7046|   313M|    }
 7047|       |
 7048|  51.5k|    handler.on_literal_text(begin, end);
 7049|  51.5k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6952|   104k|{
 6953|   104k|    struct id_adapter {
 6954|   104k|        constexpr void operator()()
 6955|   104k|        {
 6956|   104k|            arg_id = handler.on_arg_id();
 6957|   104k|        }
 6958|   104k|        constexpr void operator()(std::size_t id)
 6959|   104k|        {
 6960|   104k|            arg_id = handler.on_arg_id(id);
 6961|   104k|        }
 6962|       |
 6963|   104k|        constexpr void on_error(const char* msg)
 6964|   104k|        {
 6965|   104k|            SCN_UNLIKELY_ATTR
 6966|   104k|            handler.on_error(msg);
 6967|   104k|        }
 6968|       |
 6969|   104k|        Handler& handler;
 6970|   104k|        std::size_t arg_id;
 6971|   104k|    };
 6972|       |
 6973|   104k|    ++begin;
 6974|   104k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 104k]
  |  |  ------------------
  ------------------
 6975|     70|        handler.on_error("Unexpected end of replacement field");
 6976|     70|        return begin;
 6977|     70|    }
 6978|       |
 6979|   104k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 4.11k, False: 100k]
  ------------------
 6980|  4.11k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|  4.11k|    }
 6982|   100k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 160, False: 99.8k]
  ------------------
 6983|    160|        handler.on_literal_text(begin, begin + 1);
 6984|    160|    }
 6985|  99.8k|    else {
 6986|  99.8k|        auto adapter = id_adapter{handler, 0};
 6987|  99.8k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|  99.8k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  99.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 99.7k]
  |  |  ------------------
  ------------------
 6990|    120|            handler.on_error("Missing '}' in format string");
 6991|    120|            return begin;
 6992|    120|        }
 6993|       |
 6994|  99.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 134, False: 99.6k]
  ------------------
 6995|    134|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|    134|        }
 6997|  99.6k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 23.0k, False: 76.5k]
  ------------------
 6998|  23.0k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 22.9k]
  |  |  ------------------
  ------------------
 6999|     50|                handler.on_error("Unexpected end of replacement field");
 7000|     50|                return begin;
 7001|     50|            }
 7002|  22.9k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|  22.9k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  45.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.17k, False: 20.8k]
  |  |  |  Branch (859:45): [True: 0, False: 22.9k]
  |  |  |  Branch (859:45): [True: 2.17k, False: 20.8k]
  |  |  ------------------
  ------------------
 7004|  2.17k|                handler.on_error("Unknown format specifier");
 7005|  2.17k|                return begin;
 7006|  2.17k|            }
 7007|  22.9k|        }
 7008|  76.5k|        else {
 7009|  76.5k|            SCN_UNLIKELY_ATTR
 7010|  76.5k|            handler.on_error("Missing '}' in format string");
 7011|  76.5k|            return begin;
 7012|  76.5k|        }
 7013|  99.7k|    }
 7014|  25.2k|    return begin + 1;
 7015|   104k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8049|  27.2k|    {
 8050|  27.2k|        return m_args.get(id);
 8051|  27.2k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8054|  4.25k|    {
 8055|  4.25k|        return m_args;
 8056|  4.25k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8059|  24.6k|    {
 8060|  24.6k|        return m_locale;
 8061|  24.6k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|  27.0k|    {
 5576|  27.0k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 26.9k]
  |  |  ------------------
  ------------------
 5577|     40|            on_error(
 5578|     40|                "Cannot switch from manual to automatic argument indexing");
 5579|     40|            return 0;
 5580|     40|        }
 5581|       |
 5582|  26.9k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  26.9k|        do_check_arg_id(id);
 5584|  26.9k|        return id;
 5585|  27.0k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5599|    112|    {
 5600|    112|        return detail::handle_error(
 5601|    112|            scan_error{scan_error::invalid_format_string, msg});
 5602|    112|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|  27.1k|{
 6064|  27.1k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  27.1k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  27.1k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|  99.8k|{
 6454|  99.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  99.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  99.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|  99.8k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 99.8k, False: 0]
  |  Branch (6455:26): [True: 76.9k, False: 22.9k]
  ------------------
 6456|  76.9k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  76.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|  76.9k|    }
 6458|       |
 6459|  22.9k|    handler();
 6460|  22.9k|    return begin;
 6461|  99.8k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6423|  76.9k|{
 6424|  76.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  76.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6425|       |
 6426|  76.9k|    CharT c = *begin;
 6427|  76.9k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6427:9): [True: 76.3k, False: 598]
  |  Branch (6427:27): [True: 142, False: 456]
  ------------------
 6428|  76.5k|        handler.on_error("Invalid argument ID");
 6429|  76.5k|        return begin;
 6430|  76.5k|    }
 6431|       |
 6432|    456|    int idx = 0;
 6433|    456|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6433:9): [True: 278, False: 178]
  ------------------
 6434|    278|        idx = parse_simple_int(begin, end);
 6435|    278|    }
 6436|    178|    else {
 6437|    178|        ++begin;
 6438|    178|    }
 6439|       |
 6440|    456|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6440:9): [True: 120, False: 336]
  |  Branch (6440:26): [True: 202, False: 134]
  |  Branch (6440:50): [True: 66, False: 136]
  ------------------
 6441|    186|        handler.on_error("Invalid argument ID");
 6442|    186|        return begin;
 6443|    186|    }
 6444|    270|    handler(idx);
 6445|       |
 6446|    270|    return begin;
 6447|    456|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6964|  76.7k|        {
 6965|  76.7k|            SCN_UNLIKELY_ATTR
 6966|  76.7k|            handler.on_error(msg);
 6967|  76.7k|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6402|  8.87k|{
 6403|  8.87k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|  8.87k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  8.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|       |
 6406|  8.87k|    unsigned long long value = 0;
 6407|  10.9k|    do {
 6408|  10.9k|        value *= 10;
 6409|  10.9k|        value += static_cast<unsigned long long>(*begin - '0');
 6410|  10.9k|        if (value >
  ------------------
  |  Branch (6410:13): [True: 62, False: 10.8k]
  ------------------
 6411|  10.9k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6412|     62|            return -1;
 6413|     62|        }
 6414|  10.8k|        ++begin;
 6415|  10.8k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6415:14): [True: 10.5k, False: 308]
  |  Branch (6415:30): [True: 6.66k, False: 3.88k]
  |  Branch (6415:47): [True: 2.04k, False: 4.62k]
  ------------------
 6416|  8.81k|    return static_cast<int>(value);
 6417|  8.87k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6959|    270|        {
 6960|    270|            arg_id = handler.on_arg_id(id);
 6961|    270|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5588|    270|    {
 5589|    270|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 198]
  |  |  ------------------
  ------------------
 5590|     72|            on_error(
 5591|     72|                "Cannot switch from manual to automatic argument indexing");
 5592|     72|            return;
 5593|     72|        }
 5594|    198|        m_next_arg_id = -1;
 5595|    198|        do_check_arg_id(id);
 5596|    198|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|  22.9k|        {
 6956|  22.9k|            arg_id = handler.on_arg_id();
 6957|  22.9k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|  45.9k|    {
 5262|  45.9k|        return m_type;
 5263|  45.9k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|  20.4k|    {
 5571|  20.4k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  20.4k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|  43.4k|    {
 5560|  43.4k|        return m_format.data();
 5561|  43.4k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|  22.9k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|  22.9k|    {
 7133|  22.9k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  22.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|  22.9k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6868|  22.9k|{
 6869|  22.9k|    auto do_presentation = [&]() -> const CharT* {
 6870|  22.9k|        if (*begin == CharT{'['}) {
 6871|  22.9k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  22.9k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|  22.9k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|  22.9k|                return begin;
 6877|  22.9k|            }
 6878|  22.9k|            handler.on_character_set_string(set);
 6879|  22.9k|            return begin;
 6880|  22.9k|        }
 6881|  22.9k|        if (*begin == CharT{'/'}) {
 6882|  22.9k|            return parse_presentation_regex(begin, end, handler);
 6883|  22.9k|        }
 6884|  22.9k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  22.9k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|  22.9k|            handler.on_error("Invalid type specifier in format string");
 6887|  22.9k|            return begin;
 6888|  22.9k|        }
 6889|  22.9k|        handler.on_type(type);
 6890|  22.9k|        return begin;
 6891|  22.9k|    };
 6892|       |
 6893|  22.9k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 22.0k, False: 926]
  |  Branch (6893:28): [True: 2.46k, False: 19.6k]
  ------------------
 6894|  22.9k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 266, False: 2.19k]
  |  Branch (6894:36): [True: 232, False: 34]
  ------------------
 6895|    232|        return do_presentation();
 6896|    232|    }
 6897|       |
 6898|  22.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.7k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  22.7k|    begin = parse_align(begin, end, handler);
 6904|  22.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 22.6k]
  |  |  ------------------
  ------------------
 6905|    102|        handler.on_error("Unexpected end of format string");
 6906|    102|        return begin;
 6907|    102|    }
 6908|       |
 6909|  22.6k|    begin = parse_width(begin, end, handler);
 6910|  22.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 22.5k]
  |  |  ------------------
  ------------------
 6911|     98|        handler.on_error("Unexpected end of format string");
 6912|     98|        return begin;
 6913|     98|    }
 6914|       |
 6915|  22.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 2.44k, False: 20.1k]
  ------------------
 6916|  2.44k|        ++begin;
 6917|  2.44k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.41k]
  |  |  ------------------
  ------------------
 6918|     34|            handler.on_error("Unexpected end of format string");
 6919|     34|            return begin;
 6920|     34|        }
 6921|  2.41k|        begin = parse_precision(begin, end, handler);
 6922|  2.41k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 2.29k]
  |  |  ------------------
  ------------------
 6923|    116|            handler.on_error("Unexpected end of format string");
 6924|    116|            return begin;
 6925|    116|        }
 6926|  2.41k|    }
 6927|       |
 6928|  22.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 464, False: 21.9k]
  ------------------
 6929|    464|        handler.on_localized();
 6930|    464|        ++begin;
 6931|    464|    }
 6932|  22.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 22.3k]
  |  |  ------------------
  ------------------
 6933|     52|        handler.on_error("Unexpected end of format string");
 6934|     52|        return begin;
 6935|     52|    }
 6936|       |
 6937|  22.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 22.3k, False: 0]
  |  Branch (6937:25): [True: 18.8k, False: 3.53k]
  ------------------
 6938|  18.8k|        do_presentation();
 6939|  18.8k|    }
 6940|  22.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.53k, False: 20.8k]
  |  |  ------------------
  ------------------
 6941|  1.53k|        handler.on_error("Unexpected end of format string");
 6942|  1.53k|        return begin;
 6943|  1.53k|    }
 6944|       |
 6945|  20.8k|    return begin;
 6946|  22.3k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6517|  2.46k|{
 6518|  2.46k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 230, False: 2.23k]
  |  Branch (6518:33): [True: 196, False: 34]
  ------------------
 6519|  2.46k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 140, False: 2.12k]
  |  Branch (6519:33): [True: 70, False: 70]
  ------------------
 6520|  2.46k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|  19.0k|    auto do_presentation = [&]() -> const CharT* {
 6870|  19.0k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 2.45k, False: 16.6k]
  ------------------
 6871|  2.45k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  2.45k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 580, False: 1.87k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|    580|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|    580|                return begin;
 6877|    580|            }
 6878|  1.87k|            handler.on_character_set_string(set);
 6879|  1.87k|            return begin;
 6880|  2.45k|        }
 6881|  16.6k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 13.9k, False: 2.67k]
  ------------------
 6882|  13.9k|            return parse_presentation_regex(begin, end, handler);
 6883|  13.9k|        }
 6884|  2.67k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  2.67k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 328, False: 2.34k]
  |  |  ------------------
  ------------------
 6886|    328|            handler.on_error("Invalid type specifier in format string");
 6887|    328|            return begin;
 6888|    328|        }
 6889|  2.34k|        handler.on_type(type);
 6890|  2.34k|        return begin;
 6891|  2.67k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6707|  2.45k|{
 6708|  2.45k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  2.45k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  2.45k|    auto start = begin;
 6712|  2.45k|    ++begin;
 6713|       |
 6714|  2.45k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.42k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|     34|        return {};
 6719|     34|    }
 6720|  2.42k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 1.03k, False: 1.38k]
  ------------------
 6721|  1.03k|        handler.on_charset_inverted();
 6722|  1.03k|        ++begin;
 6723|  1.03k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.00k]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|     34|            return {};
 6728|     34|        }
 6729|  1.00k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 52, False: 952]
  ------------------
 6730|     52|            handler.on_charset_single(char32_t{']'});
 6731|     52|            ++begin;
 6732|     52|        }
 6733|  1.00k|    }
 6734|  1.38k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 34, False: 1.35k]
  ------------------
 6735|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|     34|    }
 6737|       |
 6738|  17.1k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 16.8k, False: 314]
  ------------------
 6739|  16.8k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 164, False: 16.7k]
  |  |  ------------------
  ------------------
 6740|    164|            break;
 6741|    164|        }
 6742|       |
 6743|  16.7k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 1.87k, False: 14.8k]
  ------------------
 6744|  1.87k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  1.87k|        }
 6746|       |
 6747|  14.8k|        parse_presentation_set_literal(begin, end, handler);
 6748|  14.8k|    }
 6749|       |
 6750|    478|    SCN_UNLIKELY_ATTR
 6751|    478|    handler.on_error("Invalid [character set] specifier in format string");
 6752|    478|    return {};
 6753|  2.35k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6671|  14.8k|{
 6672|  14.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  14.8k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  14.8k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 14.7k]
  |  |  ------------------
  ------------------
 6676|    128|        return;
 6677|    128|    }
 6678|       |
 6679|  14.7k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 14.6k, False: 88]
  |  Branch (6679:25): [True: 1.26k, False: 13.3k]
  |  Branch (6679:49): [True: 1.23k, False: 34]
  ------------------
 6680|  14.7k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 1.17k, False: 52]
  ------------------
 6681|  1.17k|        ++begin;
 6682|       |
 6683|  1.17k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  1.17k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  1.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.14k]
  |  |  ------------------
  ------------------
 6685|     34|            return;
 6686|     34|        }
 6687|       |
 6688|  1.14k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.11k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|     34|            return;
 6693|     34|        }
 6694|       |
 6695|  1.11k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  1.11k|        return;
 6697|  1.14k|    }
 6698|       |
 6699|  13.5k|    handler.on_charset_single(cp_first);
 6700|  13.5k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6647|  16.0k|{
 6648|  16.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  16.0k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  16.0k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.0k]
  |  |  |  Branch (859:45): [True: 0, False: 16.0k]
  |  |  |  Branch (859:45): [True: 0, False: 16.0k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  16.0k|    const auto cp =
 6657|  16.0k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  16.0k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162, False: 15.8k]
  |  |  ------------------
  ------------------
 6659|    162|        handler.on_error("Invalid encoding in format string");
 6660|    162|        return invalid_code_point;
 6661|    162|    }
 6662|       |
 6663|  15.8k|    begin += len;
 6664|  15.8k|    return cp;
 6665|  16.0k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6356|  1.87k|    {
 6357|  1.87k|        m_specs.charset_string_data = fmt.data();
 6358|  1.87k|        m_specs.charset_string_size = fmt.size();
 6359|  1.87k|        on_type(presentation_type::string_set);
 6360|  1.87k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6759|  13.9k|{
 6760|  13.9k|#if !SCN_DISABLE_REGEX
 6761|  13.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6762|  13.9k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6763|       |
 6764|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 6765|       |                  std::is_same_v<CharT, wchar_t>) {
 6766|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 6767|       |        return begin;
 6768|       |    }
 6769|       |
 6770|  13.9k|    auto start = begin;
 6771|  13.9k|    ++begin;
 6772|       |
 6773|  13.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 13.8k]
  |  |  ------------------
  ------------------
 6774|     34|        handler.on_error("Unexpected end of regex in format string");
 6775|     34|        return begin;
 6776|     34|    }
 6777|       |
 6778|  13.8k|    handler.on_type(presentation_type::regex);
 6779|   704k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6779:12): [True: 704k, False: 52]
  ------------------
 6780|   704k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6780:13): [True: 16.4k, False: 688k]
  ------------------
 6781|  16.4k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6781:17): [True: 13.8k, False: 2.59k]
  ------------------
 6782|  13.8k|                break;
 6783|  13.8k|            }
 6784|  2.59k|            else {
 6785|  2.59k|                handler.on_type(presentation_type::regex_escaped);
 6786|  2.59k|            }
 6787|  16.4k|        }
 6788|   704k|    }
 6789|  13.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 13.8k]
  |  |  ------------------
  ------------------
 6790|     52|        handler.on_error("Unexpected end of regex in format string");
 6791|     52|        return begin;
 6792|     52|    }
 6793|       |
 6794|  13.8k|    auto regex_end = begin;
 6795|  13.8k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6796|  13.8k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 13.8k]
  |  |  ------------------
  ------------------
 6797|     34|        handler.on_error("Invalid (empty) regex in format string");
 6798|     34|        return begin;
 6799|     34|    }
 6800|  13.8k|    handler.on_regex_pattern(regex_pattern);
 6801|  13.8k|    ++begin;
 6802|       |
 6803|  13.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 13.7k]
  |  |  ------------------
  ------------------
 6804|     34|        handler.on_error("Unexpected end of regex in format string");
 6805|     34|        return begin;
 6806|     34|    }
 6807|       |
 6808|  13.7k|    regex_flags flags{regex_flags::none};
 6809|  13.7k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6810|  13.7k|        {{'m', regex_flags::multiline},
 6811|  13.7k|         {'s', regex_flags::singleline},
 6812|  13.7k|         {'i', regex_flags::nocase},
 6813|  13.7k|         {'n', regex_flags::nocapture}}};
 6814|  15.1k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6814:12): [True: 15.1k, False: 44]
  ------------------
 6815|  15.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6815:13): [True: 13.6k, False: 1.49k]
  ------------------
 6816|  13.6k|            break;
 6817|  13.6k|        }
 6818|  1.49k|        bool found_flag = false;
 6819|  4.00k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6819:24): [True: 4.00k, False: 60]
  ------------------
 6820|  4.00k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6820:17): [True: 2.57k, False: 1.43k]
  ------------------
 6821|  2.57k|                continue;
 6822|  2.57k|            }
 6823|  1.43k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6823:17): [True: 34, False: 1.40k]
  ------------------
 6824|     34|                handler.on_error("Flag set multiple times in regex");
 6825|     34|                return begin;
 6826|     34|            }
 6827|  1.40k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6828|  1.40k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6828:17): [True: 40, False: 1.36k]
  ------------------
 6829|       |                // clang-format off
 6830|     40|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6831|       |                // clang-format on
 6832|     40|            }
 6833|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6834|       |            if (*begin == CharT{'m'}) {
 6835|       |                // clang-format off
 6836|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6837|       |                // clang-format on
 6838|       |            }
 6839|       |#endif
 6840|  1.40k|#endif
 6841|  1.40k|            flags |= flag.second;
 6842|  1.40k|            found_flag = true;
 6843|  1.40k|            break;
 6844|  1.43k|        }
 6845|  1.46k|        if (!found_flag) {
  ------------------
  |  Branch (6845:13): [True: 60, False: 1.40k]
  ------------------
 6846|     60|            handler.on_error("Invalid flag in regex");
 6847|     60|            return begin;
 6848|     60|        }
 6849|  1.46k|    }
 6850|  13.6k|    handler.on_regex_flags(flags);
 6851|       |
 6852|  13.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 13.6k]
  |  |  ------------------
  ------------------
 6853|     44|        handler.on_error("Unexpected end of regex in format string");
 6854|     44|        return begin;
 6855|     44|    }
 6856|       |
 6857|  13.6k|    return begin;
 6858|       |#else
 6859|       |    handler.on_error("Regular expression support is disabled");
 6860|       |    return {};
 6861|       |#endif
 6862|  13.6k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6364|  13.8k|    {
 6365|  13.8k|        m_specs.charset_string_data = pattern.data();
 6366|  13.8k|        m_specs.charset_string_size = pattern.size();
 6367|  13.8k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6465|  2.67k|{
 6466|  2.67k|    switch (type) {
 6467|     88|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 88, False: 2.58k]
  ------------------
 6468|    122|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 34, False: 2.63k]
  ------------------
 6469|    122|            return presentation_type::int_binary;
 6470|    106|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 106, False: 2.56k]
  ------------------
 6471|    106|            return presentation_type::int_decimal;
 6472|    160|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 160, False: 2.51k]
  ------------------
 6473|    160|            return presentation_type::int_generic;
 6474|    124|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 124, False: 2.54k]
  ------------------
 6475|    124|            return presentation_type::int_unsigned_decimal;
 6476|    122|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 122, False: 2.55k]
  ------------------
 6477|    122|            return presentation_type::int_octal;
 6478|     88|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 88, False: 2.58k]
  ------------------
 6479|    140|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 52, False: 2.62k]
  ------------------
 6480|    140|            return presentation_type::int_hex;
 6481|     34|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 34, False: 2.63k]
  ------------------
 6482|     74|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 40, False: 2.63k]
  ------------------
 6483|     74|            return presentation_type::int_arbitrary_base;
 6484|    150|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 150, False: 2.52k]
  ------------------
 6485|    238|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 88, False: 2.58k]
  ------------------
 6486|    238|            return presentation_type::float_hex;
 6487|     70|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 70, False: 2.60k]
  ------------------
 6488|    104|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 34, False: 2.63k]
  ------------------
 6489|    104|            return presentation_type::float_scientific;
 6490|     52|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 52, False: 2.62k]
  ------------------
 6491|    140|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 88, False: 2.58k]
  ------------------
 6492|    140|            return presentation_type::float_fixed;
 6493|     34|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 34, False: 2.63k]
  ------------------
 6494|     86|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 52, False: 2.62k]
  ------------------
 6495|     86|            return presentation_type::float_general;
 6496|    664|        case 's':
  ------------------
  |  Branch (6496:9): [True: 664, False: 2.00k]
  ------------------
 6497|    664|            return presentation_type::string;
 6498|    142|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 142, False: 2.53k]
  ------------------
 6499|    142|            return presentation_type::character;
 6500|     34|        case '?':
  ------------------
  |  Branch (6500:9): [True: 34, False: 2.63k]
  ------------------
 6501|     34|            return presentation_type::escaped_character;
 6502|     88|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 88, False: 2.58k]
  ------------------
 6503|     88|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 2.67k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 2.67k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|    328|        default:
  ------------------
  |  Branch (6510:9): [True: 328, False: 2.34k]
  ------------------
 6511|    328|            return presentation_type::none;
 6512|  2.67k|    }
 6513|  2.67k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6542|  22.7k|{
 6543|  22.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  22.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  22.7k|    auto check_align = [](wchar_t ch) {
 6546|  22.7k|        switch (ch) {
 6547|  22.7k|            case L'<':
 6548|  22.7k|                return align_type::left;
 6549|  22.7k|            case L'>':
 6550|  22.7k|                return align_type::right;
 6551|  22.7k|            case L'^':
 6552|  22.7k|                return align_type::center;
 6553|  22.7k|            default:
 6554|  22.7k|                return align_type::none;
 6555|  22.7k|        }
 6556|  22.7k|    };
 6557|       |
 6558|  22.7k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  22.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.7k]
  |  |  |  Branch (859:45): [True: 0, False: 22.7k]
  |  |  |  Branch (859:45): [True: 0, False: 22.7k]
  |  |  ------------------
  ------------------
 6560|  22.7k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  22.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  22.7k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  22.7k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  22.7k|    const auto begin_before_fill = begin;
 6570|  22.7k|    begin += potential_fill_len;
 6571|       |
 6572|  22.7k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 926, False: 21.8k]
  ------------------
 6573|    926|        return begin_before_fill;
 6574|    926|    }
 6575|       |
 6576|  21.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  21.8k|    const auto begin_after_fill = begin;
 6578|  21.8k|    ++begin;
 6579|       |
 6580|  21.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 21.8k, False: 0]
  ------------------
 6581|  21.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 21.7k]
  |  |  ------------------
  ------------------
 6582|     42|            handler.on_error("Invalid fill character '{' in format string");
 6583|     42|            return begin;
 6584|     42|        }
 6585|  21.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 1.54k, False: 20.2k]
  ------------------
 6586|  1.54k|            return begin_before_fill;
 6587|  1.54k|        }
 6588|  21.7k|    }
 6589|       |
 6590|  20.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 19.4k, False: 816]
  ------------------
 6591|  19.4k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 964, False: 18.4k]
  ------------------
 6592|    964|            handler.on_align(potential_align_on_fill);
 6593|    964|            return begin_after_fill;
 6594|    964|        }
 6595|  18.4k|        return begin_before_fill;
 6596|  19.4k|    }
 6597|       |
 6598|    816|    handler.on_fill(potential_fill);
 6599|    816|    handler.on_align(potential_align_after_fill);
 6600|    816|    return begin;
 6601|  20.2k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6524|  22.7k|{
 6525|  22.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  22.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|  22.7k|    if constexpr (sizeof(CharT) != 1) {
 6527|  22.7k|        return 1;
 6528|       |    }
 6529|       |    else {
 6530|       |        const auto lengths =
 6531|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|       |            "\3\4";
 6533|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|       |        return len;
 6535|       |    }
 6536|  22.7k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|  44.6k|    auto check_align = [](wchar_t ch) {
 6546|  44.6k|        switch (ch) {
 6547|    698|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 698, False: 43.9k]
  ------------------
 6548|    698|                return align_type::left;
 6549|    230|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 230, False: 44.3k]
  ------------------
 6550|    230|                return align_type::right;
 6551|  1.27k|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 1.27k, False: 43.3k]
  ------------------
 6552|  1.27k|                return align_type::center;
 6553|  42.4k|            default:
  ------------------
  |  Branch (6553:13): [True: 42.4k, False: 2.20k]
  ------------------
 6554|  42.4k|                return align_type::none;
 6555|  44.6k|        }
 6556|  44.6k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6277|    816|    {
 6278|    816|        m_specs.fill = fill;
 6279|    816|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6158|    816|    {
 6159|    816|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|    816|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    816|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6160|    816|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|    816|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    816|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6161|       |        if constexpr (sizeof(CharT) == 1) {
 6162|       |            for (size_t i = 0; i < s.size(); ++i) {
 6163|       |                SCN_GCC_PUSH
 6164|       |                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6165|       |                m_data[i] = s[i];
 6166|       |                SCN_GCC_POP
 6167|       |            }
 6168|       |            m_size = static_cast<unsigned char>(s.size());
 6169|       |        }
 6170|       |        else if constexpr (sizeof(CharT) == 2) {
 6171|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6172|       |            m_data[1] =
 6173|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6174|       |            if (s.size() == 1) {
 6175|       |                return;
 6176|       |            }
 6177|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6178|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6179|       |        }
 6180|    816|        else {
 6181|    816|            const auto front = static_cast<unsigned>(s.front());
 6182|    816|            m_data[0] = static_cast<char>(front);
 6183|    816|            m_data[1] = static_cast<char>(front >> 8);
 6184|    816|            m_data[2] = static_cast<char>(front >> 16);
 6185|    816|            m_data[3] = static_cast<char>(front >> 24);
 6186|    816|        }
 6187|    816|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6607|  22.6k|{
 6608|  22.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  22.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  22.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 10.0k, False: 12.6k]
  |  Branch (6610:33): [True: 6.29k, False: 3.74k]
  ------------------
 6611|  6.29k|        int width = parse_simple_int(begin, end);
 6612|  6.29k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  6.29k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.25k, False: 34]
  |  |  ------------------
  ------------------
 6613|  6.25k|            handler.on_width(width);
 6614|  6.25k|        }
 6615|     34|        else {
 6616|     34|            handler.on_error("Invalid field width");
 6617|     34|            return begin;
 6618|     34|        }
 6619|  6.29k|    }
 6620|  22.6k|    return begin;
 6621|  22.6k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6627|  2.41k|{
 6628|  2.41k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6629|       |
 6630|  2.41k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6630:9): [True: 2.37k, False: 34]
  |  Branch (6630:33): [True: 2.30k, False: 70]
  ------------------
 6631|  2.30k|        int prec = parse_simple_int(begin, end);
 6632|  2.30k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  2.30k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.30k, False: 0]
  |  |  ------------------
  ------------------
 6633|  2.30k|            handler.on_precision(prec);
 6634|  2.30k|        }
 6635|      0|        else {
 6636|      0|            handler.on_error("Invalid field precision");
 6637|      0|            return begin;
 6638|      0|        }
 6639|  2.30k|    }
 6640|  2.41k|    return begin;
 6641|  2.41k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7137|    464|    {
 7138|    464|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|    464|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 418, False: 46]
  ------------------
 7140|    464|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 372, False: 46]
  ------------------
 7141|    464|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 326, False: 46]
  ------------------
 7142|    464|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 280, False: 46]
  ------------------
 7143|    280|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|    280|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|    280|        }
 7148|       |
 7149|    184|        Handler::on_localized();
 7150|    184|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  20.3k|{
 8428|  20.3k|#define SCN_VISIT(Type)                                         \
 8429|  20.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  20.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  20.3k|    }                                                           \
 8432|  20.3k|    else {                                                      \
 8433|  20.3k|        return vis(monostate_val);                              \
 8434|  20.3k|    }
 8435|       |
 8436|  20.3k|    monostate monostate_val{};
 8437|       |
 8438|  20.3k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 20.3k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 20.3k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|  2.28k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 2.28k, False: 18.0k]
  ------------------
 8444|  2.28k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  2.28k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.28k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.28k|    }                                                           \
  |  | 8432|  2.28k|    else {                                                      \
  |  | 8433|  2.28k|        return vis(monostate_val);                              \
  |  | 8434|  2.28k|    }
  ------------------
 8445|  2.28k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 20.3k]
  ------------------
 8446|  2.28k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  2.28k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.28k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.28k|    }                                                           \
  |  | 8432|  2.28k|    else {                                                      \
  |  | 8433|  2.28k|        return vis(monostate_val);                              \
  |  | 8434|  2.28k|    }
  ------------------
 8447|  2.28k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 20.3k]
  ------------------
 8448|  2.28k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  2.28k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.28k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.28k|    }                                                           \
  |  | 8432|  2.28k|    else {                                                      \
  |  | 8433|  2.28k|        return vis(monostate_val);                              \
  |  | 8434|  2.28k|    }
  ------------------
 8449|  2.28k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 20.3k]
  ------------------
 8450|  2.28k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  2.28k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.28k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.28k|    }                                                           \
  |  | 8432|  2.28k|    else {                                                      \
  |  | 8433|  2.28k|        return vis(monostate_val);                              \
  |  | 8434|  2.28k|    }
  ------------------
 8451|  2.28k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 20.3k]
  ------------------
 8452|  2.28k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  2.28k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  2.28k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  2.28k|    }                                                           \
  |  | 8432|  2.28k|    else {                                                      \
  |  | 8433|  2.28k|        return vis(monostate_val);                              \
  |  | 8434|  2.28k|    }
  ------------------
 8453|  4.56k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 2.28k, False: 18.0k]
  ------------------
 8454|  4.56k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  4.56k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.56k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.56k|    }                                                           \
  |  | 8432|  4.56k|    else {                                                      \
  |  | 8433|  4.56k|        return vis(monostate_val);                              \
  |  | 8434|  4.56k|    }
  ------------------
 8455|  4.56k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 20.3k]
  ------------------
 8456|  4.56k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  4.56k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.56k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.56k|    }                                                           \
  |  | 8432|  4.56k|    else {                                                      \
  |  | 8433|  4.56k|        return vis(monostate_val);                              \
  |  | 8434|  4.56k|    }
  ------------------
 8457|  4.56k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 20.3k]
  ------------------
 8458|  4.56k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  4.56k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.56k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.56k|    }                                                           \
  |  | 8432|  4.56k|    else {                                                      \
  |  | 8433|  4.56k|        return vis(monostate_val);                              \
  |  | 8434|  4.56k|    }
  ------------------
 8459|  6.80k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 2.24k, False: 18.0k]
  ------------------
 8460|  6.80k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  6.80k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  6.80k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  6.80k|    }                                                           \
  |  | 8432|  6.80k|    else {                                                      \
  |  | 8433|  6.80k|        return vis(monostate_val);                              \
  |  | 8434|  6.80k|    }
  ------------------
 8461|  9.09k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 2.28k, False: 18.0k]
  ------------------
 8462|  9.09k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  9.09k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  9.09k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  9.09k|    }                                                           \
  |  | 8432|  9.09k|    else {                                                      \
  |  | 8433|  9.09k|        return vis(monostate_val);                              \
  |  | 8434|  9.09k|    }
  ------------------
 8463|  9.09k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 20.3k]
  ------------------
 8464|  9.09k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  9.09k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  9.09k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  9.09k|    }                                                           \
  |  | 8432|  9.09k|    else {                                                      \
  |  | 8433|  9.09k|        return vis(monostate_val);                              \
  |  | 8434|  9.09k|    }
  ------------------
 8465|  11.3k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 2.24k, False: 18.0k]
  ------------------
 8466|  11.3k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  11.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  11.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  11.3k|    }                                                           \
  |  | 8432|  11.3k|    else {                                                      \
  |  | 8433|  11.3k|        return vis(monostate_val);                              \
  |  | 8434|  11.3k|    }
  ------------------
 8467|  11.3k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 20.3k]
  ------------------
 8468|  11.3k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  11.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  11.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  11.3k|    }                                                           \
  |  | 8432|  11.3k|    else {                                                      \
  |  | 8433|  11.3k|        return vis(monostate_val);                              \
  |  | 8434|  11.3k|    }
  ------------------
 8469|  11.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 20.3k]
  ------------------
 8470|  11.3k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  11.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  11.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  11.3k|    }                                                           \
  |  | 8432|  11.3k|    else {                                                      \
  |  | 8433|  11.3k|        return vis(monostate_val);                              \
  |  | 8434|  11.3k|    }
  ------------------
 8471|  13.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 2.28k, False: 18.0k]
  ------------------
 8472|  13.6k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  13.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  13.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  13.6k|    }                                                           \
  |  | 8432|  13.6k|    else {                                                      \
  |  | 8433|  13.6k|        return vis(monostate_val);                              \
  |  | 8434|  13.6k|    }
  ------------------
 8473|  13.6k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 20.3k]
  ------------------
 8474|  13.6k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  13.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  13.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  13.6k|    }                                                           \
  |  | 8432|  13.6k|    else {                                                      \
  |  | 8433|  13.6k|        return vis(monostate_val);                              \
  |  | 8434|  13.6k|    }
  ------------------
 8475|  13.6k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 20.3k]
  ------------------
 8476|  13.6k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  13.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  13.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  13.6k|    }                                                           \
  |  | 8432|  13.6k|    else {                                                      \
  |  | 8433|  13.6k|        return vis(monostate_val);                              \
  |  | 8434|  13.6k|    }
  ------------------
 8477|  15.8k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 2.24k, False: 18.0k]
  ------------------
 8478|  15.8k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  15.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  15.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  15.8k|    }                                                           \
  |  | 8432|  15.8k|    else {                                                      \
  |  | 8433|  15.8k|        return vis(monostate_val);                              \
  |  | 8434|  15.8k|    }
  ------------------
 8479|  18.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 2.24k, False: 18.0k]
  ------------------
 8480|  18.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  18.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  18.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  18.0k|    }                                                           \
  |  | 8432|  18.0k|    else {                                                      \
  |  | 8433|  18.0k|        return vis(monostate_val);                              \
  |  | 8434|  18.0k|    }
  ------------------
 8481|  20.3k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 2.24k, False: 18.0k]
  ------------------
 8482|  20.3k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  20.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  20.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  20.3k|    }                                                           \
  |  | 8432|  20.3k|    else {                                                      \
  |  | 8433|  20.3k|        return vis(monostate_val);                              \
  |  | 8434|  20.3k|    }
  ------------------
 8483|  20.3k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 20.3k]
  ------------------
 8484|  20.3k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  20.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  20.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  20.3k|    }                                                           \
  |  | 8432|  20.3k|    else {                                                      \
  |  | 8433|  20.3k|        return vis(monostate_val);                              \
  |  | 8434|  20.3k|    }
  ------------------
 8485|  20.3k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 20.3k]
  ------------------
 8486|  20.3k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  20.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  20.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  20.3k|    }                                                           \
  |  | 8432|  20.3k|    else {                                                      \
  |  | 8433|  20.3k|        return vis(monostate_val);                              \
  |  | 8434|  20.3k|    }
  ------------------
 8487|       |
 8488|  20.3k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 20.3k]
  ------------------
 8489|  20.3k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  20.3k|            return vis(
 8491|  20.3k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 20.3k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 20.3k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  20.3k|            SCN_CLANG_POP
 8506|  20.3k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3325|  2.28k|    {
 3326|  2.28k|        return m_iterator;
 3327|  2.28k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1427|    570|        : base(std::in_place, std::forward<U>(val)),
 1428|    570|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    570|    {
 1430|    570|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|    570|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    570|    {
  437|    570|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    570|    {
 1177|    570|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3329|  1.14k|    {
 3330|  1.14k|        return m_sentinel;
 3331|  1.14k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3310|  1.14k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.14k|    static_cast<    \
  |  |  929|  1.14k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.14k|    static_cast<    \
  |  |  929|  1.14k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.14k|    {
 3312|  1.14k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.14k|    {
  485|  1.14k|        return m_has_value;
  486|  1.14k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|    570|    {
 1627|    570|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    570|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    570|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    570|        return this->get_value();
 1629|    570|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    570|    {
  451|    570|        return m_value;
  452|    570|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|    570|    {
 1837|    570|        return detail::transform_error_impl(std::move(*this),
 1838|    570|                                            std::forward<F>(f));
 1839|    570|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1322|    570|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    570|    else {
 1333|    570|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    570|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    570|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 570, False: 0]
  |  |  ------------------
  ------------------
 1335|    570|                   ? result(*std::forward<Exp>(exp))
 1336|    570|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    570|    }
 1340|    570|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|    570|    {
 1663|    570|        return std::move(value());
 1664|    570|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|    570|        : base(std::in_place, std::forward<U>(val)),
 1428|    570|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    570|    {
 1430|    570|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|    570|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    570|    {
  437|    570|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    570|    {
 1177|    570|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|    570|    {
 1598|    570|        return has_value();
 1599|    570|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.14k|    {
  485|  1.14k|        return m_has_value;
  486|  1.14k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|    570|    {
 1663|    570|        return std::move(value());
 1664|    570|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|    570|    {
 1627|    570|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    570|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    570|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    570|        return this->get_value();
 1629|    570|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    570|    {
  451|    570|        return m_value;
  452|    570|    }

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.47k|{
   89|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.47k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.47k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  76.3k|{
   44|  76.3k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  76.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  76.3k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  8.47k|{
  127|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.47k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.47k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeETnPvLPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  76.3k|{
   60|  76.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  76.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  76.3k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.47k|{
   89|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.47k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.47k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  8.47k|{
  127|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.47k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.47k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.47k|{
   89|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.47k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.47k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  8.47k|{
  127|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.47k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.47k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.47k|{
   89|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.47k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.47k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  8.47k|{
  127|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.47k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.47k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.47k|{
   89|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.47k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.47k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  8.47k|{
  127|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.47k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.47k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEEOSA_NS0_24basic_scan_format_stringIwNSL_13type_identityISA_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.47k|{
   89|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.47k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.47k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELS2_0ETnPvLS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEERKT0_OSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  8.47k|{
  127|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.47k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.47k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSQ_13type_identityISE_E4typeEJDpNS12_ISW_E4typeEEEE:
   88|  8.47k|{
   89|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.47k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.47k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSJ_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSS_13type_identityISF_E4typeEJDpNS17_ISY_E4typeEEEE:
  126|  8.47k|{
  127|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.47k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.47k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIwNSP_13type_identityISD_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  8.47k|{
   89|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.47k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.47k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSI_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIwNSR_13type_identityISE_E4typeEJDpNS16_ISX_E4typeEEEE:
  126|  8.47k|{
  127|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.47k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.47k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.47k|{
   89|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.47k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.47k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  8.47k|{
  127|  8.47k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.47k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.47k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.47k|    static_cast<    \
  |  |  929|  8.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.47k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|   114k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|   114k|{
  653|   114k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   114k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    188|{
  659|    188|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    188|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 94, False: 94]
  ------------------
  661|    188|                    : std::locale{};
  662|    188|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    882|{
 1221|    882|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    882|                                  m_nan_payload_buffer, value);
 1223|    882|    value = this->setsign(value);
 1224|    882|    return n;
 1225|    882|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    778|{
 1221|    778|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    778|                                  m_nan_payload_buffer, value);
 1223|    778|    value = this->setsign(value);
 1224|    778|    return n;
 1225|    778|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     22|{
 1461|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 22, False: 0]
  ------------------
 1467|     22|        SCN_UNLIKELY_ATTR
 1468|     22|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     22|                                     "Invalid integer value");
 1470|     22|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    890|{
 1461|    890|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    890|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    890|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    890|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    890|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    890|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    890|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    890|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    890|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    890|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    890|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    890|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    890|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 890, False: 0]
  ------------------
 1467|    890|        SCN_UNLIKELY_ATTR
 1468|    890|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    890|                                     "Invalid integer value");
 1470|    890|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    800|{
 1461|    800|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    800|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    800|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    800|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    800|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    800|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    800|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    800|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    800|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    800|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    800|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    800|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    800|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 800, False: 0]
  ------------------
 1467|    800|        SCN_UNLIKELY_ATTR
 1468|    800|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    800|                                     "Invalid integer value");
 1470|    800|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    890|{
 1461|    890|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    890|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    890|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    890|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    890|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    890|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    890|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    890|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    890|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    890|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    890|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    890|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    890|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 890, False: 0]
  ------------------
 1467|    890|        SCN_UNLIKELY_ATTR
 1468|    890|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    890|                                     "Invalid integer value");
 1470|    890|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    780|{
 1461|    780|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    780|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    780|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    780|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    780|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    780|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    780|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    780|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    780|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    780|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    780|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    780|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    780|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 780, False: 0]
  ------------------
 1467|    780|        SCN_UNLIKELY_ATTR
 1468|    780|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    780|                                     "Invalid integer value");
 1470|    780|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    872|{
 1461|    872|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    872|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    872|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    872|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    872|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 872, False: 0]
  ------------------
 1467|    872|        SCN_UNLIKELY_ATTR
 1468|    872|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    872|                                     "Invalid integer value");
 1470|    872|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    764|{
 1461|    764|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    764|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    764|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    764|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    764|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    764|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    764|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    764|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    764|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    764|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    764|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    764|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    764|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 764, False: 0]
  ------------------
 1467|    764|        SCN_UNLIKELY_ATTR
 1468|    764|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    764|                                     "Invalid integer value");
 1470|    764|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  38.1k|{
 2184|  38.1k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  38.1k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  76.3k|{
 2208|  76.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  76.3k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  3.45k|{
  194|  3.45k|    return find_classic_impl(
  195|  3.45k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  3.45k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  197|  3.45k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  21.2k|{
  202|  21.2k|    return find_classic_impl(
  203|  21.2k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  21.2k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  205|  21.2k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    224|{
  673|    224|    return e;
  674|    224|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  38.1k|{
 2141|  38.1k|    return vscan_internal(source, format, args);
 2142|  38.1k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|  76.3k|{
 2161|  76.3k|    return vscan_internal(source, format, args);
 2162|  76.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.45k|{
  118|  3.45k|    auto it = source.begin();
  119|       |
  120|  10.7k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 8.02k, False: 2.71k]
  ------------------
  121|  8.02k|        auto sv =
  122|  8.02k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  8.02k|                .substr(0, 8);
  124|       |
  125|  8.02k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.59k, False: 5.43k]
  ------------------
  126|  2.59k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.59k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.59k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 438, False: 2.15k]
  ------------------
  129|    438|                break;
  130|    438|            }
  131|  2.15k|            continue;
  132|  2.59k|        }
  133|       |
  134|  20.9k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 15.7k, False: 5.13k]
  ------------------
  135|  15.7k|            auto tmp =
  136|  15.7k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  15.7k|            auto res = get_next_code_point(tmp);
  138|  15.7k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 300, False: 15.4k]
  ------------------
  139|    300|                return it;
  140|    300|            }
  141|  15.4k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  15.4k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  15.4k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  15.4k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  15.4k|        }
  145|  5.43k|    }
  146|       |
  147|  3.15k|    return detail::make_string_view_iterator(source, it);
  148|  3.45k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  28.3k|{
  105|  28.3k|    static_assert(sizeof(*source.data()) == 1);
  106|  28.3k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  28.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  28.3k|    uint64_t word{};
  108|  28.3k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  28.3k|    return has_byte_greater(word, 127) != 0;
  111|  28.3k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  14.5k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  15.7k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  21.2k|{
  118|  21.2k|    auto it = source.begin();
  119|       |
  120|  26.5k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 20.3k, False: 6.26k]
  ------------------
  121|  20.3k|        auto sv =
  122|  20.3k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  20.3k|                .substr(0, 8);
  124|       |
  125|  20.3k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 9.57k, False: 10.7k]
  ------------------
  126|  9.57k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  9.57k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  9.57k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 7.81k, False: 1.76k]
  ------------------
  129|  7.81k|                break;
  130|  7.81k|            }
  131|  1.76k|            continue;
  132|  9.57k|        }
  133|       |
  134|  20.2k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 16.6k, False: 3.60k]
  ------------------
  135|  16.6k|            auto tmp =
  136|  16.6k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  16.6k|            auto res = get_next_code_point(tmp);
  138|  16.6k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 7.13k, False: 9.53k]
  ------------------
  139|  7.13k|                return it;
  140|  7.13k|            }
  141|  9.53k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  9.53k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  9.53k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  9.53k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  9.53k|        }
  145|  10.7k|    }
  146|       |
  147|  14.0k|    return detail::make_string_view_iterator(source, it);
  148|  21.2k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  18.8k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  16.6k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    882|{
 1138|    882|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 882]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    882|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 882]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    882|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 882]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    882|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 882]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    882|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    882|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 8, False: 874]
  ------------------
 1185|      8|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 1186|      8|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|      8|                                         "Invalid floating-point digit");
 1188|      8|        }
 1189|      8|    }
 1190|    874|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    874|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 874, False: 0]
  |  |  ------------------
  ------------------
 1191|    874|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    874|                                     "Invalid floating-point digit");
 1193|    874|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    778|{
 1138|    778|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 778]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    778|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 778]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    778|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 778]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    778|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 778]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    778|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    778|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    778|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    778|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 12, False: 766]
  ------------------
 1185|     12|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 1186|     12|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     12|                                         "Invalid floating-point digit");
 1188|     12|        }
 1189|     12|    }
 1190|    766|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    766|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 766, False: 0]
  |  |  ------------------
  ------------------
 1191|    766|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    766|                                     "Invalid floating-point digit");
 1193|    766|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  76.3k|{
 1625|  76.3k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 75.9k, False: 378]
  ------------------
 1626|  75.9k|        return false;
 1627|  75.9k|    }
 1628|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 252]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|  76.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|  76.2k|        : format_handler_base{argcount},
 1900|  76.2k|          parse_ctx{format},
 1901|  76.2k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  76.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  76.2k|    static_cast<    \
  |  |  929|  76.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  76.2k|    static_cast<    \
  |  |  929|  76.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  76.2k|    {
 1903|  76.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|   228k|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|   228k|    {
 1722|   228k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 228k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   228k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|  76.2k|        : contiguous_ctx(source, args, loc)
 1852|  76.2k|    {
 1853|  76.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  76.2k|{
 2038|  76.2k|    const auto beg = handler.get_ctx().begin();
 2039|  76.2k|    detail::parse_format_string<false>(format, handler);
 2040|  76.2k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  76.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 73.3k, False: 2.92k]
  |  |  ------------------
  ------------------
 2041|  73.3k|        return unexpected(handler.error);
 2042|  73.3k|    }
 2043|  2.92k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  76.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   341k|    {
 2022|   341k|        return ctx.get();
 2023|   341k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   341k|    {
 1857|   341k|        return contiguous_ctx;
 1858|   341k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  93.2k|    {
 1907|   111k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 22.5k, False: 89.1k]
  ------------------
 1908|  22.5k|            auto it = get_ctx().begin();
 1909|  22.5k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.03k, False: 21.4k]
  ------------------
 1910|  1.03k|                SCN_UNLIKELY_ATTR
 1911|  1.03k|                return on_error("Unexpected end of source");
 1912|  1.03k|            }
 1913|       |
 1914|  21.4k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|  21.4k|                    detail::make_string_view_from_pointers(begin, end));
 1916|  21.4k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 2.13k, False: 19.3k]
  ------------------
 1917|  2.13k|                SCN_UNLIKELY_ATTR
 1918|  2.13k|                return on_error("Invalid encoding in format string");
 1919|  2.13k|            }
 1920|  19.3k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 6.10k, False: 13.2k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  6.10k|                get_ctx().advance_to(
 1923|  6.10k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  6.10k|                auto begin_it = impl::read_while_classic_space(
 1926|  6.10k|                    detail::make_string_view_from_pointers(
 1927|  6.10k|                        detail::to_address(after_space_it),
 1928|  6.10k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  6.10k|                begin = detail::to_address(begin_it) - 1;
 1931|  6.10k|                continue;
 1932|  6.10k|            }
 1933|       |
 1934|  13.2k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 892, False: 12.3k]
  ------------------
 1935|    892|                SCN_UNLIKELY_ATTR
 1936|    892|                return on_error("Unexpected literal character in source");
 1937|    892|            }
 1938|  12.3k|            get_ctx().advance_to(ranges::next(it));
 1939|  12.3k|        }
 1940|  93.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1971|  5.76k|    {
 1972|  5.76k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  5.76k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  5.76k|        on_visit_scan_arg(
 1976|  5.76k|            impl::default_arg_reader<context_type>{
 1977|  5.76k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  5.76k|            arg);
 1979|  5.76k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  48.0k|{
 1681|  48.0k|    auto arg = ctx.arg(id);
 1682|  48.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  48.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.36k, False: 46.7k]
  |  |  ------------------
  ------------------
 1683|  1.36k|        handler.on_error("Failed to find argument with ID");
 1684|  1.36k|    }
 1685|  48.0k|    return arg;
 1686|  48.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  75.3k|    {
 1797|  75.3k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  75.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.53k, False: 72.8k]
  |  |  ------------------
  ------------------
 1798|  2.53k|            on_error("Invalid out-of-range argument ID");
 1799|  2.53k|            return;
 1800|  2.53k|        }
 1801|       |
 1802|  72.8k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  72.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 72.7k]
  |  |  ------------------
  ------------------
 1803|     98|            return on_error("Argument with this ID has already been scanned");
 1804|     98|        }
 1805|       |
 1806|  72.7k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  72.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 72.7k, False: 0]
  |  |  ------------------
  ------------------
 1807|  72.7k|            visited_args_lower64 |= (1ull << id);
 1808|  72.7k|            return;
 1809|  72.7k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  72.8k|    {
 1782|  72.8k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  72.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72.8k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  72.8k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  72.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 72.8k, False: 0]
  |  |  ------------------
  ------------------
 1788|  72.8k|            return (visited_args_lower64 >> id) & 1ull;
 1789|  72.8k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  72.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  5.76k|    {
 1956|  5.76k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 126, False: 5.63k]
  |  Branch (1956:23): [True: 0, False: 5.63k]
  ------------------
 1957|    126|            SCN_UNLIKELY_ATTR
 1958|    126|            return;
 1959|    126|        }
 1960|       |
 1961|  5.63k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  5.63k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.89k, False: 1.73k]
  |  |  ------------------
  ------------------
 1963|  3.89k|            on_error(r.error());
 1964|  3.89k|        }
 1965|  1.73k|        else {
 1966|  1.73k|            get_ctx().advance_to(*r);
 1967|  1.73k|        }
 1968|  5.63k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  59.4k|    {
 1766|  59.4k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  59.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.4k, False: 0]
  |  |  ------------------
  ------------------
 1767|  59.4k|            error = err;
 1768|  59.4k|        }
 1769|  59.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  46.5k|    {
 1944|  46.5k|        return parse_ctx.next_arg_id();
 1945|  46.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1947|  1.65k|    {
 1948|  1.65k|        parse_ctx.check_arg_id(id);
 1949|  1.65k|        return id;
 1950|  1.65k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  42.3k|    {
 1985|  42.3k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  42.3k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  42.3k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 42.3k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  42.3k|        auto specs = detail::format_specs{};
 1998|  42.3k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  42.3k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  42.3k|            arg.type()};
 2001|       |
 2002|  42.3k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  42.3k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.38k, False: 39.9k]
  |  Branch (2003:29): [True: 496, False: 39.4k]
  ------------------
 2004|  2.87k|            SCN_UNLIKELY_ATTR
 2005|  2.87k|            on_error("Missing '}' in format string");
 2006|  2.87k|            return parse_ctx.begin();
 2007|  2.87k|        }
 2008|  39.4k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  39.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 230, False: 39.2k]
  |  |  ------------------
  ------------------
 2009|    230|            return parse_ctx.begin();
 2010|    230|        }
 2011|  39.2k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  39.2k|        on_visit_scan_arg(
 2014|  39.2k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  39.2k|                                           get_ctx().locale()},
 2016|  39.2k|            arg);
 2017|  39.2k|        return parse_ctx.begin();
 2018|  39.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|  42.3k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  42.3k|    {
 1701|  42.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  39.2k|    {
 1956|  39.2k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 96, False: 39.1k]
  |  Branch (1956:23): [True: 0, False: 39.1k]
  ------------------
 1957|     96|            SCN_UNLIKELY_ATTR
 1958|     96|            return;
 1959|     96|        }
 1960|       |
 1961|  39.1k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  39.1k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  39.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.5k, False: 4.61k]
  |  |  ------------------
  ------------------
 1963|  34.5k|            on_error(r.error());
 1964|  34.5k|        }
 1965|  4.61k|        else {
 1966|  4.61k|            get_ctx().advance_to(*r);
 1967|  4.61k|        }
 1968|  39.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   434k|    {
 1761|   434k|        SCN_UNLIKELY_ATTR
 1762|   434k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   434k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   228k|    {
 1729|   228k|        {
 1730|   228k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 228k]
  ------------------
 1731|   228k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 228k]
  ------------------
 1732|   228k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   228k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   228k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 156k, False: 72.7k]
  ------------------
 1736|   156k|                return on_error("Argument list not exhausted");
 1737|   156k|            }
 1738|   228k|        }
 1739|       |
 1740|  72.7k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 72.7k, False: 0]
  ------------------
 1741|  72.7k|            return;
 1742|  72.7k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   228k|    {
 1777|   228k|        return error;
 1778|   228k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|   483k|    {
 1773|   483k|        return static_cast<bool>(error);
 1774|   483k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  76.3k|{
 2053|  76.3k|    const auto argcount = args.size();
 2054|  76.3k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 76.2k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|  76.2k|    auto handler = format_handler<true, CharT>{
 2060|  76.2k|        ranges::subrange<const CharT*>{source.data(),
 2061|  76.2k|                                       source.data() + source.size()},
 2062|  76.2k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  76.2k|    static_cast<    \
  |  |  929|  76.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  76.2k|    static_cast<    \
  |  |  929|  76.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  76.2k|    return vscan_parse_format_string(format, handler);
 2064|  76.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   152k|{
 2053|   152k|    const auto argcount = args.size();
 2054|   152k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 152k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   152k|    auto handler = format_handler<true, CharT>{
 2060|   152k|        ranges::subrange<const CharT*>{source.data(),
 2061|   152k|                                       source.data() + source.size()},
 2062|   152k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   152k|    return vscan_parse_format_string(format, handler);
 2064|   152k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   152k|{
 1625|   152k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 141k, False: 11.0k]
  ------------------
 1626|   141k|        return false;
 1627|   141k|    }
 1628|  11.0k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 10.9k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   152k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   152k|        : format_handler_base{argcount},
 1900|   152k|          parse_ctx{format},
 1901|   152k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   152k|    {
 1903|   152k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   152k|        : contiguous_ctx(source, args, loc)
 1852|   152k|    {
 1853|   152k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   152k|{
 2038|   152k|    const auto beg = handler.get_ctx().begin();
 2039|   152k|    detail::parse_format_string<false>(format, handler);
 2040|   152k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 151k, False: 1.42k]
  |  |  ------------------
  ------------------
 2041|   151k|        return unexpected(handler.error);
 2042|   151k|    }
 2043|  1.42k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   152k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|   937M|    {
 2022|   937M|        return ctx.get();
 2023|   937M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|   937M|    {
 1857|   937M|        return contiguous_ctx;
 1858|   937M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   157k|    {
 1907|   312M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 312M, False: 106k]
  ------------------
 1908|   312M|            auto it = get_ctx().begin();
 1909|   312M|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 396, False: 312M]
  ------------------
 1910|    396|                SCN_UNLIKELY_ATTR
 1911|    396|                return on_error("Unexpected end of source");
 1912|    396|            }
 1913|       |
 1914|   312M|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   312M|                    detail::make_string_view_from_pointers(begin, end));
 1916|   312M|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 49.4k, False: 312M]
  ------------------
 1917|  49.4k|                SCN_UNLIKELY_ATTR
 1918|  49.4k|                return on_error("Invalid encoding in format string");
 1919|  49.4k|            }
 1920|   312M|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 1.56k, False: 312M]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  1.56k|                get_ctx().advance_to(
 1923|  1.56k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  1.56k|                auto begin_it = impl::read_while_classic_space(
 1926|  1.56k|                    detail::make_string_view_from_pointers(
 1927|  1.56k|                        detail::to_address(after_space_it),
 1928|  1.56k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  1.56k|                begin = detail::to_address(begin_it) - 1;
 1931|  1.56k|                continue;
 1932|  1.56k|            }
 1933|       |
 1934|   312M|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 556, False: 312M]
  ------------------
 1935|    556|                SCN_UNLIKELY_ATTR
 1936|    556|                return on_error("Unexpected literal character in source");
 1937|    556|            }
 1938|   312M|            get_ctx().advance_to(ranges::next(it));
 1939|   312M|        }
 1940|   157k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1971|  4.25k|    {
 1972|  4.25k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  4.25k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  4.25k|        on_visit_scan_arg(
 1976|  4.25k|            impl::default_arg_reader<context_type>{
 1977|  4.25k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  4.25k|            arg);
 1979|  4.25k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  27.2k|{
 1681|  27.2k|    auto arg = ctx.arg(id);
 1682|  27.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.17k, False: 26.0k]
  |  |  ------------------
  ------------------
 1683|  1.17k|        handler.on_error("Failed to find argument with ID");
 1684|  1.17k|    }
 1685|  27.2k|    return arg;
 1686|  27.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  4.25k|    {
 1956|  4.25k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 112, False: 4.14k]
  |  Branch (1956:23): [True: 0, False: 4.14k]
  ------------------
 1957|    112|            SCN_UNLIKELY_ATTR
 1958|    112|            return;
 1959|    112|        }
 1960|       |
 1961|  4.14k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  4.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  4.14k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  4.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.93k, False: 1.20k]
  |  |  ------------------
  ------------------
 1963|  2.93k|            on_error(r.error());
 1964|  2.93k|        }
 1965|  1.20k|        else {
 1966|  1.20k|            get_ctx().advance_to(*r);
 1967|  1.20k|        }
 1968|  4.14k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  27.0k|    {
 1944|  27.0k|        return parse_ctx.next_arg_id();
 1945|  27.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1947|    270|    {
 1948|    270|        parse_ctx.check_arg_id(id);
 1949|    270|        return id;
 1950|    270|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  22.9k|    {
 1985|  22.9k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  22.9k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  22.9k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 22.9k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  22.9k|        auto specs = detail::format_specs{};
 1998|  22.9k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  22.9k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  22.9k|            arg.type()};
 2001|       |
 2002|  22.9k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  22.9k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 1.93k, False: 21.0k]
  |  Branch (2003:29): [True: 354, False: 20.7k]
  ------------------
 2004|  2.28k|            SCN_UNLIKELY_ATTR
 2005|  2.28k|            on_error("Missing '}' in format string");
 2006|  2.28k|            return parse_ctx.begin();
 2007|  2.28k|        }
 2008|  20.7k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 264, False: 20.4k]
  |  |  ------------------
  ------------------
 2009|    264|            return parse_ctx.begin();
 2010|    264|        }
 2011|  20.4k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  20.4k|        on_visit_scan_arg(
 2014|  20.4k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  20.4k|                                           get_ctx().locale()},
 2016|  20.4k|            arg);
 2017|  20.4k|        return parse_ctx.begin();
 2018|  20.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|  22.9k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  22.9k|    {
 1701|  22.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  20.4k|    {
 1956|  20.4k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 110, False: 20.3k]
  |  Branch (1956:23): [True: 0, False: 20.3k]
  ------------------
 1957|    110|            SCN_UNLIKELY_ATTR
 1958|    110|            return;
 1959|    110|        }
 1960|       |
 1961|  20.3k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  20.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  20.3k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  20.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.1k, False: 2.17k]
  |  |  ------------------
  ------------------
 1963|  18.1k|            on_error(r.error());
 1964|  18.1k|        }
 1965|  2.17k|        else {
 1966|  2.17k|            get_ctx().advance_to(*r);
 1967|  2.17k|        }
 1968|  20.3k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|  4.23k|{
 1351|  4.23k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|  4.23k|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|  4.23k|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|  4.23k|            return transcode_to_string_impl_to32(src, dest);
 1362|  4.23k|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|  4.23k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  4.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|  4.23k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|  4.23k|{
 1244|  4.23k|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|  4.23k|    auto it = src.begin();
 1247|   389k|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 385k, False: 4.23k]
  ------------------
 1248|   385k|        auto res = get_next_code_point(
 1249|   385k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|   385k|                                                                 src.end()));
 1251|   385k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.89k, False: 376k]
  |  |  ------------------
  ------------------
 1252|  8.89k|            dest.push_back(DestCharT{0xfffd});
 1253|  8.89k|        }
 1254|   376k|        else {
 1255|   376k|            dest.push_back(res.value);
 1256|   376k|        }
 1257|   385k|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|   385k|    }
 1259|  4.23k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   474k|{
 1169|   474k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   474k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   474k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   474k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   474k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.00k, False: 465k]
  |  |  ------------------
  ------------------
 1173|  9.00k|        return {get_start_for_next_code_point(input),
 1174|  9.00k|                detail::invalid_code_point};
 1175|  9.00k|    }
 1176|   465k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 938, False: 464k]
  |  |  ------------------
  ------------------
 1177|    938|        return {input.end(), detail::invalid_code_point};
 1178|    938|    }
 1179|       |
 1180|   464k|    return {input.begin() + len,
 1181|   464k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   465k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  9.00k|{
 1155|  9.00k|    auto it = input.begin();
 1156|  27.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 25.9k, False: 1.29k]
  ------------------
 1157|  25.9k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 7.71k, False: 18.2k]
  ------------------
 1158|  7.71k|            break;
 1159|  7.71k|        }
 1160|  25.9k|    }
 1161|  9.00k|    return it;
 1162|  9.00k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  41.5k|    constexpr parse_error(code c) : m_code(c)
  808|  41.5k|    {
  809|  41.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  41.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  41.5k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  14.9k|    {
  823|  14.9k|        return a.m_code == b.m_code;
  824|  14.9k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2919|  34.3k|    {
 2920|  34.3k|        SCN_UNLIKELY_ATTR
 2921|  34.3k|        m_msg = msg;
 2922|  34.3k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|  59.4k|    {
 2925|  59.4k|        return m_msg == nullptr;
 2926|  59.4k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3633|    934|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4978|   334k|    {
 4979|   334k|        on_charset_range(cp, cp + 1);
 4980|   334k|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4983|   336k|    {
 4984|   336k|        if (end <= 127) {
  ------------------
  |  Branch (4984:13): [True: 168k, False: 167k]
  ------------------
 4985|   168k|            return;
 4986|   168k|        }
 4987|       |
 4988|  31.1M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4988:25): [True: 31.1M, False: 166k]
  ------------------
 4989|       |            // TODO: check for overlap
 4990|  31.1M|            if (elem.first == end) {
  ------------------
  |  Branch (4990:17): [True: 510, False: 31.1M]
  ------------------
 4991|    510|                elem.first = begin;
 4992|    510|                return;
 4993|    510|            }
 4994|       |
 4995|  31.1M|            if (elem.second == begin) {
  ------------------
  |  Branch (4995:17): [True: 984, False: 31.1M]
  ------------------
 4996|    984|                elem.second = end;
 4997|    984|                return;
 4998|    984|            }
 4999|  31.1M|        }
 5000|       |
 5001|   166k|        extra_ranges.push_back(std::make_pair(begin, end));
 5002|   166k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5005|    552|    {
 5006|       |        // no-op
 5007|    552|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5020|   342k|    {
 5021|   342k|        return static_cast<bool>(err);
 5022|   342k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5338|  1.22k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  33.4k|{
  458|  33.4k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  33.4k|        static_cast<unsigned char>(ch))];
  460|  33.4k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   237k|{
  469|   237k|    return static_cast<unsigned char>(ch) <= 127;
  470|   237k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  1.53k|{
  474|  1.53k|#if WCHAR_MIN < 0
  475|  1.53k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 1.52k, False: 12]
  |  Branch (475:23): [True: 1.52k, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  1.53k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   255k|{
  483|   255k|    return cp <= 127;
  484|   255k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  28.3k|{
  539|  28.3k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  28.3k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  44.1k|{
  784|  44.1k|    return e != eof_error::good;
  785|  44.1k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    174|{
  798|    174|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    174|    return scan_error{scan_error::end_of_range, "EOF"};
  800|    174|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    714|{
  845|    714|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    714|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    714|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    714|    return parse_error::eof;
  847|    714|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.38k|{
  854|  3.38k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.38k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.38k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 76, False: 3.30k]
  ------------------
  859|     76|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     76|    }
  861|       |
  862|  3.30k|    return scan_error{code, msg};
  863|  3.38k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.38k|{
  868|  3.38k|    return [code, msg](parse_error err) {
  869|  3.38k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.38k|    };
  871|  3.38k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2208|  3.65k|{
 2209|  3.65k|    unsigned char running_diff{0};
 2210|  12.7k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2210:24): [True: 9.10k, False: 3.65k]
  ------------------
 2211|  9.10k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2212|  9.10k|    }
 2213|  3.65k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2213:12): [True: 0, False: 3.65k]
  |  Branch (2213:33): [True: 0, False: 3.65k]
  ------------------
 2214|  3.65k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2291|  95.0k|{
 2292|  95.0k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2292:9): [True: 19.4k, False: 75.5k]
  ------------------
 2293|  95.0k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2293:10): [True: 90, False: 19.3k]
  ------------------
 2294|  19.4k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2294:10): [True: 108, False: 19.2k]
  ------------------
 2295|  19.4k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2295:10): [True: 72, False: 19.1k]
  ------------------
 2296|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2297|  19.4k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2297:11): [True: 7.93k, False: 11.2k]
  |  Branch (2297:27): [True: 1.13k, False: 6.80k]
  |  Branch (2297:43): [True: 304, False: 834]
  ------------------
 2298|  19.4k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2298:11): [True: 6.80k, False: 12.0k]
  |  Branch (2298:27): [True: 58, False: 6.74k]
  ------------------
 2299|  19.4k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2299:11): [True: 6.71k, False: 12.0k]
  |  Branch (2299:27): [True: 86, False: 6.63k]
  ------------------
 2300|  19.4k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2300:11): [True: 6.63k, False: 12.0k]
  |  Branch (2300:27): [True: 462, False: 6.17k]
  ------------------
 2301|  19.4k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2301:11): [True: 6.17k, False: 12.0k]
  |  Branch (2301:27): [True: 82, False: 6.08k]
  ------------------
 2302|  19.4k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2302:11): [True: 6.08k, False: 12.0k]
  |  Branch (2302:27): [True: 206, False: 5.88k]
  ------------------
 2303|  19.4k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2303:11): [True: 5.88k, False: 12.0k]
  |  Branch (2303:27): [True: 80, False: 5.80k]
  ------------------
 2304|  19.4k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2304:11): [True: 5.64k, False: 12.2k]
  |  Branch (2304:28): [True: 178, False: 5.46k]
  ------------------
 2305|  19.4k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2305:11): [True: 5.46k, False: 12.2k]
  |  Branch (2305:28): [True: 446, False: 5.01k]
  ------------------
 2306|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2307|  19.4k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2307:11): [True: 5.16k, False: 12.0k]
  |  Branch (2307:28): [True: 78, False: 5.09k]
  ------------------
 2308|       |         // Supplemental Symbols and Pictographs:
 2309|  19.4k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2309:11): [True: 5.09k, False: 12.0k]
  |  Branch (2309:28): [True: 72, False: 5.01k]
  ------------------
 2310|  2.32k|        return 2;
 2311|  2.32k|    }
 2312|  92.6k|    return 1;
 2313|  95.0k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2316|  53.0k|{
 2317|  53.0k|    return calculate_text_width_for_fmt_v10(cp);
 2318|  53.0k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2331|    190|{
 2332|    190|    return calculate_text_width_for_fmt_v10(cp);
 2333|    190|}
_ZN3scn2v34impl11char_to_intEc:
 3111|  14.2k|{
 3112|  14.2k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3113|  14.2k|}
_ZN3scn2v34impl11char_to_intEw:
 3115|  6.24k|{
 3116|  6.24k|#if WCHAR_MIN < 0
 3117|  6.24k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3117:9): [True: 6.24k, False: 0]
  |  Branch (3117:20): [True: 6.24k, False: 0]
  ------------------
 3118|       |#else
 3119|       |    if (ch <= 255) {
 3120|       |#endif
 3121|  6.24k|        return char_to_int(static_cast<char>(ch));
 3122|  6.24k|    }
 3123|      0|    return 255;
 3124|  6.24k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4259|  11.9k|{
 4260|  11.9k|    std::regex_constants::syntax_option_type result{};
 4261|  11.9k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4261:9): [True: 270, False: 11.7k]
  ------------------
 4262|    270|#if SCN_HAS_STD_REGEX_MULTILINE
 4263|    270|        result |= std::regex_constants::multiline;
 4264|       |#else
 4265|       |        return unexpected_scan_error(
 4266|       |            scan_error::invalid_format_string,
 4267|       |            "/m flag for regex isn't supported by regex backend");
 4268|       |#endif
 4269|    270|    }
 4270|  11.9k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4270:9): [True: 0, False: 11.9k]
  ------------------
 4271|  11.9k|        detail::regex_flags::none) {
 4272|      0|        return unexpected_scan_error(
 4273|      0|            scan_error::invalid_format_string,
 4274|      0|            "/s flag for regex isn't supported by regex backend");
 4275|      0|    }
 4276|  11.9k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4276:9): [True: 906, False: 11.0k]
  ------------------
 4277|    906|        result |= std::regex_constants::icase;
 4278|    906|    }
 4279|  11.9k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4279:9): [True: 12, False: 11.9k]
  ------------------
 4280|     12|        result |= std::regex_constants::nosubs;
 4281|     12|    }
 4282|  11.9k|    return result;
 4283|  11.9k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4626|    384|{
 4627|    384|    std::string result{pattern};
 4628|  2.26k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4628:24): [True: 1.88k, False: 384]
  ------------------
 4629|  1.88k|        result.replace(n, 2, "/");
 4630|  1.88k|        ++n;
 4631|  1.88k|    }
 4632|    384|    return result;
 4633|    384|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4635|    126|{
 4636|    126|    std::wstring result{pattern};
 4637|    936|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4637:24): [True: 810, False: 126]
  ------------------
 4638|    810|        result.replace(n, 2, L"/");
 4639|    810|        ++n;
 4640|    810|    }
 4641|    126|    return result;
 4642|    126|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|  7.64k|{
 5997|  7.64k|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 1.92k, False: 5.71k]
  ------------------
 5998|  1.92k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 846, False: 1.08k]
  ------------------
 5999|    846|            return {scan_error::invalid_scanned_value,
 6000|    846|                    "Scanned value too narrow, width did not exceed what "
 6001|    846|                    "was specified in the format string"};
 6002|    846|        }
 6003|  1.92k|    }
 6004|  6.79k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 1.71k, False: 5.08k]
  ------------------
 6005|  1.71k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 0, False: 1.71k]
  ------------------
 6006|      0|            return {scan_error::invalid_scanned_value,
 6007|      0|                    "Scanned value too wide, width exceeded the specified "
 6008|      0|                    "precision"};
 6009|      0|        }
 6010|  1.71k|    }
 6011|  6.79k|    return {};
 6012|  6.79k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  43.0k|    {
  304|  43.0k|        ranges::advance(x, n);
  305|  43.0k|        return x;
  306|  43.0k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  43.0k|    {
  268|  43.0k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  43.0k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  75.6k|    {
  151|  75.6k|        i += n;
  152|  75.6k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  52.9k|    {
  108|  52.9k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  52.9k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  52.9k|    {
   87|  52.9k|        return s - i;
   88|  52.9k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  5.58k|    {
  304|  5.58k|        ranges::advance(x, n);
  305|  5.58k|        return x;
  306|  5.58k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  5.58k|    {
  268|  5.58k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.58k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  5.58k|    {
  151|  5.58k|        i += n;
  152|  5.58k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.28k|    {
  108|  3.28k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.28k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.28k|    {
   87|  3.28k|        return s - i;
   88|  3.28k|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5612|  4.33k|    {
 5613|  4.33k|        reader_error_handler eh{};
 5614|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5615|       |            detail::check_code_point_type_specs(specs, eh);
 5616|       |        }
 5617|  4.33k|        else {
 5618|  4.33k|            detail::check_char_type_specs(specs, eh);
 5619|  4.33k|        }
 5620|  4.33k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.80k, False: 530]
  |  |  ------------------
  ------------------
 5621|  3.80k|            return {scan_error::invalid_format_string, eh.m_msg};
 5622|  3.80k|        }
 5623|    530|        return {};
 5624|  4.33k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  21.1k|    {
  763|  21.1k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  21.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  21.1k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.75k|        : m_fptr([](storage fn,
  743|  2.75k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.75k|              cvref<T> obj = *get<T>(fn);
  745|  2.75k|              if constexpr (std::is_void_v<R>) {
  746|  2.75k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.75k|              }
  748|  2.75k|              else {
  749|  2.75k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.75k|              }
  751|  2.75k|          }),
  752|  2.75k|          m_storage(std::addressof(f))
  753|  2.75k|    {
  754|  2.75k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  6.61k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.61k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.61k|              else {
  749|  6.61k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.61k|              }
  751|  6.61k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  6.61k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.61k|        else if constexpr (std::is_object_v<T>) {
  688|  6.61k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.61k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.75k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.75k|        {
  662|  2.75k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|   567k|    {
  763|   567k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   567k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   567k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  14.7k|        : m_fptr([](storage fn,
  743|  14.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.7k|              cvref<T> obj = *get<T>(fn);
  745|  14.7k|              if constexpr (std::is_void_v<R>) {
  746|  14.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.7k|              }
  748|  14.7k|              else {
  749|  14.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.7k|              }
  751|  14.7k|          }),
  752|  14.7k|          m_storage(std::addressof(f))
  753|  14.7k|    {
  754|  14.7k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   264k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   264k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   264k|              else {
  749|   264k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   264k|              }
  751|   264k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   264k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   264k|        else if constexpr (std::is_object_v<T>) {
  688|   264k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   264k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  14.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  14.7k|        {
  662|  14.7k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5607|  1.62k|    {
 5608|  1.62k|        return false;
 5609|  1.62k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.38k|    return [code, msg](parse_error err) {
  869|  3.38k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.38k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1767|     64|    {
 1768|     64|        auto stdloc = loc.get<std::locale>();
 1769|     64|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|     64|        grouping = numpunct.grouping();
 1771|     64|        thousands_sep =
 1772|     64|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 64]
  ------------------
 1773|     64|        decimal_point = numpunct.decimal_point();
 1774|     64|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1704|     84|{
 1705|     84|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 84, False: 0]
  ------------------
 1706|     84|        return std::use_facet<Facet>(stdloc);
 1707|     84|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|     84|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2337|  21.9k|{
 2338|  21.9k|    size_t count{0};
 2339|  21.9k|    for_each_code_point(input, [&count](char32_t cp) {
 2340|  21.9k|        count += calculate_text_width_for_fmt_v10(cp);
 2341|  21.9k|    });
 2342|  21.9k|    return count;
 2343|  21.9k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1433|  21.9k|{
 1434|       |    // TODO: Could be optimized by being eager
 1435|  21.9k|    auto it = input.begin();
 1436|  56.6k|    while (it != input.end()) {
  ------------------
  |  Branch (1436:12): [True: 34.7k, False: 21.9k]
  ------------------
 1437|  34.7k|        auto res = get_next_code_point(
 1438|  34.7k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1439|  34.7k|        cb(res.value);
 1440|  34.7k|        it = detail::make_string_view_iterator(input, res.iterator);
 1441|  34.7k|    }
 1442|  21.9k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  41.7k|    {
  763|  41.7k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  41.7k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  21.9k|        : m_fptr([](storage fn,
  743|  21.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.9k|              cvref<T> obj = *get<T>(fn);
  745|  21.9k|              if constexpr (std::is_void_v<R>) {
  746|  21.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.9k|              }
  748|  21.9k|              else {
  749|  21.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.9k|              }
  751|  21.9k|          }),
  752|  21.9k|          m_storage(std::addressof(f))
  753|  21.9k|    {
  754|  21.9k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  34.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.7k|              cvref<T> obj = *get<T>(fn);
  745|  34.7k|              if constexpr (std::is_void_v<R>) {
  746|  34.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  34.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  34.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  34.7k|        else if constexpr (std::is_object_v<T>) {
  688|  34.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  34.7k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2339|  34.7k|    for_each_code_point(input, [&count](char32_t cp) {
 2340|  34.7k|        count += calculate_text_width_for_fmt_v10(cp);
 2341|  34.7k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  21.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  21.9k|        {
  662|  21.9k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|  3.55k|    {
 1570|  3.55k|        return m_view;
 1571|  3.55k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|  3.73k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2409|  3.52k|    {
 2410|  3.52k|        return m_multibyte_left;
 2411|  3.52k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2414|  85.9k|    {
 2415|  85.9k|        return *m_current;
 2416|  85.9k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2423|  99.1k|    {
 2424|  99.1k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  99.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  99.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2425|  99.1k|        _increment_current();
 2426|  99.1k|        return *this;
 2427|  99.1k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2656|  99.1k|    {
 2657|  99.1k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2657:13): [True: 55.3k, False: 43.8k]
  ------------------
 2658|  55.3k|            auto cplen = _get_cp_length_at_current();
 2659|  55.3k|            m_multibyte_left = cplen - 1;
 2660|  55.3k|            m_count -= _get_width_at_current_cp_start(cplen);
 2661|  55.3k|        }
 2662|  43.8k|        else {
 2663|  43.8k|            --m_multibyte_left;
 2664|  43.8k|        }
 2665|       |
 2666|  99.1k|        ++m_current;
 2667|  99.1k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2627|  55.3k|    {
 2628|  55.3k|        return static_cast<difference_type>(
 2629|  55.3k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2630|  55.3k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2633|  55.3k|    {
 2634|  55.3k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  55.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 514, False: 54.8k]
  |  |  ------------------
  ------------------
 2635|    514|            return 0;
 2636|    514|        }
 2637|       |
 2638|  54.8k|        if (cplen == 1) {
  ------------------
  |  Branch (2638:13): [True: 36.9k, False: 17.8k]
  ------------------
 2639|  36.9k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  36.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2640|  36.9k|            auto cp = static_cast<char32_t>(*m_current);
 2641|  36.9k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2642|  36.9k|        }
 2643|       |
 2644|  17.8k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2645|  17.8k|                                           cplen);
 2646|  17.8k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 310, False: 17.5k]
  |  |  ------------------
  ------------------
 2647|    310|            return 0;
 2648|    310|        }
 2649|       |
 2650|  17.5k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2651|  17.5k|        return static_cast<difference_type>(
 2652|  17.5k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2653|  17.8k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|  20.1k|{
 1845|  20.1k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  20.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|  20.1k|    if constexpr (ranges::sized_range<Range>) {
 1848|  20.1k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|  20.1k|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 418, False: 19.7k]
  ------------------
 1850|    418|            return unexpected(eof_error::eof);
 1851|    418|        }
 1852|       |
 1853|  19.7k|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|  20.1k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2519|  57.5k|    {
 2520|  57.5k|        return !(a == b);
 2521|  57.5k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2511|  64.9k|    {
 2512|  64.9k|        return a.m_current == b.m_current;
 2513|  64.9k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2418|  7.89k|    {
 2419|  7.89k|        return *m_current;
 2420|  7.89k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.09k|    {
  268|  1.09k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.09k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.09k|    {
  161|  1.09k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.09k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.09k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.09k|        else {
  169|  1.09k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.09k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.09k|        }
  173|  1.09k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1877|  16.7k|    {
 1878|  16.7k|        return !codepoint.empty();
 1879|  16.7k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1670|  1.43k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|  1.43k|    else {
 1677|  1.43k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|  1.43k|    }
 1679|  1.43k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1524|  1.43k|    {
 1525|  1.43k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|  1.43k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1608|  1.43k|    {
 1609|  1.43k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|  1.43k|        else {
 1642|  1.43k|            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|  1.43k|            if constexpr (ranges::common_range<Range>) {
 1647|  1.43k|                std::copy(ranges::begin(range), ranges::end(range),
 1648|  1.43k|                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|  1.43k|            m_view = string_view_type{str};
 1657|  1.43k|        }
 1658|  1.43k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2369|  18.0k|        : m_current(x), m_end(s), m_count(n)
 2370|  18.0k|    {
 2371|  18.0k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2401|  97.2k|    {
 2402|  97.2k|        return m_current;
 2403|  97.2k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2820|  7.13k|    {
 2821|  7.13k|        return take_width_view{r, n};
 2822|  7.13k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2788|  7.13k|        : m_base(base), m_count(count)
 2789|  7.13k|    {
 2790|  7.13k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2702|  7.13k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5651|    262|    {
 5652|    262|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5652:13): [True: 230, False: 32]
  ------------------
 5653|    262|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5653:13): [True: 0, False: 32]
  ------------------
 5654|    230|            return read_default(range, value, loc);
 5655|    230|        }
 5656|       |
 5657|     32|        reader_impl_for_int<CharT> reader{};
 5658|     32|        signed char tmp_value{};
 5659|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5660|     32|        value = static_cast<signed char>(value);
 5661|     32|        return ret;
 5662|    262|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5633|    230|    {
 5634|    230|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    230|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5635|    230|        if constexpr (std::is_same_v<CharT, char>) {
 5636|    230|            return code_unit_reader<char>{}.read(range, value);
 5637|       |        }
 5638|       |        else {
 5639|       |            SCN_UNUSED(range);
 5640|       |            SCN_EXPECT(false);
 5641|       |            SCN_UNREACHABLE;
 5642|       |        }
 5643|    230|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5552|    230|    {
 5553|    230|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 230]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5554|    230|        ch = *range.begin();
 5555|    230|        return it;
 5556|    230|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1833|  1.71k|{
 1834|  1.71k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.71k]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|  1.71k|    return ranges::next(range.begin());
 1839|  1.71k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  1.71k|{
  950|  1.71k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.71k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.71k|    return eof_error::good;
  954|  1.71k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  1.71k|{
  944|  1.71k|    return is_range_eof(r.begin(), r.end());
  945|  1.71k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  18.4k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  18.4k|    {
  937|  18.4k|        return begin == end;
  938|  18.4k|    }
  939|  18.4k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2758|  91.8k|        {
 2759|  91.8k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2759:21): [True: 3.52k, False: 88.3k]
  |  Branch (2759:39): [True: 826, False: 2.70k]
  ------------------
 2760|  91.8k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2760:20): [True: 864, False: 90.1k]
  ------------------
 2761|  91.8k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2804|  47.7k|    {
 2805|  47.7k|        return sentinel<true>{m_base.get().end()};
 2806|  47.7k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2705|  83.7k|    {
 2706|  83.7k|        return view;
 2707|  83.7k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2739|  47.7k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  47.7k|    static_cast<    \
  |  |  929|  47.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.74k|    {
  296|  1.74k|        ++x;
  297|  1.74k|        return x;
  298|  1.74k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2798|  18.0k|    {
 2799|  18.0k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2800|  18.0k|                                      m_count};
 2801|  18.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|     32|    {
 3528|     32|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|     32|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|     32|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 32]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|     32|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 32]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|     32|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3554|     32|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     32|    }                                                  \
  |  |  |  | 3667|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3314|    744|{
 3315|    744|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|    744|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    744|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    744|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    744|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 744]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    744|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    744|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|    744|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|    744|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|    744|        parse_integer_base_prefix(
 3320|    744|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|    744|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 0, False: 744]
  ------------------
 3323|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 0, False: 0]
  |  Branch (3323:13): [True: 0, False: 0]
  ------------------
 3324|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 0, False: 0]
  ------------------
 3325|      0|            digits_begin_it = base_prefix_begin_it;
 3326|      0|        }
 3327|      0|        else {
 3328|      0|            parsed_zero = false;
 3329|      0|        }
 3330|      0|    }
 3331|    744|    else {
 3332|    744|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 0, False: 744]
  |  Branch (3332:13): [True: 744, False: 0]
  ------------------
 3333|    744|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 744, False: 0]
  ------------------
 3334|    744|            digits_begin_it = base_prefix_begin_it;
 3335|    744|        }
 3336|    744|    }
 3337|       |
 3338|    744|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 744, False: 0]
  ------------------
 3339|    744|        sign = sign_type::plus_sign;
 3340|    744|    }
 3341|    744|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|    744|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|    744|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3129|    988|{
 3130|    988|    auto r = read_one_of_code_unit(range, "+-");
 3131|    988|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 988, False: 0]
  ------------------
 3132|    988|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 988, False: 0]
  ------------------
 3133|    988|            return std::pair{range.begin(), sign_type::default_sign};
 3134|    988|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|    988|    }
 3137|       |
 3138|      0|    auto& it = *r;
 3139|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 0, False: 0]
  ------------------
 3140|      0|        return std::pair{it, sign_type::minus_sign};
 3141|      0|    }
 3142|      0|    return std::pair{it, sign_type::plus_sign};
 3143|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2260|    988|{
 2261|    988|    auto it = read_code_unit(range);
 2262|    988|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    988|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 988]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|  1.97k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 1.97k, False: 988]
  ------------------
 2267|  1.97k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 0, False: 1.97k]
  ------------------
 2268|      0|            return *it;
 2269|      0|        }
 2270|  1.97k|    }
 2271|       |
 2272|    988|    return unexpected(parse_error::error);
 2273|    988|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3281|    744|{
 3282|    744|    switch (base) {
 3283|     14|        case 2:
  ------------------
  |  Branch (3283:9): [True: 14, False: 730]
  ------------------
 3284|       |            // allow 0b/0B
 3285|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|     14|                    false};
 3287|       |
 3288|     14|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 14, False: 730]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|     14|            bool zero_parsed = false;
 3291|     14|            auto it = apply_opt(
 3292|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|     14|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|    238|        case 16:
  ------------------
  |  Branch (3296:9): [True: 238, False: 506]
  ------------------
 3297|       |            // allow 0x/0X
 3298|    238|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|    238|                    false};
 3300|       |
 3301|     20|        case 0:
  ------------------
  |  Branch (3301:9): [True: 20, False: 724]
  ------------------
 3302|       |            // detect base
 3303|     20|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|    458|        default:
  ------------------
  |  Branch (3305:9): [True: 458, False: 286]
  ------------------
 3306|       |            // no base prefix allowed
 3307|    458|            return {range.begin(), base, false};
 3308|    744|    }
 3309|    744|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2279|    266|{
 2280|    266|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 266, False: 0]
  ------------------
 2281|    266|        return range.begin();
 2282|    266|    }
 2283|      0|    return *result;
 2284|    266|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3232|     34|{
 3233|     34|    return read_matching_string_classic_nocase(range, "0b");
 3234|     34|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2219|  1.04k|{
 2220|  1.04k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  1.04k|    else {
 2233|  1.04k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.04k|            if (ch < 'A' || ch > 'Z') {
 2235|  1.04k|                return ch;
 2236|  1.04k|            }
 2237|  1.04k|            return static_cast<char_type>(ch +
 2238|  1.04k|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.04k|        };
 2240|       |
 2241|  1.04k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 182, False: 858]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    182|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    182|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    182|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    182|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    182|    }                                                  \
  |  |  |  | 3667|  1.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    858|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|    858|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|    858|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|    858|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    858|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 858, False: 0]
  |  |  ------------------
  ------------------
 2246|    858|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|    858|                    return ascii_tolower(a) ==
 2248|    858|                           static_cast<detail::char_t<Range>>(b);
 2249|    858|                }))) {
 2250|    858|            return unexpected(parse_error::error);
 2251|    858|        }
 2252|       |
 2253|      0|        return it;
 2254|    858|    }
 2255|  1.04k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1844|  3.67k|{
 1845|  3.67k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|  3.67k|    else {
 1856|  3.67k|        auto it = range.begin();
 1857|  3.67k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 3.67k]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  13.5k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 10.0k, False: 3.46k]
  ------------------
 1862|  10.0k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 210, False: 9.88k]
  ------------------
 1863|    210|                return unexpected(eof_error::eof);
 1864|    210|            }
 1865|  10.0k|        }
 1866|       |
 1867|  3.46k|        return it;
 1868|  3.67k|    }
 1869|  3.67k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  3.67k|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|  3.67k|    else {
 1115|  3.67k|        return 0;
 1116|  3.67k|    }
 1117|  3.67k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2233|    858|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|    858|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 42, False: 816]
  |  Branch (2234:29): [True: 816, False: 0]
  ------------------
 2235|    858|                return ch;
 2236|    858|            }
 2237|      0|            return static_cast<char_type>(ch +
 2238|      0|                                          static_cast<char_type>('a' - 'A'));
 2239|    858|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3246|     34|{
 3247|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 34]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 0, False: 34]
  ------------------
 3252|      0|        zero_parsed = true;
 3253|      0|        return *r;
 3254|      0|    }
 3255|       |
 3256|     34|    return unexpected(parse_error::error);
 3257|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2134|     34|{
 2135|     34|    auto it = read_code_unit(range);
 2136|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2141|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|     34|        return unexpected(parse_error::error);
 2143|     34|    }
 2144|       |
 2145|      0|    return *it;
 2146|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1833|     34|{
 1834|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|     34|    return ranges::next(range.begin());
 1839|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  16.7k|{
  944|  16.7k|    return is_range_eof(r.begin(), r.end());
  945|  16.7k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3239|    258|{
 3240|    258|    return read_matching_string_classic_nocase(range, "0x");
 3241|    258|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3262|     20|{
 3263|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 20]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 20]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|     20|    {
 3270|     20|        bool zero_parsed{false};
 3271|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 0, False: 20]
  ------------------
 3272|      0|            return {*r, 8, zero_parsed};
 3273|      0|        }
 3274|     20|    }
 3275|     20|    return {range.begin(), 10, false};
 3276|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3348|    724|{
 3349|    724|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|       |    if constexpr (ranges::contiguous_range<Range>) {
 3352|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3353|       |            return unexpected_scan_error(
 3354|       |                scan_error::invalid_scanned_value,
 3355|       |                "Failed to parse integer: No digits found");
 3356|       |        }
 3357|       |        return range.end();
 3358|       |    }
 3359|    724|    else {
 3360|    724|        return read_while1_code_unit(range,
 3361|    724|                                     [&](char_type ch) noexcept {
 3362|    724|                                         return char_to_int(ch) < base;
 3363|    724|                                     })
 3364|    724|            .transform_error(map_parse_error_to_scan_error(
 3365|    724|                scan_error::invalid_scanned_value,
 3366|    724|                "Failed to parse integer: No digits found"));
 3367|    724|    }
 3368|    724|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1983|    968|{
 1984|    968|    auto it = read_while_code_unit(range, pred);
 1985|    968|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 968, False: 0]
  ------------------
 1986|    968|        return unexpected(parse_error::error);
 1987|    968|    }
 1988|      0|    return it;
 1989|    968|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1963|    968|{
 1964|    968|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    968|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1944|    968|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    968|    else {
 1949|    968|        auto first = range.begin();
 1950|    968|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 968, False: 0]
  ------------------
 1951|    968|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 968, False: 0]
  ------------------
 1952|    968|                return first;
 1953|    968|            }
 1954|    968|        }
 1955|      0|        return first;
 1956|    968|    }
 1957|    968|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  48.2k|        {
 2770|  48.2k|            return !(y == x);
 2771|  48.2k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    724|        : m_fptr([](storage fn,
  743|    724|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    724|              cvref<T> obj = *get<T>(fn);
  745|    724|              if constexpr (std::is_void_v<R>) {
  746|    724|                  obj(static_cast<decltype(args)>(args)...);
  747|    724|              }
  748|    724|              else {
  749|    724|                  return obj(static_cast<decltype(args)>(args)...);
  750|    724|              }
  751|    724|          }),
  752|    724|          m_storage(std::addressof(f))
  753|    724|    {
  754|    724|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    724|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    724|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    724|              else {
  749|    724|                  return obj(static_cast<decltype(args)>(args)...);
  750|    724|              }
  751|    724|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    724|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    724|        else if constexpr (std::is_object_v<T>) {
  688|    724|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    724|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3361|    724|                                     [&](char_type ch) noexcept {
 3362|    724|                                         return char_to_int(ch) < base;
 3363|    724|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    724|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    724|        {
  662|    724|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3378|     20|{
 3379|     20|    std::basic_string<CharT> output;
 3380|     20|    std::string thsep_indices;
 3381|     20|    auto it = range.begin();
 3382|     20|    bool digit_matched = false;
 3383|     20|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 20, False: 0]
  ------------------
 3384|     20|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 0, False: 20]
  ------------------
 3385|      0|            thsep_indices.push_back(
 3386|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|      0|        }
 3388|     20|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 20, False: 0]
  ------------------
 3389|     20|            break;
 3390|     20|        }
 3391|      0|        else {
 3392|      0|            output.push_back(*it);
 3393|      0|            digit_matched = true;
 3394|      0|        }
 3395|     20|    }
 3396|     20|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3397|     20|        return unexpected_scan_error(
 3398|     20|            scan_error::invalid_scanned_value,
 3399|     20|            "Failed to parse integer: No digits found");
 3400|     20|    }
 3401|      0|    return std::tuple{it, output, thsep_indices};
 3402|     20|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2405|  93.8k|    {
 2406|  93.8k|        return m_count;
 2407|  93.8k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5651|    262|    {
 5652|    262|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5652:13): [True: 240, False: 22]
  ------------------
 5653|    262|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5653:13): [True: 0, False: 22]
  ------------------
 5654|    240|            return read_default(range, value, loc);
 5655|    240|        }
 5656|       |
 5657|     22|        reader_impl_for_int<CharT> reader{};
 5658|     22|        signed char tmp_value{};
 5659|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5660|     22|        value = static_cast<signed char>(value);
 5661|     22|        return ret;
 5662|    262|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5633|    868|    {
 5634|    868|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    868|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5635|    868|        if constexpr (std::is_same_v<CharT, char>) {
 5636|    868|            return code_unit_reader<char>{}.read(range, value);
 5637|       |        }
 5638|       |        else {
 5639|       |            SCN_UNUSED(range);
 5640|       |            SCN_EXPECT(false);
 5641|       |            SCN_UNREACHABLE;
 5642|       |        }
 5643|    868|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5552|    868|    {
 5553|    868|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    868|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    868|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    868|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    868|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 868]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    868|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    868|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5554|    868|        ch = *range.begin();
 5555|    868|        return it;
 5556|    868|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|  6.33k|{
 1834|  6.33k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.33k]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|  6.33k|    return ranges::next(range.begin());
 1839|  6.33k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  21.2k|{
  950|  21.2k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.2k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  21.2k|    return eof_error::good;
  954|  21.2k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   265k|{
  944|   265k|    return is_range_eof(r.begin(), r.end());
  945|   265k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   288k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   288k|    {
  937|   288k|        return begin == end;
  938|   288k|    }
  939|   288k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  18.6k|    {
  296|  18.6k|        ++x;
  297|  18.6k|        return x;
  298|  18.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|     22|    {
 3528|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|     22|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 22]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 22]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3554|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|     22|                    parse_integer_digits_without_thsep(
 3556|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|     22|                        prefix_result.parsed_base));
 3558|       |
 3559|     22|            auto buf = make_contiguous_buffer(
 3560|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3668|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|     22|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3314|  2.70k|{
 3315|  2.70k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|  2.70k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.70k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.70k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.70k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|  2.70k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|  2.70k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|  2.70k|        parse_integer_base_prefix(
 3320|  2.70k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|  2.70k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 0, False: 2.70k]
  ------------------
 3323|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 0, False: 0]
  ------------------
 3324|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 0, False: 0]
  ------------------
 3325|      0|            digits_begin_it = base_prefix_begin_it;
 3326|      0|        }
 3327|      0|        else {
 3328|      0|            parsed_zero = false;
 3329|      0|        }
 3330|      0|    }
 3331|  2.70k|    else {
 3332|  2.70k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 0, False: 2.70k]
  ------------------
 3333|  2.70k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 2.70k, False: 0]
  ------------------
 3334|  2.70k|            digits_begin_it = base_prefix_begin_it;
 3335|  2.70k|        }
 3336|  2.70k|    }
 3337|       |
 3338|  2.70k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 2.70k, False: 0]
  ------------------
 3339|  2.70k|        sign = sign_type::plus_sign;
 3340|  2.70k|    }
 3341|  2.70k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|  2.70k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|  2.70k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|  3.60k|{
 3130|  3.60k|    auto r = read_one_of_code_unit(range, "+-");
 3131|  3.60k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 3.60k, False: 0]
  ------------------
 3132|  3.60k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 3.60k, False: 0]
  ------------------
 3133|  3.60k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|  3.60k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|  3.60k|    }
 3137|       |
 3138|      0|    auto& it = *r;
 3139|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 0, False: 0]
  ------------------
 3140|      0|        return std::pair{it, sign_type::minus_sign};
 3141|      0|    }
 3142|      0|    return std::pair{it, sign_type::plus_sign};
 3143|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|  3.60k|{
 2261|  3.60k|    auto it = read_code_unit(range);
 2262|  3.60k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.60k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|  7.21k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 7.21k, False: 3.60k]
  ------------------
 2267|  7.21k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 0, False: 7.21k]
  ------------------
 2268|      0|            return *it;
 2269|      0|        }
 2270|  7.21k|    }
 2271|       |
 2272|  3.60k|    return unexpected(parse_error::error);
 2273|  3.60k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3281|  2.70k|{
 3282|  2.70k|    switch (base) {
 3283|      6|        case 2:
  ------------------
  |  Branch (3283:9): [True: 6, False: 2.69k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|      6|                    false};
 3287|       |
 3288|     30|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 30, False: 2.67k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|     30|            bool zero_parsed = false;
 3291|     30|            auto it = apply_opt(
 3292|     30|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|     30|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|    884|        case 16:
  ------------------
  |  Branch (3296:9): [True: 884, False: 1.81k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|    884|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|    884|                    false};
 3300|       |
 3301|     16|        case 0:
  ------------------
  |  Branch (3301:9): [True: 16, False: 2.68k]
  ------------------
 3302|       |            // detect base
 3303|     16|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|  1.76k|        default:
  ------------------
  |  Branch (3305:9): [True: 1.76k, False: 936]
  ------------------
 3306|       |            // no base prefix allowed
 3307|  1.76k|            return {range.begin(), base, false};
 3308|  2.70k|    }
 3309|  2.70k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2279|    920|{
 2280|    920|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 920, False: 0]
  ------------------
 2281|    920|        return range.begin();
 2282|    920|    }
 2283|      0|    return *result;
 2284|    920|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3232|     22|{
 3233|     22|    return read_matching_string_classic_nocase(range, "0b");
 3234|     22|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  3.65k|{
 2220|  3.65k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|  3.65k|                  std::is_same_v<char_type, char>) {
 2224|  3.65k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2224:13): [True: 8, False: 3.65k]
  ------------------
 2225|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|      8|        }
 2227|  3.65k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2227:13): [True: 3.65k, False: 0]
  ------------------
 2228|  3.65k|            return unexpected(parse_error::error);
 2229|  3.65k|        }
 2230|      0|        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|       |    else {
 2233|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|       |            if (ch < 'A' || ch > 'Z') {
 2235|       |                return ch;
 2236|       |            }
 2237|       |            return static_cast<char_type>(ch +
 2238|       |                                          static_cast<char_type>('a' - 'A'));
 2239|       |        };
 2240|       |
 2241|       |        SCN_TRY(it, read_exactly_n_code_units(
 2242|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|       |                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|       |        if (SCN_UNLIKELY(!std::equal(
 2246|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|       |                    return ascii_tolower(a) ==
 2248|       |                           static_cast<detail::char_t<Range>>(b);
 2249|       |                }))) {
 2250|       |            return unexpected(parse_error::error);
 2251|       |        }
 2252|       |
 2253|       |        return it;
 2254|       |    }
 2255|  3.65k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3246|     46|{
 3247|     46|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 46]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|     46|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 0, False: 46]
  ------------------
 3252|      0|        zero_parsed = true;
 3253|      0|        return *r;
 3254|      0|    }
 3255|       |
 3256|     46|    return unexpected(parse_error::error);
 3257|     46|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|  1.85k|{
 2135|  1.85k|    auto it = read_code_unit(range);
 2136|  1.85k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.85k]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|  1.85k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.85k, False: 0]
  |  |  ------------------
  ------------------
 2141|  1.85k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  1.85k|        return unexpected(parse_error::error);
 2143|  1.85k|    }
 2144|       |
 2145|      0|    return *it;
 2146|  1.85k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3239|    900|{
 3240|    900|    return read_matching_string_classic_nocase(range, "0x");
 3241|    900|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3262|     16|{
 3263|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 16]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 16]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|     16|    {
 3270|     16|        bool zero_parsed{false};
 3271|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 0, False: 16]
  ------------------
 3272|      0|            return {*r, 8, zero_parsed};
 3273|      0|        }
 3274|     16|    }
 3275|     16|    return {range.begin(), 10, false};
 3276|     16|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3348|  2.67k|{
 3349|  2.67k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|  2.67k|    if constexpr (ranges::contiguous_range<Range>) {
 3352|  2.67k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.67k]
  |  |  ------------------
  ------------------
 3353|      0|            return unexpected_scan_error(
 3354|      0|                scan_error::invalid_scanned_value,
 3355|      0|                "Failed to parse integer: No digits found");
 3356|      0|        }
 3357|  2.67k|        return range.end();
 3358|       |    }
 3359|       |    else {
 3360|       |        return read_while1_code_unit(range,
 3361|       |                                     [&](char_type ch) noexcept {
 3362|       |                                         return char_to_int(ch) < base;
 3363|       |                                     })
 3364|       |            .transform_error(map_parse_error_to_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found"));
 3367|       |    }
 3368|  2.67k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3378|     28|{
 3379|     28|    std::basic_string<CharT> output;
 3380|     28|    std::string thsep_indices;
 3381|     28|    auto it = range.begin();
 3382|     28|    bool digit_matched = false;
 3383|     28|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 28, False: 0]
  ------------------
 3384|     28|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 0, False: 28]
  ------------------
 3385|      0|            thsep_indices.push_back(
 3386|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|      0|        }
 3388|     28|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 28, False: 0]
  ------------------
 3389|     28|            break;
 3390|     28|        }
 3391|      0|        else {
 3392|      0|            output.push_back(*it);
 3393|      0|            digit_matched = true;
 3394|      0|        }
 3395|     28|    }
 3396|     28|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 3397|     28|        return unexpected_scan_error(
 3398|     28|            scan_error::invalid_scanned_value,
 3399|     28|            "Failed to parse integer: No digits found");
 3400|     28|    }
 3401|      0|    return std::tuple{it, output, thsep_indices};
 3402|     28|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|  12.9k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  12.9k|                  ranges::sized_range<Range>) {
 1674|  12.9k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  12.9k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|  12.9k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  12.9k|    {
 1478|  12.9k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  59.7k|    {
 1491|  59.7k|        return sv;
 1492|  59.7k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5939|  1.41k|{
 5940|  1.41k|    using char_type = detail::char_t<Range>;
 5941|  1.41k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5942|       |
 5943|  1.41k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5943:9): [True: 1.04k, False: 378]
  ------------------
 5944|  1.04k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5945|  1.04k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5946|       |
 5947|  1.04k|        if (max_width == 0) {
  ------------------
  |  Branch (5947:13): [True: 924, False: 116]
  ------------------
 5948|    924|            auto it = read_while_code_unit(range, pred);
 5949|       |
 5950|    924|            if (want_skipped_width) {
  ------------------
  |  Branch (5950:17): [True: 124, False: 800]
  ------------------
 5951|    124|                auto prefix_width =
 5952|    124|                    static_cast<std::ptrdiff_t>(
 5953|    124|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5954|    124|                    ranges::distance(range.begin(), it);
 5955|    124|                return result_type{it, prefix_width};
 5956|    124|            }
 5957|    800|            return result_type{it, 0};
 5958|    924|        }
 5959|       |
 5960|    116|        auto max_width_view = take_width(range, max_width);
 5961|    116|        auto w_it = read_while_code_unit(max_width_view, pred);
 5962|       |
 5963|    116|        if (want_skipped_width) {
  ------------------
  |  Branch (5963:13): [True: 116, False: 0]
  ------------------
 5964|    116|            return result_type{w_it.base(), max_width - w_it.count()};
 5965|    116|        }
 5966|      0|        return result_type{w_it.base(), 0};
 5967|    116|    }
 5968|       |
 5969|    378|    const auto fill_chars = fill.template get_code_units<char_type>();
 5970|    378|    if (max_width == 0) {
  ------------------
  |  Branch (5970:9): [True: 194, False: 184]
  ------------------
 5971|    194|        auto it = read_while_code_units(range, fill_chars);
 5972|       |
 5973|    194|        if (want_skipped_width) {
  ------------------
  |  Branch (5973:13): [True: 52, False: 142]
  ------------------
 5974|     52|            auto prefix_width =
 5975|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5976|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5977|     52|            return result_type{it, prefix_width};
 5978|     52|        }
 5979|    142|        return result_type{it, 0};
 5980|    194|    }
 5981|       |
 5982|    184|    auto max_width_view = take_width(range, max_width);
 5983|    184|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5984|       |
 5985|    184|    if (want_skipped_width) {
  ------------------
  |  Branch (5985:9): [True: 184, False: 0]
  ------------------
 5986|    184|        return result_type{w_it.base(), max_width - w_it.count()};
 5987|    184|    }
 5988|      0|    return result_type{w_it.base(), 0};
 5989|    184|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|  1.09k|{
 1964|  1.09k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  1.09k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|  1.29k|{
 1945|  1.29k|    if constexpr (ranges::common_range<Range>) {
 1946|  1.29k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|  1.29k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|  1.04k|        : m_fptr([](storage fn,
  743|  1.04k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.04k|              cvref<T> obj = *get<T>(fn);
  745|  1.04k|              if constexpr (std::is_void_v<R>) {
  746|  1.04k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.04k|              }
  748|  1.04k|              else {
  749|  1.04k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.04k|              }
  751|  1.04k|          }),
  752|  1.04k|          m_storage(std::addressof(f))
  753|  1.04k|    {
  754|  1.04k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  1.45k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.45k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.45k|              else {
  749|  1.45k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.45k|              }
  751|  1.45k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  1.45k|    {
  684|  1.45k|        if constexpr (std::is_const_v<T>) {
  685|  1.45k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.45k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5945|  1.45k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|  1.04k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  1.04k|        {
  667|  1.04k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1963|    272|{
 1964|    272|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    272|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1944|    494|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    494|    else {
 1949|    494|        auto first = range.begin();
 1950|  7.28k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 7.04k, False: 244]
  ------------------
 1951|  7.04k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 250, False: 6.79k]
  ------------------
 1952|    250|                return first;
 1953|    250|            }
 1954|  7.04k|        }
 1955|    244|        return first;
 1956|    494|    }
 1957|    494|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2024|    194|{
 2025|    194|    static_assert(ranges::common_range<CodeUnits>);
 2026|       |
 2027|    194|    auto it = range.begin();
 2028|    340|    while (it != range.end()) {
  ------------------
  |  Branch (2028:12): [True: 340, False: 0]
  ------------------
 2029|    340|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2030|    340|                                           needle.size());
 2031|    340|        if (!r) {
  ------------------
  |  Branch (2031:13): [True: 6, False: 334]
  ------------------
 2032|      6|            return it;
 2033|      6|        }
 2034|    334|        static_assert(
 2035|    334|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2036|    334|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2036:13): [True: 188, False: 146]
  ------------------
 2037|    188|            return it;
 2038|    188|        }
 2039|    146|        it = *r;
 2040|    146|    }
 2041|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2042|      0|    return it;
 2043|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2024|    184|{
 2025|    184|    static_assert(ranges::common_range<CodeUnits>);
 2026|       |
 2027|    184|    auto it = range.begin();
 2028|    336|    while (it != range.end()) {
  ------------------
  |  Branch (2028:12): [True: 306, False: 30]
  ------------------
 2029|    306|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2030|    306|                                           needle.size());
 2031|    306|        if (!r) {
  ------------------
  |  Branch (2031:13): [True: 28, False: 278]
  ------------------
 2032|     28|            return it;
 2033|     28|        }
 2034|    278|        static_assert(
 2035|    278|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2036|    278|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2036:13): [True: 126, False: 152]
  ------------------
 2037|    126|            return it;
 2038|    126|        }
 2039|    152|        it = *r;
 2040|    152|    }
 2041|     30|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     30|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     30|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2042|     30|    return it;
 2043|     30|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2939|    438|{
 2940|    438|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 0, False: 438]
  ------------------
 2941|      0|        auto it = read_while_classic_space(range);
 2942|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|      0|        return it;
 2948|      0|    }
 2949|       |
 2950|    438|    return read_while_classic_space(range);
 2951|    438|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2104|    438|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|    438|    else {
 2114|    438|        auto it = range.begin();
 2115|       |
 2116|    438|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|    438|            auto seg = get_contiguous_beginning(range);
 2118|    438|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|    438|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 0, False: 438]
  ------------------
 2120|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|      0|            }
 2122|    438|            ranges::advance(it, seg.size());
 2123|    438|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|    438|            return detail::is_cp_space(cp);
 2127|    438|        });
 2128|    438|    }
 2129|    438|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  1.09k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|       |                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|       |        else {
 1054|       |            return r.begin().contiguous_segment();
 1055|       |        }
 1056|       |    }
 1057|  1.09k|    else {
 1058|  1.09k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.09k|    }
 1060|  1.09k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2069|    618|{
 2070|    618|    return read_until_code_point(range, std::not_fn(pred));
 2071|    618|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2048|    750|{
 2049|    750|    auto it = range.begin();
 2050|  9.39k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 9.17k, False: 220]
  ------------------
 2051|  9.17k|        const auto val =
 2052|  9.17k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  9.17k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  9.17k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.60k, False: 574]
  |  |  ------------------
  ------------------
 2054|  8.60k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  8.60k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  8.60k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 530, False: 8.07k]
  ------------------
 2057|    530|                return it;
 2058|    530|            }
 2059|  8.60k|        }
 2060|  8.64k|        it = val.iterator;
 2061|  8.64k|    }
 2062|       |
 2063|    220|    return it;
 2064|    750|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1886|  16.7k|{
 1887|  16.7k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  16.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  16.7k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  16.7k|    auto it = range.begin();
 1891|  16.7k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  16.7k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.61k, False: 15.1k]
  |  |  ------------------
  ------------------
 1894|  1.61k|        ++it;
 1895|  1.61k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  1.61k|        return {it, {}};
 1897|  1.61k|    }
 1898|       |
 1899|  15.1k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 12.7k, False: 2.38k]
  ------------------
 1900|  12.7k|        ++it;
 1901|  12.7k|        return {it, string_type(1, *range.begin())};
 1902|  12.7k|    }
 1903|       |
 1904|  2.38k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  2.38k|    return {it, string_type{range.begin(), it}};
 1906|  15.1k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  1.61k|{
 1155|  1.61k|    auto it = input.begin();
 1156|  2.22k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 2.10k, False: 120]
  ------------------
 1157|  2.10k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.49k, False: 610]
  ------------------
 1158|  1.49k|            break;
 1159|  1.49k|        }
 1160|  2.10k|    }
 1161|  1.61k|    return it;
 1162|  1.61k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  2.38k|    {
  283|  2.38k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  2.38k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  2.38k|    {
  227|  2.38k|        constexpr iter_difference_t<I> zero{0};
  228|  2.38k|        iter_difference_t<I> counter{0};
  229|       |
  230|  2.38k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 2.38k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  2.38k|        else {
  237|  8.11k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 5.81k, False: 2.30k]
  |  Branch (237:34): [True: 5.73k, False: 84]
  ------------------
  238|  5.73k|                ++i;
  239|  5.73k|                ++counter;
  240|  5.73k|            }
  241|  2.38k|        }
  242|       |
  243|  2.38k|        return counter;
  244|  2.38k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    438|        : m_fptr([](storage fn,
  743|    438|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    438|              cvref<T> obj = *get<T>(fn);
  745|    438|              if constexpr (std::is_void_v<R>) {
  746|    438|                  obj(static_cast<decltype(args)>(args)...);
  747|    438|              }
  748|    438|              else {
  749|    438|                  return obj(static_cast<decltype(args)>(args)...);
  750|    438|              }
  751|    438|          }),
  752|    438|          m_storage(std::addressof(f))
  753|    438|    {
  754|    438|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  1.18k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.18k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.18k|              else {
  749|  1.18k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.18k|              }
  751|  1.18k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  1.18k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.18k|        else if constexpr (std::is_object_v<T>) {
  688|  1.18k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.18k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2125|  1.18k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.18k|            return detail::is_cp_space(cp);
 2127|  1.18k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    438|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    438|        {
  662|    438|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  6.81k|{
 2940|  6.81k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 6.63k, False: 178]
  ------------------
 2941|  6.63k|        auto it = read_while_classic_space(range);
 2942|  6.63k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  6.63k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.63k]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|  6.63k|        return it;
 2948|  6.63k|    }
 2949|       |
 2950|    178|    return read_while_classic_space(range);
 2951|  6.81k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  12.9k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|  12.9k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|  12.9k|        auto buf = make_contiguous_buffer(range);
 2109|  12.9k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|  12.9k|        return ranges::next(range.begin(),
 2111|  12.9k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|  12.9k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|  15.7k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  15.7k|                  ranges::sized_range<Range>) {
 1674|  15.7k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  15.7k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|  15.7k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  15.7k|    {
 1478|  15.7k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  8.73k|    {
 3029|  8.73k|        reader_error_handler eh{};
 3030|  8.73k|        get_derived().check_specs_impl(specs, eh);
 3031|  8.73k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  8.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.62k, False: 1.10k]
  |  |  ------------------
  ------------------
 3032|  7.62k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  7.62k|        }
 3034|  1.10k|        return {};
 3035|  8.73k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3039|  8.73k|    {
 3040|  8.73k|        return static_cast<Derived&>(*this);
 3041|  8.73k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3473|  8.73k|    {
 3474|  8.73k|        detail::check_int_type_specs(specs, eh);
 3475|  8.73k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3023|  2.36k|    {
 3024|  2.36k|        return true;
 3025|  2.36k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    248|    {
 3528|    248|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 248]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    248|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    248|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 248]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|    248|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 248]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    248|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    248|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 238, False: 10]
  |  |  ------------------
  ------------------
 3554|    238|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 238, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    238|    }                                                  \
  |  |  |  | 3667|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|     10|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     10|            localized_number_formatting_options<CharT>{loc};
 3575|     10|#endif
 3576|       |
 3577|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    276|    {
 3528|    276|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    276|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    276|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 276]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|    276|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 276]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    276|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    276|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 262, False: 14]
  |  |  ------------------
  ------------------
 3554|    262|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 262]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    262|                    parse_integer_digits_without_thsep(
 3556|    262|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    262|                        prefix_result.parsed_base));
 3558|       |
 3559|    262|            auto buf = make_contiguous_buffer(
 3560|    262|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    262|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 262, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    262|    }                                                  \
  |  |  |  | 3667|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    262|        }
 3569|       |
 3570|     14|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     14|            localized_number_formatting_options<CharT>{loc};
 3575|     14|#endif
 3576|       |
 3577|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     14|    }                                                  \
  |  |  |  | 3667|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    248|    {
 3528|    248|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 248]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    248|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    248|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 248]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    248|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 248]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    248|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    248|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 238, False: 10]
  |  |  ------------------
  ------------------
 3554|    238|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 238, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    238|    }                                                  \
  |  |  |  | 3667|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|     10|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     10|            localized_number_formatting_options<CharT>{loc};
 3575|     10|#endif
 3576|       |
 3577|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    276|    {
 3528|    276|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    276|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    276|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 276]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    276|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 276]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    276|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    276|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 262, False: 14]
  |  |  ------------------
  ------------------
 3554|    262|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 262]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    262|                    parse_integer_digits_without_thsep(
 3556|    262|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    262|                        prefix_result.parsed_base));
 3558|       |
 3559|    262|            auto buf = make_contiguous_buffer(
 3560|    262|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    262|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 262, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    262|    }                                                  \
  |  |  |  | 3667|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    262|        }
 3569|       |
 3570|     14|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     14|            localized_number_formatting_options<CharT>{loc};
 3575|     14|#endif
 3576|       |
 3577|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     14|    }                                                  \
  |  |  |  | 3667|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    216|    {
 3528|    216|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    216|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    216|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    216|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 216]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    216|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    216|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    216|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 216]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    216|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 216]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    216|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    216|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 216, False: 0]
  |  |  ------------------
  ------------------
 3554|    216|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    216|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    216|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    216|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 216, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    216|    }                                                  \
  |  |  |  | 3667|    216|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    872|    {
 3528|    872|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    872|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    872|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 872]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    872|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 872]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    872|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    872|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 872, False: 0]
  |  |  ------------------
  ------------------
 3554|    872|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    872|                    parse_integer_digits_without_thsep(
 3556|    872|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    872|                        prefix_result.parsed_base));
 3558|       |
 3559|    872|            auto buf = make_contiguous_buffer(
 3560|    872|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    872|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 872, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    872|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    872|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    872|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    872|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    872|    }                                                  \
  |  |  |  | 3667|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    872|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  4.36k|    {
 3029|  4.36k|        reader_error_handler eh{};
 3030|  4.36k|        get_derived().check_specs_impl(specs, eh);
 3031|  4.36k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.81k, False: 550]
  |  |  ------------------
  ------------------
 3032|  3.81k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  3.81k|        }
 3034|    550|        return {};
 3035|  4.36k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3039|  4.36k|    {
 3040|  4.36k|        return static_cast<Derived&>(*this);
 3041|  4.36k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|  4.36k|    {
 4134|  4.36k|        detail::check_float_type_specs(specs, eh);
 4135|  4.36k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3023|  1.17k|    {
 3024|  1.17k|        return true;
 3025|  1.17k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4205|    520|    {
 4206|    520|        unsigned options{};
 4207|    520|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 16, False: 504]
  ------------------
 4208|     16|            options |= float_reader_base::allow_thsep;
 4209|     16|        }
 4210|       |
 4211|    520|        SCN_GCC_COMPAT_PUSH
 4212|    520|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|    520|        switch (specs.type) {
 4215|     28|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 28, False: 492]
  ------------------
 4216|     28|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 4, False: 516]
  ------------------
 4219|      4|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|     12|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 12, False: 508]
  ------------------
 4222|     12|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|      8|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 8, False: 512]
  ------------------
 4225|      8|                return options | float_reader_base::allow_scientific |
 4226|      8|                       float_reader_base::allow_fixed;
 4227|       |
 4228|    468|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 468, False: 52]
  ------------------
 4229|    468|                return options | float_reader_base::allow_scientific |
 4230|    468|                       float_reader_base::allow_fixed |
 4231|    468|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 520]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|    520|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|    520|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|    520|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3648|    520|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1758|  1.14k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1519|  2.29k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4045|    882|    {
 4046|    882|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 882, False: 0]
  ------------------
 4047|    882|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 882, False: 0]
  ------------------
 4048|    882|            return;
 4049|    882|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1574|    696|    {
 1575|    696|        return m_storage.has_value();
 1576|    696|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1579|    348|    {
 1580|    348|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    348|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    348|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|    348|        return *m_storage;
 1582|    348|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    244|    {
  763|    244|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    244|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3667|      8|    {
 3668|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|      8|        return read_source_impl(range);
 3674|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3693|    244|    {
 3694|    244|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 244]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|    244|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|    244|        auto it = sign_result.first;
 3697|    244|        m_sign = sign_result.second;
 3698|       |
 3699|    244|        auto digits_begin = it;
 3700|    244|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|    244|        else {
 3727|    244|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 244, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    244|    }                                                  \
  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|      0|                it,
 3729|      0|                do_read_source_impl(
 3730|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|      0|        }
 3733|       |
 3734|    244|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    244|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    244|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 0, False: 0]
  |  Branch (3736:48): [True: 0, False: 0]
  ------------------
 3737|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 0, False: 0]
  ------------------
 3738|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 0, False: 0]
  ------------------
 3739|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|      0|        }
 3741|       |
 3742|      0|        handle_separators();
 3743|       |
 3744|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 0]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|      0|        return it;
 3757|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3988|    244|    {
 3989|    244|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|    244|        const bool allowed_nonhex =
 3991|    244|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|    244|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|    244|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 244, False: 0]
  |  Branch (3994:45): [True: 0, False: 244]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|    244|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 244]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|    244|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 244, False: 0]
  |  Branch (4003:45): [True: 0, False: 244]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|    244|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 244]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|    244|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 226, False: 18]
  |  Branch (4010:28): [True: 4, False: 222]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|      4|            auto it = range.begin();
 4014|       |
 4015|      4|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 0, False: 4]
  ------------------
 4016|      0|                m_kind = float_kind::hex_with_prefix;
 4017|      0|                it = *r;
 4018|      0|            }
 4019|      4|            else {
 4020|      4|                m_kind = float_kind::hex_without_prefix;
 4021|      4|            }
 4022|       |
 4023|      4|            return read_hex(ranges::subrange{it, range.end()});
 4024|      4|        }
 4025|    240|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 18, False: 222]
  |  Branch (4025:29): [True: 18, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|     18|            m_kind = float_kind::generic;
 4029|     18|            return read_regular_float(range);
 4030|     18|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|    222|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222]
  |  |  ------------------
  ------------------
 4036|      0|            m_kind = float_kind::hex_with_prefix;
 4037|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4038|      0|        }
 4039|       |
 4040|    222|        m_kind = float_kind::generic;
 4041|    222|        return read_regular(range);
 4042|    222|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3799|    244|    {
 3800|    244|        auto it = range.begin();
 3801|    244|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 244, False: 0]
  ------------------
 3802|    244|            return unexpected(r.error());
 3803|    244|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3822|    244|    {
 3823|    244|        auto it = range.begin();
 3824|    244|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 244, False: 0]
  ------------------
 3825|    244|            return r.transform_error(map_parse_error_to_scan_error(
 3826|    244|                scan_error::invalid_scanned_value,
 3827|    244|                "Invalid floating-point NaN value"));
 3828|    244|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3792|    226|    {
 3793|    226|        return read_matching_string_classic_nocase(range, "0x");
 3794|    226|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3892|      4|    {
 3893|      4|        auto it = range.begin();
 3894|       |
 3895|      4|        std::ptrdiff_t digits_count = 0;
 3896|      4|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|      4|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 3898|      4|            return r.transform_error(map_parse_error_to_scan_error(
 3899|      4|                scan_error::invalid_scanned_value,
 3900|      4|                "Invalid hexadecimal floating-point value"));
 3901|      4|        }
 3902|      0|        else {
 3903|      0|            digits_count += ranges::distance(it, *r);
 3904|      0|            it = *r;
 3905|      0|        }
 3906|       |
 3907|      0|        m_integral_part_length = digits_count;
 3908|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 0, False: 0]
  ------------------
 3909|      0|                                             m_locale_options.decimal_point)) {
 3910|      0|            it = *r;
 3911|      0|        }
 3912|       |
 3913|      0|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 0, False: 0]
  ------------------
 3914|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|      0|            digits_count += ranges::distance(it, *r);
 3916|      0|            it = *r;
 3917|      0|        }
 3918|       |
 3919|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|      0|        return it;
 3927|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3777|      4|    {
 3778|      4|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|      4|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|      4|        return read_while1_code_unit(
 3787|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|      4|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      4|        : m_fptr([](storage fn,
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
  752|      4|          m_storage(std::addressof(f))
  753|      4|    {
  754|      4|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      4|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      4|        else if constexpr (std::is_object_v<T>) {
  688|      4|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      4|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3787|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      4|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      4|        {
  662|      4|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3932|    240|    {
 3933|    240|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|    240|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 226, False: 14]
  |  Branch (3934:50): [True: 0, False: 226]
  ------------------
 3935|       |
 3936|    240|        auto it = ranges::begin(range);
 3937|    240|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|    240|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|    240|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 240, False: 0]
  |  |  ------------------
  ------------------
 3941|    240|            return r.transform_error(
 3942|    240|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|    240|                                              "Invalid floating-point value"));
 3944|    240|        }
 3945|      0|        else {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        m_integral_part_length = digits_count;
 3951|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 0, False: 0]
  ------------------
 3952|      0|                                             m_locale_options.decimal_point)) {
 3953|      0|            it = *r;
 3954|      0|        }
 3955|       |
 3956|      0|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 0, False: 0]
  ------------------
 3957|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|      0|        auto beg_exp_it = it;
 3968|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 0, False: 0]
  ------------------
 3969|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|      0|        }
 3971|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 0, False: 0]
  |  Branch (3971:29): [True: 0, False: 0]
  ------------------
 3972|      0|            return unexpected_scan_error(
 3973|      0|                scan_error::invalid_scanned_value,
 3974|      0|                "No exponent given to scientific float");
 3975|      0|        }
 3976|       |
 3977|      0|        m_kind =
 3978|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 0, False: 0]
  ------------------
 3979|       |
 3980|      0|        return it;
 3981|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3762|    240|    {
 3763|    240|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 240]
  |  |  |  Branch (859:45): [True: 0, False: 240]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|    240|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|    240|        return read_while1_code_unit(
 3772|    240|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|    240|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    240|        : m_fptr([](storage fn,
  743|    240|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    240|              cvref<T> obj = *get<T>(fn);
  745|    240|              if constexpr (std::is_void_v<R>) {
  746|    240|                  obj(static_cast<decltype(args)>(args)...);
  747|    240|              }
  748|    240|              else {
  749|    240|                  return obj(static_cast<decltype(args)>(args)...);
  750|    240|              }
  751|    240|          }),
  752|    240|          m_storage(std::addressof(f))
  753|    240|    {
  754|    240|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    240|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    240|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    240|              else {
  749|    240|                  return obj(static_cast<decltype(args)>(args)...);
  750|    240|              }
  751|    240|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    240|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    240|        else if constexpr (std::is_object_v<T>) {
  688|    240|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    240|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3772|    240|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    240|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    240|        {
  662|    240|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3653|    236|    {
 3654|    236|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 236]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|    236|        return read_source_impl(range);
 3660|    236|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    904|    {
  763|    904|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    904|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    904|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|      8|    {
 3668|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|      8|        return read_source_impl(range);
 3674|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|    904|    {
 3694|    904|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    904|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    904|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    904|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 904]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    904|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    904|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|    904|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|    904|        auto it = sign_result.first;
 3697|    904|        m_sign = sign_result.second;
 3698|       |
 3699|    904|        auto digits_begin = it;
 3700|    904|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|    904|                      ranges::sized_range<Range>) {
 3703|    904|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 904]
  |  |  |  Branch (859:45): [True: 0, False: 904]
  |  |  |  Branch (859:45): [True: 0, False: 904]
  |  |  ------------------
  ------------------
 3704|    904|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|    904|            else {
 3713|    904|                auto cb = [&](const auto& rr)
 3714|    904|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|    904|                    auto res = read_all(rr);
 3716|    904|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|    904|                        return unexpected_scan_error(
 3718|    904|                            scan_error::invalid_scanned_value,
 3719|    904|                            "Invalid float value");
 3720|    904|                    }
 3721|    904|                    return res;
 3722|    904|                };
 3723|    904|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|    904|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    904|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22, False: 882]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     22|    }                                                  \
  |  | 3667|    904|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    904|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|    882|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|    904|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    904|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    904|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|    882|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 882, False: 0]
  |  Branch (3736:48): [True: 882, False: 0]
  ------------------
 3737|    882|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 882, False: 0]
  ------------------
 3738|    882|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 882, False: 0]
  ------------------
 3739|    882|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|    882|        }
 3741|       |
 3742|    882|        handle_separators();
 3743|       |
 3744|    882|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 882]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|    882|        return it;
 3757|    882|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|    904|    {
 3800|    904|        auto it = range.begin();
 3801|    904|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 904, False: 0]
  ------------------
 3802|    904|            return unexpected(r.error());
 3803|    904|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|    904|    {
 3823|    904|        auto it = range.begin();
 3824|    904|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 904, False: 0]
  ------------------
 3825|    904|            return r.transform_error(map_parse_error_to_scan_error(
 3826|    904|                scan_error::invalid_scanned_value,
 3827|    904|                "Invalid floating-point NaN value"));
 3828|    904|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|    882|    {
 3793|    882|        return read_matching_string_classic_nocase(range, "0x");
 3794|    882|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|     22|{
 1984|     22|    auto it = read_while_code_unit(range, pred);
 1985|     22|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 22, False: 0]
  ------------------
 1986|     22|        return unexpected(parse_error::error);
 1987|     22|    }
 1988|      0|    return it;
 1989|     22|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|     22|    {
 3933|     22|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|     22|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 8, False: 14]
  |  Branch (3934:50): [True: 4, False: 4]
  ------------------
 3935|       |
 3936|     22|        auto it = ranges::begin(range);
 3937|     22|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|     22|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|     22|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3941|     22|            return r.transform_error(
 3942|     22|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|     22|                                              "Invalid floating-point value"));
 3944|     22|        }
 3945|      0|        else {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        m_integral_part_length = digits_count;
 3951|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 0, False: 0]
  ------------------
 3952|      0|                                             m_locale_options.decimal_point)) {
 3953|      0|            it = *r;
 3954|      0|        }
 3955|       |
 3956|      0|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 0, False: 0]
  ------------------
 3957|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|      0|        auto beg_exp_it = it;
 3968|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 0, False: 0]
  ------------------
 3969|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|      0|        }
 3971|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 0, False: 0]
  |  Branch (3971:29): [True: 0, False: 0]
  ------------------
 3972|      0|            return unexpected_scan_error(
 3973|      0|                scan_error::invalid_scanned_value,
 3974|      0|                "No exponent given to scientific float");
 3975|      0|        }
 3976|       |
 3977|      0|        m_kind =
 3978|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 0, False: 0]
  ------------------
 3979|       |
 3980|      0|        return it;
 3981|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|     22|    {
 3763|     22|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  Branch (859:45): [True: 0, False: 22]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|     22|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|     22|        return read_while1_code_unit(
 3772|     22|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|     22|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|     22|        : m_fptr([](storage fn,
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|     22|              if constexpr (std::is_void_v<R>) {
  746|     22|                  obj(static_cast<decltype(args)>(args)...);
  747|     22|              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
  752|     22|          m_storage(std::addressof(f))
  753|     22|    {
  754|     22|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     22|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     22|        else if constexpr (std::is_object_v<T>) {
  688|     22|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     22|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3772|     22|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     22|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     22|        {
  662|     22|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|    904|    {
 3989|    904|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|    904|        const bool allowed_nonhex =
 3991|    904|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|    904|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|    904|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 904, False: 0]
  |  Branch (3994:45): [True: 0, False: 904]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|    904|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 904]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|    904|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 904, False: 0]
  |  Branch (4003:45): [True: 0, False: 904]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|    904|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 904]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|    904|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 882, False: 22]
  |  Branch (4010:28): [True: 8, False: 874]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|      8|            auto it = range.begin();
 4014|       |
 4015|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 0, False: 8]
  ------------------
 4016|      0|                m_kind = float_kind::hex_with_prefix;
 4017|      0|                it = *r;
 4018|      0|            }
 4019|      8|            else {
 4020|      8|                m_kind = float_kind::hex_without_prefix;
 4021|      8|            }
 4022|       |
 4023|      8|            return read_hex(ranges::subrange{it, range.end()});
 4024|      8|        }
 4025|    896|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 22, False: 874]
  |  Branch (4025:29): [True: 22, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|     22|            m_kind = float_kind::generic;
 4029|     22|            return read_regular_float(range);
 4030|     22|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|    874|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    874|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 874]
  |  |  ------------------
  ------------------
 4036|      0|            m_kind = float_kind::hex_with_prefix;
 4037|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4038|      0|        }
 4039|       |
 4040|    874|        m_kind = float_kind::generic;
 4041|    874|        return read_regular(range);
 4042|    874|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|    882|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|    882|                    auto res = read_all(rr);
 3716|    882|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 882]
  |  |  ------------------
  ------------------
 3717|      0|                        return unexpected_scan_error(
 3718|      0|                            scan_error::invalid_scanned_value,
 3719|      0|                            "Invalid float value");
 3720|      0|                    }
 3721|    882|                    return res;
 3722|    882|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|    882|{
 1827|    882|    return ranges::next(range.begin(), range.end());
 1828|    882|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    882|    {
  313|    882|        ranges::advance(x, bound);
  314|    882|        return x;
  315|    882|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    882|    {
  275|    882|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    882|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    948|    {
  190|    948|        i = std::move(bound);
  191|    948|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|    882|    {
 1565|    882|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    882|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|    882|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1608|    882|    {
 1609|    882|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|    882|                      ranges::sized_range<Range>) {
 1614|    882|            m_storage.reset();
 1615|    882|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|    882|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|    896|    {
 3654|    896|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    896|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 896]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|    896|        return read_source_impl(range);
 3660|    896|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|    882|    {
 3680|    882|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|    882|        const std::ptrdiff_t sign_len =
 3683|    882|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 0, False: 882]
  ------------------
 3684|       |
 3685|    882|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|    882|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    882|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    882|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 882, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    882|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    882|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    882|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    882|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    882|    }                                                  \
  |  |  |  | 3667|    882|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|    882|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4158|    244|    {
 4159|    244|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|    244|#if !SCN_DISABLE_LOCALE
 4162|    244|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 8, False: 236]
  ------------------
 4163|      8|            return read_impl<Range>(
 4164|      8|                range, rd,
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|      8|                },
 4168|      8|                value, loc);
 4169|      8|        }
 4170|    236|#endif
 4171|       |
 4172|    236|        return read_impl<Range>(
 4173|    236|            range, rd,
 4174|    236|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    236|                return r.read_source(SCN_FWD(args)...);
 4176|    236|            },
 4177|    236|            value);
 4178|    244|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|    244|    {
 4195|    244|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|    244|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 244, False: 0]
  |  |  ------------------
  ------------------
 4197|    244|            return unexpected(r.error());
 4198|    244|        }
 4199|       |
 4200|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|      0|        return ranges::next(range.begin(), n);
 4202|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    236|        : m_fptr([](storage fn,
  743|    236|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    236|              cvref<T> obj = *get<T>(fn);
  745|    236|              if constexpr (std::is_void_v<R>) {
  746|    236|                  obj(static_cast<decltype(args)>(args)...);
  747|    236|              }
  748|    236|              else {
  749|    236|                  return obj(static_cast<decltype(args)>(args)...);
  750|    236|              }
  751|    236|          }),
  752|    236|          m_storage(std::addressof(f))
  753|    236|    {
  754|    236|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    236|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    236|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    236|              else {
  749|    236|                  return obj(static_cast<decltype(args)>(args)...);
  750|    236|              }
  751|    236|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    236|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    236|        else if constexpr (std::is_object_v<T>) {
  688|    236|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    236|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4174|    236|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    236|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|    236|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    236|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    236|        {
  662|    236|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|    276|    {
 4159|    276|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|    276|#if !SCN_DISABLE_LOCALE
 4162|    276|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 8, False: 268]
  ------------------
 4163|      8|            return read_impl<Range>(
 4164|      8|                range, rd,
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|      8|                },
 4168|      8|                value, loc);
 4169|      8|        }
 4170|    268|#endif
 4171|       |
 4172|    268|        return read_impl<Range>(
 4173|    268|            range, rd,
 4174|    268|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    268|                return r.read_source(SCN_FWD(args)...);
 4176|    268|            },
 4177|    268|            value);
 4178|    276|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|    904|    {
 4195|    904|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|    904|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 882]
  |  |  ------------------
  ------------------
 4197|     22|            return unexpected(r.error());
 4198|     22|        }
 4199|       |
 4200|    882|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|    882|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    882|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    882|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 882, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    882|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    882|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    882|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    882|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    882|    }                                                  \
  |  |  |  | 3667|    882|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|      0|        return ranges::next(range.begin(), n);
 4202|    882|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    268|        : m_fptr([](storage fn,
  743|    268|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    268|              cvref<T> obj = *get<T>(fn);
  745|    268|              if constexpr (std::is_void_v<R>) {
  746|    268|                  obj(static_cast<decltype(args)>(args)...);
  747|    268|              }
  748|    268|              else {
  749|    268|                  return obj(static_cast<decltype(args)>(args)...);
  750|    268|              }
  751|    268|          }),
  752|    268|          m_storage(std::addressof(f))
  753|    268|    {
  754|    268|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    268|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    268|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    268|              else {
  749|    268|                  return obj(static_cast<decltype(args)>(args)...);
  750|    268|              }
  751|    268|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    268|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    268|        else if constexpr (std::is_object_v<T>) {
  688|    268|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    268|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|    268|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    268|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|    268|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    268|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    268|        {
  662|    268|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5797|  4.96k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  4.96k|                       std::is_same_v<T, std::wstring>) {
 5816|  4.96k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  4.96k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5194|  14.8k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  12.9k|    {
 3029|  12.9k|        reader_error_handler eh{};
 3030|  12.9k|        get_derived().check_specs_impl(specs, eh);
 3031|  12.9k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 372, False: 12.6k]
  |  |  ------------------
  ------------------
 3032|    372|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|    372|        }
 3034|  12.6k|        return {};
 3035|  12.9k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3039|  12.9k|    {
 3040|  12.9k|        return static_cast<Derived&>(*this);
 3041|  12.9k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|  12.9k|    {
 5199|  12.9k|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|  12.9k|        SCN_GCC_PUSH
 5202|  12.9k|        SCN_GCC_IGNORE("-Wswitch")
 5203|  12.9k|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|  12.9k|        SCN_CLANG_PUSH
 5206|  12.9k|        SCN_CLANG_IGNORE("-Wswitch")
 5207|  12.9k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|  12.9k|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 366, False: 12.6k]
  ------------------
 5210|  1.42k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 1.42k, False: 11.5k]
  ------------------
 5211|  1.42k|                m_type = reader_type::word;
 5212|  1.42k|                break;
 5213|       |
 5214|    552|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 552, False: 12.4k]
  ------------------
 5215|    552|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 108, False: 444]
  ------------------
 5216|    552|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 222, False: 222]
  ------------------
 5217|    330|                    m_type = reader_type::custom_word;
 5218|    330|                }
 5219|    222|                else {
 5220|    222|                    m_type = reader_type::word;
 5221|    222|                }
 5222|    552|                break;
 5223|      0|            }
 5224|       |
 5225|     96|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 96, False: 12.9k]
  ------------------
 5226|     96|                m_type = reader_type::character;
 5227|     96|                break;
 5228|       |
 5229|  3.07k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 3.07k, False: 9.91k]
  ------------------
 5230|  3.07k|                m_type = reader_type::character_set;
 5231|  3.07k|                break;
 5232|       |
 5233|  7.09k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 7.09k, False: 5.89k]
  ------------------
 5234|  7.09k|                m_type = reader_type::regex;
 5235|  7.09k|                break;
 5236|       |
 5237|    384|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 384, False: 12.6k]
  ------------------
 5238|    384|                m_type = reader_type::regex_escaped;
 5239|    384|                break;
 5240|  12.9k|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|  12.9k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5247|  17.9k|    {
 5248|  17.9k|        return m_type == reader_type::word;
 5249|  17.9k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  9.31k|{
 1132|  9.31k|    auto it = src.begin();
 1133|   400k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 392k, False: 7.59k]
  ------------------
 1134|   392k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   392k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.13k, False: 391k]
  ------------------
 1136|  1.13k|            return false;
 1137|  1.13k|        }
 1138|   391k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 234, False: 391k]
  ------------------
 1139|    234|            return false;
 1140|    234|        }
 1141|   391k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   391k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   391k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 354, False: 391k]
  ------------------
 1144|    354|            return false;
 1145|    354|        }
 1146|   391k|        it += len;
 1147|   391k|    }
 1148|  7.59k|    return true;
 1149|  9.31k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|    348|{
 2982|    348|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|    348|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 348, False: 0]
  ------------------
 2984|    348|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    348|    static_cast<    \
  |  |  929|    348|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|    348|        }
 2986|      0|        else {
 2987|      0|            dest.assign(source.view());
 2988|      0|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|    348|    return {};
 2995|    348|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5091|  3.07k|        {
 5092|  3.07k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 558, False: 2.51k]
  ------------------
 5093|    558|                return {};
 5094|    558|            }
 5095|       |
 5096|  2.51k|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|  2.51k|            auto it = detail::to_address(charset_string.begin());
 5098|  2.51k|            auto set = detail::parse_presentation_set(
 5099|  2.51k|                it, detail::to_address(charset_string.end()), nonascii);
 5100|  2.51k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.51k]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|  2.51k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  2.51k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|  2.51k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  2.51k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|  2.51k|            std::sort(nonascii.extra_ranges.begin(),
 5107|  2.51k|                      nonascii.extra_ranges.end());
 5108|  2.51k|            return {};
 5109|  2.51k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5126|   250k|        {
 5127|   250k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5127:17): [True: 33.7k, False: 216k]
  ------------------
 5128|  33.7k|                return helper.is_char_set_in_extra_literals(cp);
 5129|  33.7k|            }
 5130|       |
 5131|   216k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5132|   250k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5074|  33.7k|        {
 5075|       |            // TODO: binary search?
 5076|  33.7k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5076:17): [True: 0, False: 33.7k]
  ------------------
 5077|      0|                return false;
 5078|      0|            }
 5079|       |
 5080|  33.7k|            const auto cp_val = static_cast<uint32_t>(cp);
 5081|  33.7k|            return std::find_if(
 5082|  33.7k|                       nonascii.extra_ranges.begin(),
 5083|  33.7k|                       nonascii.extra_ranges.end(),
 5084|  33.7k|                       [cp_val](const auto& pair) noexcept {
 5085|  33.7k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5086|  33.7k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5087|  33.7k|                       }) != nonascii.extra_ranges.end();
 5088|  33.7k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5084|  6.96M|                       [cp_val](const auto& pair) noexcept {
 5085|  6.96M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5085:35): [True: 6.95M, False: 2.23k]
  ------------------
 5086|  6.96M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5086:35): [True: 32.9k, False: 6.92M]
  ------------------
 5087|  6.96M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5064|   223k|        {
 5065|   223k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   223k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   223k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|   223k|            const auto val =
 5067|   223k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|   223k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|   223k|                    (val % 8)) &
 5070|   223k|                   1u;
 5071|   223k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5117|  8.66k|        {
 5118|  8.66k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 1.62k, False: 7.03k]
  ------------------
 5119|  1.62k|                return false;
 5120|  1.62k|            }
 5121|       |
 5122|  7.03k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  8.66k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|  3.07k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5265|    518|    {
 5266|    518|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    518|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    518|        return read_impl(range, specs, value);
 5268|    518|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5283|    518|    {
 5284|    518|        SCN_CLANG_PUSH
 5285|    518|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    518|        switch (m_type) {
 5288|    220|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 220, False: 298]
  ------------------
 5289|    220|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 58, False: 460]
  ------------------
 5292|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     58|                                                                   value);
 5294|       |
 5295|     30|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 30, False: 488]
  ------------------
 5296|     30|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    202|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 202, False: 316]
  ------------------
 5299|    202|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    202|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 516]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|      6|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 6, False: 512]
  ------------------
 5309|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      6|                    range,
 5311|      6|                    get_unescaped_regex_pattern(
 5312|      6|                        specs.charset_string<SourceCharT>()),
 5313|      6|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 518]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    518|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    518|        }
 5320|       |
 5321|    518|        SCN_CLANG_POP
 5322|    518|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4808|    220|    {
 4809|    220|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    220|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4740|    308|{
 4741|    308|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    308|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    308|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 110, False: 198]
  ------------------
 4745|    110|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    110|                                     "Invalid encoding in scanned string");
 4747|    110|    }
 4748|    198|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    198|    static_cast<    \
  |  |  929|    198|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    198|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    198|    return SCN_MOVE(result);
  ------------------
  |  |  928|    198|    static_cast<    \
  |  |  929|    198|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    198|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2075|    660|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|    660|    else {
 2085|    660|        auto it = range.begin();
 2086|       |
 2087|    660|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|    660|            auto seg = get_contiguous_beginning(range);
 2089|    660|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|    660|                seg_it != seg.end()) {
  ------------------
  |  Branch (2090:17): [True: 0, False: 660]
  ------------------
 2091|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|      0|            }
 2093|    660|            ranges::advance(it, seg.size());
 2094|    660|        }
 2095|       |
 2096|      0|        return read_until_code_point(
 2097|    660|            ranges::subrange{it, range.end()},
 2098|    660|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|    660|    }
 2100|    660|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2048|    660|{
 2049|    660|    auto it = range.begin();
 2050|  8.06k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 7.56k, False: 498]
  ------------------
 2051|  7.56k|        const auto val =
 2052|  7.56k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  7.56k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  7.56k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.52k, False: 1.03k]
  |  |  ------------------
  ------------------
 2054|  6.52k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  6.52k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  6.52k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 162, False: 6.36k]
  ------------------
 2057|    162|                return it;
 2058|    162|            }
 2059|  6.52k|        }
 2060|  7.40k|        it = val.iterator;
 2061|  7.40k|    }
 2062|       |
 2063|    498|    return it;
 2064|    660|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    660|        : m_fptr([](storage fn,
  743|    660|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    660|              cvref<T> obj = *get<T>(fn);
  745|    660|              if constexpr (std::is_void_v<R>) {
  746|    660|                  obj(static_cast<decltype(args)>(args)...);
  747|    660|              }
  748|    660|              else {
  749|    660|                  return obj(static_cast<decltype(args)>(args)...);
  750|    660|              }
  751|    660|          }),
  752|    660|          m_storage(std::addressof(f))
  753|    660|    {
  754|    660|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  6.52k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.52k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.52k|              else {
  749|  6.52k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.52k|              }
  751|  6.52k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  6.52k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.52k|        else if constexpr (std::is_object_v<T>) {
  688|  6.52k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.52k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2098|  6.52k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    660|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    660|        {
  662|    660|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4829|     58|    {
 4830|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 28, False: 30]
  ------------------
 4831|     28|            return read_string_impl(
 4832|     28|                range,
 4833|     28|                read_until_code_unit(
 4834|     28|                    range,
 4835|     28|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     28|                        SourceCharT ch) { return ch == until; }),
 4837|     28|                value);
 4838|     28|        }
 4839|     30|        return read_string_impl(
 4840|     30|            range,
 4841|     30|            read_until_code_units(
 4842|     30|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|     30|            value);
 4844|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     28|        : m_fptr([](storage fn,
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|     28|              if constexpr (std::is_void_v<R>) {
  746|     28|                  obj(static_cast<decltype(args)>(args)...);
  747|     28|              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
  752|     28|          m_storage(std::addressof(f))
  753|     28|    {
  754|     28|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4836|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     28|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     28|        {
  662|     28|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 1994|     90|{
 1995|     90|    static_assert(ranges::common_range<CodeUnits>);
 1996|       |
 1997|       |    if constexpr (ranges::common_range<Range>) {
 1998|       |        return std::search(range.begin(), range.end(), needle.begin(),
 1999|       |                           needle.end());
 2000|       |    }
 2001|     90|    else {
 2002|     90|        auto first = range.begin();
 2003|    834|        while (true) {
  ------------------
  |  Branch (2003:16): [Folded - Ignored]
  ------------------
 2004|    834|            auto it = first;
 2005|  1.04k|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2006|  1.04k|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2006:21): [True: 60, False: 984]
  ------------------
 2007|     60|                    return first;
 2008|     60|                }
 2009|    984|                if (it == range.end()) {
  ------------------
  |  Branch (2009:21): [True: 30, False: 954]
  ------------------
 2010|     30|                    return it;
 2011|     30|                }
 2012|    954|                if (*it != *needle_it) {
  ------------------
  |  Branch (2012:21): [True: 744, False: 210]
  ------------------
 2013|    744|                    break;
 2014|    744|                }
 2015|    954|            }
 2016|    744|            ++first;
 2017|    744|        }
 2018|     90|    }
 2019|     90|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4935|     30|    {
 4936|     30|        return read_impl(
 4937|     30|            range,
 4938|     30|            [&](const auto& rng) {
 4939|     30|                return read_string_impl(rng, read_all(rng), value);
 4940|     30|            },
 4941|     30|            detail::priority_tag<1>{});
 4942|     30|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     30|    {
 4963|     30|        return read_cb(range);
 4964|     30|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4938|     30|            [&](const auto& rng) {
 4939|     30|                return read_string_impl(rng, read_all(rng), value);
 4940|     30|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1826|     90|{
 1827|     90|    return ranges::next(range.begin(), range.end());
 1828|     90|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     90|    {
  313|     90|        ranges::advance(x, bound);
  314|     90|        return x;
  315|     90|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     90|    {
  275|     90|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     90|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     90|    {
  203|  1.93k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.84k, False: 90]
  ------------------
  204|  1.84k|            ++i;
  205|  1.84k|        }
  206|     90|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5036|    202|    {
 5037|    202|        auto it = read_source_impl(range, {specs});
 5038|    202|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    202|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 190]
  |  |  ------------------
  ------------------
 5039|     12|            return unexpected(it.error());
 5040|     12|        }
 5041|       |
 5042|    190|        return read_string_impl(range, *it, value);
 5043|    202|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5141|    606|    {
 5142|    606|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|    606|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|    606|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    606|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 606]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|    606|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|    606|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 312, False: 294]
  ------------------
 5152|    312|            const auto cb = [&](char32_t cp) {
 5153|    312|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|    312|            };
 5155|       |
 5156|    312|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 132, False: 180]
  ------------------
 5157|    132|                auto it = read_until_code_point(range, cb);
 5158|    132|                return check_nonempty(it, range);
 5159|    132|            }
 5160|    180|            auto it = read_while_code_point(range, cb);
 5161|    180|            return check_nonempty(it, range);
 5162|    312|        }
 5163|       |
 5164|    294|        const auto cb = [&](SourceCharT ch) {
 5165|    294|            return cb_wrapper.on_ascii_only(ch);
 5166|    294|        };
 5167|       |
 5168|    294|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 138, False: 156]
  ------------------
 5169|    138|            auto it = read_until_code_unit(range, cb);
 5170|    138|            return check_nonempty(it, range);
 5171|    138|        }
 5172|    156|        auto it = read_while_code_unit(range, cb);
 5173|    156|        return check_nonempty(it, range);
 5174|    294|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    312|        : m_fptr([](storage fn,
  743|    312|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    312|              cvref<T> obj = *get<T>(fn);
  745|    312|              if constexpr (std::is_void_v<R>) {
  746|    312|                  obj(static_cast<decltype(args)>(args)...);
  747|    312|              }
  748|    312|              else {
  749|    312|                  return obj(static_cast<decltype(args)>(args)...);
  750|    312|              }
  751|    312|          }),
  752|    312|          m_storage(std::addressof(f))
  753|    312|    {
  754|    312|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  7.42k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.42k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.42k|              else {
  749|  7.42k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.42k|              }
  751|  7.42k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  7.42k|    {
  684|  7.42k|        if constexpr (std::is_const_v<T>) {
  685|  7.42k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.42k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5152|  7.42k|            const auto cb = [&](char32_t cp) {
 5153|  7.42k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|  7.42k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    312|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    312|        {
  667|    312|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5179|    606|    {
 5180|    606|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 36, False: 570]
  ------------------
 5181|     36|            return unexpected_scan_error(
 5182|     36|                scan_error::invalid_scanned_value,
 5183|     36|                "No characters matched in [character set]");
 5184|     36|        }
 5185|       |
 5186|    570|        return it;
 5187|    606|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    294|        : m_fptr([](storage fn,
  743|    294|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    294|              cvref<T> obj = *get<T>(fn);
  745|    294|              if constexpr (std::is_void_v<R>) {
  746|    294|                  obj(static_cast<decltype(args)>(args)...);
  747|    294|              }
  748|    294|              else {
  749|    294|                  return obj(static_cast<decltype(args)>(args)...);
  750|    294|              }
  751|    294|          }),
  752|    294|          m_storage(std::addressof(f))
  753|    294|    {
  754|    294|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|  5.28k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.28k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.28k|              else {
  749|  5.28k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.28k|              }
  751|  5.28k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.28k|    {
  684|  5.28k|        if constexpr (std::is_const_v<T>) {
  685|  5.28k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.28k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5164|  5.28k|        const auto cb = [&](SourceCharT ch) {
 5165|  5.28k|            return cb_wrapper.on_ascii_only(ch);
 5166|  5.28k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    294|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    294|        {
  667|    294|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4740|    190|{
 4741|    190|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    190|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    190|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 40, False: 150]
  ------------------
 4745|     40|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|     40|                                     "Invalid encoding in scanned string");
 4747|     40|    }
 4748|    150|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    150|    static_cast<    \
  |  |  929|    150|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    150|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 150]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    150|    return SCN_MOVE(result);
  ------------------
  |  |  928|    150|    static_cast<    \
  |  |  929|    150|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    150|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4879|      8|    {
 4880|      8|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|      0|        return read_string_impl(range, it, value);
 4882|      8|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4901|     24|    {
 4902|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4903|       |                      !std::is_same_v<SourceCharT, char>) {
 4904|       |            return unexpected_scan_error(
 4905|       |                scan_error::invalid_scanned_value,
 4906|       |                "Regex backend doesn't support wide strings as input");
 4907|       |        }
 4908|     24|        else {
 4909|     24|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4909:17): [True: 24, False: 0]
  ------------------
 4910|     24|                return unexpected_scan_error(
 4911|     24|                    scan_error::invalid_scanned_value,
 4912|     24|                    "Cannot use regex with a non-contiguous source "
 4913|     24|                    "range");
 4914|     24|            }
 4915|       |
 4916|      0|            auto input = get_as_contiguous(range);
 4917|      0|            SCN_TRY(it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4918|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4919|      0|            return ranges::next(range.begin(),
 4920|      0|                                ranges::distance(input.begin(), it));
 4921|      0|        }
 4922|     24|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|     24|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|       |                  ranges::sized_range<Range>) {
  961|       |        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|     24|    else {
  974|     24|        return false;
  975|     24|    }
  976|     24|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  3.66k|    {
 5266|  3.66k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  3.66k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  3.66k|        return read_impl(range, specs, value);
 5268|  3.66k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  3.66k|    {
 5284|  3.66k|        SCN_CLANG_PUSH
 5285|  3.66k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  3.66k|        switch (m_type) {
 5288|    304|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 304, False: 3.36k]
  ------------------
 5289|    304|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 52, False: 3.61k]
  ------------------
 5292|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     52|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 3.66k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    822|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 822, False: 2.84k]
  ------------------
 5299|    822|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    822|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  2.36k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2.36k, False: 1.30k]
  ------------------
 5304|  2.36k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  2.36k|                    range, specs.charset_string<SourceCharT>(),
 5306|  2.36k|                    specs.regexp_flags, value);
 5307|       |
 5308|    122|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 122, False: 3.54k]
  ------------------
 5309|    122|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    122|                    range,
 5311|    122|                    get_unescaped_regex_pattern(
 5312|    122|                        specs.charset_string<SourceCharT>()),
 5313|    122|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 3.66k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  3.66k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  3.66k|        }
 5320|       |
 5321|  3.66k|        SCN_CLANG_POP
 5322|  3.66k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|    932|    {
 4809|    932|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    932|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|    984|{
 4741|    984|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    984|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    984|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 320, False: 664]
  ------------------
 4745|    320|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    320|                                     "Invalid encoding in scanned string");
 4747|    320|    }
 4748|    664|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    664|    static_cast<    \
  |  |  929|    664|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    664|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    664|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 664]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    664|    return SCN_MOVE(result);
  ------------------
  |  |  928|    664|    static_cast<    \
  |  |  929|    664|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    664|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|  1.55k|{
 3001|  1.55k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|  1.55k|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|  1.55k|    return {};
 3009|  1.55k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|  2.79k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|  2.79k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|  2.79k|        auto buf = make_contiguous_buffer(range);
 2080|  2.79k|        auto it = find_classic_space_narrow_fast(buf.view());
 2081|  2.79k|        return ranges::next(range.begin(),
 2082|  2.79k|                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|       |    else {
 2085|       |        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|       |        return read_until_code_point(
 2097|       |            ranges::subrange{it, range.end()},
 2098|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|       |    }
 2100|  2.79k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4829|     52|    {
 4830|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 28, False: 24]
  ------------------
 4831|     28|            return read_string_impl(
 4832|     28|                range,
 4833|     28|                read_until_code_unit(
 4834|     28|                    range,
 4835|     28|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     28|                        SourceCharT ch) { return ch == until; }),
 4837|     28|                value);
 4838|     28|        }
 4839|     24|        return read_string_impl(
 4840|     24|            range,
 4841|     24|            read_until_code_units(
 4842|     24|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|     24|            value);
 4844|     52|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     28|        : m_fptr([](storage fn,
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|     28|              if constexpr (std::is_void_v<R>) {
  746|     28|                  obj(static_cast<decltype(args)>(args)...);
  747|     28|              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
  752|     28|          m_storage(std::addressof(f))
  753|     28|    {
  754|     28|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    440|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    440|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    440|              else {
  749|    440|                  return obj(static_cast<decltype(args)>(args)...);
  750|    440|              }
  751|    440|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    440|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    440|        else if constexpr (std::is_object_v<T>) {
  688|    440|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    440|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4836|    440|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     28|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     28|        {
  662|     28|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 1994|     72|{
 1995|     72|    static_assert(ranges::common_range<CodeUnits>);
 1996|       |
 1997|     72|    if constexpr (ranges::common_range<Range>) {
 1998|     72|        return std::search(range.begin(), range.end(), needle.begin(),
 1999|     72|                           needle.end());
 2000|       |    }
 2001|       |    else {
 2002|       |        auto first = range.begin();
 2003|       |        while (true) {
 2004|       |            auto it = first;
 2005|       |            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2006|       |                if (needle_it == needle.end()) {
 2007|       |                    return first;
 2008|       |                }
 2009|       |                if (it == range.end()) {
 2010|       |                    return it;
 2011|       |                }
 2012|       |                if (*it != *needle_it) {
 2013|       |                    break;
 2014|       |                }
 2015|       |            }
 2016|       |            ++first;
 2017|       |        }
 2018|       |    }
 2019|     72|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|    822|    {
 5037|    822|        auto it = read_source_impl(range, {specs});
 5038|    822|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    822|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 490]
  |  |  ------------------
  ------------------
 5039|    332|            return unexpected(it.error());
 5040|    332|        }
 5041|       |
 5042|    490|        return read_string_impl(range, *it, value);
 5043|    822|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|  2.46k|    {
 5142|  2.46k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  2.46k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  2.46k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.46k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  2.46k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  2.46k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 2.20k, False: 264]
  ------------------
 5152|  2.20k|            const auto cb = [&](char32_t cp) {
 5153|  2.20k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|  2.20k|            };
 5155|       |
 5156|  2.20k|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 198, False: 2.00k]
  ------------------
 5157|    198|                auto it = read_until_code_point(range, cb);
 5158|    198|                return check_nonempty(it, range);
 5159|    198|            }
 5160|  2.00k|            auto it = read_while_code_point(range, cb);
 5161|  2.00k|            return check_nonempty(it, range);
 5162|  2.20k|        }
 5163|       |
 5164|    264|        const auto cb = [&](SourceCharT ch) {
 5165|    264|            return cb_wrapper.on_ascii_only(ch);
 5166|    264|        };
 5167|       |
 5168|    264|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 114, False: 150]
  ------------------
 5169|    114|            auto it = read_until_code_unit(range, cb);
 5170|    114|            return check_nonempty(it, range);
 5171|    114|        }
 5172|    150|        auto it = read_while_code_unit(range, cb);
 5173|    150|        return check_nonempty(it, range);
 5174|    264|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|  2.20k|{
 2049|  2.20k|    auto it = range.begin();
 2050|   244k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 244k, False: 162]
  ------------------
 2051|   244k|        const auto val =
 2052|   244k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   244k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   244k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 243k, False: 1.08k]
  |  |  ------------------
  ------------------
 2054|   243k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   243k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   243k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 2.04k, False: 241k]
  ------------------
 2057|  2.04k|                return it;
 2058|  2.04k|            }
 2059|   243k|        }
 2060|   242k|        it = val.iterator;
 2061|   242k|    }
 2062|       |
 2063|    162|    return it;
 2064|  2.20k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|   244k|{
 1887|   244k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   244k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   244k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   244k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   244k|    auto it = range.begin();
 1891|   244k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   244k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.08k, False: 243k]
  |  |  ------------------
  ------------------
 1894|  1.08k|        ++it;
 1895|  1.08k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  1.08k|        return {it, {}};
 1897|  1.08k|    }
 1898|       |
 1899|   243k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 210k, False: 32.6k]
  ------------------
 1900|   210k|        ++it;
 1901|   210k|        return {it, string_type(1, *range.begin())};
 1902|   210k|    }
 1903|       |
 1904|  32.6k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  32.6k|    return {it, string_type{range.begin(), it}};
 1906|   243k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  1.08k|{
 1155|  1.08k|    auto it = input.begin();
 1156|  1.60k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 1.55k, False: 54]
  ------------------
 1157|  1.55k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.03k, False: 522]
  ------------------
 1158|  1.03k|            break;
 1159|  1.03k|        }
 1160|  1.55k|    }
 1161|  1.08k|    return it;
 1162|  1.08k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  32.6k|    {
  283|  32.6k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  32.6k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  32.6k|    {
  212|  32.6k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 66, False: 32.5k]
  ------------------
  213|     66|            auto dist = bound - i;
  214|     66|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     66|            return dist;
  216|     66|        }
  217|  32.5k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  32.5k|        return n;
  219|  32.6k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|  65.3k|    {
  132|  65.3k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 65.3k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|  65.3k|        return t;
  136|  65.3k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1877|   244k|    {
 1878|   244k|        return !codepoint.empty();
 1879|   244k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  2.20k|        : m_fptr([](storage fn,
  743|  2.20k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.20k|              cvref<T> obj = *get<T>(fn);
  745|  2.20k|              if constexpr (std::is_void_v<R>) {
  746|  2.20k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.20k|              }
  748|  2.20k|              else {
  749|  2.20k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.20k|              }
  751|  2.20k|          }),
  752|  2.20k|          m_storage(std::addressof(f))
  753|  2.20k|    {
  754|  2.20k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|   243k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   243k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   243k|              else {
  749|   243k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   243k|              }
  751|   243k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   243k|    {
  684|   243k|        if constexpr (std::is_const_v<T>) {
  685|   243k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   243k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5152|   243k|            const auto cb = [&](char32_t cp) {
 5153|   243k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|   243k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  2.20k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.20k|        {
  667|  2.20k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|  2.46k|    {
 5180|  2.46k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 996, False: 1.47k]
  ------------------
 5181|    996|            return unexpected_scan_error(
 5182|    996|                scan_error::invalid_scanned_value,
 5183|    996|                "No characters matched in [character set]");
 5184|    996|        }
 5185|       |
 5186|  1.47k|        return it;
 5187|  2.46k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|  2.00k|{
 2070|  2.00k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  2.00k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    264|        : m_fptr([](storage fn,
  743|    264|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    264|              cvref<T> obj = *get<T>(fn);
  745|    264|              if constexpr (std::is_void_v<R>) {
  746|    264|                  obj(static_cast<decltype(args)>(args)...);
  747|    264|              }
  748|    264|              else {
  749|    264|                  return obj(static_cast<decltype(args)>(args)...);
  750|    264|              }
  751|    264|          }),
  752|    264|          m_storage(std::addressof(f))
  753|    264|    {
  754|    264|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.38k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.38k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.38k|              else {
  749|  3.38k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.38k|              }
  751|  3.38k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.38k|    {
  684|  3.38k|        if constexpr (std::is_const_v<T>) {
  685|  3.38k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.38k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5164|  3.38k|        const auto cb = [&](SourceCharT ch) {
 5165|  3.38k|            return cb_wrapper.on_ascii_only(ch);
 5166|  3.38k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    264|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    264|        {
  667|    264|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|    990|{
 4741|    990|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    990|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    990|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 104, False: 886]
  ------------------
 4745|    104|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    104|                                     "Invalid encoding in scanned string");
 4747|    104|    }
 4748|    886|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    886|    static_cast<    \
  |  |  929|    886|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    886|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    886|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 886]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    886|    return SCN_MOVE(result);
  ------------------
  |  |  928|    886|    static_cast<    \
  |  |  929|    886|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    886|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4879|  2.48k|    {
 4880|  2.48k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  2.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.98k, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.98k|    }                                                  \
  |  |  |  | 3667|  2.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|    500|        return read_string_impl(range, it, value);
 4882|  2.48k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4901|  7.45k|    {
 4902|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4903|       |                      !std::is_same_v<SourceCharT, char>) {
 4904|       |            return unexpected_scan_error(
 4905|       |                scan_error::invalid_scanned_value,
 4906|       |                "Regex backend doesn't support wide strings as input");
 4907|       |        }
 4908|  7.45k|        else {
 4909|  7.45k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4909:17): [True: 0, False: 7.45k]
  ------------------
 4910|      0|                return unexpected_scan_error(
 4911|      0|                    scan_error::invalid_scanned_value,
 4912|      0|                    "Cannot use regex with a non-contiguous source "
 4913|      0|                    "range");
 4914|      0|            }
 4915|       |
 4916|  7.45k|            auto input = get_as_contiguous(range);
 4917|  7.45k|            SCN_TRY(it,
  ------------------
  |  | 3668|  7.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.95k, False: 1.50k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.95k|    }                                                  \
  |  |  |  | 3667|  7.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4918|  1.50k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4919|  1.50k|            return ranges::next(range.begin(),
 4920|  1.50k|                                ranges::distance(input.begin(), it));
 4921|  7.45k|        }
 4922|  7.45k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  7.45k|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|  7.45k|                  ranges::sized_range<Range>) {
  961|  7.45k|        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|       |    else {
  974|       |        return false;
  975|       |    }
  976|  7.45k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  7.45k|{
 1065|  7.45k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  7.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|       |    if constexpr (ranges::contiguous_range<Range> &&
 1068|  7.45k|                  ranges::sized_range<Range>) {
 1069|  7.45k|        return r;
 1070|       |    }
 1071|       |    else if constexpr (std::is_same_v<
 1072|       |                           ranges::const_iterator_t<Range>,
 1073|       |                           typename detail::basic_scan_buffer<
 1074|       |                               detail::char_t<Range>>::forward_iterator>) {
 1075|       |        if constexpr (ranges::common_range<Range>) {
 1076|       |            return detail::make_string_view_from_pointers(
 1077|       |                r.begin().to_contiguous_segment_iterator(),
 1078|       |                r.end().to_contiguous_segment_iterator());
 1079|       |        }
 1080|       |        else {
 1081|       |            return r.begin().contiguous_segment();
 1082|       |        }
 1083|       |    }
 1084|       |    else {
 1085|       |        SCN_EXPECT(false);
 1086|       |        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1089|       |    }
 1090|  7.45k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  7.45k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|  7.45k|                  ranges::sized_range<Range>) {
  983|  7.45k|        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|       |                               detail::char_t<Range>>::forward_iterator>) {
  989|       |        auto beg = r.begin();
  990|       |        if (beg.contiguous_segment().empty()) {
  991|       |            return false;
  992|       |        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|       |        else {
  998|       |            if (beg.stores_parent()) {
  999|       |                return beg.contiguous_segment().end() ==
 1000|       |                       beg.parent()->current_view().end();
 1001|       |            }
 1002|       |            return true;
 1003|       |        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  7.45k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4334|  7.45k|{
 4335|  7.45k|    static_assert(ranges::contiguous_range<Input> &&
 4336|  7.45k|                  ranges::borrowed_range<Input> &&
 4337|  7.45k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4338|       |
 4339|  7.45k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4340|  7.45k|    std::basic_regex<CharT> re{};
 4341|  7.45k|    try {
 4342|  7.45k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3668|  7.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 7.45k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  7.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4343|  7.45k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4344|  7.45k|                                     re_flags | std::regex_constants::nosubs};
 4345|  7.45k|    }
 4346|  7.45k|    catch (const std::regex_error& err) {
 4347|  3.51k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4348|  3.51k|                                     "Invalid regex");
 4349|  3.51k|    }
 4350|       |
 4351|  3.94k|    std::match_results<const CharT*> matches{};
 4352|  3.94k|    try {
 4353|  3.94k|        bool found = std::regex_search(input.data(),
 4354|  3.94k|                                       input.data() + input.size(), matches, re,
 4355|  3.94k|                                       std::regex_constants::match_continuous);
 4356|  3.94k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4356:13): [True: 2.44k, False: 1.50k]
  |  Branch (4356:23): [True: 0, False: 1.50k]
  ------------------
 4357|  2.32k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4358|  2.32k|                                         "Regular expression didn't match");
 4359|  2.32k|        }
 4360|  3.94k|    }
 4361|  3.94k|    catch (const std::regex_error& err) {
 4362|    126|        return unexpected_scan_error(scan_error::invalid_format_string,
 4363|    126|                                     "Regex matching failed with an error");
 4364|    126|    }
 4365|       |
 4366|  1.50k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4367|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4368|       |    auto re =
 4369|       |#if SCN_REGEX_BOOST_USE_ICU
 4370|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4371|       |                             make_regex_flags(flags) |
 4372|       |                                 boost::regex_constants::no_except |
 4373|       |                                 boost::regex_constants::nosubs);
 4374|       |#else
 4375|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4376|       |                                  make_regex_flags(flags) |
 4377|       |                                      boost::regex_constants::no_except |
 4378|       |                                      boost::regex_constants::nosubs};
 4379|       |#endif
 4380|       |    if (re.status() != 0) {
 4381|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4382|       |                                     "Invalid regex");
 4383|       |    }
 4384|       |
 4385|       |    boost::match_results<const CharT*> matches{};
 4386|       |    try {
 4387|       |        bool found =
 4388|       |#if SCN_REGEX_BOOST_USE_ICU
 4389|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4390|       |                                   matches, re,
 4391|       |                                   boost::regex_constants::match_continuous);
 4392|       |#else
 4393|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4394|       |                                matches, re,
 4395|       |                                boost::regex_constants::match_continuous);
 4396|       |#endif
 4397|       |        if (!found || matches.prefix().matched) {
 4398|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4399|       |                                         "Regular expression didn't match");
 4400|       |        }
 4401|       |    }
 4402|       |    catch (const std::runtime_error& err) {
 4403|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4404|       |                                     "Regex matching failed with an error");
 4405|       |    }
 4406|       |
 4407|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4408|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4409|       |    static_assert(std::is_same_v<CharT, char>);
 4410|       |    std::string flagged_pattern{};
 4411|       |    auto re = [&]() {
 4412|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4413|       |        opts.set_never_capture(true);
 4414|       |        if (flagstr.empty()) {
 4415|       |            return re2::RE2{pattern, opts};
 4416|       |        }
 4417|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4418|       |        flagged_pattern.append(flagstr);
 4419|       |        flagged_pattern.append(pattern);
 4420|       |        return re2::RE2{flagged_pattern, opts};
 4421|       |    }();
 4422|       |    if (!re.ok()) {
 4423|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4424|       |                                     "Failed to parse regular expression");
 4425|       |    }
 4426|       |
 4427|       |    auto new_input = detail::make_string_view_from_pointers(
 4428|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4429|       |    bool found = re2::RE2::Consume(&new_input, re);
 4430|       |    if (!found) {
 4431|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4432|       |                                     "Regular expression didn't match");
 4433|       |    }
 4434|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4435|       |#endif  // SCN_REGEX_BACKEND == ...
 4436|  3.94k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5797|  4.96k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  4.96k|                       std::is_same_v<T, std::wstring>) {
 5816|  4.96k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  4.96k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|    348|{
 2982|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|       |        if (source.stores_allocated_string()) {
 2984|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2985|       |        }
 2986|       |        else {
 2987|       |            dest.assign(source.view());
 2988|       |        }
 2989|       |    }
 2990|    348|    else {
 2991|    348|        return transcode_impl(source.view(), dest);
 2992|    348|    }
 2993|       |
 2994|      0|    return {};
 2995|    348|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2956|  1.89k|{
 2957|  1.89k|    dst.clear();
 2958|  1.89k|    transcode_valid_to_string(src, dst);
 2959|  1.89k|    return {};
 2960|  1.89k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1390|  1.89k|{
 1391|  1.89k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1392|       |
 1393|  1.89k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  1.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1394|  1.89k|    if constexpr (sizeof(SourceCharT) == 1) {
 1395|       |        if constexpr (sizeof(DestCharT) == 2) {
 1396|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1397|       |            std::u32string tmp;
 1398|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1399|       |            return transcode_to_string_impl_32to16<true>(
 1400|       |                std::u32string_view{tmp}, dest);
 1401|       |        }
 1402|  1.89k|        else if constexpr (sizeof(DestCharT) == 4) {
 1403|  1.89k|            return transcode_valid_to_string_impl_to32(src, dest);
 1404|  1.89k|        }
 1405|       |    }
 1406|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1407|       |        if constexpr (sizeof(DestCharT) == 1) {
 1408|       |            std::u32string tmp;
 1409|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1410|       |            return transcode_to_string_impl_32to8<true>(
 1411|       |                std::u32string_view{tmp}, dest);
 1412|       |        }
 1413|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1414|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1415|       |        }
 1416|       |    }
 1417|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1418|       |        if constexpr (sizeof(DestCharT) == 1) {
 1419|       |            return transcode_to_string_impl_32to8<true>(src, dest);
 1420|       |        }
 1421|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1422|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1423|       |        }
 1424|       |    }
 1425|       |
 1426|  1.89k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  1.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1427|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1428|  1.89k|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1264|  1.89k|{
 1265|  1.89k|    static_assert(sizeof(DestCharT) == 4);
 1266|       |
 1267|  1.89k|    auto it = src.begin();
 1268|  96.8k|    while (it != src.end()) {
  ------------------
  |  Branch (1268:12): [True: 94.9k, False: 1.89k]
  ------------------
 1269|  94.9k|        auto res = get_next_code_point_valid(
 1270|  94.9k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1271|  94.9k|                                                                 src.end()));
 1272|  94.9k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|  94.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1273|  94.9k|        dest.push_back(res.value);
 1274|  94.9k|        it = detail::make_string_view_iterator(src, res.iterator);
 1275|  94.9k|    }
 1276|  1.89k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|  94.9k|{
 1189|  94.9k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  94.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|  94.9k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|  94.9k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|  94.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|  94.9k|    return {input.begin() + len,
 1195|  94.9k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|  94.9k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5265|    518|    {
 5266|    518|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    518|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    518|        return read_impl(range, specs, value);
 5268|    518|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5283|    518|    {
 5284|    518|        SCN_CLANG_PUSH
 5285|    518|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    518|        switch (m_type) {
 5288|    220|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 220, False: 298]
  ------------------
 5289|    220|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 58, False: 460]
  ------------------
 5292|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     58|                                                                   value);
 5294|       |
 5295|     30|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 30, False: 488]
  ------------------
 5296|     30|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    202|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 202, False: 316]
  ------------------
 5299|    202|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    202|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 516]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|      6|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 6, False: 512]
  ------------------
 5309|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      6|                    range,
 5311|      6|                    get_unescaped_regex_pattern(
 5312|      6|                        specs.charset_string<SourceCharT>()),
 5313|      6|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 518]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    518|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    518|        }
 5320|       |
 5321|    518|        SCN_CLANG_POP
 5322|    518|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4808|    220|    {
 4809|    220|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    220|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4740|    308|{
 4741|    308|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    308|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    308|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 110, False: 198]
  ------------------
 4745|    110|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    110|                                     "Invalid encoding in scanned string");
 4747|    110|    }
 4748|    198|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    198|    static_cast<    \
  |  |  929|    198|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    198|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    198|    return SCN_MOVE(result);
  ------------------
  |  |  928|    198|    static_cast<    \
  |  |  929|    198|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    198|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4829|     58|    {
 4830|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 28, False: 30]
  ------------------
 4831|     28|            return read_string_impl(
 4832|     28|                range,
 4833|     28|                read_until_code_unit(
 4834|     28|                    range,
 4835|     28|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     28|                        SourceCharT ch) { return ch == until; }),
 4837|     28|                value);
 4838|     28|        }
 4839|     30|        return read_string_impl(
 4840|     30|            range,
 4841|     30|            read_until_code_units(
 4842|     30|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|     30|            value);
 4844|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     28|        : m_fptr([](storage fn,
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|     28|              if constexpr (std::is_void_v<R>) {
  746|     28|                  obj(static_cast<decltype(args)>(args)...);
  747|     28|              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
  752|     28|          m_storage(std::addressof(f))
  753|     28|    {
  754|     28|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4836|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     28|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     28|        {
  662|     28|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4935|     30|    {
 4936|     30|        return read_impl(
 4937|     30|            range,
 4938|     30|            [&](const auto& rng) {
 4939|     30|                return read_string_impl(rng, read_all(rng), value);
 4940|     30|            },
 4941|     30|            detail::priority_tag<1>{});
 4942|     30|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     30|    {
 4963|     30|        return read_cb(range);
 4964|     30|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4938|     30|            [&](const auto& rng) {
 4939|     30|                return read_string_impl(rng, read_all(rng), value);
 4940|     30|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5036|    202|    {
 5037|    202|        auto it = read_source_impl(range, {specs});
 5038|    202|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    202|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 190]
  |  |  ------------------
  ------------------
 5039|     12|            return unexpected(it.error());
 5040|     12|        }
 5041|       |
 5042|    190|        return read_string_impl(range, *it, value);
 5043|    202|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4740|    190|{
 4741|    190|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    190|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    190|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 40, False: 150]
  ------------------
 4745|     40|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|     40|                                     "Invalid encoding in scanned string");
 4747|     40|    }
 4748|    150|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    150|    static_cast<    \
  |  |  929|    150|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    150|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 150]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    150|    return SCN_MOVE(result);
  ------------------
  |  |  928|    150|    static_cast<    \
  |  |  929|    150|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    150|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4879|      8|    {
 4880|      8|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|      0|        return read_string_impl(range, it, value);
 4882|      8|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  3.66k|    {
 5266|  3.66k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  3.66k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  3.66k|        return read_impl(range, specs, value);
 5268|  3.66k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  3.66k|    {
 5284|  3.66k|        SCN_CLANG_PUSH
 5285|  3.66k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  3.66k|        switch (m_type) {
 5288|    304|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 304, False: 3.36k]
  ------------------
 5289|    304|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 52, False: 3.61k]
  ------------------
 5292|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     52|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 3.66k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    822|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 822, False: 2.84k]
  ------------------
 5299|    822|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    822|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  2.36k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2.36k, False: 1.30k]
  ------------------
 5304|  2.36k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  2.36k|                    range, specs.charset_string<SourceCharT>(),
 5306|  2.36k|                    specs.regexp_flags, value);
 5307|       |
 5308|    122|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 122, False: 3.54k]
  ------------------
 5309|    122|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    122|                    range,
 5311|    122|                    get_unescaped_regex_pattern(
 5312|    122|                        specs.charset_string<SourceCharT>()),
 5313|    122|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 3.66k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  3.66k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  3.66k|        }
 5320|       |
 5321|  3.66k|        SCN_CLANG_POP
 5322|  3.66k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|    932|    {
 4809|    932|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    932|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|    984|{
 4741|    984|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    984|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    984|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 320, False: 664]
  ------------------
 4745|    320|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    320|                                     "Invalid encoding in scanned string");
 4747|    320|    }
 4748|    664|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    664|    static_cast<    \
  |  |  929|    664|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    664|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    664|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 664]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    664|    return SCN_MOVE(result);
  ------------------
  |  |  928|    664|    static_cast<    \
  |  |  929|    664|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    664|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|  1.55k|{
 3001|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|       |        dest.assign(source.view());
 3003|       |    }
 3004|  1.55k|    else {
 3005|  1.55k|        return transcode_impl(source.view(), dest);
 3006|  1.55k|    }
 3007|       |
 3008|      0|    return {};
 3009|  1.55k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4829|     52|    {
 4830|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 28, False: 24]
  ------------------
 4831|     28|            return read_string_impl(
 4832|     28|                range,
 4833|     28|                read_until_code_unit(
 4834|     28|                    range,
 4835|     28|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     28|                        SourceCharT ch) { return ch == until; }),
 4837|     28|                value);
 4838|     28|        }
 4839|     24|        return read_string_impl(
 4840|     24|            range,
 4841|     24|            read_until_code_units(
 4842|     24|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|     24|            value);
 4844|     52|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     28|        : m_fptr([](storage fn,
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|     28|              if constexpr (std::is_void_v<R>) {
  746|     28|                  obj(static_cast<decltype(args)>(args)...);
  747|     28|              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
  752|     28|          m_storage(std::addressof(f))
  753|     28|    {
  754|     28|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    440|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    440|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    440|              else {
  749|    440|                  return obj(static_cast<decltype(args)>(args)...);
  750|    440|              }
  751|    440|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    440|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    440|        else if constexpr (std::is_object_v<T>) {
  688|    440|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    440|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4836|    440|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     28|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     28|        {
  662|     28|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|    822|    {
 5037|    822|        auto it = read_source_impl(range, {specs});
 5038|    822|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    822|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 490]
  |  |  ------------------
  ------------------
 5039|    332|            return unexpected(it.error());
 5040|    332|        }
 5041|       |
 5042|    490|        return read_string_impl(range, *it, value);
 5043|    822|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|    990|{
 4741|    990|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    990|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    990|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 104, False: 886]
  ------------------
 4745|    104|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    104|                                     "Invalid encoding in scanned string");
 4747|    104|    }
 4748|    886|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    886|    static_cast<    \
  |  |  929|    886|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    886|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    886|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 886]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    886|    return SCN_MOVE(result);
  ------------------
  |  |  928|    886|    static_cast<    \
  |  |  929|    886|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    886|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4879|  2.48k|    {
 4880|  2.48k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  2.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.98k, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.98k|    }                                                  \
  |  |  |  | 3667|  2.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|    500|        return read_string_impl(range, it, value);
 4882|  2.48k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5797|  4.96k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|  4.96k|                       std::is_same_v<T, std::wstring_view>) {
 5812|  4.96k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  4.96k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|    518|    {
 5266|    518|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    518|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    518|        return read_impl(range, specs, value);
 5268|    518|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|    518|    {
 5284|    518|        SCN_CLANG_PUSH
 5285|    518|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    518|        switch (m_type) {
 5288|    220|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 220, False: 298]
  ------------------
 5289|    220|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 58, False: 460]
  ------------------
 5292|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     58|                                                                   value);
 5294|       |
 5295|     30|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 30, False: 488]
  ------------------
 5296|     30|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    202|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 202, False: 316]
  ------------------
 5299|    202|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    202|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 516]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|      6|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 6, False: 512]
  ------------------
 5309|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      6|                    range,
 5311|      6|                    get_unescaped_regex_pattern(
 5312|      6|                        specs.charset_string<SourceCharT>()),
 5313|      6|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 518]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    518|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    518|        }
 5320|       |
 5321|    518|        SCN_CLANG_POP
 5322|    518|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4815|    220|    {
 4816|    220|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|    220|                                     value);
 4818|    220|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4761|    308|{
 4762|    308|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    308|    auto src = [&]() {
 4765|    308|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    308|            return make_contiguous_buffer(
 4767|    308|                ranges::subrange{range.begin().base(), result.base()});
 4768|    308|        }
 4769|    308|        else {
 4770|    308|            return make_contiguous_buffer(
 4771|    308|                ranges::subrange{range.begin(), result});
 4772|    308|        }
 4773|    308|    }();
 4774|    308|    using src_type = decltype(src);
 4775|       |
 4776|    308|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    308|    else {
 4789|    308|        const auto view = src.view();
 4790|    308|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    308|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 110, False: 198]
  ------------------
 4793|    110|            return unexpected_scan_error(
 4794|    110|                scan_error::invalid_scanned_value,
 4795|    110|                "Invalid encoding in scanned string_view");
 4796|    110|        }
 4797|       |
 4798|    198|        return SCN_MOVE(result);
  ------------------
  |  |  928|    198|    static_cast<    \
  |  |  929|    198|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    308|    }
 4800|    308|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4764|    308|    auto src = [&]() {
 4765|    308|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    308|            return make_contiguous_buffer(
 4767|    308|                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|       |        else {
 4770|       |            return make_contiguous_buffer(
 4771|       |                ranges::subrange{range.begin(), result});
 4772|       |        }
 4773|    308|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4851|     58|    {
 4852|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4852:13): [True: 28, False: 30]
  ------------------
 4853|     28|            return read_string_view_impl(
 4854|     28|                range,
 4855|     28|                read_until_code_unit(
 4856|     28|                    range,
 4857|     28|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4858|     28|                        SourceCharT ch) { return ch == until; }),
 4859|     28|                value);
 4860|     28|        }
 4861|     30|        return read_string_view_impl(
 4862|     30|            range,
 4863|     30|            read_until_code_units(
 4864|     30|                range, specs.fill.template get_code_units<SourceCharT>()),
 4865|     30|            value);
 4866|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     28|        : m_fptr([](storage fn,
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|     28|              if constexpr (std::is_void_v<R>) {
  746|     28|                  obj(static_cast<decltype(args)>(args)...);
  747|     28|              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
  752|     28|          m_storage(std::addressof(f))
  753|     28|    {
  754|     28|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4858|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     28|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     28|        {
  662|     28|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4947|     30|    {
 4948|     30|        return read_impl(
 4949|     30|            range,
 4950|     30|            [&](const auto& rng) {
 4951|     30|                return read_string_view_impl(rng, read_all(rng), value);
 4952|     30|            },
 4953|     30|            detail::priority_tag<1>{});
 4954|     30|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     30|    {
 4963|     30|        return read_cb(range);
 4964|     30|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4950|     30|            [&](const auto& rng) {
 4951|     30|                return read_string_view_impl(rng, read_all(rng), value);
 4952|     30|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5050|    202|    {
 5051|    202|        auto it = read_source_impl(range, {specs});
 5052|    202|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    202|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 190]
  |  |  ------------------
  ------------------
 5053|     12|            return unexpected(it.error());
 5054|     12|        }
 5055|       |
 5056|    190|        return read_string_view_impl(range, *it, value);
 5057|    202|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4761|    190|{
 4762|    190|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    190|    auto src = [&]() {
 4765|    190|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    190|            return make_contiguous_buffer(
 4767|    190|                ranges::subrange{range.begin().base(), result.base()});
 4768|    190|        }
 4769|    190|        else {
 4770|    190|            return make_contiguous_buffer(
 4771|    190|                ranges::subrange{range.begin(), result});
 4772|    190|        }
 4773|    190|    }();
 4774|    190|    using src_type = decltype(src);
 4775|       |
 4776|    190|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    190|    else {
 4789|    190|        const auto view = src.view();
 4790|    190|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    190|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 40, False: 150]
  ------------------
 4793|     40|            return unexpected_scan_error(
 4794|     40|                scan_error::invalid_scanned_value,
 4795|     40|                "Invalid encoding in scanned string_view");
 4796|     40|        }
 4797|       |
 4798|    150|        return SCN_MOVE(result);
  ------------------
  |  |  928|    150|    static_cast<    \
  |  |  929|    150|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    190|    }
 4800|    190|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4764|    190|    auto src = [&]() {
 4765|    190|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    190|            return make_contiguous_buffer(
 4767|    190|                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|       |        else {
 4770|       |            return make_contiguous_buffer(
 4771|       |                ranges::subrange{range.begin(), result});
 4772|       |        }
 4773|    190|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4890|      8|    {
 4891|      8|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_view_impl(range, it, value);
 4893|      8|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|  3.66k|    {
 5266|  3.66k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  3.66k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  3.66k|        return read_impl(range, specs, value);
 5268|  3.66k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|  3.66k|    {
 5284|  3.66k|        SCN_CLANG_PUSH
 5285|  3.66k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  3.66k|        switch (m_type) {
 5288|    304|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 304, False: 3.36k]
  ------------------
 5289|    304|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 52, False: 3.61k]
  ------------------
 5292|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     52|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 3.66k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    822|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 822, False: 2.84k]
  ------------------
 5299|    822|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    822|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  2.36k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2.36k, False: 1.30k]
  ------------------
 5304|  2.36k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  2.36k|                    range, specs.charset_string<SourceCharT>(),
 5306|  2.36k|                    specs.regexp_flags, value);
 5307|       |
 5308|    122|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 122, False: 3.54k]
  ------------------
 5309|    122|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    122|                    range,
 5311|    122|                    get_unescaped_regex_pattern(
 5312|    122|                        specs.charset_string<SourceCharT>()),
 5313|    122|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 3.66k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  3.66k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  3.66k|        }
 5320|       |
 5321|  3.66k|        SCN_CLANG_POP
 5322|  3.66k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|    932|    {
 4816|    932|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|    932|                                     value);
 4818|    932|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|    984|{
 4762|    984|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    984|    auto src = [&]() {
 4765|    984|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    984|            return make_contiguous_buffer(
 4767|    984|                ranges::subrange{range.begin().base(), result.base()});
 4768|    984|        }
 4769|    984|        else {
 4770|    984|            return make_contiguous_buffer(
 4771|    984|                ranges::subrange{range.begin(), result});
 4772|    984|        }
 4773|    984|    }();
 4774|    984|    using src_type = decltype(src);
 4775|       |
 4776|    984|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    984|    else {
 4789|    984|        const auto view = src.view();
 4790|    984|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    984|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 320, False: 664]
  ------------------
 4793|    320|            return unexpected_scan_error(
 4794|    320|                scan_error::invalid_scanned_value,
 4795|    320|                "Invalid encoding in scanned string_view");
 4796|    320|        }
 4797|       |
 4798|    664|        return SCN_MOVE(result);
  ------------------
  |  |  928|    664|    static_cast<    \
  |  |  929|    664|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    984|    }
 4800|    984|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|    984|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|    984|        else {
 4770|    984|            return make_contiguous_buffer(
 4771|    984|                ranges::subrange{range.begin(), result});
 4772|    984|        }
 4773|    984|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4851|     52|    {
 4852|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4852:13): [True: 28, False: 24]
  ------------------
 4853|     28|            return read_string_view_impl(
 4854|     28|                range,
 4855|     28|                read_until_code_unit(
 4856|     28|                    range,
 4857|     28|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4858|     28|                        SourceCharT ch) { return ch == until; }),
 4859|     28|                value);
 4860|     28|        }
 4861|     24|        return read_string_view_impl(
 4862|     24|            range,
 4863|     24|            read_until_code_units(
 4864|     24|                range, specs.fill.template get_code_units<SourceCharT>()),
 4865|     24|            value);
 4866|     52|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     28|        : m_fptr([](storage fn,
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|     28|              if constexpr (std::is_void_v<R>) {
  746|     28|                  obj(static_cast<decltype(args)>(args)...);
  747|     28|              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
  752|     28|          m_storage(std::addressof(f))
  753|     28|    {
  754|     28|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES19_c:
  743|    440|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    440|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    440|              else {
  749|    440|                  return obj(static_cast<decltype(args)>(args)...);
  750|    440|              }
  751|    440|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    440|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    440|        else if constexpr (std::is_object_v<T>) {
  688|    440|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    440|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4858|    440|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     28|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     28|        {
  662|     28|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|    822|    {
 5051|    822|        auto it = read_source_impl(range, {specs});
 5052|    822|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    822|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 490]
  |  |  ------------------
  ------------------
 5053|    332|            return unexpected(it.error());
 5054|    332|        }
 5055|       |
 5056|    490|        return read_string_view_impl(range, *it, value);
 5057|    822|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|    990|{
 4762|    990|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    990|    auto src = [&]() {
 4765|    990|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    990|            return make_contiguous_buffer(
 4767|    990|                ranges::subrange{range.begin().base(), result.base()});
 4768|    990|        }
 4769|    990|        else {
 4770|    990|            return make_contiguous_buffer(
 4771|    990|                ranges::subrange{range.begin(), result});
 4772|    990|        }
 4773|    990|    }();
 4774|    990|    using src_type = decltype(src);
 4775|       |
 4776|    990|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    990|    else {
 4789|    990|        const auto view = src.view();
 4790|    990|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    990|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 104, False: 886]
  ------------------
 4793|    104|            return unexpected_scan_error(
 4794|    104|                scan_error::invalid_scanned_value,
 4795|    104|                "Invalid encoding in scanned string_view");
 4796|    104|        }
 4797|       |
 4798|    886|        return SCN_MOVE(result);
  ------------------
  |  |  928|    886|    static_cast<    \
  |  |  929|    886|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    990|    }
 4800|    990|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|    990|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|    990|        else {
 4770|    990|            return make_contiguous_buffer(
 4771|    990|                ranges::subrange{range.begin(), result});
 4772|    990|        }
 4773|    990|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4890|  2.48k|    {
 4891|  2.48k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  2.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.98k, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.98k|    }                                                  \
  |  |  |  | 3667|  2.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    500|        return read_string_view_impl(range, it, value);
 4893|  2.48k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5612|  2.24k|    {
 5613|  2.24k|        reader_error_handler eh{};
 5614|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5615|       |            detail::check_code_point_type_specs(specs, eh);
 5616|       |        }
 5617|  2.24k|        else {
 5618|  2.24k|            detail::check_char_type_specs(specs, eh);
 5619|  2.24k|        }
 5620|  2.24k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.83k, False: 410]
  |  |  ------------------
  ------------------
 5621|  1.83k|            return {scan_error::invalid_format_string, eh.m_msg};
 5622|  1.83k|        }
 5623|    410|        return {};
 5624|  2.24k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  7.81k|    {
  763|  7.81k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  7.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  7.81k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.17k|        : m_fptr([](storage fn,
  743|  1.17k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.17k|              cvref<T> obj = *get<T>(fn);
  745|  1.17k|              if constexpr (std::is_void_v<R>) {
  746|  1.17k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.17k|              }
  748|  1.17k|              else {
  749|  1.17k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.17k|              }
  751|  1.17k|          }),
  752|  1.17k|          m_storage(std::addressof(f))
  753|  1.17k|    {
  754|  1.17k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  2.72k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.72k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.72k|              else {
  749|  2.72k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.72k|              }
  751|  2.72k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.72k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.72k|        else if constexpr (std::is_object_v<T>) {
  688|  2.72k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.72k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.17k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.17k|        {
  662|  1.17k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5607|  1.24k|    {
 5608|  1.24k|        return false;
 5609|  1.24k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1767|     84|    {
 1768|     84|        auto stdloc = loc.get<std::locale>();
 1769|     84|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|     84|        grouping = numpunct.grouping();
 1771|     84|        thousands_sep =
 1772|     84|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 84]
  ------------------
 1773|     84|        decimal_point = numpunct.decimal_point();
 1774|     84|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1704|    104|{
 1705|    104|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 104, False: 0]
  ------------------
 1706|    104|        return std::use_facet<Facet>(stdloc);
 1707|    104|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|    104|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2337|  3.27k|{
 2338|  3.27k|    size_t count{0};
 2339|  3.27k|    for_each_code_point(input, [&count](char32_t cp) {
 2340|  3.27k|        count += calculate_text_width_for_fmt_v10(cp);
 2341|  3.27k|    });
 2342|  3.27k|    return count;
 2343|  3.27k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1433|  3.27k|{
 1434|       |    // TODO: Could be optimized by being eager
 1435|  3.27k|    auto it = input.begin();
 1436|  10.3k|    while (it != input.end()) {
  ------------------
  |  Branch (1436:12): [True: 7.04k, False: 3.27k]
  ------------------
 1437|  7.04k|        auto res = get_next_code_point(
 1438|  7.04k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1439|  7.04k|        cb(res.value);
 1440|  7.04k|        it = detail::make_string_view_iterator(input, res.iterator);
 1441|  7.04k|    }
 1442|  3.27k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   312M|{
 1169|   312M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   312M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   312M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   312M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   312M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   312M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 312M]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   312M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   312M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 312M]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   312M|    return {input.begin() + len,
 1181|   312M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   312M|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  3.27k|        : m_fptr([](storage fn,
  743|  3.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.27k|              cvref<T> obj = *get<T>(fn);
  745|  3.27k|              if constexpr (std::is_void_v<R>) {
  746|  3.27k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.27k|              }
  748|  3.27k|              else {
  749|  3.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.27k|              }
  751|  3.27k|          }),
  752|  3.27k|          m_storage(std::addressof(f))
  753|  3.27k|    {
  754|  3.27k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  7.04k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.04k|              cvref<T> obj = *get<T>(fn);
  745|  7.04k|              if constexpr (std::is_void_v<R>) {
  746|  7.04k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  7.04k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  7.04k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  7.04k|        else if constexpr (std::is_object_v<T>) {
  688|  7.04k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.04k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2339|  7.04k|    for_each_code_point(input, [&count](char32_t cp) {
 2340|  7.04k|        count += calculate_text_width_for_fmt_v10(cp);
 2341|  7.04k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  3.27k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.27k|        {
  662|  3.27k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  2.00k|    {
 1570|  2.00k|        return m_view;
 1571|  2.00k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|  2.07k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2409|    354|    {
 2410|    354|        return m_multibyte_left;
 2411|    354|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2414|  18.2k|    {
 2415|  18.2k|        return *m_current;
 2416|  18.2k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2423|  12.6k|    {
 2424|  12.6k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  12.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2425|  12.6k|        _increment_current();
 2426|  12.6k|        return *this;
 2427|  12.6k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2656|  12.6k|    {
 2657|  12.6k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2657:13): [True: 12.6k, False: 0]
  ------------------
 2658|  12.6k|            auto cplen = _get_cp_length_at_current();
 2659|  12.6k|            m_multibyte_left = cplen - 1;
 2660|  12.6k|            m_count -= _get_width_at_current_cp_start(cplen);
 2661|  12.6k|        }
 2662|      0|        else {
 2663|      0|            --m_multibyte_left;
 2664|      0|        }
 2665|       |
 2666|  12.6k|        ++m_current;
 2667|  12.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2627|  12.6k|    {
 2628|  12.6k|        return static_cast<difference_type>(
 2629|  12.6k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2630|  12.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2633|  12.6k|    {
 2634|  12.6k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
 2635|      0|            return 0;
 2636|      0|        }
 2637|       |
 2638|  12.6k|        if (cplen == 1) {
  ------------------
  |  Branch (2638:13): [True: 12.6k, False: 0]
  ------------------
 2639|  12.6k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  12.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2640|  12.6k|            auto cp = static_cast<char32_t>(*m_current);
 2641|  12.6k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2642|  12.6k|        }
 2643|       |
 2644|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2645|      0|                                           cplen);
 2646|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2647|      0|            return 0;
 2648|      0|        }
 2649|       |
 2650|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2651|      0|        return static_cast<difference_type>(
 2652|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2653|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|  4.82k|{
 1845|  4.82k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  4.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|  4.82k|    if constexpr (ranges::sized_range<Range>) {
 1848|  4.82k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|  4.82k|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 134, False: 4.69k]
  ------------------
 1850|    134|            return unexpected(eof_error::eof);
 1851|    134|        }
 1852|       |
 1853|  4.69k|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|  4.82k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2519|  4.26k|    {
 2520|  4.26k|        return !(a == b);
 2521|  4.26k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2511|  4.84k|    {
 2512|  4.84k|        return a.m_current == b.m_current;
 2513|  4.84k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2418|  1.30k|    {
 2419|  1.30k|        return *m_current;
 2420|  1.30k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1877|  4.92k|    {
 1878|  4.92k|        return !codepoint.empty();
 1879|  4.92k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1670|    326|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|    326|    else {
 1677|    326|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    326|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|    326|    }
 1679|    326|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1524|    326|    {
 1525|    326|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    326|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|    326|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1608|    326|    {
 1609|    326|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|    326|        else {
 1642|    326|            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|    326|            if constexpr (ranges::common_range<Range>) {
 1647|    326|                std::copy(ranges::begin(range), ranges::end(range),
 1648|    326|                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|    326|            m_view = string_view_type{str};
 1657|    326|        }
 1658|    326|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2369|  6.50k|        : m_current(x), m_end(s), m_count(n)
 2370|  6.50k|    {
 2371|  6.50k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2401|  19.6k|    {
 2402|  19.6k|        return m_current;
 2403|  19.6k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2104|  1.56k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  1.56k|    else {
 2114|  1.56k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  1.56k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.56k|            return detail::is_cp_space(cp);
 2127|  1.56k|        });
 2128|  1.56k|    }
 2129|  1.56k|}
_ZN3scn2v34impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2069|  1.56k|{
 2070|  1.56k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  1.56k|}
_ZN3scn2v34impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2048|  1.56k|{
 2049|  1.56k|    auto it = range.begin();
 2050|  2.57k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.65k, False: 920]
  ------------------
 2051|  1.65k|        const auto val =
 2052|  1.65k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.65k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.65k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.65k, False: 0]
  |  |  ------------------
  ------------------
 2054|  1.65k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.65k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.65k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 644, False: 1.01k]
  ------------------
 2057|    644|                return it;
 2058|    644|            }
 2059|  1.65k|        }
 2060|  1.01k|        it = val.iterator;
 2061|  1.01k|    }
 2062|       |
 2063|    920|    return it;
 2064|  1.56k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|  36.6k|{
 1887|  36.6k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  36.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  36.6k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  36.6k|    auto it = range.begin();
 1891|  36.6k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  36.6k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  36.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36.6k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  36.6k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 36.6k, False: 0]
  ------------------
 1900|  36.6k|        ++it;
 1901|  36.6k|        return {it, string_type(1, *range.begin())};
 1902|  36.6k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  36.6k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  54.6k|{
  944|  54.6k|    return is_range_eof(r.begin(), r.end());
  945|  54.6k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   312M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   312M|    {
  937|   312M|        return begin == end;
  938|   312M|    }
  939|   312M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    778|    {
  190|    778|        i = std::move(bound);
  191|    778|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|  36.6k|    {
 1878|  36.6k|        return !codepoint.empty();
 1879|  36.6k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|  1.56k|        : m_fptr([](storage fn,
  743|  1.56k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.56k|              cvref<T> obj = *get<T>(fn);
  745|  1.56k|              if constexpr (std::is_void_v<R>) {
  746|  1.56k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.56k|              }
  748|  1.56k|              else {
  749|  1.56k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.56k|              }
  751|  1.56k|          }),
  752|  1.56k|          m_storage(std::addressof(f))
  753|  1.56k|    {
  754|  1.56k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  1.65k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.65k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.65k|              else {
  749|  1.65k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.65k|              }
  751|  1.65k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  1.65k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.65k|        else if constexpr (std::is_object_v<T>) {
  688|  1.65k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.65k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2125|  1.65k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.65k|            return detail::is_cp_space(cp);
 2127|  1.65k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|  1.56k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.56k|        {
  662|  1.56k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  18.0k|{
  950|  18.0k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.0k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  18.0k|    return eof_error::good;
  954|  18.0k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2820|  2.49k|    {
 2821|  2.49k|        return take_width_view{r, n};
 2822|  2.49k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2788|  2.49k|        : m_base(base), m_count(count)
 2789|  2.49k|    {
 2790|  2.49k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2702|  2.49k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5687|     90|    {
 5688|     90|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5688:13): [True: 70, False: 20]
  ------------------
 5689|     90|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5689:13): [True: 0, False: 20]
  ------------------
 5690|     70|            return read_default(range, value, loc);
 5691|     70|        }
 5692|       |
 5693|     20|        reader_impl_for_int<CharT> reader{};
 5694|     20|        using integer_type =
 5695|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5696|     20|        integer_type tmp_value{};
 5697|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5698|     20|        value = static_cast<integer_type>(value);
 5699|     20|        return ret;
 5700|     90|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5671|     70|    {
 5672|     70|        SCN_UNUSED(loc);
  ------------------
  |  |  909|     70|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5673|       |        if constexpr (std::is_same_v<CharT, char>) {
 5674|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5675|       |        }
 5676|     70|        else {
 5677|     70|            return code_unit_reader<wchar_t>{}.read(range, value);
 5678|     70|        }
 5679|     70|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5552|     70|    {
 5553|     70|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|     70|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     70|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     70|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     70|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 70]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     70|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     70|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5554|     70|        ch = *range.begin();
 5555|     70|        return it;
 5556|     70|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1833|    686|{
 1834|    686|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    686|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 686]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|    686|    return ranges::next(range.begin());
 1839|    686|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|    686|{
  950|    686|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|    686|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 686]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|    686|    return eof_error::good;
  954|    686|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|    686|{
  944|    686|    return is_range_eof(r.begin(), r.end());
  945|    686|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  5.65k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  5.65k|    {
  937|  5.65k|        return begin == end;
  938|  5.65k|    }
  939|  5.65k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2758|  17.8k|        {
 2759|  17.8k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2759:21): [True: 354, False: 17.5k]
  |  Branch (2759:39): [True: 354, False: 0]
  ------------------
 2760|  17.8k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2760:20): [True: 138, False: 17.3k]
  ------------------
 2761|  17.8k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2804|  9.43k|    {
 2805|  9.43k|        return sentinel<true>{m_base.get().end()};
 2806|  9.43k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2705|  22.4k|    {
 2706|  22.4k|        return view;
 2707|  22.4k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2739|  9.43k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  9.43k|    static_cast<    \
  |  |  929|  9.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|    724|    {
  296|    724|        ++x;
  297|    724|        return x;
  298|    724|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2798|  6.50k|    {
 2799|  6.50k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2800|  6.50k|                                      m_count};
 2801|  6.50k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    128|    {
 3528|    128|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    128|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    128|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    128|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 128]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    128|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    128|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    128|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 128]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|    128|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 128]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    128|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    128|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 110, False: 18]
  |  |  ------------------
  ------------------
 3554|    110|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    110|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    110|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    110|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 110, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    110|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    110|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    110|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    110|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    110|    }                                                  \
  |  |  |  | 3667|    110|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|     18|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     18|            localized_number_formatting_options<CharT>{loc};
 3575|     18|#endif
 3576|       |
 3577|     18|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3314|    308|{
 3315|    308|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|    308|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    308|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    308|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    308|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|    308|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|    308|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|    308|        parse_integer_base_prefix(
 3320|    308|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|    308|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 0, False: 308]
  ------------------
 3323|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 0, False: 0]
  |  Branch (3323:13): [True: 0, False: 0]
  ------------------
 3324|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 0, False: 0]
  ------------------
 3325|      0|            digits_begin_it = base_prefix_begin_it;
 3326|      0|        }
 3327|      0|        else {
 3328|      0|            parsed_zero = false;
 3329|      0|        }
 3330|      0|    }
 3331|    308|    else {
 3332|    308|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 0, False: 308]
  |  Branch (3332:13): [True: 308, False: 0]
  ------------------
 3333|    308|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 308, False: 0]
  ------------------
 3334|    308|            digits_begin_it = base_prefix_begin_it;
 3335|    308|        }
 3336|    308|    }
 3337|       |
 3338|    308|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 308, False: 0]
  ------------------
 3339|    308|        sign = sign_type::plus_sign;
 3340|    308|    }
 3341|    308|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|    308|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|    308|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3129|    400|{
 3130|    400|    auto r = read_one_of_code_unit(range, "+-");
 3131|    400|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 400, False: 0]
  ------------------
 3132|    400|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 400, False: 0]
  ------------------
 3133|    400|            return std::pair{range.begin(), sign_type::default_sign};
 3134|    400|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|    400|    }
 3137|       |
 3138|      0|    auto& it = *r;
 3139|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 0, False: 0]
  ------------------
 3140|      0|        return std::pair{it, sign_type::minus_sign};
 3141|      0|    }
 3142|      0|    return std::pair{it, sign_type::plus_sign};
 3143|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2260|    400|{
 2261|    400|    auto it = read_code_unit(range);
 2262|    400|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    400|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 400]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|    800|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 800, False: 400]
  ------------------
 2267|    800|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 0, False: 800]
  ------------------
 2268|      0|            return *it;
 2269|      0|        }
 2270|    800|    }
 2271|       |
 2272|    400|    return unexpected(parse_error::error);
 2273|    400|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3281|    308|{
 3282|    308|    switch (base) {
 3283|      6|        case 2:
  ------------------
  |  Branch (3283:9): [True: 6, False: 302]
  ------------------
 3284|       |            // allow 0b/0B
 3285|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|      6|                    false};
 3287|       |
 3288|     16|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 16, False: 292]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|     16|            bool zero_parsed = false;
 3291|     16|            auto it = apply_opt(
 3292|     16|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|     16|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|     82|        case 16:
  ------------------
  |  Branch (3296:9): [True: 82, False: 226]
  ------------------
 3297|       |            // allow 0x/0X
 3298|     82|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|     82|                    false};
 3300|       |
 3301|     22|        case 0:
  ------------------
  |  Branch (3301:9): [True: 22, False: 286]
  ------------------
 3302|       |            // detect base
 3303|     22|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|    182|        default:
  ------------------
  |  Branch (3305:9): [True: 182, False: 126]
  ------------------
 3306|       |            // no base prefix allowed
 3307|    182|            return {range.begin(), base, false};
 3308|    308|    }
 3309|    308|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2279|    104|{
 2280|    104|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 104, False: 0]
  ------------------
 2281|    104|        return range.begin();
 2282|    104|    }
 2283|      0|    return *result;
 2284|    104|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3232|     28|{
 3233|     28|    return read_matching_string_classic_nocase(range, "0b");
 3234|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2219|    438|{
 2220|    438|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|    438|    else {
 2233|    438|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|    438|            if (ch < 'A' || ch > 'Z') {
 2235|    438|                return ch;
 2236|    438|            }
 2237|    438|            return static_cast<char_type>(ch +
 2238|    438|                                          static_cast<char_type>('a' - 'A'));
 2239|    438|        };
 2240|       |
 2241|    438|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    438|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    438|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    438|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 92, False: 346]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     92|    }                                                  \
  |  |  |  | 3667|    438|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|    346|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|    346|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|    346|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 346, False: 0]
  |  |  ------------------
  ------------------
 2246|    346|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|    346|                    return ascii_tolower(a) ==
 2248|    346|                           static_cast<detail::char_t<Range>>(b);
 2249|    346|                }))) {
 2250|    346|            return unexpected(parse_error::error);
 2251|    346|        }
 2252|       |
 2253|      0|        return it;
 2254|    346|    }
 2255|    438|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1844|    438|{
 1845|    438|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    438|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    438|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|    438|    else {
 1856|    438|        auto it = range.begin();
 1857|    438|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 438]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  1.38k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 1.04k, False: 346]
  ------------------
 1862|  1.04k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 92, False: 948]
  ------------------
 1863|     92|                return unexpected(eof_error::eof);
 1864|     92|            }
 1865|  1.04k|        }
 1866|       |
 1867|    346|        return it;
 1868|    438|    }
 1869|    438|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|    438|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    438|    else {
 1115|    438|        return 0;
 1116|    438|    }
 1117|    438|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2233|    346|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|    346|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 32, False: 314]
  |  Branch (2234:29): [True: 314, False: 0]
  ------------------
 2235|    346|                return ch;
 2236|    346|            }
 2237|      0|            return static_cast<char_type>(ch +
 2238|      0|                                          static_cast<char_type>('a' - 'A'));
 2239|    346|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3246|     38|{
 3247|     38|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 38]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|     38|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 0, False: 38]
  ------------------
 3252|      0|        zero_parsed = true;
 3253|      0|        return *r;
 3254|      0|    }
 3255|       |
 3256|     38|    return unexpected(parse_error::error);
 3257|     38|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2134|     38|{
 2135|     38|    auto it = read_code_unit(range);
 2136|     38|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|     38|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 2141|     38|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|     38|        return unexpected(parse_error::error);
 2143|     38|    }
 2144|       |
 2145|      0|    return *it;
 2146|     38|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1833|     38|{
 1834|     38|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|     38|    return ranges::next(range.begin());
 1839|     38|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     38|{
  950|     38|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     38|    return eof_error::good;
  954|     38|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  4.96k|{
  944|  4.96k|    return is_range_eof(r.begin(), r.end());
  945|  4.96k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3239|    104|{
 3240|    104|    return read_matching_string_classic_nocase(range, "0x");
 3241|    104|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3262|     22|{
 3263|     22|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 22]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|     22|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 22]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|     22|    {
 3270|     22|        bool zero_parsed{false};
 3271|     22|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 0, False: 22]
  ------------------
 3272|      0|            return {*r, 8, zero_parsed};
 3273|      0|        }
 3274|     22|    }
 3275|     22|    return {range.begin(), 10, false};
 3276|     22|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3348|    272|{
 3349|    272|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|       |    if constexpr (ranges::contiguous_range<Range>) {
 3352|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3353|       |            return unexpected_scan_error(
 3354|       |                scan_error::invalid_scanned_value,
 3355|       |                "Failed to parse integer: No digits found");
 3356|       |        }
 3357|       |        return range.end();
 3358|       |    }
 3359|    272|    else {
 3360|    272|        return read_while1_code_unit(range,
 3361|    272|                                     [&](char_type ch) noexcept {
 3362|    272|                                         return char_to_int(ch) < base;
 3363|    272|                                     })
 3364|    272|            .transform_error(map_parse_error_to_scan_error(
 3365|    272|                scan_error::invalid_scanned_value,
 3366|    272|                "Failed to parse integer: No digits found"));
 3367|    272|    }
 3368|    272|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1983|    364|{
 1984|    364|    auto it = read_while_code_unit(range, pred);
 1985|    364|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 364, False: 0]
  ------------------
 1986|    364|        return unexpected(parse_error::error);
 1987|    364|    }
 1988|      0|    return it;
 1989|    364|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1963|    364|{
 1964|    364|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    364|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1944|    364|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    364|    else {
 1949|    364|        auto first = range.begin();
 1950|    364|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 364, False: 0]
  ------------------
 1951|    364|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 364, False: 0]
  ------------------
 1952|    364|                return first;
 1953|    364|            }
 1954|    364|        }
 1955|      0|        return first;
 1956|    364|    }
 1957|    364|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  8.10k|        {
 2770|  8.10k|            return !(y == x);
 2771|  8.10k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    272|        : m_fptr([](storage fn,
  743|    272|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    272|              cvref<T> obj = *get<T>(fn);
  745|    272|              if constexpr (std::is_void_v<R>) {
  746|    272|                  obj(static_cast<decltype(args)>(args)...);
  747|    272|              }
  748|    272|              else {
  749|    272|                  return obj(static_cast<decltype(args)>(args)...);
  750|    272|              }
  751|    272|          }),
  752|    272|          m_storage(std::addressof(f))
  753|    272|    {
  754|    272|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    272|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    272|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    272|              else {
  749|    272|                  return obj(static_cast<decltype(args)>(args)...);
  750|    272|              }
  751|    272|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    272|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    272|        else if constexpr (std::is_object_v<T>) {
  688|    272|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    272|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3361|    272|                                     [&](char_type ch) noexcept {
 3362|    272|                                         return char_to_int(ch) < base;
 3363|    272|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    272|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    272|        {
  662|    272|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3378|     36|{
 3379|     36|    std::basic_string<CharT> output;
 3380|     36|    std::string thsep_indices;
 3381|     36|    auto it = range.begin();
 3382|     36|    bool digit_matched = false;
 3383|     36|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 36, False: 0]
  ------------------
 3384|     36|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 0, False: 36]
  ------------------
 3385|      0|            thsep_indices.push_back(
 3386|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|      0|        }
 3388|     36|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 36, False: 0]
  ------------------
 3389|     36|            break;
 3390|     36|        }
 3391|      0|        else {
 3392|      0|            output.push_back(*it);
 3393|      0|            digit_matched = true;
 3394|      0|        }
 3395|     36|    }
 3396|     36|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 3397|     36|        return unexpected_scan_error(
 3398|     36|            scan_error::invalid_scanned_value,
 3399|     36|            "Failed to parse integer: No digits found");
 3400|     36|    }
 3401|      0|    return std::tuple{it, output, thsep_indices};
 3402|     36|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2405|  18.5k|    {
 2406|  18.5k|        return m_count;
 2407|  18.5k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5687|    318|    {
 5688|    318|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5688:13): [True: 298, False: 20]
  ------------------
 5689|    318|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5689:13): [True: 0, False: 20]
  ------------------
 5690|    298|            return read_default(range, value, loc);
 5691|    298|        }
 5692|       |
 5693|     20|        reader_impl_for_int<CharT> reader{};
 5694|     20|        using integer_type =
 5695|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5696|     20|        integer_type tmp_value{};
 5697|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5698|     20|        value = static_cast<integer_type>(value);
 5699|     20|        return ret;
 5700|    318|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5671|    760|    {
 5672|    760|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    760|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5673|       |        if constexpr (std::is_same_v<CharT, char>) {
 5674|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5675|       |        }
 5676|    760|        else {
 5677|    760|            return code_unit_reader<wchar_t>{}.read(range, value);
 5678|    760|        }
 5679|    760|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5552|    760|    {
 5553|    760|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    760|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    760|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    760|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    760|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 760]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    760|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    760|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5554|    760|        ch = *range.begin();
 5555|    760|        return it;
 5556|    760|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|  5.54k|{
 1834|  5.54k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.54k]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|  5.54k|    return ranges::next(range.begin());
 1839|  5.54k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   312M|    {
  296|   312M|        ++x;
  297|   312M|        return x;
  298|   312M|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    354|    {
 3528|    354|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    354|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    354|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 354]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|    354|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 354]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    354|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    354|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 338, False: 16]
  |  |  ------------------
  ------------------
 3554|    338|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 338]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    338|                    parse_integer_digits_without_thsep(
 3556|    338|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    338|                        prefix_result.parsed_base));
 3558|       |
 3559|    338|            auto buf = make_contiguous_buffer(
 3560|    338|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    338|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 338, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    338|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    338|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    338|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    338|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    338|    }                                                  \
  |  |  |  | 3667|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    338|        }
 3569|       |
 3570|     16|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     16|            localized_number_formatting_options<CharT>{loc};
 3575|     16|#endif
 3576|       |
 3577|     16|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3314|  2.37k|{
 3315|  2.37k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|  2.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.37k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|  2.37k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|  2.37k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|  2.37k|        parse_integer_base_prefix(
 3320|  2.37k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|  2.37k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 0, False: 2.37k]
  ------------------
 3323|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 0, False: 0]
  ------------------
 3324|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 0, False: 0]
  ------------------
 3325|      0|            digits_begin_it = base_prefix_begin_it;
 3326|      0|        }
 3327|      0|        else {
 3328|      0|            parsed_zero = false;
 3329|      0|        }
 3330|      0|    }
 3331|  2.37k|    else {
 3332|  2.37k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 0, False: 2.37k]
  ------------------
 3333|  2.37k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 2.37k, False: 0]
  ------------------
 3334|  2.37k|            digits_begin_it = base_prefix_begin_it;
 3335|  2.37k|        }
 3336|  2.37k|    }
 3337|       |
 3338|  2.37k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 2.37k, False: 0]
  ------------------
 3339|  2.37k|        sign = sign_type::plus_sign;
 3340|  2.37k|    }
 3341|  2.37k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|  2.37k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|  2.37k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|  3.16k|{
 3130|  3.16k|    auto r = read_one_of_code_unit(range, "+-");
 3131|  3.16k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 3.16k, False: 0]
  ------------------
 3132|  3.16k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 3.16k, False: 0]
  ------------------
 3133|  3.16k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|  3.16k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|  3.16k|    }
 3137|       |
 3138|      0|    auto& it = *r;
 3139|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 0, False: 0]
  ------------------
 3140|      0|        return std::pair{it, sign_type::minus_sign};
 3141|      0|    }
 3142|      0|    return std::pair{it, sign_type::plus_sign};
 3143|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|  3.16k|{
 2261|  3.16k|    auto it = read_code_unit(range);
 2262|  3.16k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.16k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|  6.32k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 6.32k, False: 3.16k]
  ------------------
 2267|  6.32k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 0, False: 6.32k]
  ------------------
 2268|      0|            return *it;
 2269|      0|        }
 2270|  6.32k|    }
 2271|       |
 2272|  3.16k|    return unexpected(parse_error::error);
 2273|  3.16k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3281|  2.37k|{
 3282|  2.37k|    switch (base) {
 3283|     12|        case 2:
  ------------------
  |  Branch (3283:9): [True: 12, False: 2.36k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|     12|                    false};
 3287|       |
 3288|     10|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 10, False: 2.36k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|     10|            bool zero_parsed = false;
 3291|     10|            auto it = apply_opt(
 3292|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|     10|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|    780|        case 16:
  ------------------
  |  Branch (3296:9): [True: 780, False: 1.59k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|    780|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|    780|                    false};
 3300|       |
 3301|     16|        case 0:
  ------------------
  |  Branch (3301:9): [True: 16, False: 2.36k]
  ------------------
 3302|       |            // detect base
 3303|     16|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|  1.55k|        default:
  ------------------
  |  Branch (3305:9): [True: 1.55k, False: 818]
  ------------------
 3306|       |            // no base prefix allowed
 3307|  1.55k|            return {range.begin(), base, false};
 3308|  2.37k|    }
 3309|  2.37k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2279|    802|{
 2280|    802|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 802, False: 0]
  ------------------
 2281|    802|        return range.begin();
 2282|    802|    }
 2283|      0|    return *result;
 2284|    802|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3232|     28|{
 3233|     28|    return read_matching_string_classic_nocase(range, "0b");
 3234|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  3.19k|{
 2220|  3.19k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  3.19k|    else {
 2233|  3.19k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  3.19k|            if (ch < 'A' || ch > 'Z') {
 2235|  3.19k|                return ch;
 2236|  3.19k|            }
 2237|  3.19k|            return static_cast<char_type>(ch +
 2238|  3.19k|                                          static_cast<char_type>('a' - 'A'));
 2239|  3.19k|        };
 2240|       |
 2241|  3.19k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  3.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 3.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|  3.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  3.19k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  3.19k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  3.19k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.19k, False: 0]
  |  |  ------------------
  ------------------
 2246|  3.19k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  3.19k|                    return ascii_tolower(a) ==
 2248|  3.19k|                           static_cast<detail::char_t<Range>>(b);
 2249|  3.19k|                }))) {
 2250|  3.19k|            return unexpected(parse_error::error);
 2251|  3.19k|        }
 2252|       |
 2253|      0|        return it;
 2254|  3.19k|    }
 2255|  3.19k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  3.19k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  3.19k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 46, False: 3.14k]
  |  Branch (2234:29): [True: 3.14k, False: 0]
  ------------------
 2235|  3.19k|                return ch;
 2236|  3.19k|            }
 2237|      0|            return static_cast<char_type>(ch +
 2238|      0|                                          static_cast<char_type>('a' - 'A'));
 2239|  3.19k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3246|     26|{
 3247|     26|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 26]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|     26|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 0, False: 26]
  ------------------
 3252|      0|        zero_parsed = true;
 3253|      0|        return *r;
 3254|      0|    }
 3255|       |
 3256|     26|    return unexpected(parse_error::error);
 3257|     26|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|  1.62k|{
 2135|  1.62k|    auto it = read_code_unit(range);
 2136|  1.62k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.62k]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|  1.62k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.62k, False: 0]
  |  |  ------------------
  ------------------
 2141|  1.62k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  1.62k|        return unexpected(parse_error::error);
 2143|  1.62k|    }
 2144|       |
 2145|      0|    return *it;
 2146|  1.62k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3239|    796|{
 3240|    796|    return read_matching_string_classic_nocase(range, "0x");
 3241|    796|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3262|     16|{
 3263|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 16]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 16]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|     16|    {
 3270|     16|        bool zero_parsed{false};
 3271|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 0, False: 16]
  ------------------
 3272|      0|            return {*r, 8, zero_parsed};
 3273|      0|        }
 3274|     16|    }
 3275|     16|    return {range.begin(), 10, false};
 3276|     16|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3348|  2.34k|{
 3349|  2.34k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|  2.34k|    if constexpr (ranges::contiguous_range<Range>) {
 3352|  2.34k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.34k]
  |  |  ------------------
  ------------------
 3353|      0|            return unexpected_scan_error(
 3354|      0|                scan_error::invalid_scanned_value,
 3355|      0|                "Failed to parse integer: No digits found");
 3356|      0|        }
 3357|  2.34k|        return range.end();
 3358|       |    }
 3359|       |    else {
 3360|       |        return read_while1_code_unit(range,
 3361|       |                                     [&](char_type ch) noexcept {
 3362|       |                                         return char_to_int(ch) < base;
 3363|       |                                     })
 3364|       |            .transform_error(map_parse_error_to_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found"));
 3367|       |    }
 3368|  2.34k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3378|     32|{
 3379|     32|    std::basic_string<CharT> output;
 3380|     32|    std::string thsep_indices;
 3381|     32|    auto it = range.begin();
 3382|     32|    bool digit_matched = false;
 3383|     32|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 32, False: 0]
  ------------------
 3384|     32|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 0, False: 32]
  ------------------
 3385|      0|            thsep_indices.push_back(
 3386|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|      0|        }
 3388|     32|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 32, False: 0]
  ------------------
 3389|     32|            break;
 3390|     32|        }
 3391|      0|        else {
 3392|      0|            output.push_back(*it);
 3393|      0|            digit_matched = true;
 3394|      0|        }
 3395|     32|    }
 3396|     32|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3397|     32|        return unexpected_scan_error(
 3398|     32|            scan_error::invalid_scanned_value,
 3399|     32|            "Failed to parse integer: No digits found");
 3400|     32|    }
 3401|      0|    return std::tuple{it, output, thsep_indices};
 3402|     32|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1670|  9.45k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  9.45k|                  ranges::sized_range<Range>) {
 1674|  9.45k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  9.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  9.45k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|  9.45k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  9.45k|    {
 1478|  9.45k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1490|  11.1k|    {
 1491|  11.1k|        return sv;
 1492|  11.1k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5939|    504|{
 5940|    504|    using char_type = detail::char_t<Range>;
 5941|    504|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5942|       |
 5943|    504|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5943:9): [True: 504, False: 0]
  ------------------
 5944|    504|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5945|    504|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5946|       |
 5947|    504|        if (max_width == 0) {
  ------------------
  |  Branch (5947:13): [True: 446, False: 58]
  ------------------
 5948|    446|            auto it = read_while_code_unit(range, pred);
 5949|       |
 5950|    446|            if (want_skipped_width) {
  ------------------
  |  Branch (5950:17): [True: 66, False: 380]
  ------------------
 5951|     66|                auto prefix_width =
 5952|     66|                    static_cast<std::ptrdiff_t>(
 5953|     66|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5954|     66|                    ranges::distance(range.begin(), it);
 5955|     66|                return result_type{it, prefix_width};
 5956|     66|            }
 5957|    380|            return result_type{it, 0};
 5958|    446|        }
 5959|       |
 5960|     58|        auto max_width_view = take_width(range, max_width);
 5961|     58|        auto w_it = read_while_code_unit(max_width_view, pred);
 5962|       |
 5963|     58|        if (want_skipped_width) {
  ------------------
  |  Branch (5963:13): [True: 58, False: 0]
  ------------------
 5964|     58|            return result_type{w_it.base(), max_width - w_it.count()};
 5965|     58|        }
 5966|      0|        return result_type{w_it.base(), 0};
 5967|     58|    }
 5968|       |
 5969|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5970|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5970:9): [True: 0, False: 0]
  ------------------
 5971|      0|        auto it = read_while_code_units(range, fill_chars);
 5972|       |
 5973|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5973:13): [True: 0, False: 0]
  ------------------
 5974|      0|            auto prefix_width =
 5975|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5976|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5977|      0|            return result_type{it, prefix_width};
 5978|      0|        }
 5979|      0|        return result_type{it, 0};
 5980|      0|    }
 5981|       |
 5982|      0|    auto max_width_view = take_width(range, max_width);
 5983|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5984|       |
 5985|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5985:9): [True: 0, False: 0]
  ------------------
 5986|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5987|      0|    }
 5988|      0|    return result_type{w_it.base(), 0};
 5989|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|    506|{
 1964|    506|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    506|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|    650|{
 1945|    650|    if constexpr (ranges::common_range<Range>) {
 1946|    650|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|    650|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|    504|        : m_fptr([](storage fn,
  743|    504|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    504|              cvref<T> obj = *get<T>(fn);
  745|    504|              if constexpr (std::is_void_v<R>) {
  746|    504|                  obj(static_cast<decltype(args)>(args)...);
  747|    504|              }
  748|    504|              else {
  749|    504|                  return obj(static_cast<decltype(args)>(args)...);
  750|    504|              }
  751|    504|          }),
  752|    504|          m_storage(std::addressof(f))
  753|    504|    {
  754|    504|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|    948|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    948|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    948|              else {
  749|    948|                  return obj(static_cast<decltype(args)>(args)...);
  750|    948|              }
  751|    948|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    948|    {
  684|    948|        if constexpr (std::is_const_v<T>) {
  685|    948|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    948|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5945|    948|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|    504|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    504|        {
  667|    504|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1963|     88|{
 1964|     88|    return read_until_code_unit(range, std::not_fn(pred));
 1965|     88|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1944|    178|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    178|    else {
 1949|    178|        auto first = range.begin();
 1950|  1.12k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 1.03k, False: 92]
  ------------------
 1951|  1.03k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 86, False: 946]
  ------------------
 1952|     86|                return first;
 1953|     86|            }
 1954|  1.03k|        }
 1955|     92|        return first;
 1956|    178|    }
 1957|    178|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2939|    174|{
 2940|    174|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 0, False: 174]
  ------------------
 2941|      0|        auto it = read_while_classic_space(range);
 2942|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|      0|        return it;
 2948|      0|    }
 2949|       |
 2950|    174|    return read_while_classic_space(range);
 2951|    174|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2104|    174|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|    174|    else {
 2114|    174|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|    174|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|    174|            return detail::is_cp_space(cp);
 2127|    174|        });
 2128|    174|    }
 2129|    174|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2069|    204|{
 2070|    204|    return read_until_code_point(range, std::not_fn(pred));
 2071|    204|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2048|    306|{
 2049|    306|    auto it = range.begin();
 2050|  1.11k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.08k, False: 36]
  ------------------
 2051|  1.08k|        const auto val =
 2052|  1.08k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.08k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.08k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.08k, False: 0]
  |  |  ------------------
  ------------------
 2054|  1.08k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.08k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.08k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 270, False: 810]
  ------------------
 2057|    270|                return it;
 2058|    270|            }
 2059|  1.08k|        }
 2060|    810|        it = val.iterator;
 2061|    810|    }
 2062|       |
 2063|     36|    return it;
 2064|    306|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1886|  4.92k|{
 1887|  4.92k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  4.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  4.92k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  4.92k|    auto it = range.begin();
 1891|  4.92k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  4.92k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  4.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.92k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  4.92k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 4.92k, False: 0]
  ------------------
 1900|  4.92k|        ++it;
 1901|  4.92k|        return {it, string_type(1, *range.begin())};
 1902|  4.92k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  4.92k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    174|        : m_fptr([](storage fn,
  743|    174|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    174|              cvref<T> obj = *get<T>(fn);
  745|    174|              if constexpr (std::is_void_v<R>) {
  746|    174|                  obj(static_cast<decltype(args)>(args)...);
  747|    174|              }
  748|    174|              else {
  749|    174|                  return obj(static_cast<decltype(args)>(args)...);
  750|    174|              }
  751|    174|          }),
  752|    174|          m_storage(std::addressof(f))
  753|    174|    {
  754|    174|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|    276|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    276|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    276|              else {
  749|    276|                  return obj(static_cast<decltype(args)>(args)...);
  750|    276|              }
  751|    276|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    276|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    276|        else if constexpr (std::is_object_v<T>) {
  688|    276|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    276|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2125|    276|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|    276|            return detail::is_cp_space(cp);
 2127|    276|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    174|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    174|        {
  662|    174|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  6.34k|{
 2940|  6.34k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 5.98k, False: 356]
  ------------------
 2941|  5.98k|        auto it = read_while_classic_space(range);
 2942|  5.98k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  5.98k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.98k]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|  5.98k|        return it;
 2948|  5.98k|    }
 2949|       |
 2950|    356|    return read_while_classic_space(range);
 2951|  6.34k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  7.90k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  7.90k|    else {
 2114|  7.90k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  7.90k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  7.90k|            return detail::is_cp_space(cp);
 2127|  7.90k|        });
 2128|  7.90k|    }
 2129|  7.90k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|  8.08k|{
 2070|  8.08k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  8.08k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|  10.5k|{
 2049|  10.5k|    auto it = range.begin();
 2050|  37.5k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 34.9k, False: 2.61k]
  ------------------
 2051|  34.9k|        const auto val =
 2052|  34.9k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  34.9k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  34.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 34.9k, False: 0]
  |  |  ------------------
  ------------------
 2054|  34.9k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  34.9k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  34.9k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 7.90k, False: 27.0k]
  ------------------
 2057|  7.90k|                return it;
 2058|  7.90k|            }
 2059|  34.9k|        }
 2060|  27.0k|        it = val.iterator;
 2061|  27.0k|    }
 2062|       |
 2063|  2.61k|    return it;
 2064|  10.5k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  7.90k|        : m_fptr([](storage fn,
  743|  7.90k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.90k|              cvref<T> obj = *get<T>(fn);
  745|  7.90k|              if constexpr (std::is_void_v<R>) {
  746|  7.90k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.90k|              }
  748|  7.90k|              else {
  749|  7.90k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.90k|              }
  751|  7.90k|          }),
  752|  7.90k|          m_storage(std::addressof(f))
  753|  7.90k|    {
  754|  7.90k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  9.31k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.31k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.31k|              else {
  749|  9.31k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.31k|              }
  751|  9.31k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  9.31k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  9.31k|        else if constexpr (std::is_object_v<T>) {
  688|  9.31k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.31k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|  9.31k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  9.31k|            return detail::is_cp_space(cp);
 2127|  9.31k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  7.90k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.90k|        {
  662|  7.90k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  4.56k|    {
 3029|  4.56k|        reader_error_handler eh{};
 3030|  4.56k|        get_derived().check_specs_impl(specs, eh);
 3031|  4.56k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.68k, False: 888]
  |  |  ------------------
  ------------------
 3032|  3.68k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  3.68k|        }
 3034|    888|        return {};
 3035|  4.56k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3039|  4.56k|    {
 3040|  4.56k|        return static_cast<Derived&>(*this);
 3041|  4.56k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3473|  4.56k|    {
 3474|  4.56k|        detail::check_int_type_specs(specs, eh);
 3475|  4.56k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3023|  1.81k|    {
 3024|  1.81k|        return true;
 3025|  1.81k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    108|    {
 3528|    108|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    108|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    108|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    108|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    108|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    108|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    108|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 108]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    108|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 108]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    108|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    108|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 90, False: 18]
  |  |  ------------------
  ------------------
 3554|     90|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 90, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     90|    }                                                  \
  |  |  |  | 3667|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|     18|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     18|            localized_number_formatting_options<CharT>{loc};
 3575|     18|#endif
 3576|       |
 3577|     18|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    334|    {
 3528|    334|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 334]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    334|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    334|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 334]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    334|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 334]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    334|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    334|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 318, False: 16]
  |  |  ------------------
  ------------------
 3554|    318|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    318|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    318|                    parse_integer_digits_without_thsep(
 3556|    318|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    318|                        prefix_result.parsed_base));
 3558|       |
 3559|    318|            auto buf = make_contiguous_buffer(
 3560|    318|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    318|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    318|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 318, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    318|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    318|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    318|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    318|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    318|    }                                                  \
  |  |  |  | 3667|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    318|        }
 3569|       |
 3570|     16|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     16|            localized_number_formatting_options<CharT>{loc};
 3575|     16|#endif
 3576|       |
 3577|     16|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|     72|    {
 3528|     72|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|     72|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     72|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     72|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 72]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     72|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     72|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|     72|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|     72|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 72]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|     72|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 72]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|     72|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     72|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 72, False: 0]
  |  |  ------------------
  ------------------
 3554|     72|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     72|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     72|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     72|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     72|    }                                                  \
  |  |  |  | 3667|     72|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    764|    {
 3528|    764|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    764|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    764|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    764|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    764|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 764]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    764|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    764|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    764|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    764|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 764]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    764|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 764]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    764|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    764|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 764, False: 0]
  |  |  ------------------
  ------------------
 3554|    764|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    764|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    764|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    764|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    764|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 764]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    764|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    764|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    764|                    parse_integer_digits_without_thsep(
 3556|    764|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    764|                        prefix_result.parsed_base));
 3558|       |
 3559|    764|            auto buf = make_contiguous_buffer(
 3560|    764|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    764|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    764|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    764|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    764|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    764|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 764, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    764|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    764|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    764|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    764|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    764|    }                                                  \
  |  |  |  | 3667|    764|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    764|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  2.28k|    {
 3029|  2.28k|        reader_error_handler eh{};
 3030|  2.28k|        get_derived().check_specs_impl(specs, eh);
 3031|  2.28k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.86k, False: 418]
  |  |  ------------------
  ------------------
 3032|  1.86k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  1.86k|        }
 3034|    418|        return {};
 3035|  2.28k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3039|  2.28k|    {
 3040|  2.28k|        return static_cast<Derived&>(*this);
 3041|  2.28k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|  2.28k|    {
 4134|  2.28k|        detail::check_float_type_specs(specs, eh);
 4135|  2.28k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3023|    880|    {
 3024|    880|        return true;
 3025|    880|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4205|    414|    {
 4206|    414|        unsigned options{};
 4207|    414|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 16, False: 398]
  ------------------
 4208|     16|            options |= float_reader_base::allow_thsep;
 4209|     16|        }
 4210|       |
 4211|    414|        SCN_GCC_COMPAT_PUSH
 4212|    414|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|    414|        switch (specs.type) {
 4215|      8|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 8, False: 406]
  ------------------
 4216|      8|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 4, False: 410]
  ------------------
 4219|      4|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|     18|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 18, False: 396]
  ------------------
 4222|     18|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|      2|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 2, False: 412]
  ------------------
 4225|      2|                return options | float_reader_base::allow_scientific |
 4226|      2|                       float_reader_base::allow_fixed;
 4227|       |
 4228|    382|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 382, False: 32]
  ------------------
 4229|    382|                return options | float_reader_base::allow_scientific |
 4230|    382|                       float_reader_base::allow_fixed |
 4231|    382|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 414]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|    414|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|    414|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|    414|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3648|    414|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1758|    876|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1519|  1.75k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4045|    778|    {
 4046|    778|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 778, False: 0]
  ------------------
 4047|    778|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 778, False: 0]
  ------------------
 4048|    778|            return;
 4049|    778|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1574|    244|    {
 1575|    244|        return m_storage.has_value();
 1576|    244|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1579|    122|    {
 1580|    122|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    122|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    122|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|    122|        return *m_storage;
 1582|    122|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|     92|    {
  763|     92|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|     92|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|     92|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3667|      8|    {
 3668|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|      8|        return read_source_impl(range);
 3674|      8|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3693|     92|    {
 3694|     92|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|     92|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     92|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     92|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     92|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 92]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     92|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     92|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|     92|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|     92|        auto it = sign_result.first;
 3697|     92|        m_sign = sign_result.second;
 3698|       |
 3699|     92|        auto digits_begin = it;
 3700|     92|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|     92|        else {
 3727|     92|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|     92|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|     92|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|     92|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 92, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     92|    }                                                  \
  |  | 3667|     92|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|     92|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|      0|                it,
 3729|      0|                do_read_source_impl(
 3730|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|      0|        }
 3733|       |
 3734|     92|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|     92|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     92|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 0, False: 0]
  |  Branch (3736:48): [True: 0, False: 0]
  ------------------
 3737|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 0, False: 0]
  ------------------
 3738|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 0, False: 0]
  ------------------
 3739|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|      0|        }
 3741|       |
 3742|      0|        handle_separators();
 3743|       |
 3744|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 0]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|      0|        return it;
 3757|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3988|     92|    {
 3989|     92|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|     92|        const bool allowed_nonhex =
 3991|     92|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|     92|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|     92|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 92, False: 0]
  |  Branch (3994:45): [True: 0, False: 92]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|     92|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 92]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|     92|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 92, False: 0]
  |  Branch (4003:45): [True: 0, False: 92]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|     92|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 92]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|     92|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 84, False: 8]
  |  Branch (4010:28): [True: 6, False: 78]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|      6|            auto it = range.begin();
 4014|       |
 4015|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 0, False: 6]
  ------------------
 4016|      0|                m_kind = float_kind::hex_with_prefix;
 4017|      0|                it = *r;
 4018|      0|            }
 4019|      6|            else {
 4020|      6|                m_kind = float_kind::hex_without_prefix;
 4021|      6|            }
 4022|       |
 4023|      6|            return read_hex(ranges::subrange{it, range.end()});
 4024|      6|        }
 4025|     86|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 8, False: 78]
  |  Branch (4025:29): [True: 8, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|      8|            m_kind = float_kind::generic;
 4029|      8|            return read_regular_float(range);
 4030|      8|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|     78|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 78]
  |  |  ------------------
  ------------------
 4036|      0|            m_kind = float_kind::hex_with_prefix;
 4037|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4038|      0|        }
 4039|       |
 4040|     78|        m_kind = float_kind::generic;
 4041|     78|        return read_regular(range);
 4042|     78|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3799|     92|    {
 3800|     92|        auto it = range.begin();
 3801|     92|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 92, False: 0]
  ------------------
 3802|     92|            return unexpected(r.error());
 3803|     92|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3822|     92|    {
 3823|     92|        auto it = range.begin();
 3824|     92|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 92, False: 0]
  ------------------
 3825|     92|            return r.transform_error(map_parse_error_to_scan_error(
 3826|     92|                scan_error::invalid_scanned_value,
 3827|     92|                "Invalid floating-point NaN value"));
 3828|     92|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3792|     84|    {
 3793|     84|        return read_matching_string_classic_nocase(range, "0x");
 3794|     84|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3892|      6|    {
 3893|      6|        auto it = range.begin();
 3894|       |
 3895|      6|        std::ptrdiff_t digits_count = 0;
 3896|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3898|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3899|      6|                scan_error::invalid_scanned_value,
 3900|      6|                "Invalid hexadecimal floating-point value"));
 3901|      6|        }
 3902|      0|        else {
 3903|      0|            digits_count += ranges::distance(it, *r);
 3904|      0|            it = *r;
 3905|      0|        }
 3906|       |
 3907|      0|        m_integral_part_length = digits_count;
 3908|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 0, False: 0]
  ------------------
 3909|      0|                                             m_locale_options.decimal_point)) {
 3910|      0|            it = *r;
 3911|      0|        }
 3912|       |
 3913|      0|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 0, False: 0]
  ------------------
 3914|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|      0|            digits_count += ranges::distance(it, *r);
 3916|      0|            it = *r;
 3917|      0|        }
 3918|       |
 3919|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|      0|        return it;
 3927|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3777|      6|    {
 3778|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|      6|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|      6|        return read_while1_code_unit(
 3787|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|      6|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3787|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3932|     86|    {
 3933|     86|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|     86|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 80, False: 6]
  |  Branch (3934:50): [True: 2, False: 78]
  ------------------
 3935|       |
 3936|     86|        auto it = ranges::begin(range);
 3937|     86|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|     86|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|     86|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     86|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86, False: 0]
  |  |  ------------------
  ------------------
 3941|     86|            return r.transform_error(
 3942|     86|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|     86|                                              "Invalid floating-point value"));
 3944|     86|        }
 3945|      0|        else {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        m_integral_part_length = digits_count;
 3951|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 0, False: 0]
  ------------------
 3952|      0|                                             m_locale_options.decimal_point)) {
 3953|      0|            it = *r;
 3954|      0|        }
 3955|       |
 3956|      0|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 0, False: 0]
  ------------------
 3957|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|      0|        auto beg_exp_it = it;
 3968|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 0, False: 0]
  ------------------
 3969|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|      0|        }
 3971|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 0, False: 0]
  |  Branch (3971:29): [True: 0, False: 0]
  ------------------
 3972|      0|            return unexpected_scan_error(
 3973|      0|                scan_error::invalid_scanned_value,
 3974|      0|                "No exponent given to scientific float");
 3975|      0|        }
 3976|       |
 3977|      0|        m_kind =
 3978|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 0, False: 0]
  ------------------
 3979|       |
 3980|      0|        return it;
 3981|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3762|     86|    {
 3763|     86|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     86|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86]
  |  |  |  Branch (859:45): [True: 0, False: 86]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|     86|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|     86|        return read_while1_code_unit(
 3772|     86|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|     86|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|     86|        : m_fptr([](storage fn,
  743|     86|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     86|              cvref<T> obj = *get<T>(fn);
  745|     86|              if constexpr (std::is_void_v<R>) {
  746|     86|                  obj(static_cast<decltype(args)>(args)...);
  747|     86|              }
  748|     86|              else {
  749|     86|                  return obj(static_cast<decltype(args)>(args)...);
  750|     86|              }
  751|     86|          }),
  752|     86|          m_storage(std::addressof(f))
  753|     86|    {
  754|     86|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|     86|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     86|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     86|              else {
  749|     86|                  return obj(static_cast<decltype(args)>(args)...);
  750|     86|              }
  751|     86|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|     86|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     86|        else if constexpr (std::is_object_v<T>) {
  688|     86|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     86|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3772|     86|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|     86|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     86|        {
  662|     86|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3653|     84|    {
 3654|     84|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 84]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|     84|        return read_source_impl(range);
 3660|     84|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    784|    {
  763|    784|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    784|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    784|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|      8|    {
 3668|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|      8|        return read_source_impl(range);
 3674|      8|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|    784|    {
 3694|    784|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    784|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    784|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    784|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    784|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 784]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    784|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    784|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|    784|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|    784|        auto it = sign_result.first;
 3697|    784|        m_sign = sign_result.second;
 3698|       |
 3699|    784|        auto digits_begin = it;
 3700|    784|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|    784|                      ranges::sized_range<Range>) {
 3703|    784|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 784]
  |  |  |  Branch (859:45): [True: 0, False: 784]
  |  |  |  Branch (859:45): [True: 0, False: 784]
  |  |  ------------------
  ------------------
 3704|    784|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|    784|            else {
 3713|    784|                auto cb = [&](const auto& rr)
 3714|    784|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|    784|                    auto res = read_all(rr);
 3716|    784|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|    784|                        return unexpected_scan_error(
 3718|    784|                            scan_error::invalid_scanned_value,
 3719|    784|                            "Invalid float value");
 3720|    784|                    }
 3721|    784|                    return res;
 3722|    784|                };
 3723|    784|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|    784|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    784|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    784|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6, False: 778]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      6|    }                                                  \
  |  | 3667|    784|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    784|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|    778|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|    784|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    784|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    784|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|    778|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 778, False: 0]
  |  Branch (3736:48): [True: 778, False: 0]
  ------------------
 3737|    778|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 778, False: 0]
  ------------------
 3738|    778|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 778, False: 0]
  ------------------
 3739|    778|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|    778|        }
 3741|       |
 3742|    778|        handle_separators();
 3743|       |
 3744|    778|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 778]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|    778|        return it;
 3757|    778|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|    784|    {
 3800|    784|        auto it = range.begin();
 3801|    784|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 784, False: 0]
  ------------------
 3802|    784|            return unexpected(r.error());
 3803|    784|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|    784|    {
 3823|    784|        auto it = range.begin();
 3824|    784|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 784, False: 0]
  ------------------
 3825|    784|            return r.transform_error(map_parse_error_to_scan_error(
 3826|    784|                scan_error::invalid_scanned_value,
 3827|    784|                "Invalid floating-point NaN value"));
 3828|    784|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|    778|    {
 3793|    778|        return read_matching_string_classic_nocase(range, "0x");
 3794|    778|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|      6|{
 1984|      6|    auto it = read_while_code_unit(range, pred);
 1985|      6|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 6, False: 0]
  ------------------
 1986|      6|        return unexpected(parse_error::error);
 1987|      6|    }
 1988|      0|    return it;
 1989|      6|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|      6|    {
 3933|      6|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|      6|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 4, False: 2]
  |  Branch (3934:50): [True: 2, False: 2]
  ------------------
 3935|       |
 3936|      6|        auto it = ranges::begin(range);
 3937|      6|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|      6|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3941|      6|            return r.transform_error(
 3942|      6|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|      6|                                              "Invalid floating-point value"));
 3944|      6|        }
 3945|      0|        else {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        m_integral_part_length = digits_count;
 3951|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 0, False: 0]
  ------------------
 3952|      0|                                             m_locale_options.decimal_point)) {
 3953|      0|            it = *r;
 3954|      0|        }
 3955|       |
 3956|      0|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 0, False: 0]
  ------------------
 3957|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|      0|        auto beg_exp_it = it;
 3968|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 0, False: 0]
  ------------------
 3969|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|      0|        }
 3971|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 0, False: 0]
  |  Branch (3971:29): [True: 0, False: 0]
  ------------------
 3972|      0|            return unexpected_scan_error(
 3973|      0|                scan_error::invalid_scanned_value,
 3974|      0|                "No exponent given to scientific float");
 3975|      0|        }
 3976|       |
 3977|      0|        m_kind =
 3978|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 0, False: 0]
  ------------------
 3979|       |
 3980|      0|        return it;
 3981|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|      6|    {
 3763|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      6|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|      6|        return read_while1_code_unit(
 3772|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|      6|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3772|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|    784|    {
 3989|    784|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|    784|        const bool allowed_nonhex =
 3991|    784|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|    784|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|    784|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 784, False: 0]
  |  Branch (3994:45): [True: 0, False: 784]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|    784|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 784]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|    784|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 784, False: 0]
  |  Branch (4003:45): [True: 0, False: 784]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|    784|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 784]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|    784|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 778, False: 6]
  |  Branch (4010:28): [True: 12, False: 766]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|     12|            auto it = range.begin();
 4014|       |
 4015|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 0, False: 12]
  ------------------
 4016|      0|                m_kind = float_kind::hex_with_prefix;
 4017|      0|                it = *r;
 4018|      0|            }
 4019|     12|            else {
 4020|     12|                m_kind = float_kind::hex_without_prefix;
 4021|     12|            }
 4022|       |
 4023|     12|            return read_hex(ranges::subrange{it, range.end()});
 4024|     12|        }
 4025|    772|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 6, False: 766]
  |  Branch (4025:29): [True: 6, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|      6|            m_kind = float_kind::generic;
 4029|      6|            return read_regular_float(range);
 4030|      6|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|    766|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    766|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 766]
  |  |  ------------------
  ------------------
 4036|      0|            m_kind = float_kind::hex_with_prefix;
 4037|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4038|      0|        }
 4039|       |
 4040|    766|        m_kind = float_kind::generic;
 4041|    766|        return read_regular(range);
 4042|    766|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|    778|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|    778|                    auto res = read_all(rr);
 3716|    778|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    778|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 778]
  |  |  ------------------
  ------------------
 3717|      0|                        return unexpected_scan_error(
 3718|      0|                            scan_error::invalid_scanned_value,
 3719|      0|                            "Invalid float value");
 3720|      0|                    }
 3721|    778|                    return res;
 3722|    778|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|    778|{
 1827|    778|    return ranges::next(range.begin(), range.end());
 1828|    778|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    778|    {
  313|    778|        ranges::advance(x, bound);
  314|    778|        return x;
  315|    778|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    778|    {
  275|    778|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    778|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|    778|    {
 1565|    778|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    778|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|    778|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1608|    778|    {
 1609|    778|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|    778|                      ranges::sized_range<Range>) {
 1614|    778|            m_storage.reset();
 1615|    778|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|    778|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|    776|    {
 3654|    776|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    776|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 776]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|    776|        return read_source_impl(range);
 3660|    776|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|    778|    {
 3680|    778|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    778|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    778|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|    778|        const std::ptrdiff_t sign_len =
 3683|    778|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 0, False: 778]
  ------------------
 3684|       |
 3685|    778|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|    778|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    778|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    778|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    778|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 778, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    778|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    778|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    778|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    778|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    778|    }                                                  \
  |  |  |  | 3667|    778|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|    778|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4158|     92|    {
 4159|     92|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|     92|#if !SCN_DISABLE_LOCALE
 4162|     92|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 8, False: 84]
  ------------------
 4163|      8|            return read_impl<Range>(
 4164|      8|                range, rd,
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|      8|                },
 4168|      8|                value, loc);
 4169|      8|        }
 4170|     84|#endif
 4171|       |
 4172|     84|        return read_impl<Range>(
 4173|     84|            range, rd,
 4174|     84|            [](float_reader<CharT>& r, auto&&... args) {
 4175|     84|                return r.read_source(SCN_FWD(args)...);
 4176|     84|            },
 4177|     84|            value);
 4178|     92|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|     92|    {
 4195|     92|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|     92|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     92|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92, False: 0]
  |  |  ------------------
  ------------------
 4197|     92|            return unexpected(r.error());
 4198|     92|        }
 4199|       |
 4200|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|      0|        return ranges::next(range.begin(), n);
 4202|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|     84|        : m_fptr([](storage fn,
  743|     84|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     84|              cvref<T> obj = *get<T>(fn);
  745|     84|              if constexpr (std::is_void_v<R>) {
  746|     84|                  obj(static_cast<decltype(args)>(args)...);
  747|     84|              }
  748|     84|              else {
  749|     84|                  return obj(static_cast<decltype(args)>(args)...);
  750|     84|              }
  751|     84|          }),
  752|     84|          m_storage(std::addressof(f))
  753|     84|    {
  754|     84|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|     84|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     84|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     84|              else {
  749|     84|                  return obj(static_cast<decltype(args)>(args)...);
  750|     84|              }
  751|     84|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|     84|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     84|        else if constexpr (std::is_object_v<T>) {
  688|     84|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     84|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4174|     84|            [](float_reader<CharT>& r, auto&&... args) {
 4175|     84|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|     84|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|     84|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     84|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     84|        {
  662|     84|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|    322|    {
 4159|    322|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|    322|#if !SCN_DISABLE_LOCALE
 4162|    322|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 8, False: 314]
  ------------------
 4163|      8|            return read_impl<Range>(
 4164|      8|                range, rd,
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|      8|                },
 4168|      8|                value, loc);
 4169|      8|        }
 4170|    314|#endif
 4171|       |
 4172|    314|        return read_impl<Range>(
 4173|    314|            range, rd,
 4174|    314|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    314|                return r.read_source(SCN_FWD(args)...);
 4176|    314|            },
 4177|    314|            value);
 4178|    322|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|    784|    {
 4195|    784|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|    784|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    784|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 778]
  |  |  ------------------
  ------------------
 4197|      6|            return unexpected(r.error());
 4198|      6|        }
 4199|       |
 4200|    778|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|    778|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    778|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    778|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    778|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 778, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    778|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    778|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    778|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    778|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    778|    }                                                  \
  |  |  |  | 3667|    778|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|      0|        return ranges::next(range.begin(), n);
 4202|    778|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    314|        : m_fptr([](storage fn,
  743|    314|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    314|              cvref<T> obj = *get<T>(fn);
  745|    314|              if constexpr (std::is_void_v<R>) {
  746|    314|                  obj(static_cast<decltype(args)>(args)...);
  747|    314|              }
  748|    314|              else {
  749|    314|                  return obj(static_cast<decltype(args)>(args)...);
  750|    314|              }
  751|    314|          }),
  752|    314|          m_storage(std::addressof(f))
  753|    314|    {
  754|    314|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    314|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    314|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    314|              else {
  749|    314|                  return obj(static_cast<decltype(args)>(args)...);
  750|    314|              }
  751|    314|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    314|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    314|        else if constexpr (std::is_object_v<T>) {
  688|    314|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    314|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|    314|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    314|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    314|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|    314|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    314|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    314|        {
  662|    314|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5797|  2.70k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  2.70k|                       std::is_same_v<T, std::wstring>) {
 5816|  2.70k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  2.70k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5194|  8.10k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  6.72k|    {
 3029|  6.72k|        reader_error_handler eh{};
 3030|  6.72k|        get_derived().check_specs_impl(specs, eh);
 3031|  6.72k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  6.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 240, False: 6.48k]
  |  |  ------------------
  ------------------
 3032|    240|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|    240|        }
 3034|  6.48k|        return {};
 3035|  6.72k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3039|  6.72k|    {
 3040|  6.72k|        return static_cast<Derived&>(*this);
 3041|  6.72k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|  6.72k|    {
 5199|  6.72k|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|  6.72k|        SCN_GCC_PUSH
 5202|  6.72k|        SCN_GCC_IGNORE("-Wswitch")
 5203|  6.72k|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|  6.72k|        SCN_CLANG_PUSH
 5206|  6.72k|        SCN_CLANG_IGNORE("-Wswitch")
 5207|  6.72k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|  6.72k|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 234, False: 6.48k]
  ------------------
 5210|  1.11k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 1.11k, False: 5.61k]
  ------------------
 5211|  1.11k|                m_type = reader_type::word;
 5212|  1.11k|                break;
 5213|       |
 5214|    198|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 198, False: 6.52k]
  ------------------
 5215|    198|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 60, False: 138]
  ------------------
 5216|    198|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 90, False: 48]
  ------------------
 5217|    150|                    m_type = reader_type::custom_word;
 5218|    150|                }
 5219|     48|                else {
 5220|     48|                    m_type = reader_type::word;
 5221|     48|                }
 5222|    198|                break;
 5223|      0|            }
 5224|       |
 5225|     36|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 36, False: 6.68k]
  ------------------
 5226|     36|                m_type = reader_type::character;
 5227|     36|                break;
 5228|       |
 5229|    606|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 606, False: 6.11k]
  ------------------
 5230|    606|                m_type = reader_type::character_set;
 5231|    606|                break;
 5232|       |
 5233|  4.41k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 4.41k, False: 2.31k]
  ------------------
 5234|  4.41k|                m_type = reader_type::regex;
 5235|  4.41k|                break;
 5236|       |
 5237|    126|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 126, False: 6.59k]
  ------------------
 5238|    126|                m_type = reader_type::regex_escaped;
 5239|    126|                break;
 5240|  6.72k|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|  6.72k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5247|  9.27k|    {
 5248|  9.27k|        return m_type == reader_type::word;
 5249|  9.27k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  5.12k|{
 1132|  5.12k|    auto it = src.begin();
 1133|  42.4k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 38.4k, False: 3.96k]
  ------------------
 1134|  38.4k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  38.4k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 38.4k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  38.4k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 38.4k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  38.4k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  38.4k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  38.4k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.15k, False: 37.2k]
  ------------------
 1144|  1.15k|            return false;
 1145|  1.15k|        }
 1146|  37.2k|        it += len;
 1147|  37.2k|    }
 1148|  3.96k|    return true;
 1149|  5.12k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|    122|{
 2982|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|       |        if (source.stores_allocated_string()) {
 2984|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2985|       |        }
 2986|       |        else {
 2987|       |            dest.assign(source.view());
 2988|       |        }
 2989|       |    }
 2990|    122|    else {
 2991|    122|        return transcode_impl(source.view(), dest);
 2992|    122|    }
 2993|       |
 2994|      0|    return {};
 2995|    122|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2956|    992|{
 2957|    992|    dst.clear();
 2958|    992|    transcode_valid_to_string(src, dst);
 2959|    992|    return {};
 2960|    992|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1390|    992|{
 1391|    992|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1392|       |
 1393|    992|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|    992|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    992|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1394|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1395|       |        if constexpr (sizeof(DestCharT) == 2) {
 1396|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1397|       |            std::u32string tmp;
 1398|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1399|       |            return transcode_to_string_impl_32to16<true>(
 1400|       |                std::u32string_view{tmp}, dest);
 1401|       |        }
 1402|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1403|       |            return transcode_valid_to_string_impl_to32(src, dest);
 1404|       |        }
 1405|       |    }
 1406|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1407|       |        if constexpr (sizeof(DestCharT) == 1) {
 1408|       |            std::u32string tmp;
 1409|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1410|       |            return transcode_to_string_impl_32to8<true>(
 1411|       |                std::u32string_view{tmp}, dest);
 1412|       |        }
 1413|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1414|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1415|       |        }
 1416|       |    }
 1417|    992|    else if constexpr (sizeof(SourceCharT) == 4) {
 1418|    992|        if constexpr (sizeof(DestCharT) == 1) {
 1419|    992|            return transcode_to_string_impl_32to8<true>(src, dest);
 1420|       |        }
 1421|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1422|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1423|       |        }
 1424|    992|    }
 1425|       |
 1426|    992|    SCN_EXPECT(false);
  ------------------
  |  |  924|    992|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    992|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1427|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1428|    992|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1281|    992|{
 1282|    992|    static_assert(sizeof(SourceCharT) == 4);
 1283|    992|    static_assert(sizeof(DestCharT) == 1);
 1284|       |
 1285|  7.65k|    for (auto cp : src) {
  ------------------
  |  Branch (1285:18): [True: 7.65k, False: 992]
  ------------------
 1286|  7.65k|        const auto u32cp = static_cast<uint32_t>(cp);
 1287|  7.65k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  7.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1288|       |            // Replacement character
 1289|      0|            dest.push_back(static_cast<char>(0xef));
 1290|      0|            dest.push_back(static_cast<char>(0xbf));
 1291|      0|            dest.push_back(static_cast<char>(0xbd));
 1292|      0|        }
 1293|  7.65k|        else if (cp < 128) {
  ------------------
  |  Branch (1293:18): [True: 6.35k, False: 1.30k]
  ------------------
 1294|  6.35k|            dest.push_back(static_cast<char>(cp));
 1295|  6.35k|        }
 1296|  1.30k|        else if (cp < 2048) {
  ------------------
  |  Branch (1296:18): [True: 122, False: 1.18k]
  ------------------
 1297|    122|            dest.push_back(
 1298|    122|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1299|    122|            dest.push_back(
 1300|    122|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1301|    122|        }
 1302|  1.18k|        else if (cp < 65536) {
  ------------------
  |  Branch (1302:18): [True: 850, False: 336]
  ------------------
 1303|    850|            dest.push_back(
 1304|    850|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1305|    850|            dest.push_back(static_cast<char>(
 1306|    850|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1307|    850|            dest.push_back(
 1308|    850|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1309|    850|        }
 1310|    336|        else {
 1311|    336|            dest.push_back(
 1312|    336|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1313|    336|            dest.push_back(static_cast<char>(
 1314|    336|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1315|    336|            dest.push_back(static_cast<char>(
 1316|    336|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1317|    336|            dest.push_back(
 1318|    336|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1319|    336|        }
 1320|  7.65k|    }
 1321|    992|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5091|    606|        {
 5092|    606|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 174, False: 432]
  ------------------
 5093|    174|                return {};
 5094|    174|            }
 5095|       |
 5096|    432|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|    432|            auto it = detail::to_address(charset_string.begin());
 5098|    432|            auto set = detail::parse_presentation_set(
 5099|    432|                it, detail::to_address(charset_string.end()), nonascii);
 5100|    432|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 432]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|    432|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|    432|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    432|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|    432|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|    432|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    432|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|    432|            std::sort(nonascii.extra_ranges.begin(),
 5107|    432|                      nonascii.extra_ranges.end());
 5108|    432|            return {};
 5109|    432|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5126|  4.84k|        {
 5127|  4.84k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5127:17): [True: 1.25k, False: 3.58k]
  ------------------
 5128|  1.25k|                return helper.is_char_set_in_extra_literals(cp);
 5129|  1.25k|            }
 5130|       |
 5131|  3.58k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5132|  4.84k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5074|  1.25k|        {
 5075|       |            // TODO: binary search?
 5076|  1.25k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5076:17): [True: 0, False: 1.25k]
  ------------------
 5077|      0|                return false;
 5078|      0|            }
 5079|       |
 5080|  1.25k|            const auto cp_val = static_cast<uint32_t>(cp);
 5081|  1.25k|            return std::find_if(
 5082|  1.25k|                       nonascii.extra_ranges.begin(),
 5083|  1.25k|                       nonascii.extra_ranges.end(),
 5084|  1.25k|                       [cp_val](const auto& pair) noexcept {
 5085|  1.25k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5086|  1.25k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5087|  1.25k|                       }) != nonascii.extra_ranges.end();
 5088|  1.25k|        }
_ZZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5084|  10.2k|                       [cp_val](const auto& pair) noexcept {
 5085|  10.2k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5085:35): [True: 10.1k, False: 180]
  ------------------
 5086|  10.2k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5086:35): [True: 1.18k, False: 8.92k]
  ------------------
 5087|  10.2k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5064|  5.11k|        {
 5065|  5.11k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  5.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|  5.11k|            const auto val =
 5067|  5.11k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|  5.11k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|  5.11k|                    (val % 8)) &
 5070|  5.11k|                   1u;
 5071|  5.11k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5117|  1.53k|        {
 5118|  1.53k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 12, False: 1.52k]
  ------------------
 5119|     12|                return false;
 5120|     12|            }
 5121|       |
 5122|  1.52k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  1.53k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|    606|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5265|    172|    {
 5266|    172|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    172|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    172|        return read_impl(range, specs, value);
 5268|    172|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5283|    172|    {
 5284|    172|        SCN_CLANG_PUSH
 5285|    172|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    172|        switch (m_type) {
 5288|     74|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 74, False: 98]
  ------------------
 5289|     74|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     14|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 14, False: 158]
  ------------------
 5292|     14|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     14|                                                                   value);
 5294|       |
 5295|     10|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 10, False: 162]
  ------------------
 5296|     10|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|     70|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 70, False: 102]
  ------------------
 5299|     70|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|     70|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 170]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|      2|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 2, False: 170]
  ------------------
 5309|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      2|                    range,
 5311|      2|                    get_unescaped_regex_pattern(
 5312|      2|                        specs.charset_string<SourceCharT>()),
 5313|      2|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 172]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    172|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    172|        }
 5320|       |
 5321|    172|        SCN_CLANG_POP
 5322|    172|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4808|     74|    {
 4809|     74|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|     74|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4740|     98|{
 4741|     98|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|     98|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|     98|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 38, False: 60]
  ------------------
 4745|     38|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|     38|                                     "Invalid encoding in scanned string");
 4747|     38|    }
 4748|     60|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     60|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 60]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     60|    return SCN_MOVE(result);
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     60|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2075|    222|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|    222|    else {
 2085|    222|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|    222|        return read_until_code_point(
 2097|    222|            ranges::subrange{it, range.end()},
 2098|    222|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|    222|    }
 2100|    222|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2048|    222|{
 2049|    222|    auto it = range.begin();
 2050|  4.02k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 3.84k, False: 180]
  ------------------
 2051|  3.84k|        const auto val =
 2052|  3.84k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  3.84k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.84k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.84k, False: 0]
  |  |  ------------------
  ------------------
 2054|  3.84k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  3.84k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  3.84k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 42, False: 3.80k]
  ------------------
 2057|     42|                return it;
 2058|     42|            }
 2059|  3.84k|        }
 2060|  3.80k|        it = val.iterator;
 2061|  3.80k|    }
 2062|       |
 2063|    180|    return it;
 2064|    222|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    222|        : m_fptr([](storage fn,
  743|    222|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    222|              cvref<T> obj = *get<T>(fn);
  745|    222|              if constexpr (std::is_void_v<R>) {
  746|    222|                  obj(static_cast<decltype(args)>(args)...);
  747|    222|              }
  748|    222|              else {
  749|    222|                  return obj(static_cast<decltype(args)>(args)...);
  750|    222|              }
  751|    222|          }),
  752|    222|          m_storage(std::addressof(f))
  753|    222|    {
  754|    222|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  3.84k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.84k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.84k|              else {
  749|  3.84k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.84k|              }
  751|  3.84k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  3.84k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.84k|        else if constexpr (std::is_object_v<T>) {
  688|  3.84k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.84k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2098|  3.84k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    222|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    222|        {
  662|    222|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4829|     14|    {
 4830|     14|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 14, False: 0]
  ------------------
 4831|     14|            return read_string_impl(
 4832|     14|                range,
 4833|     14|                read_until_code_unit(
 4834|     14|                    range,
 4835|     14|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     14|                        SourceCharT ch) { return ch == until; }),
 4837|     14|                value);
 4838|     14|        }
 4839|      0|        return read_string_impl(
 4840|      0|            range,
 4841|      0|            read_until_code_units(
 4842|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|      0|            value);
 4844|     14|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     14|        : m_fptr([](storage fn,
  743|     14|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     14|              cvref<T> obj = *get<T>(fn);
  745|     14|              if constexpr (std::is_void_v<R>) {
  746|     14|                  obj(static_cast<decltype(args)>(args)...);
  747|     14|              }
  748|     14|              else {
  749|     14|                  return obj(static_cast<decltype(args)>(args)...);
  750|     14|              }
  751|     14|          }),
  752|     14|          m_storage(std::addressof(f))
  753|     14|    {
  754|     14|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|    174|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    174|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    174|              else {
  749|    174|                  return obj(static_cast<decltype(args)>(args)...);
  750|    174|              }
  751|    174|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    174|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    174|        else if constexpr (std::is_object_v<T>) {
  688|    174|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    174|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4836|    174|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     14|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     14|        {
  662|     14|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4935|     10|    {
 4936|     10|        return read_impl(
 4937|     10|            range,
 4938|     10|            [&](const auto& rng) {
 4939|     10|                return read_string_impl(rng, read_all(rng), value);
 4940|     10|            },
 4941|     10|            detail::priority_tag<1>{});
 4942|     10|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     10|    {
 4963|     10|        return read_cb(range);
 4964|     10|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4938|     10|            [&](const auto& rng) {
 4939|     10|                return read_string_impl(rng, read_all(rng), value);
 4940|     10|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1826|     30|{
 1827|     30|    return ranges::next(range.begin(), range.end());
 1828|     30|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     30|    {
  313|     30|        ranges::advance(x, bound);
  314|     30|        return x;
  315|     30|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     30|    {
  275|     30|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     30|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     30|    {
  203|    138|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 108, False: 30]
  ------------------
  204|    108|            ++i;
  205|    108|        }
  206|     30|    }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5036|     70|    {
 5037|     70|        auto it = read_source_impl(range, {specs});
 5038|     70|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     70|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 62]
  |  |  ------------------
  ------------------
 5039|      8|            return unexpected(it.error());
 5040|      8|        }
 5041|       |
 5042|     62|        return read_string_impl(range, *it, value);
 5043|     70|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5141|    210|    {
 5142|    210|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|    210|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|    210|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    210|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 210]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|    210|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|    210|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 132, False: 78]
  ------------------
 5152|    132|            const auto cb = [&](char32_t cp) {
 5153|    132|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|    132|            };
 5155|       |
 5156|    132|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 102, False: 30]
  ------------------
 5157|    102|                auto it = read_until_code_point(range, cb);
 5158|    102|                return check_nonempty(it, range);
 5159|    102|            }
 5160|     30|            auto it = read_while_code_point(range, cb);
 5161|     30|            return check_nonempty(it, range);
 5162|    132|        }
 5163|       |
 5164|     78|        const auto cb = [&](SourceCharT ch) {
 5165|     78|            return cb_wrapper.on_ascii_only(ch);
 5166|     78|        };
 5167|       |
 5168|     78|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 48, False: 30]
  ------------------
 5169|     48|            auto it = read_until_code_unit(range, cb);
 5170|     48|            return check_nonempty(it, range);
 5171|     48|        }
 5172|     30|        auto it = read_while_code_unit(range, cb);
 5173|     30|        return check_nonempty(it, range);
 5174|     78|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    132|        : m_fptr([](storage fn,
  743|    132|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    132|              cvref<T> obj = *get<T>(fn);
  745|    132|              if constexpr (std::is_void_v<R>) {
  746|    132|                  obj(static_cast<decltype(args)>(args)...);
  747|    132|              }
  748|    132|              else {
  749|    132|                  return obj(static_cast<decltype(args)>(args)...);
  750|    132|              }
  751|    132|          }),
  752|    132|          m_storage(std::addressof(f))
  753|    132|    {
  754|    132|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|    804|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    804|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    804|              else {
  749|    804|                  return obj(static_cast<decltype(args)>(args)...);
  750|    804|              }
  751|    804|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|    804|    {
  684|    804|        if constexpr (std::is_const_v<T>) {
  685|    804|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    804|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5152|    804|            const auto cb = [&](char32_t cp) {
 5153|    804|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|    804|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    132|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    132|        {
  667|    132|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5179|    210|    {
 5180|    210|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 24, False: 186]
  ------------------
 5181|     24|            return unexpected_scan_error(
 5182|     24|                scan_error::invalid_scanned_value,
 5183|     24|                "No characters matched in [character set]");
 5184|     24|        }
 5185|       |
 5186|    186|        return it;
 5187|    210|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     78|        : m_fptr([](storage fn,
  743|     78|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     78|              cvref<T> obj = *get<T>(fn);
  745|     78|              if constexpr (std::is_void_v<R>) {
  746|     78|                  obj(static_cast<decltype(args)>(args)...);
  747|     78|              }
  748|     78|              else {
  749|     78|                  return obj(static_cast<decltype(args)>(args)...);
  750|     78|              }
  751|     78|          }),
  752|     78|          m_storage(std::addressof(f))
  753|     78|    {
  754|     78|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    264|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    264|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    264|              else {
  749|    264|                  return obj(static_cast<decltype(args)>(args)...);
  750|    264|              }
  751|    264|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|    264|    {
  684|    264|        if constexpr (std::is_const_v<T>) {
  685|    264|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    264|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlwE_clEw:
 5164|    264|        const auto cb = [&](SourceCharT ch) {
 5165|    264|            return cb_wrapper.on_ascii_only(ch);
 5166|    264|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|     78|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     78|        {
  667|     78|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4740|     62|{
 4741|     62|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|     62|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|     62|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 62]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|     62|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     62|    static_cast<    \
  |  |  929|     62|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     62|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     62|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 62]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     62|    return SCN_MOVE(result);
  ------------------
  |  |  928|     62|    static_cast<    \
  |  |  929|     62|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     62|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4879|      4|    {
 4880|      4|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|      0|        return read_string_impl(range, it, value);
 4882|      4|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4901|     12|    {
 4902|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4903|       |                      !std::is_same_v<SourceCharT, char>) {
 4904|       |            return unexpected_scan_error(
 4905|       |                scan_error::invalid_scanned_value,
 4906|       |                "Regex backend doesn't support wide strings as input");
 4907|       |        }
 4908|     12|        else {
 4909|     12|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4909:17): [True: 12, False: 0]
  ------------------
 4910|     12|                return unexpected_scan_error(
 4911|     12|                    scan_error::invalid_scanned_value,
 4912|     12|                    "Cannot use regex with a non-contiguous source "
 4913|     12|                    "range");
 4914|     12|            }
 4915|       |
 4916|      0|            auto input = get_as_contiguous(range);
 4917|      0|            SCN_TRY(it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4918|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4919|      0|            return ranges::next(range.begin(),
 4920|      0|                                ranges::distance(input.begin(), it));
 4921|      0|        }
 4922|     12|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|     12|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|       |                  ranges::sized_range<Range>) {
  961|       |        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|     12|    else {
  974|     12|        return false;
  975|     12|    }
  976|     12|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  1.98k|    {
 5266|  1.98k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.98k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  1.98k|        return read_impl(range, specs, value);
 5268|  1.98k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  1.98k|    {
 5284|  1.98k|        SCN_CLANG_PUSH
 5285|  1.98k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  1.98k|        switch (m_type) {
 5288|    310|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 310, False: 1.67k]
  ------------------
 5289|    310|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 34, False: 1.94k]
  ------------------
 5292|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     34|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 1.98k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    132|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 132, False: 1.85k]
  ------------------
 5299|    132|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    132|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  1.46k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 1.46k, False: 516]
  ------------------
 5304|  1.46k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  1.46k|                    range, specs.charset_string<SourceCharT>(),
 5306|  1.46k|                    specs.regexp_flags, value);
 5307|       |
 5308|     40|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 40, False: 1.94k]
  ------------------
 5309|     40|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|     40|                    range,
 5311|     40|                    get_unescaped_regex_pattern(
 5312|     40|                        specs.charset_string<SourceCharT>()),
 5313|     40|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 1.98k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  1.98k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  1.98k|        }
 5320|       |
 5321|  1.98k|        SCN_CLANG_POP
 5322|  1.98k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|    772|    {
 4809|    772|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    772|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|    806|{
 4741|    806|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    806|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    806|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 248, False: 558]
  ------------------
 4745|    248|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    248|                                     "Invalid encoding in scanned string");
 4747|    248|    }
 4748|    558|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    558|    static_cast<    \
  |  |  929|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    558|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    558|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 558]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    558|    return SCN_MOVE(result);
  ------------------
  |  |  928|    558|    static_cast<    \
  |  |  929|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    558|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|    870|{
 3001|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|       |        dest.assign(source.view());
 3003|       |    }
 3004|    870|    else {
 3005|    870|        return transcode_impl(source.view(), dest);
 3006|    870|    }
 3007|       |
 3008|      0|    return {};
 3009|    870|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|  2.31k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|  2.31k|    else {
 2085|  2.31k|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|  2.31k|        return read_until_code_point(
 2097|  2.31k|            ranges::subrange{it, range.end()},
 2098|  2.31k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|  2.31k|    }
 2100|  2.31k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  2.31k|        : m_fptr([](storage fn,
  743|  2.31k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.31k|              cvref<T> obj = *get<T>(fn);
  745|  2.31k|              if constexpr (std::is_void_v<R>) {
  746|  2.31k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.31k|              }
  748|  2.31k|              else {
  749|  2.31k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.31k|              }
  751|  2.31k|          }),
  752|  2.31k|          m_storage(std::addressof(f))
  753|  2.31k|    {
  754|  2.31k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  21.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  21.6k|              else {
  749|  21.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.6k|              }
  751|  21.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  21.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  21.6k|        else if constexpr (std::is_object_v<T>) {
  688|  21.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  21.6k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2098|  21.6k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  2.31k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.31k|        {
  662|  2.31k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4829|     34|    {
 4830|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 34, False: 0]
  ------------------
 4831|     34|            return read_string_impl(
 4832|     34|                range,
 4833|     34|                read_until_code_unit(
 4834|     34|                    range,
 4835|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     34|                        SourceCharT ch) { return ch == until; }),
 4837|     34|                value);
 4838|     34|        }
 4839|      0|        return read_string_impl(
 4840|      0|            range,
 4841|      0|            read_until_code_units(
 4842|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|      0|            value);
 4844|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     34|        : m_fptr([](storage fn,
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
  752|     34|          m_storage(std::addressof(f))
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    484|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    484|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    484|              else {
  749|    484|                  return obj(static_cast<decltype(args)>(args)...);
  750|    484|              }
  751|    484|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    484|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    484|        else if constexpr (std::is_object_v<T>) {
  688|    484|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    484|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4836|    484|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     34|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|    132|    {
 5037|    132|        auto it = read_source_impl(range, {specs});
 5038|    132|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 114]
  |  |  ------------------
  ------------------
 5039|     18|            return unexpected(it.error());
 5040|     18|        }
 5041|       |
 5042|    114|        return read_string_impl(range, *it, value);
 5043|    132|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|    396|    {
 5142|    396|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|    396|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|    396|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    396|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 396]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|    396|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|    396|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 300, False: 96]
  ------------------
 5152|    300|            const auto cb = [&](char32_t cp) {
 5153|    300|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|    300|            };
 5155|       |
 5156|    300|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 120, False: 180]
  ------------------
 5157|    120|                auto it = read_until_code_point(range, cb);
 5158|    120|                return check_nonempty(it, range);
 5159|    120|            }
 5160|    180|            auto it = read_while_code_point(range, cb);
 5161|    180|            return check_nonempty(it, range);
 5162|    300|        }
 5163|       |
 5164|     96|        const auto cb = [&](SourceCharT ch) {
 5165|     96|            return cb_wrapper.on_ascii_only(ch);
 5166|     96|        };
 5167|       |
 5168|     96|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 42, False: 54]
  ------------------
 5169|     42|            auto it = read_until_code_unit(range, cb);
 5170|     42|            return check_nonempty(it, range);
 5171|     42|        }
 5172|     54|        auto it = read_while_code_unit(range, cb);
 5173|     54|        return check_nonempty(it, range);
 5174|     96|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    300|        : m_fptr([](storage fn,
  743|    300|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    300|              cvref<T> obj = *get<T>(fn);
  745|    300|              if constexpr (std::is_void_v<R>) {
  746|    300|                  obj(static_cast<decltype(args)>(args)...);
  747|    300|              }
  748|    300|              else {
  749|    300|                  return obj(static_cast<decltype(args)>(args)...);
  750|    300|              }
  751|    300|          }),
  752|    300|          m_storage(std::addressof(f))
  753|    300|    {
  754|    300|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|  4.03k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.03k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.03k|              else {
  749|  4.03k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.03k|              }
  751|  4.03k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  4.03k|    {
  684|  4.03k|        if constexpr (std::is_const_v<T>) {
  685|  4.03k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.03k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5152|  4.03k|            const auto cb = [&](char32_t cp) {
 5153|  4.03k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|  4.03k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    300|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    300|        {
  667|    300|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|    396|    {
 5180|    396|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 54, False: 342]
  ------------------
 5181|     54|            return unexpected_scan_error(
 5182|     54|                scan_error::invalid_scanned_value,
 5183|     54|                "No characters matched in [character set]");
 5184|     54|        }
 5185|       |
 5186|    342|        return it;
 5187|    396|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     96|        : m_fptr([](storage fn,
  743|     96|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     96|              cvref<T> obj = *get<T>(fn);
  745|     96|              if constexpr (std::is_void_v<R>) {
  746|     96|                  obj(static_cast<decltype(args)>(args)...);
  747|     96|              }
  748|     96|              else {
  749|     96|                  return obj(static_cast<decltype(args)>(args)...);
  750|     96|              }
  751|     96|          }),
  752|     96|          m_storage(std::addressof(f))
  753|     96|    {
  754|     96|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.27k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.27k|              else {
  749|  1.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.27k|              }
  751|  1.27k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  1.27k|    {
  684|  1.27k|        if constexpr (std::is_const_v<T>) {
  685|  1.27k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.27k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5164|  1.27k|        const auto cb = [&](SourceCharT ch) {
 5165|  1.27k|            return cb_wrapper.on_ascii_only(ch);
 5166|  1.27k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|     96|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     96|        {
  667|     96|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|    412|{
 4741|    412|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    412|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    412|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 100, False: 312]
  ------------------
 4745|    100|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    100|                                     "Invalid encoding in scanned string");
 4747|    100|    }
 4748|    312|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    312|    static_cast<    \
  |  |  929|    312|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    312|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 312]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    312|    return SCN_MOVE(result);
  ------------------
  |  |  928|    312|    static_cast<    \
  |  |  929|    312|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    312|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4879|  1.50k|    {
 4880|  1.50k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  1.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.20k, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.20k|    }                                                  \
  |  |  |  | 3667|  1.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|    298|        return read_string_impl(range, it, value);
 4882|  1.50k|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4901|  4.51k|    {
 4902|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4903|       |                      !std::is_same_v<SourceCharT, char>) {
 4904|       |            return unexpected_scan_error(
 4905|       |                scan_error::invalid_scanned_value,
 4906|       |                "Regex backend doesn't support wide strings as input");
 4907|       |        }
 4908|  4.51k|        else {
 4909|  4.51k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4909:17): [True: 0, False: 4.51k]
  ------------------
 4910|      0|                return unexpected_scan_error(
 4911|      0|                    scan_error::invalid_scanned_value,
 4912|      0|                    "Cannot use regex with a non-contiguous source "
 4913|      0|                    "range");
 4914|      0|            }
 4915|       |
 4916|  4.51k|            auto input = get_as_contiguous(range);
 4917|  4.51k|            SCN_TRY(it,
  ------------------
  |  | 3668|  4.51k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.51k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.51k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.62k, False: 894]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.62k|    }                                                  \
  |  |  |  | 3667|  4.51k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    894|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4918|    894|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4919|    894|            return ranges::next(range.begin(),
 4920|    894|                                ranges::distance(input.begin(), it));
 4921|  4.51k|        }
 4922|  4.51k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  4.51k|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|  4.51k|                  ranges::sized_range<Range>) {
  961|  4.51k|        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|       |    else {
  974|       |        return false;
  975|       |    }
  976|  4.51k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  4.51k|{
 1065|  4.51k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  4.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|       |    if constexpr (ranges::contiguous_range<Range> &&
 1068|  4.51k|                  ranges::sized_range<Range>) {
 1069|  4.51k|        return r;
 1070|       |    }
 1071|       |    else if constexpr (std::is_same_v<
 1072|       |                           ranges::const_iterator_t<Range>,
 1073|       |                           typename detail::basic_scan_buffer<
 1074|       |                               detail::char_t<Range>>::forward_iterator>) {
 1075|       |        if constexpr (ranges::common_range<Range>) {
 1076|       |            return detail::make_string_view_from_pointers(
 1077|       |                r.begin().to_contiguous_segment_iterator(),
 1078|       |                r.end().to_contiguous_segment_iterator());
 1079|       |        }
 1080|       |        else {
 1081|       |            return r.begin().contiguous_segment();
 1082|       |        }
 1083|       |    }
 1084|       |    else {
 1085|       |        SCN_EXPECT(false);
 1086|       |        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1089|       |    }
 1090|  4.51k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  4.51k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|  4.51k|                  ranges::sized_range<Range>) {
  983|  4.51k|        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|       |                               detail::char_t<Range>>::forward_iterator>) {
  989|       |        auto beg = r.begin();
  990|       |        if (beg.contiguous_segment().empty()) {
  991|       |            return false;
  992|       |        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|       |        else {
  998|       |            if (beg.stores_parent()) {
  999|       |                return beg.contiguous_segment().end() ==
 1000|       |                       beg.parent()->current_view().end();
 1001|       |            }
 1002|       |            return true;
 1003|       |        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  4.51k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4334|  4.51k|{
 4335|  4.51k|    static_assert(ranges::contiguous_range<Input> &&
 4336|  4.51k|                  ranges::borrowed_range<Input> &&
 4337|  4.51k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4338|       |
 4339|  4.51k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4340|  4.51k|    std::basic_regex<CharT> re{};
 4341|  4.51k|    try {
 4342|  4.51k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3668|  4.51k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.51k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.51k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.51k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.51k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4343|  4.51k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4344|  4.51k|                                     re_flags | std::regex_constants::nosubs};
 4345|  4.51k|    }
 4346|  4.51k|    catch (const std::regex_error& err) {
 4347|  2.02k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4348|  2.02k|                                     "Invalid regex");
 4349|  2.02k|    }
 4350|       |
 4351|  2.49k|    std::match_results<const CharT*> matches{};
 4352|  2.49k|    try {
 4353|  2.49k|        bool found = std::regex_search(input.data(),
 4354|  2.49k|                                       input.data() + input.size(), matches, re,
 4355|  2.49k|                                       std::regex_constants::match_continuous);
 4356|  2.49k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4356:13): [True: 1.60k, False: 894]
  |  Branch (4356:23): [True: 0, False: 894]
  ------------------
 4357|  1.56k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4358|  1.56k|                                         "Regular expression didn't match");
 4359|  1.56k|        }
 4360|  2.49k|    }
 4361|  2.49k|    catch (const std::regex_error& err) {
 4362|     36|        return unexpected_scan_error(scan_error::invalid_format_string,
 4363|     36|                                     "Regex matching failed with an error");
 4364|     36|    }
 4365|       |
 4366|    894|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4367|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4368|       |    auto re =
 4369|       |#if SCN_REGEX_BOOST_USE_ICU
 4370|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4371|       |                             make_regex_flags(flags) |
 4372|       |                                 boost::regex_constants::no_except |
 4373|       |                                 boost::regex_constants::nosubs);
 4374|       |#else
 4375|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4376|       |                                  make_regex_flags(flags) |
 4377|       |                                      boost::regex_constants::no_except |
 4378|       |                                      boost::regex_constants::nosubs};
 4379|       |#endif
 4380|       |    if (re.status() != 0) {
 4381|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4382|       |                                     "Invalid regex");
 4383|       |    }
 4384|       |
 4385|       |    boost::match_results<const CharT*> matches{};
 4386|       |    try {
 4387|       |        bool found =
 4388|       |#if SCN_REGEX_BOOST_USE_ICU
 4389|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4390|       |                                   matches, re,
 4391|       |                                   boost::regex_constants::match_continuous);
 4392|       |#else
 4393|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4394|       |                                matches, re,
 4395|       |                                boost::regex_constants::match_continuous);
 4396|       |#endif
 4397|       |        if (!found || matches.prefix().matched) {
 4398|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4399|       |                                         "Regular expression didn't match");
 4400|       |        }
 4401|       |    }
 4402|       |    catch (const std::runtime_error& err) {
 4403|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4404|       |                                     "Regex matching failed with an error");
 4405|       |    }
 4406|       |
 4407|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4408|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4409|       |    static_assert(std::is_same_v<CharT, char>);
 4410|       |    std::string flagged_pattern{};
 4411|       |    auto re = [&]() {
 4412|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4413|       |        opts.set_never_capture(true);
 4414|       |        if (flagstr.empty()) {
 4415|       |            return re2::RE2{pattern, opts};
 4416|       |        }
 4417|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4418|       |        flagged_pattern.append(flagstr);
 4419|       |        flagged_pattern.append(pattern);
 4420|       |        return re2::RE2{flagged_pattern, opts};
 4421|       |    }();
 4422|       |    if (!re.ok()) {
 4423|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4424|       |                                     "Failed to parse regular expression");
 4425|       |    }
 4426|       |
 4427|       |    auto new_input = detail::make_string_view_from_pointers(
 4428|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4429|       |    bool found = re2::RE2::Consume(&new_input, re);
 4430|       |    if (!found) {
 4431|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4432|       |                                     "Regular expression didn't match");
 4433|       |    }
 4434|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4435|       |#endif  // SCN_REGEX_BACKEND == ...
 4436|  2.49k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5797|  2.70k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  2.70k|                       std::is_same_v<T, std::wstring>) {
 5816|  2.70k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  2.70k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|    122|{
 2982|    122|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|    122|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 122, False: 0]
  ------------------
 2984|    122|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    122|    static_cast<    \
  |  |  929|    122|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|    122|        }
 2986|      0|        else {
 2987|      0|            dest.assign(source.view());
 2988|      0|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|    122|    return {};
 2995|    122|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5265|    172|    {
 5266|    172|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    172|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    172|        return read_impl(range, specs, value);
 5268|    172|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5283|    172|    {
 5284|    172|        SCN_CLANG_PUSH
 5285|    172|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    172|        switch (m_type) {
 5288|     74|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 74, False: 98]
  ------------------
 5289|     74|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     14|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 14, False: 158]
  ------------------
 5292|     14|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     14|                                                                   value);
 5294|       |
 5295|     10|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 10, False: 162]
  ------------------
 5296|     10|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|     70|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 70, False: 102]
  ------------------
 5299|     70|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|     70|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 170]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|      2|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 2, False: 170]
  ------------------
 5309|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      2|                    range,
 5311|      2|                    get_unescaped_regex_pattern(
 5312|      2|                        specs.charset_string<SourceCharT>()),
 5313|      2|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 172]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    172|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    172|        }
 5320|       |
 5321|    172|        SCN_CLANG_POP
 5322|    172|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4808|     74|    {
 4809|     74|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|     74|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4740|     98|{
 4741|     98|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|     98|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|     98|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 38, False: 60]
  ------------------
 4745|     38|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|     38|                                     "Invalid encoding in scanned string");
 4747|     38|    }
 4748|     60|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     60|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 60]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     60|    return SCN_MOVE(result);
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     60|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4829|     14|    {
 4830|     14|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 14, False: 0]
  ------------------
 4831|     14|            return read_string_impl(
 4832|     14|                range,
 4833|     14|                read_until_code_unit(
 4834|     14|                    range,
 4835|     14|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     14|                        SourceCharT ch) { return ch == until; }),
 4837|     14|                value);
 4838|     14|        }
 4839|      0|        return read_string_impl(
 4840|      0|            range,
 4841|      0|            read_until_code_units(
 4842|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|      0|            value);
 4844|     14|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     14|        : m_fptr([](storage fn,
  743|     14|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     14|              cvref<T> obj = *get<T>(fn);
  745|     14|              if constexpr (std::is_void_v<R>) {
  746|     14|                  obj(static_cast<decltype(args)>(args)...);
  747|     14|              }
  748|     14|              else {
  749|     14|                  return obj(static_cast<decltype(args)>(args)...);
  750|     14|              }
  751|     14|          }),
  752|     14|          m_storage(std::addressof(f))
  753|     14|    {
  754|     14|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|    174|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    174|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    174|              else {
  749|    174|                  return obj(static_cast<decltype(args)>(args)...);
  750|    174|              }
  751|    174|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    174|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    174|        else if constexpr (std::is_object_v<T>) {
  688|    174|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    174|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4836|    174|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     14|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     14|        {
  662|     14|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4935|     10|    {
 4936|     10|        return read_impl(
 4937|     10|            range,
 4938|     10|            [&](const auto& rng) {
 4939|     10|                return read_string_impl(rng, read_all(rng), value);
 4940|     10|            },
 4941|     10|            detail::priority_tag<1>{});
 4942|     10|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     10|    {
 4963|     10|        return read_cb(range);
 4964|     10|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4938|     10|            [&](const auto& rng) {
 4939|     10|                return read_string_impl(rng, read_all(rng), value);
 4940|     10|            },
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5036|     70|    {
 5037|     70|        auto it = read_source_impl(range, {specs});
 5038|     70|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     70|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 62]
  |  |  ------------------
  ------------------
 5039|      8|            return unexpected(it.error());
 5040|      8|        }
 5041|       |
 5042|     62|        return read_string_impl(range, *it, value);
 5043|     70|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4740|     62|{
 4741|     62|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|     62|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|     62|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 62]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|     62|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     62|    static_cast<    \
  |  |  929|     62|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     62|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     62|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 62]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     62|    return SCN_MOVE(result);
  ------------------
  |  |  928|     62|    static_cast<    \
  |  |  929|     62|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     62|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4879|      4|    {
 4880|      4|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|      0|        return read_string_impl(range, it, value);
 4882|      4|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  1.98k|    {
 5266|  1.98k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.98k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  1.98k|        return read_impl(range, specs, value);
 5268|  1.98k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  1.98k|    {
 5284|  1.98k|        SCN_CLANG_PUSH
 5285|  1.98k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  1.98k|        switch (m_type) {
 5288|    310|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 310, False: 1.67k]
  ------------------
 5289|    310|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 34, False: 1.94k]
  ------------------
 5292|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     34|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 1.98k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    132|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 132, False: 1.85k]
  ------------------
 5299|    132|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    132|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  1.46k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 1.46k, False: 516]
  ------------------
 5304|  1.46k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  1.46k|                    range, specs.charset_string<SourceCharT>(),
 5306|  1.46k|                    specs.regexp_flags, value);
 5307|       |
 5308|     40|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 40, False: 1.94k]
  ------------------
 5309|     40|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|     40|                    range,
 5311|     40|                    get_unescaped_regex_pattern(
 5312|     40|                        specs.charset_string<SourceCharT>()),
 5313|     40|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 1.98k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  1.98k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  1.98k|        }
 5320|       |
 5321|  1.98k|        SCN_CLANG_POP
 5322|  1.98k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|    772|    {
 4809|    772|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    772|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|    806|{
 4741|    806|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    806|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    806|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 248, False: 558]
  ------------------
 4745|    248|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    248|                                     "Invalid encoding in scanned string");
 4747|    248|    }
 4748|    558|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    558|    static_cast<    \
  |  |  929|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    558|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    558|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 558]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    558|    return SCN_MOVE(result);
  ------------------
  |  |  928|    558|    static_cast<    \
  |  |  929|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    558|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|    870|{
 3001|    870|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|    870|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|    870|    return {};
 3009|    870|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4829|     34|    {
 4830|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 34, False: 0]
  ------------------
 4831|     34|            return read_string_impl(
 4832|     34|                range,
 4833|     34|                read_until_code_unit(
 4834|     34|                    range,
 4835|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     34|                        SourceCharT ch) { return ch == until; }),
 4837|     34|                value);
 4838|     34|        }
 4839|      0|        return read_string_impl(
 4840|      0|            range,
 4841|      0|            read_until_code_units(
 4842|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|      0|            value);
 4844|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     34|        : m_fptr([](storage fn,
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
  752|     34|          m_storage(std::addressof(f))
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    484|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    484|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    484|              else {
  749|    484|                  return obj(static_cast<decltype(args)>(args)...);
  750|    484|              }
  751|    484|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    484|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    484|        else if constexpr (std::is_object_v<T>) {
  688|    484|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    484|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4836|    484|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     34|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|    132|    {
 5037|    132|        auto it = read_source_impl(range, {specs});
 5038|    132|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 114]
  |  |  ------------------
  ------------------
 5039|     18|            return unexpected(it.error());
 5040|     18|        }
 5041|       |
 5042|    114|        return read_string_impl(range, *it, value);
 5043|    132|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|    412|{
 4741|    412|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    412|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    412|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 100, False: 312]
  ------------------
 4745|    100|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    100|                                     "Invalid encoding in scanned string");
 4747|    100|    }
 4748|    312|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    312|    static_cast<    \
  |  |  929|    312|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    312|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 312]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    312|    return SCN_MOVE(result);
  ------------------
  |  |  928|    312|    static_cast<    \
  |  |  929|    312|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    312|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4879|  1.50k|    {
 4880|  1.50k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  1.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.20k, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.20k|    }                                                  \
  |  |  |  | 3667|  1.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|    298|        return read_string_impl(range, it, value);
 4882|  1.50k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5797|  2.70k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|  2.70k|                       std::is_same_v<T, std::wstring_view>) {
 5812|  2.70k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  2.70k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|    172|    {
 5266|    172|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    172|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    172|        return read_impl(range, specs, value);
 5268|    172|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|    172|    {
 5284|    172|        SCN_CLANG_PUSH
 5285|    172|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    172|        switch (m_type) {
 5288|     74|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 74, False: 98]
  ------------------
 5289|     74|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     14|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 14, False: 158]
  ------------------
 5292|     14|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     14|                                                                   value);
 5294|       |
 5295|     10|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 10, False: 162]
  ------------------
 5296|     10|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|     70|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 70, False: 102]
  ------------------
 5299|     70|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|     70|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 170]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|      2|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 2, False: 170]
  ------------------
 5309|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      2|                    range,
 5311|      2|                    get_unescaped_regex_pattern(
 5312|      2|                        specs.charset_string<SourceCharT>()),
 5313|      2|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 172]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    172|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    172|        }
 5320|       |
 5321|    172|        SCN_CLANG_POP
 5322|    172|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4815|     74|    {
 4816|     74|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|     74|                                     value);
 4818|     74|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4761|     98|{
 4762|     98|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|     98|    auto src = [&]() {
 4765|     98|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|     98|            return make_contiguous_buffer(
 4767|     98|                ranges::subrange{range.begin().base(), result.base()});
 4768|     98|        }
 4769|     98|        else {
 4770|     98|            return make_contiguous_buffer(
 4771|     98|                ranges::subrange{range.begin(), result});
 4772|     98|        }
 4773|     98|    }();
 4774|     98|    using src_type = decltype(src);
 4775|       |
 4776|     98|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|     98|    else {
 4789|     98|        const auto view = src.view();
 4790|     98|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|     98|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 38, False: 60]
  ------------------
 4793|     38|            return unexpected_scan_error(
 4794|     38|                scan_error::invalid_scanned_value,
 4795|     38|                "Invalid encoding in scanned string_view");
 4796|     38|        }
 4797|       |
 4798|     60|        return SCN_MOVE(result);
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|     98|    }
 4800|     98|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4764|     98|    auto src = [&]() {
 4765|     98|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|     98|            return make_contiguous_buffer(
 4767|     98|                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|       |        else {
 4770|       |            return make_contiguous_buffer(
 4771|       |                ranges::subrange{range.begin(), result});
 4772|       |        }
 4773|     98|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4851|     14|    {
 4852|     14|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4852:13): [True: 14, False: 0]
  ------------------
 4853|     14|            return read_string_view_impl(
 4854|     14|                range,
 4855|     14|                read_until_code_unit(
 4856|     14|                    range,
 4857|     14|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4858|     14|                        SourceCharT ch) { return ch == until; }),
 4859|     14|                value);
 4860|     14|        }
 4861|      0|        return read_string_view_impl(
 4862|      0|            range,
 4863|      0|            read_until_code_units(
 4864|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4865|      0|            value);
 4866|     14|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     14|        : m_fptr([](storage fn,
  743|     14|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     14|              cvref<T> obj = *get<T>(fn);
  745|     14|              if constexpr (std::is_void_v<R>) {
  746|     14|                  obj(static_cast<decltype(args)>(args)...);
  747|     14|              }
  748|     14|              else {
  749|     14|                  return obj(static_cast<decltype(args)>(args)...);
  750|     14|              }
  751|     14|          }),
  752|     14|          m_storage(std::addressof(f))
  753|     14|    {
  754|     14|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    174|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    174|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    174|              else {
  749|    174|                  return obj(static_cast<decltype(args)>(args)...);
  750|    174|              }
  751|    174|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    174|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    174|        else if constexpr (std::is_object_v<T>) {
  688|    174|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    174|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4858|    174|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     14|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     14|        {
  662|     14|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4947|     10|    {
 4948|     10|        return read_impl(
 4949|     10|            range,
 4950|     10|            [&](const auto& rng) {
 4951|     10|                return read_string_view_impl(rng, read_all(rng), value);
 4952|     10|            },
 4953|     10|            detail::priority_tag<1>{});
 4954|     10|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     10|    {
 4963|     10|        return read_cb(range);
 4964|     10|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4950|     10|            [&](const auto& rng) {
 4951|     10|                return read_string_view_impl(rng, read_all(rng), value);
 4952|     10|            },
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5050|     70|    {
 5051|     70|        auto it = read_source_impl(range, {specs});
 5052|     70|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     70|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 62]
  |  |  ------------------
  ------------------
 5053|      8|            return unexpected(it.error());
 5054|      8|        }
 5055|       |
 5056|     62|        return read_string_view_impl(range, *it, value);
 5057|     70|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4761|     62|{
 4762|     62|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|     62|    auto src = [&]() {
 4765|     62|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|     62|            return make_contiguous_buffer(
 4767|     62|                ranges::subrange{range.begin().base(), result.base()});
 4768|     62|        }
 4769|     62|        else {
 4770|     62|            return make_contiguous_buffer(
 4771|     62|                ranges::subrange{range.begin(), result});
 4772|     62|        }
 4773|     62|    }();
 4774|     62|    using src_type = decltype(src);
 4775|       |
 4776|     62|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|     62|    else {
 4789|     62|        const auto view = src.view();
 4790|     62|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|     62|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 0, False: 62]
  ------------------
 4793|      0|            return unexpected_scan_error(
 4794|      0|                scan_error::invalid_scanned_value,
 4795|      0|                "Invalid encoding in scanned string_view");
 4796|      0|        }
 4797|       |
 4798|     62|        return SCN_MOVE(result);
  ------------------
  |  |  928|     62|    static_cast<    \
  |  |  929|     62|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|     62|    }
 4800|     62|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4764|     62|    auto src = [&]() {
 4765|     62|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|     62|            return make_contiguous_buffer(
 4767|     62|                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|       |        else {
 4770|       |            return make_contiguous_buffer(
 4771|       |                ranges::subrange{range.begin(), result});
 4772|       |        }
 4773|     62|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4890|      4|    {
 4891|      4|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_view_impl(range, it, value);
 4893|      4|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|  1.98k|    {
 5266|  1.98k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.98k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  1.98k|        return read_impl(range, specs, value);
 5268|  1.98k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|  1.98k|    {
 5284|  1.98k|        SCN_CLANG_PUSH
 5285|  1.98k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  1.98k|        switch (m_type) {
 5288|    310|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 310, False: 1.67k]
  ------------------
 5289|    310|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 34, False: 1.94k]
  ------------------
 5292|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     34|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 1.98k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    132|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 132, False: 1.85k]
  ------------------
 5299|    132|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    132|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  1.46k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 1.46k, False: 516]
  ------------------
 5304|  1.46k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  1.46k|                    range, specs.charset_string<SourceCharT>(),
 5306|  1.46k|                    specs.regexp_flags, value);
 5307|       |
 5308|     40|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 40, False: 1.94k]
  ------------------
 5309|     40|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|     40|                    range,
 5311|     40|                    get_unescaped_regex_pattern(
 5312|     40|                        specs.charset_string<SourceCharT>()),
 5313|     40|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 1.98k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  1.98k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  1.98k|        }
 5320|       |
 5321|  1.98k|        SCN_CLANG_POP
 5322|  1.98k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|    772|    {
 4816|    772|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|    772|                                     value);
 4818|    772|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|    806|{
 4762|    806|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    806|    auto src = [&]() {
 4765|    806|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    806|            return make_contiguous_buffer(
 4767|    806|                ranges::subrange{range.begin().base(), result.base()});
 4768|    806|        }
 4769|    806|        else {
 4770|    806|            return make_contiguous_buffer(
 4771|    806|                ranges::subrange{range.begin(), result});
 4772|    806|        }
 4773|    806|    }();
 4774|    806|    using src_type = decltype(src);
 4775|       |
 4776|    806|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    806|    else {
 4789|    806|        const auto view = src.view();
 4790|    806|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    806|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 248, False: 558]
  ------------------
 4793|    248|            return unexpected_scan_error(
 4794|    248|                scan_error::invalid_scanned_value,
 4795|    248|                "Invalid encoding in scanned string_view");
 4796|    248|        }
 4797|       |
 4798|    558|        return SCN_MOVE(result);
  ------------------
  |  |  928|    558|    static_cast<    \
  |  |  929|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    806|    }
 4800|    806|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|    806|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|    806|        else {
 4770|    806|            return make_contiguous_buffer(
 4771|    806|                ranges::subrange{range.begin(), result});
 4772|    806|        }
 4773|    806|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4851|     34|    {
 4852|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4852:13): [True: 34, False: 0]
  ------------------
 4853|     34|            return read_string_view_impl(
 4854|     34|                range,
 4855|     34|                read_until_code_unit(
 4856|     34|                    range,
 4857|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4858|     34|                        SourceCharT ch) { return ch == until; }),
 4859|     34|                value);
 4860|     34|        }
 4861|      0|        return read_string_view_impl(
 4862|      0|            range,
 4863|      0|            read_until_code_units(
 4864|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4865|      0|            value);
 4866|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     34|        : m_fptr([](storage fn,
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
  752|     34|          m_storage(std::addressof(f))
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES19_w:
  743|    484|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    484|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    484|              else {
  749|    484|                  return obj(static_cast<decltype(args)>(args)...);
  750|    484|              }
  751|    484|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    484|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    484|        else if constexpr (std::is_object_v<T>) {
  688|    484|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    484|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4858|    484|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     34|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|    132|    {
 5051|    132|        auto it = read_source_impl(range, {specs});
 5052|    132|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 114]
  |  |  ------------------
  ------------------
 5053|     18|            return unexpected(it.error());
 5054|     18|        }
 5055|       |
 5056|    114|        return read_string_view_impl(range, *it, value);
 5057|    132|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|    412|{
 4762|    412|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    412|    auto src = [&]() {
 4765|    412|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    412|            return make_contiguous_buffer(
 4767|    412|                ranges::subrange{range.begin().base(), result.base()});
 4768|    412|        }
 4769|    412|        else {
 4770|    412|            return make_contiguous_buffer(
 4771|    412|                ranges::subrange{range.begin(), result});
 4772|    412|        }
 4773|    412|    }();
 4774|    412|    using src_type = decltype(src);
 4775|       |
 4776|    412|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    412|    else {
 4789|    412|        const auto view = src.view();
 4790|    412|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    412|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 100, False: 312]
  ------------------
 4793|    100|            return unexpected_scan_error(
 4794|    100|                scan_error::invalid_scanned_value,
 4795|    100|                "Invalid encoding in scanned string_view");
 4796|    100|        }
 4797|       |
 4798|    312|        return SCN_MOVE(result);
  ------------------
  |  |  928|    312|    static_cast<    \
  |  |  929|    312|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    412|    }
 4800|    412|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|    412|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|    412|        else {
 4770|    412|            return make_contiguous_buffer(
 4771|    412|                ranges::subrange{range.begin(), result});
 4772|    412|        }
 4773|    412|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4890|  1.50k|    {
 4891|  1.50k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  1.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.20k, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.20k|    }                                                  \
  |  |  |  | 3667|  1.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    298|        return read_string_view_impl(range, it, value);
 4893|  1.50k|    }
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1670|  6.10k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  6.10k|                  ranges::sized_range<Range>) {
 1674|  6.10k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  6.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  6.10k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1476|  6.10k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  6.10k|    {
 1478|  6.10k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4088|    882|    {
 4089|    882|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 0, False: 882]
  ------------------
 4090|      0|            return std::copysign(value, T{-1.0});
 4091|      0|        }
 4092|    882|        return std::copysign(value, T{1.0});
 4093|    882|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4088|    778|    {
 4089|    778|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 0, False: 778]
  ------------------
 4090|      0|            return std::copysign(value, T{-1.0});
 4091|      0|        }
 4092|    778|        return std::copysign(value, T{1.0});
 4093|    778|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  5.65k|{
 5784|  5.65k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.65k]
  |  |  ------------------
  ------------------
 5785|      0|        return unexpected(e);
 5786|      0|    }
 5787|       |
 5788|  5.65k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 628, False: 5.02k]
  ------------------
 5789|    628|        return range.begin();
 5790|    628|    }
 5791|       |
 5792|  5.02k|    return skip_classic_whitespace(range);
 5793|  5.65k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|    628|    {
 3517|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|    628|        return read_default_with_base(range, value, 10);
 3519|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|    628|    {
 3517|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|    628|        return read_default_with_base(range, value, 10);
 3519|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5736|  1.10k|    {
 5737|  1.10k|        return true;
 5738|  1.10k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5753|    872|    {
 5754|    872|        detail::format_specs specs{};
 5755|    872|        specs.type = detail::presentation_type::int_hex;
 5756|       |
 5757|    872|        std::uintptr_t intvalue{};
 5758|    872|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 872, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    872|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    872|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    872|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    872|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    872|    }                                                  \
  |  |  |  | 3667|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5759|      0|                                                                intvalue, loc));
 5760|      0|        value = reinterpret_cast<void*>(intvalue);
 5761|      0|        return result;
 5762|    872|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3023|  1.37k|    {
 3024|  1.37k|        return true;
 3025|  1.37k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5492|    628|    {
 5493|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5494|       |
 5495|    628|        return bool_reader<CharT>{}.read_classic(range, value);
 5496|    628|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5337|  1.09k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5343|  1.00k|    {
 5344|  1.00k|        scan_error err{scan_error::invalid_scanned_value,
 5345|  1.00k|                       "Failed to read boolean"};
 5346|       |
 5347|  1.00k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5347:13): [True: 890, False: 116]
  ------------------
 5348|    890|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5348:22): [True: 0, False: 890]
  ------------------
 5349|      0|                return *r;
 5350|      0|            }
 5351|    890|            else {
 5352|    890|                err = r.error();
 5353|    890|            }
 5354|    890|        }
 5355|       |
 5356|  1.00k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5356:13): [True: 984, False: 22]
  ------------------
 5357|    984|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5357:22): [True: 0, False: 984]
  ------------------
 5358|      0|                return *r;
 5359|      0|            }
 5360|    984|            else {
 5361|    984|                err = r.error();
 5362|    984|            }
 5363|    984|        }
 5364|       |
 5365|  1.00k|        return unexpected(err);
 5366|  1.00k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5372|    906|    {
 5373|    906|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5373:18): [True: 0, False: 906]
  ------------------
 5374|      0|            value = false;
 5375|      0|            return *r;
 5376|      0|        }
 5377|    906|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5377:18): [True: 0, False: 906]
  ------------------
 5378|      0|            value = true;
 5379|      0|            return *r;
 5380|      0|        }
 5381|       |
 5382|    906|        return unexpected_scan_error(
 5383|    906|            scan_error::invalid_scanned_value,
 5384|    906|            "Failed to read numeric boolean value: No match");
 5385|    906|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5390|    984|    {
 5391|    984|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5391:18): [True: 0, False: 984]
  ------------------
 5392|      0|            value = true;
 5393|      0|            return *r;
 5394|      0|        }
 5395|    984|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5395:18): [True: 0, False: 984]
  ------------------
 5396|      0|            value = false;
 5397|      0|            return *r;
 5398|      0|        }
 5399|       |
 5400|    984|        return unexpected_scan_error(
 5401|    984|            scan_error::invalid_scanned_value,
 5402|    984|            "Failed to read textual boolean value: No match");
 5403|    984|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2182|  1.96k|{
 2183|  1.96k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 100, False: 1.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    100|    }                                                  \
  |  |  |  | 3667|  1.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2184|  1.86k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2185|  1.86k|                    .transform_error(make_eof_parse_error));
 2186|       |
 2187|  1.86k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2188|  1.86k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2189|  1.86k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.86k, False: 0]
  |  |  ------------------
  ------------------
 2190|  1.86k|            return unexpected(parse_error::error);
 2191|  1.86k|        }
 2192|      0|        return it;
 2193|       |    }
 2194|       |    else {
 2195|       |        auto range_it = range.begin();
 2196|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2197|       |            if (SCN_UNLIKELY(*range_it !=
 2198|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2199|       |                return unexpected(parse_error::error);
 2200|       |            }
 2201|       |        }
 2202|       |        return it;
 2203|       |    }
 2204|  1.86k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3646|    628|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3632|  1.09k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|    628|    {
 4141|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|    628|        float_reader<CharT> rd{};
 4144|    628|        return read_impl<Range>(
 4145|    628|            range, rd,
 4146|    628|            [](float_reader<CharT>& r, auto&&... args) {
 4147|    628|                return r.read_source(SCN_FWD(args)...);
 4148|    628|            },
 4149|    628|            value);
 4150|    628|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    628|        : m_fptr([](storage fn,
  743|    628|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    628|              cvref<T> obj = *get<T>(fn);
  745|    628|              if constexpr (std::is_void_v<R>) {
  746|    628|                  obj(static_cast<decltype(args)>(args)...);
  747|    628|              }
  748|    628|              else {
  749|    628|                  return obj(static_cast<decltype(args)>(args)...);
  750|    628|              }
  751|    628|          }),
  752|    628|          m_storage(std::addressof(f))
  753|    628|    {
  754|    628|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    628|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    628|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    628|              else {
  749|    628|                  return obj(static_cast<decltype(args)>(args)...);
  750|    628|              }
  751|    628|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    628|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    628|        else if constexpr (std::is_object_v<T>) {
  688|    628|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    628|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|    628|            [](float_reader<CharT>& r, auto&&... args) {
 4147|    628|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|    628|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    628|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    628|        {
  662|    628|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|    628|    {
 5255|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    628|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|    628|    {
 5255|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    628|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|    628|    {
 5255|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    628|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    628|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|  76.2k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|  76.2k|    static_cast<    \
  |  |  929|  76.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|  76.2k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|  76.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|  76.2k|          m_current(m_range.begin())
 2867|  76.2k|    {
 2868|  76.2k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|   152k|    {
 2872|   152k|        return m_current;
 2873|   152k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|  98.3k|    {
 2877|  98.3k|        return m_range.end();
 2878|  98.3k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1208|  21.4k|{
 1209|       |    // TODO: optimize
 1210|  21.4k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1211|  21.4k|    auto res = get_next_code_point(str);
 1212|  21.4k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1213|  21.4k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|  24.7k|    {
 2892|  24.7k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  24.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  24.7k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  24.7k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 24.7k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  24.7k|        }
 2898|  24.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  24.7k|    static_cast<    \
  |  |  929|  24.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  24.7k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|  51.0k|    {
 2882|  51.0k|        return ranges::subrange{begin(), end()};
 2883|  51.0k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2104|  6.10k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|  6.10k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|  6.10k|        auto buf = make_contiguous_buffer(range);
 2109|  6.10k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|  6.10k|        return ranges::next(range.begin(),
 2111|  6.10k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|  6.10k|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6025|  3.31k|    {
 6026|  3.31k|        const bool need_skipped_width =
 6027|  3.31k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 28, False: 3.28k]
  |  Branch (6027:33): [True: 3.28k, False: 0]
  ------------------
 6028|  3.31k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  3.31k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 172, False: 3.14k]
  ------------------
 6032|  3.31k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 504, False: 2.63k]
  ------------------
 6033|    676|            return skip_fill(rng, specs.precision, specs.fill,
 6034|    676|                             need_skipped_width);
 6035|    676|        }
 6036|  2.63k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 2.53k, False: 106]
  |  Branch (6036:56): [True: 1.74k, False: 784]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  1.74k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 1.74k, False: 0]
  ------------------
 6040|  1.74k|                auto max_width_view = take_width(rng, specs.precision);
 6041|  1.74k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|  1.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 1.57k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    174|    }                                                  \
  |  |  |  | 3667|  1.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|  1.57k|                                  .transform_error(make_eof_scan_error));
 6043|  1.57k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|  1.74k|            }
 6045|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|      0|                            make_eof_scan_error));
 6047|       |
 6048|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 0]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|      0|            return result_type{it, 0};
 6056|      0|        }
 6057|       |
 6058|    890|        return result_type{rng.begin(), 0};
 6059|  2.63k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5939|    676|{
 5940|    676|    using char_type = detail::char_t<Range>;
 5941|    676|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5942|       |
 5943|    676|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5943:9): [True: 422, False: 254]
  ------------------
 5944|    422|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5945|    422|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5946|       |
 5947|    422|        if (max_width == 0) {
  ------------------
  |  Branch (5947:13): [True: 0, False: 422]
  ------------------
 5948|      0|            auto it = read_while_code_unit(range, pred);
 5949|       |
 5950|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5950:17): [True: 0, False: 0]
  ------------------
 5951|      0|                auto prefix_width =
 5952|      0|                    static_cast<std::ptrdiff_t>(
 5953|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5954|      0|                    ranges::distance(range.begin(), it);
 5955|      0|                return result_type{it, prefix_width};
 5956|      0|            }
 5957|      0|            return result_type{it, 0};
 5958|      0|        }
 5959|       |
 5960|    422|        auto max_width_view = take_width(range, max_width);
 5961|    422|        auto w_it = read_while_code_unit(max_width_view, pred);
 5962|       |
 5963|    422|        if (want_skipped_width) {
  ------------------
  |  Branch (5963:13): [True: 422, False: 0]
  ------------------
 5964|    422|            return result_type{w_it.base(), max_width - w_it.count()};
 5965|    422|        }
 5966|      0|        return result_type{w_it.base(), 0};
 5967|    422|    }
 5968|       |
 5969|    254|    const auto fill_chars = fill.template get_code_units<char_type>();
 5970|    254|    if (max_width == 0) {
  ------------------
  |  Branch (5970:9): [True: 0, False: 254]
  ------------------
 5971|      0|        auto it = read_while_code_units(range, fill_chars);
 5972|       |
 5973|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5973:13): [True: 0, False: 0]
  ------------------
 5974|      0|            auto prefix_width =
 5975|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5976|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5977|      0|            return result_type{it, prefix_width};
 5978|      0|        }
 5979|      0|        return result_type{it, 0};
 5980|      0|    }
 5981|       |
 5982|    254|    auto max_width_view = take_width(range, max_width);
 5983|    254|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5984|       |
 5985|    254|    if (want_skipped_width) {
  ------------------
  |  Branch (5985:9): [True: 254, False: 0]
  ------------------
 5986|    254|        return result_type{w_it.base(), max_width - w_it.count()};
 5987|    254|    }
 5988|      0|    return result_type{w_it.base(), 0};
 5989|    254|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    422|        : m_fptr([](storage fn,
  743|    422|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    422|              cvref<T> obj = *get<T>(fn);
  745|    422|              if constexpr (std::is_void_v<R>) {
  746|    422|                  obj(static_cast<decltype(args)>(args)...);
  747|    422|              }
  748|    422|              else {
  749|    422|                  return obj(static_cast<decltype(args)>(args)...);
  750|    422|              }
  751|    422|          }),
  752|    422|          m_storage(std::addressof(f))
  753|    422|    {
  754|    422|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|    604|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    604|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    604|              else {
  749|    604|                  return obj(static_cast<decltype(args)>(args)...);
  750|    604|              }
  751|    604|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    604|    {
  684|    604|        if constexpr (std::is_const_v<T>) {
  685|    604|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    604|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5945|    604|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    422|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    422|        {
  667|    422|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|    422|{
 1964|    422|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    422|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|    422|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    422|    else {
 1949|    422|        auto first = range.begin();
 1950|    658|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 604, False: 54]
  ------------------
 1951|    604|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 368, False: 236]
  ------------------
 1952|    368|                return first;
 1953|    368|            }
 1954|    604|        }
 1955|     54|        return first;
 1956|    422|    }
 1957|    422|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2798|  4.17k|    {
 2799|  4.17k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2800|  4.17k|                                      m_count};
 2801|  4.17k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2705|  17.0k|    {
 2706|  17.0k|        return view;
 2707|  17.0k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2369|  4.17k|        : m_current(x), m_end(s), m_count(n)
 2370|  4.17k|    {
 2371|  4.17k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  5.99k|        {
 2770|  5.99k|            return !(y == x);
 2771|  5.99k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2758|  11.4k|        {
 2759|  11.4k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2759:21): [True: 784, False: 10.6k]
  |  Branch (2759:39): [True: 454, False: 330]
  ------------------
 2760|  11.4k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2760:20): [True: 0, False: 10.9k]
  ------------------
 2761|  11.4k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2409|    784|    {
 2410|    784|        return m_multibyte_left;
 2411|    784|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2804|  8.73k|    {
 2805|  8.73k|        return sentinel<true>{m_base.get().end()};
 2806|  8.73k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2739|  8.73k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  8.73k|    static_cast<    \
  |  |  929|  8.73k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2414|  7.81k|    {
 2415|  7.81k|        return *m_current;
 2416|  7.81k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2423|  9.38k|    {
 2424|  9.38k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  9.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2425|  9.38k|        _increment_current();
 2426|  9.38k|        return *this;
 2427|  9.38k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2656|  9.38k|    {
 2657|  9.38k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2657:13): [True: 5.11k, False: 4.27k]
  ------------------
 2658|  5.11k|            auto cplen = _get_cp_length_at_current();
 2659|  5.11k|            m_multibyte_left = cplen - 1;
 2660|  5.11k|            m_count -= _get_width_at_current_cp_start(cplen);
 2661|  5.11k|        }
 2662|  4.27k|        else {
 2663|  4.27k|            --m_multibyte_left;
 2664|  4.27k|        }
 2665|       |
 2666|  9.38k|        ++m_current;
 2667|  9.38k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2627|  5.11k|    {
 2628|  5.11k|        return static_cast<difference_type>(
 2629|  5.11k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2630|  5.11k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2633|  5.11k|    {
 2634|  5.11k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  5.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.11k]
  |  |  ------------------
  ------------------
 2635|      0|            return 0;
 2636|      0|        }
 2637|       |
 2638|  5.11k|        if (cplen == 1) {
  ------------------
  |  Branch (2638:13): [True: 2.78k, False: 2.32k]
  ------------------
 2639|  2.78k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  2.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2640|  2.78k|            auto cp = static_cast<char32_t>(*m_current);
 2641|  2.78k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2642|  2.78k|        }
 2643|       |
 2644|  2.32k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2645|  2.32k|                                           cplen);
 2646|  2.32k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.32k]
  |  |  ------------------
  ------------------
 2647|      0|            return 0;
 2648|      0|        }
 2649|       |
 2650|  2.32k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2651|  2.32k|        return static_cast<difference_type>(
 2652|  2.32k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2653|  2.32k|    }
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2024|    254|{
 2025|    254|    static_assert(ranges::common_range<CodeUnits>);
 2026|       |
 2027|    254|    auto it = range.begin();
 2028|    254|    while (it != range.end()) {
  ------------------
  |  Branch (2028:12): [True: 254, False: 0]
  ------------------
 2029|    254|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2030|    254|                                           needle.size());
 2031|    254|        if (!r) {
  ------------------
  |  Branch (2031:13): [True: 52, False: 202]
  ------------------
 2032|     52|            return it;
 2033|     52|        }
 2034|    202|        static_assert(
 2035|    202|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2036|    202|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2036:13): [True: 202, False: 0]
  ------------------
 2037|    202|            return it;
 2038|    202|        }
 2039|      0|        it = *r;
 2040|      0|    }
 2041|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2042|      0|    return it;
 2043|      0|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1844|    254|{
 1845|    254|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    254|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    254|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|    254|    else {
 1856|    254|        auto it = range.begin();
 1857|    254|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 254]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  1.03k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 834, False: 202]
  ------------------
 1862|    834|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 52, False: 782]
  ------------------
 1863|     52|                return unexpected(eof_error::eof);
 1864|     52|            }
 1865|    834|        }
 1866|       |
 1867|    202|        return it;
 1868|    254|    }
 1869|    254|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1094|    254|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    254|    else {
 1115|    254|        return 0;
 1116|    254|    }
 1117|    254|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  1.74k|    {
  268|  1.74k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.74k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.74k|    {
  161|  1.74k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.74k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.74k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.74k|        else {
  169|  1.74k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.74k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.74k|        }
  173|  1.74k|    }
_ZN3scn2v34impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2519|  5.82k|    {
 2520|  5.82k|        return !(a == b);
 2521|  5.82k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2511|  5.82k|    {
 2512|  5.82k|        return a.m_current == b.m_current;
 2513|  5.82k|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2820|  2.42k|    {
 2821|  2.42k|        return take_width_view{r, n};
 2822|  2.42k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2788|  2.42k|        : m_base(base), m_count(count)
 2789|  2.42k|    {
 2790|  2.42k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2702|  2.42k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|  1.74k|{
 2940|  1.74k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.74k, False: 0]
  ------------------
 2941|  1.74k|        auto it = read_while_classic_space(range);
 2942|  1.74k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.74k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 1.57k]
  |  |  ------------------
  ------------------
 2944|    174|            return unexpected(e);
 2945|    174|        }
 2946|       |
 2947|  1.57k|        return it;
 2948|  1.74k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.74k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|  1.74k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  1.74k|    else {
 2114|  1.74k|        auto it = range.begin();
 2115|       |
 2116|  1.74k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|  1.74k|            auto seg = get_contiguous_beginning(range);
 2118|  1.74k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|  1.74k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 0, False: 1.74k]
  ------------------
 2120|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|      0|            }
 2122|  1.74k|            ranges::advance(it, seg.size());
 2123|  1.74k|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.74k|            return detail::is_cp_space(cp);
 2127|  1.74k|        });
 2128|  1.74k|    }
 2129|  1.74k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1038|  1.74k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|       |                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|       |        else {
 1054|       |            return r.begin().contiguous_segment();
 1055|       |        }
 1056|       |    }
 1057|  1.74k|    else {
 1058|  1.74k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.74k|    }
 1060|  1.74k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|  1.74k|{
 2070|  1.74k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  1.74k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  1.74k|{
 2049|  1.74k|    auto it = range.begin();
 2050|  2.99k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 2.82k, False: 174]
  ------------------
 2051|  2.82k|        const auto val =
 2052|  2.82k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  2.82k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.82k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.82k, False: 0]
  |  |  ------------------
  ------------------
 2054|  2.82k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  2.82k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  2.82k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.57k, False: 1.24k]
  ------------------
 2057|  1.57k|                return it;
 2058|  1.57k|            }
 2059|  2.82k|        }
 2060|  1.24k|        it = val.iterator;
 2061|  1.24k|    }
 2062|       |
 2063|    174|    return it;
 2064|  1.74k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1886|  2.82k|{
 1887|  2.82k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  2.82k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  2.82k|    auto it = range.begin();
 1891|  2.82k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  2.82k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.82k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  2.82k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 2.09k, False: 724]
  ------------------
 1900|  2.09k|        ++it;
 1901|  2.09k|        return {it, string_type(1, *range.begin())};
 1902|  2.09k|    }
 1903|       |
 1904|    724|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|    724|    return {it, string_type{range.begin(), it}};
 1906|  2.82k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  4.57k|{
  944|  4.57k|    return is_range_eof(r.begin(), r.end());
  945|  4.57k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  4.57k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  4.57k|    {
  937|  4.57k|        return begin == end;
  938|  4.57k|    }
  939|  4.57k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    724|    {
  283|    724|        return n - fn::impl_i_n_s(i, n, bound);
  284|    724|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    724|    {
  227|    724|        constexpr iter_difference_t<I> zero{0};
  228|    724|        iter_difference_t<I> counter{0};
  229|       |
  230|    724|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 724]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    724|        else {
  237|  2.81k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 2.08k, False: 724]
  |  Branch (237:34): [True: 2.08k, False: 0]
  ------------------
  238|  2.08k|                ++i;
  239|  2.08k|                ++counter;
  240|  2.08k|            }
  241|    724|        }
  242|       |
  243|    724|        return counter;
  244|    724|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1877|  2.82k|    {
 1878|  2.82k|        return !codepoint.empty();
 1879|  2.82k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.74k|        : m_fptr([](storage fn,
  743|  1.74k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.74k|              cvref<T> obj = *get<T>(fn);
  745|  1.74k|              if constexpr (std::is_void_v<R>) {
  746|  1.74k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.74k|              }
  748|  1.74k|              else {
  749|  1.74k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.74k|              }
  751|  1.74k|          }),
  752|  1.74k|          m_storage(std::addressof(f))
  753|  1.74k|    {
  754|  1.74k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  2.82k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.82k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.82k|              else {
  749|  2.82k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.82k|              }
  751|  2.82k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.82k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.82k|        else if constexpr (std::is_object_v<T>) {
  688|  2.82k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.82k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  2.82k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  2.82k|            return detail::is_cp_space(cp);
 2127|  2.82k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.74k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.74k|        {
  662|  1.74k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.74k|{
  950|  1.74k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 1.57k]
  |  |  ------------------
  ------------------
  951|    174|        return eof_error::eof;
  952|    174|    }
  953|  1.57k|    return eof_error::good;
  954|  1.74k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2401|  13.1k|    {
 2402|  13.1k|        return m_current;
 2403|  13.1k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2405|  13.6k|    {
 2406|  13.6k|        return m_count;
 2407|  13.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|  12.7k|    {
 6026|  12.7k|        const bool need_skipped_width =
 6027|  12.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 1.82k, False: 10.9k]
  |  Branch (6027:33): [True: 0, False: 10.9k]
  ------------------
 6028|  12.7k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  12.7k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 134, False: 12.5k]
  ------------------
 6032|  12.7k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 774, False: 11.8k]
  ------------------
 6033|    908|            return skip_fill(rng, specs.precision, specs.fill,
 6034|    908|                             need_skipped_width);
 6035|    908|        }
 6036|  11.8k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 11.1k, False: 692]
  |  Branch (6036:56): [True: 1.61k, False: 9.51k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  1.61k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 1.61k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  3.22k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  3.22k|                            make_eof_scan_error));
 6047|       |
 6048|  3.22k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 1.01k, False: 598]
  ------------------
 6049|  1.01k|                return result_type{
 6050|  1.01k|                    it,
 6051|  1.01k|                    calculate_text_width(make_contiguous_buffer(
 6052|  1.01k|                                             ranges::subrange{rng.begin(), it})
 6053|  1.01k|                                             .view())};
 6054|  1.01k|            }
 6055|    598|            return result_type{it, 0};
 6056|  3.22k|        }
 6057|       |
 6058|  10.2k|        return result_type{rng.begin(), 0};
 6059|  11.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  3.92k|    {
 6068|  3.92k|        const bool need_skipped_width =
 6069|  3.92k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 444, False: 3.48k]
  |  Branch (6069:33): [True: 1.04k, False: 2.43k]
  ------------------
 6070|  3.92k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  3.92k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 292, False: 3.63k]
  ------------------
 6073|  3.92k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 310, False: 3.32k]
  ------------------
 6074|    602|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 236, False: 366]
  ------------------
 6075|    602|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 92, False: 144]
  ------------------
 6076|     92|                return result_type{rng.begin(), 0};
 6077|     92|            }
 6078|    510|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|    510|                             specs.fill, need_skipped_width);
 6080|    602|        }
 6081|  3.32k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 3.20k, False: 122]
  ------------------
 6082|  3.32k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 2.90k, False: 300]
  ------------------
 6083|  3.32k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 206, False: 2.69k]
  |  Branch (6083:35): [True: 178, False: 28]
  ------------------
 6084|  2.90k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 538, False: 2.18k]
  ------------------
 6085|  2.72k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 438, False: 100]
  ------------------
 6086|    616|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 438, False: 178]
  ------------------
 6087|    438|                const auto initial_width =
 6088|    438|                    specs.precision - prefix_width - value_width;
 6089|    438|                auto max_width_view = take_width(rng, initial_width);
 6090|    438|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|    438|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    438|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    438|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 438]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    438|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    438|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|    438|                                  .transform_error(make_eof_scan_error));
 6092|    438|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|    438|            }
 6094|    356|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|    178|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    178|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    178|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    178|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 178]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    178|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    178|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|    356|                            make_eof_scan_error));
 6096|       |
 6097|    356|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 178, False: 0]
  ------------------
 6098|    178|                return result_type{
 6099|    178|                    it,
 6100|    178|                    calculate_text_width(make_contiguous_buffer(
 6101|    178|                                             ranges::subrange{rng.begin(), it})
 6102|    178|                                             .view())};
 6103|    178|            }
 6104|      0|            return result_type{it, 0};
 6105|    356|        }
 6106|  2.70k|        return result_type{rng.begin(), 0};
 6107|  3.32k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6181|  4.36k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  4.36k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  4.36k|            auto rd = make_reader<T, char_type>();
 6187|  4.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.81k, False: 554]
  |  |  ------------------
  ------------------
 6188|  3.81k|                return unexpected(e);
 6189|  3.81k|            }
 6190|       |
 6191|    554|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  4.36k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    554|    {
 6113|    554|        const bool need_skipped_width =
 6114|    554|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 184, False: 370]
  |  Branch (6114:33): [True: 278, False: 92]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    554|        auto it = rng.begin();
 6118|    554|        std::ptrdiff_t prefix_width = 0;
 6119|    554|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 278, False: 276]
  ------------------
 6120|    278|            auto max_width_view = take_width(rng, specs.precision);
 6121|    278|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     24|    }                                                  \
  |  |  |  | 3667|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    254|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    254|            it = prefix_result.first.base();
 6124|    254|            prefix_width = prefix_result.second;
 6125|    254|        }
 6126|    276|        else {
 6127|    276|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    276|            std::tie(it, prefix_width) = prefix_result;
 6129|    276|        }
 6130|    530|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    530|        std::ptrdiff_t value_width = 0;
 6134|    530|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 254, False: 276]
  ------------------
 6135|    254|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 248]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    248|            const auto initial_width = specs.precision - prefix_width;
 6143|    248|            auto max_width_view =
 6144|    248|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    248|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 248, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    248|    }                                                  \
  |  |  |  | 3667|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    276|        else {
 6150|    276|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 276, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    276|    }                                                  \
  |  | 3667|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6181|  4.36k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  4.36k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  4.36k|            auto rd = make_reader<T, char_type>();
 6187|  4.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.81k, False: 554]
  |  |  ------------------
  ------------------
 6188|  3.81k|                return unexpected(e);
 6189|  3.81k|            }
 6190|       |
 6191|    554|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  4.36k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    554|    {
 6113|    554|        const bool need_skipped_width =
 6114|    554|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 184, False: 370]
  |  Branch (6114:33): [True: 278, False: 92]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    554|        auto it = rng.begin();
 6118|    554|        std::ptrdiff_t prefix_width = 0;
 6119|    554|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 278, False: 276]
  ------------------
 6120|    278|            auto max_width_view = take_width(rng, specs.precision);
 6121|    278|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     24|    }                                                  \
  |  |  |  | 3667|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    254|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    254|            it = prefix_result.first.base();
 6124|    254|            prefix_width = prefix_result.second;
 6125|    254|        }
 6126|    276|        else {
 6127|    276|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    276|            std::tie(it, prefix_width) = prefix_result;
 6129|    276|        }
 6130|    530|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    530|        std::ptrdiff_t value_width = 0;
 6134|    530|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 254, False: 276]
  ------------------
 6135|    254|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 248]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    248|            const auto initial_width = specs.precision - prefix_width;
 6143|    248|            auto max_width_view =
 6144|    248|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    248|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 248, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    248|    }                                                  \
  |  |  |  | 3667|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    276|        else {
 6150|    276|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 276, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    276|    }                                                  \
  |  | 3667|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6181|  4.33k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  4.33k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  4.33k|            auto rd = make_reader<T, char_type>();
 6187|  4.33k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.85k, False: 480]
  |  |  ------------------
  ------------------
 6188|  3.85k|                return unexpected(e);
 6189|  3.85k|            }
 6190|       |
 6191|    480|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  4.33k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5741|  4.33k|    {
 5742|  4.33k|        reader_error_handler eh{};
 5743|  4.33k|        detail::check_pointer_type_specs(specs, eh);
 5744|  4.33k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.85k, False: 480]
  |  |  ------------------
  ------------------
 5745|  3.85k|            return {scan_error::invalid_format_string, eh.m_msg};
 5746|  3.85k|        }
 5747|    480|        return {};
 5748|  4.33k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6112|    480|    {
 6113|    480|        const bool need_skipped_width =
 6114|    480|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 176, False: 304]
  |  Branch (6114:33): [True: 236, False: 68]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    480|        auto it = rng.begin();
 6118|    480|        std::ptrdiff_t prefix_width = 0;
 6119|    480|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 236, False: 244]
  ------------------
 6120|    236|            auto max_width_view = take_width(rng, specs.precision);
 6121|    236|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    236|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    236|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    236|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 220]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|    236|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    220|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    220|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    220|            it = prefix_result.first.base();
 6124|    220|            prefix_width = prefix_result.second;
 6125|    220|        }
 6126|    244|        else {
 6127|    244|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 244]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    244|            std::tie(it, prefix_width) = prefix_result;
 6129|    244|        }
 6130|    464|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    464|        std::ptrdiff_t value_width = 0;
 6134|    464|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 220, False: 244]
  ------------------
 6135|    220|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 4, False: 216]
  ------------------
 6136|      4|                return unexpected_scan_error(
 6137|      4|                    scan_error::invalid_scanned_value,
 6138|      4|                    "Too many fill characters before value, "
 6139|      4|                    "precision exceeded before reading value");
 6140|      4|            }
 6141|       |
 6142|    216|            const auto initial_width = specs.precision - prefix_width;
 6143|    216|            auto max_width_view =
 6144|    216|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    216|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    216|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    216|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    216|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 216, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    216|    }                                                  \
  |  |  |  | 3667|    216|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    244|        else {
 6150|    244|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 244, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    244|    }                                                  \
  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5770|    216|    {
 5771|    216|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    216|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    216|        return read_default(range, value, loc);
 5773|    216|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5753|    216|    {
 5754|    216|        detail::format_specs specs{};
 5755|    216|        specs.type = detail::presentation_type::int_hex;
 5756|       |
 5757|    216|        std::uintptr_t intvalue{};
 5758|    216|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    216|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    216|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    216|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 216, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    216|    }                                                  \
  |  |  |  | 3667|    216|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5759|      0|                                                                intvalue, loc));
 5760|      0|        value = reinterpret_cast<void*>(intvalue);
 5761|      0|        return result;
 5762|    216|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5770|    244|    {
 5771|    244|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    244|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    244|        return read_default(range, value, loc);
 5773|    244|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6181|  4.36k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  4.36k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  4.36k|            auto rd = make_reader<T, char_type>();
 6187|  4.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.62k, False: 746]
  |  |  ------------------
  ------------------
 6188|  3.62k|                return unexpected(e);
 6189|  3.62k|            }
 6190|       |
 6191|    746|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  4.36k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  4.36k|    {
 3029|  4.36k|        reader_error_handler eh{};
 3030|  4.36k|        get_derived().check_specs_impl(specs, eh);
 3031|  4.36k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.62k, False: 746]
  |  |  ------------------
  ------------------
 3032|  3.62k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  3.62k|        }
 3034|    746|        return {};
 3035|  4.36k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3039|  4.36k|    {
 3040|  4.36k|        return static_cast<Derived&>(*this);
 3041|  4.36k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5485|  4.36k|    {
 5486|  4.36k|        detail::check_bool_type_specs(specs, eh);
 5487|  4.36k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    746|    {
 6113|    746|        const bool need_skipped_width =
 6114|    746|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 194, False: 552]
  |  Branch (6114:33): [True: 346, False: 206]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    746|        auto it = rng.begin();
 6118|    746|        std::ptrdiff_t prefix_width = 0;
 6119|    746|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 348, False: 398]
  ------------------
 6120|    348|            auto max_width_view = take_width(rng, specs.precision);
 6121|    348|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    348|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 320]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     28|    }                                                  \
  |  |  |  | 3667|    348|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    320|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    320|            it = prefix_result.first.base();
 6124|    320|            prefix_width = prefix_result.second;
 6125|    320|        }
 6126|    398|        else {
 6127|    398|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    398|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    398|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    398|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    398|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 398]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    398|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    398|            std::tie(it, prefix_width) = prefix_result;
 6129|    398|        }
 6130|    718|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    718|        std::ptrdiff_t value_width = 0;
 6134|    718|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 320, False: 398]
  ------------------
 6135|    320|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 314]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    314|            const auto initial_width = specs.precision - prefix_width;
 6143|    314|            auto max_width_view =
 6144|    314|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    314|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    314|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    314|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    314|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 314, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    314|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    314|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    314|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    314|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    314|    }                                                  \
  |  |  |  | 3667|    314|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    398|        else {
 6150|    398|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    398|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    398|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    398|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 398, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    398|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    398|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    398|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    398|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    398|    }                                                  \
  |  | 3667|    398|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5504|    314|    {
 5505|    314|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5506|       |
 5507|    314|#if !SCN_DISABLE_LOCALE
 5508|    314|        if (specs.localized) {
  ------------------
  |  Branch (5508:13): [True: 12, False: 302]
  ------------------
 5509|     12|            return rd.read_localized(range, loc, value);
 5510|     12|        }
 5511|    302|#endif
 5512|       |
 5513|    302|        return rd.read_classic(range, value);
 5514|    314|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5517|    712|    {
 5518|    712|        SCN_GCC_COMPAT_PUSH
 5519|    712|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5520|       |
 5521|    712|        switch (specs.type) {
 5522|    186|            case detail::presentation_type::string:
  ------------------
  |  Branch (5522:13): [True: 186, False: 526]
  ------------------
 5523|    186|                return bool_reader_base::allow_text;
 5524|       |
 5525|     12|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5525:13): [True: 12, False: 700]
  ------------------
 5526|     20|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5526:13): [True: 8, False: 704]
  ------------------
 5527|     26|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5527:13): [True: 6, False: 706]
  ------------------
 5528|     38|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5528:13): [True: 12, False: 700]
  ------------------
 5529|     54|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5529:13): [True: 16, False: 696]
  ------------------
 5530|     58|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5530:13): [True: 4, False: 708]
  ------------------
 5531|     58|                return bool_reader_base::allow_numeric;
 5532|       |
 5533|    468|            default:
  ------------------
  |  Branch (5533:13): [True: 468, False: 244]
  ------------------
 5534|    468|                return bool_reader_base::allow_text |
 5535|    468|                       bool_reader_base::allow_numeric;
 5536|    712|        }
 5537|       |
 5538|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5539|    712|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5416|     12|    {
 5417|     12|        scan_error err{scan_error::invalid_scanned_value,
 5418|     12|                       "Failed to read boolean"};
 5419|       |
 5420|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5420:13): [True: 10, False: 2]
  ------------------
 5421|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5421:22): [True: 0, False: 10]
  ------------------
 5422|      0|                return *r;
 5423|      0|            }
 5424|     10|            else {
 5425|     10|                err = r.error();
 5426|     10|            }
 5427|     10|        }
 5428|       |
 5429|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (5429:13): [True: 10, False: 2]
  ------------------
 5430|     10|            auto stdloc = loc.get<std::locale>();
 5431|     10|            const auto& numpunct =
 5432|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5433|     10|            const auto truename = numpunct.truename();
 5434|     10|            const auto falsename = numpunct.falsename();
 5435|       |
 5436|     10|            if (auto r =
  ------------------
  |  Branch (5436:22): [True: 0, False: 10]
  ------------------
 5437|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5438|      0|                return *r;
 5439|      0|            }
 5440|     10|            else {
 5441|     10|                err = r.error();
 5442|     10|            }
 5443|     10|        }
 5444|       |
 5445|     12|        return unexpected(err);
 5446|     12|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5372|    248|    {
 5373|    248|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5373:18): [True: 0, False: 248]
  ------------------
 5374|      0|            value = false;
 5375|      0|            return *r;
 5376|      0|        }
 5377|    248|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5377:18): [True: 0, False: 248]
  ------------------
 5378|      0|            value = true;
 5379|      0|            return *r;
 5380|      0|        }
 5381|       |
 5382|    248|        return unexpected_scan_error(
 5383|    248|            scan_error::invalid_scanned_value,
 5384|    248|            "Failed to read numeric boolean value: No match");
 5385|    248|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2134|    496|{
 2135|    496|    auto it = read_code_unit(range);
 2136|    496|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    496|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 496]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|    496|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    496|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 496, False: 0]
  |  |  ------------------
  ------------------
 2141|    496|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|    496|        return unexpected(parse_error::error);
 2143|    496|    }
 2144|       |
 2145|      0|    return *it;
 2146|    496|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5456|     10|    {
 5457|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5458|     10|        const auto shorter = std::pair{
 5459|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5459:13): [True: 10, False: 0]
  ------------------
 5460|     10|        const auto longer = std::pair{
 5461|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5461:13): [True: 0, False: 10]
  ------------------
 5462|       |
 5463|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5463:18): [True: 0, False: 10]
  ------------------
 5464|      0|            value = shorter.second;
 5465|      0|            return *r;
 5466|      0|        }
 5467|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5467:18): [True: 0, False: 10]
  ------------------
 5468|      0|            value = longer.second;
 5469|      0|            return *r;
 5470|      0|        }
 5471|       |
 5472|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5473|     10|                                     "read_textual: No match");
 5474|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2167|     20|{
 2168|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2169|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2170|     10|                    .transform_error(make_eof_parse_error));
 2171|       |
 2172|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2173|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2174|     10|        return unexpected(parse_error::error);
 2175|     10|    }
 2176|      0|    return it;
 2177|     10|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1844|    576|{
 1845|    576|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    576|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    576|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|    576|    else {
 1856|    576|        auto it = range.begin();
 1857|    576|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 576]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  2.82k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 2.38k, False: 442]
  ------------------
 1862|  2.38k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 134, False: 2.24k]
  ------------------
 1863|    134|                return unexpected(eof_error::eof);
 1864|    134|            }
 1865|  2.38k|        }
 1866|       |
 1867|    442|        return it;
 1868|    576|    }
 1869|    576|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    576|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    576|    else {
 1115|    576|        return 0;
 1116|    576|    }
 1117|    576|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5343|    302|    {
 5344|    302|        scan_error err{scan_error::invalid_scanned_value,
 5345|    302|                       "Failed to read boolean"};
 5346|       |
 5347|    302|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5347:13): [True: 238, False: 64]
  ------------------
 5348|    238|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5348:22): [True: 0, False: 238]
  ------------------
 5349|      0|                return *r;
 5350|      0|            }
 5351|    238|            else {
 5352|    238|                err = r.error();
 5353|    238|            }
 5354|    238|        }
 5355|       |
 5356|    302|        if (m_options & allow_text) {
  ------------------
  |  Branch (5356:13): [True: 278, False: 24]
  ------------------
 5357|    278|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5357:22): [True: 0, False: 278]
  ------------------
 5358|      0|                return *r;
 5359|      0|            }
 5360|    278|            else {
 5361|    278|                err = r.error();
 5362|    278|            }
 5363|    278|        }
 5364|       |
 5365|    302|        return unexpected(err);
 5366|    302|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5390|    278|    {
 5391|    278|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5391:18): [True: 0, False: 278]
  ------------------
 5392|      0|            value = true;
 5393|      0|            return *r;
 5394|      0|        }
 5395|    278|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5395:18): [True: 0, False: 278]
  ------------------
 5396|      0|            value = false;
 5397|      0|            return *r;
 5398|      0|        }
 5399|       |
 5400|    278|        return unexpected_scan_error(
 5401|    278|            scan_error::invalid_scanned_value,
 5402|    278|            "Failed to read textual boolean value: No match");
 5403|    278|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2182|    556|{
 2183|    556|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    556|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    556|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    556|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    556|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 124, False: 432]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    124|    }                                                  \
  |  |  |  | 3667|    556|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    432|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2184|    432|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2185|    432|                    .transform_error(make_eof_parse_error));
 2186|       |
 2187|    432|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2188|    432|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2189|    432|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 432, False: 0]
  |  |  ------------------
  ------------------
 2190|    432|            return unexpected(parse_error::error);
 2191|    432|        }
 2192|      0|        return it;
 2193|       |    }
 2194|       |    else {
 2195|       |        auto range_it = range.begin();
 2196|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2197|       |            if (SCN_UNLIKELY(*range_it !=
 2198|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2199|       |                return unexpected(parse_error::error);
 2200|       |            }
 2201|       |        }
 2202|       |        return it;
 2203|       |    }
 2204|    432|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5504|    398|    {
 5505|    398|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5506|       |
 5507|    398|#if !SCN_DISABLE_LOCALE
 5508|    398|        if (specs.localized) {
  ------------------
  |  Branch (5508:13): [True: 20, False: 378]
  ------------------
 5509|     20|            return rd.read_localized(range, loc, value);
 5510|     20|        }
 5511|    378|#endif
 5512|       |
 5513|    378|        return rd.read_classic(range, value);
 5514|    398|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5416|     20|    {
 5417|     20|        scan_error err{scan_error::invalid_scanned_value,
 5418|     20|                       "Failed to read boolean"};
 5419|       |
 5420|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5420:13): [True: 16, False: 4]
  ------------------
 5421|     16|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5421:22): [True: 0, False: 16]
  ------------------
 5422|      0|                return *r;
 5423|      0|            }
 5424|     16|            else {
 5425|     16|                err = r.error();
 5426|     16|            }
 5427|     16|        }
 5428|       |
 5429|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5429:13): [True: 10, False: 10]
  ------------------
 5430|     10|            auto stdloc = loc.get<std::locale>();
 5431|     10|            const auto& numpunct =
 5432|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5433|     10|            const auto truename = numpunct.truename();
 5434|     10|            const auto falsename = numpunct.falsename();
 5435|       |
 5436|     10|            if (auto r =
  ------------------
  |  Branch (5436:22): [True: 0, False: 10]
  ------------------
 5437|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5438|      0|                return *r;
 5439|      0|            }
 5440|     10|            else {
 5441|     10|                err = r.error();
 5442|     10|            }
 5443|     10|        }
 5444|       |
 5445|     20|        return unexpected(err);
 5446|     20|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5456|     10|    {
 5457|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5458|     10|        const auto shorter = std::pair{
 5459|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5459:13): [True: 10, False: 0]
  ------------------
 5460|     10|        const auto longer = std::pair{
 5461|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5461:13): [True: 0, False: 10]
  ------------------
 5462|       |
 5463|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5463:18): [True: 0, False: 10]
  ------------------
 5464|      0|            value = shorter.second;
 5465|      0|            return *r;
 5466|      0|        }
 5467|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5467:18): [True: 0, False: 10]
  ------------------
 5468|      0|            value = longer.second;
 5469|      0|            return *r;
 5470|      0|        }
 5471|       |
 5472|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5473|     10|                                     "read_textual: No match");
 5474|     10|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2167|     20|{
 2168|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2169|     18|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2170|     18|                    .transform_error(make_eof_parse_error));
 2171|       |
 2172|     18|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2173|     18|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 2174|     18|        return unexpected(parse_error::error);
 2175|     18|    }
 2176|      0|    return it;
 2177|     18|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6181|  4.33k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  4.33k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  4.33k|            auto rd = make_reader<T, char_type>();
 6187|  4.33k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.80k, False: 530]
  |  |  ------------------
  ------------------
 6188|  3.80k|                return unexpected(e);
 6189|  3.80k|            }
 6190|       |
 6191|    530|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  4.33k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    530|    {
 6113|    530|        const bool need_skipped_width =
 6114|    530|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 178, False: 352]
  |  Branch (6114:33): [True: 268, False: 84]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    530|        auto it = rng.begin();
 6118|    530|        std::ptrdiff_t prefix_width = 0;
 6119|    530|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 268, False: 262]
  ------------------
 6120|    268|            auto max_width_view = take_width(rng, specs.precision);
 6121|    268|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    268|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    268|            it = prefix_result.first.base();
 6124|    268|            prefix_width = prefix_result.second;
 6125|    268|        }
 6126|    262|        else {
 6127|    262|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 262]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    262|            std::tie(it, prefix_width) = prefix_result;
 6129|    262|        }
 6130|    530|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    530|        std::ptrdiff_t value_width = 0;
 6134|    530|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 268, False: 262]
  ------------------
 6135|    268|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 262]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    262|            const auto initial_width = specs.precision - prefix_width;
 6143|    262|            auto max_width_view =
 6144|    262|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    262|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 230]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     32|    }                                                  \
  |  |  |  | 3667|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    230|            it = w_it.base();
 6147|    230|            value_width = initial_width - w_it.count();
 6148|    230|        }
 6149|    262|        else {
 6150|    262|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22, False: 240]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     22|    }                                                  \
  |  | 3667|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    240|                                             specs, value, loc));
 6152|       |
 6153|    240|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 174, False: 66]
  ------------------
 6154|    174|                value_width = calculate_text_width(
 6155|    174|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    174|                        .view());
 6157|    174|            }
 6158|    240|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    470|        std::ptrdiff_t postfix_width = 0;
 6162|    470|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 470, False: 0]
  ------------------
 6163|    470|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    470|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    470|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    470|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    470|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 470]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    470|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    470|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    470|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    470|                                 value_width));
 6167|    470|            std::tie(it, postfix_width) = postfix_result;
 6168|    470|        }
 6169|       |
 6170|    470|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    470|                                                 value_width, postfix_width);
 6172|    470|            !e) {
  ------------------
  |  Branch (6172:13): [True: 154, False: 316]
  ------------------
 6173|    154|            return unexpected(e);
 6174|    154|        }
 6175|       |
 6176|    316|        return it;
 6177|    470|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6181|  4.36k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  4.36k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  4.36k|            auto rd = make_reader<T, char_type>();
 6187|  4.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.81k, False: 550]
  |  |  ------------------
  ------------------
 6188|  3.81k|                return unexpected(e);
 6189|  3.81k|            }
 6190|       |
 6191|    550|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  4.36k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    550|    {
 6113|    550|        const bool need_skipped_width =
 6114|    550|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 184, False: 366]
  |  Branch (6114:33): [True: 272, False: 94]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    550|        auto it = rng.begin();
 6118|    550|        std::ptrdiff_t prefix_width = 0;
 6119|    550|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 274, False: 276]
  ------------------
 6120|    274|            auto max_width_view = take_width(rng, specs.precision);
 6121|    274|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    252|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    252|            it = prefix_result.first.base();
 6124|    252|            prefix_width = prefix_result.second;
 6125|    252|        }
 6126|    276|        else {
 6127|    276|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    276|            std::tie(it, prefix_width) = prefix_result;
 6129|    276|        }
 6130|    528|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    528|        std::ptrdiff_t value_width = 0;
 6134|    528|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 252, False: 276]
  ------------------
 6135|    252|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 8, False: 244]
  ------------------
 6136|      8|                return unexpected_scan_error(
 6137|      8|                    scan_error::invalid_scanned_value,
 6138|      8|                    "Too many fill characters before value, "
 6139|      8|                    "precision exceeded before reading value");
 6140|      8|            }
 6141|       |
 6142|    244|            const auto initial_width = specs.precision - prefix_width;
 6143|    244|            auto max_width_view =
 6144|    244|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    244|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 244, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    244|    }                                                  \
  |  |  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    276|        else {
 6150|    276|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 276, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    276|    }                                                  \
  |  | 3667|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  4.33k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  4.33k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  4.33k|            auto rd = make_reader<T, char_type>();
 6187|  4.33k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 4.20k]
  |  |  ------------------
  ------------------
 6188|    124|                return unexpected(e);
 6189|    124|            }
 6190|       |
 6191|  4.20k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  4.33k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|  4.20k|    {
 6113|  4.20k|        const bool need_skipped_width =
 6114|  4.20k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 250, False: 3.95k]
  |  Branch (6114:33): [True: 536, False: 3.42k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  4.20k|        auto it = rng.begin();
 6118|  4.20k|        std::ptrdiff_t prefix_width = 0;
 6119|  4.20k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 544, False: 3.66k]
  ------------------
 6120|    544|            auto max_width_view = take_width(rng, specs.precision);
 6121|    544|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    544|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    544|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    544|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    544|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 524]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|    544|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    524|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    524|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    524|            it = prefix_result.first.base();
 6124|    524|            prefix_width = prefix_result.second;
 6125|    524|        }
 6126|  3.66k|        else {
 6127|  3.66k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  3.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  3.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  3.66k|            std::tie(it, prefix_width) = prefix_result;
 6129|  3.66k|        }
 6130|  4.18k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  4.18k|        std::ptrdiff_t value_width = 0;
 6134|  4.18k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 524, False: 3.66k]
  ------------------
 6135|    524|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 518]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    518|            const auto initial_width = specs.precision - prefix_width;
 6143|    518|            auto max_width_view =
 6144|    518|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    518|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    518|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    518|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    518|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    518|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 170, False: 348]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    170|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    170|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    170|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    170|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    170|    }                                                  \
  |  |  |  | 3667|    518|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    348|            it = w_it.base();
 6147|    348|            value_width = initial_width - w_it.count();
 6148|    348|        }
 6149|  3.66k|        else {
 6150|  3.66k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  3.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  3.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  3.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.48k, False: 1.17k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  2.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  2.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  2.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  2.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  2.48k|    }                                                  \
  |  | 3667|  3.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  3.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  1.17k|                                             specs, value, loc));
 6152|       |
 6153|  1.17k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 208, False: 970]
  ------------------
 6154|    208|                value_width = calculate_text_width(
 6155|    208|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    208|                        .view());
 6157|    208|            }
 6158|  1.17k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  1.52k|        std::ptrdiff_t postfix_width = 0;
 6162|  1.52k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 1.15k, False: 374]
  ------------------
 6163|  1.15k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  1.15k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  1.15k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  1.15k|                                 value_width));
 6167|  1.15k|            std::tie(it, postfix_width) = postfix_result;
 6168|  1.15k|        }
 6169|       |
 6170|  1.52k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  1.52k|                                                 value_width, postfix_width);
 6172|  1.52k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 92, False: 1.43k]
  ------------------
 6173|     92|            return unexpected(e);
 6174|     92|        }
 6175|       |
 6176|  1.43k|        return it;
 6177|  1.52k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  4.33k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  4.33k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  4.33k|            auto rd = make_reader<T, char_type>();
 6187|  4.33k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 4.20k]
  |  |  ------------------
  ------------------
 6188|    124|                return unexpected(e);
 6189|    124|            }
 6190|       |
 6191|  4.20k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  4.33k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  4.20k|    {
 6113|  4.20k|        const bool need_skipped_width =
 6114|  4.20k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 250, False: 3.95k]
  |  Branch (6114:33): [True: 536, False: 3.42k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  4.20k|        auto it = rng.begin();
 6118|  4.20k|        std::ptrdiff_t prefix_width = 0;
 6119|  4.20k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 544, False: 3.66k]
  ------------------
 6120|    544|            auto max_width_view = take_width(rng, specs.precision);
 6121|    544|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    544|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    544|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    544|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    544|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 524]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|    544|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    524|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    524|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    524|            it = prefix_result.first.base();
 6124|    524|            prefix_width = prefix_result.second;
 6125|    524|        }
 6126|  3.66k|        else {
 6127|  3.66k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  3.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  3.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  3.66k|            std::tie(it, prefix_width) = prefix_result;
 6129|  3.66k|        }
 6130|  4.18k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  4.18k|        std::ptrdiff_t value_width = 0;
 6134|  4.18k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 524, False: 3.66k]
  ------------------
 6135|    524|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 518]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    518|            const auto initial_width = specs.precision - prefix_width;
 6143|    518|            auto max_width_view =
 6144|    518|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    518|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    518|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    518|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    518|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    518|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 170, False: 348]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    170|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    170|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    170|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    170|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    170|    }                                                  \
  |  |  |  | 3667|    518|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    348|            it = w_it.base();
 6147|    348|            value_width = initial_width - w_it.count();
 6148|    348|        }
 6149|  3.66k|        else {
 6150|  3.66k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  3.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  3.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  3.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.48k, False: 1.17k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  2.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  2.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  2.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  2.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  2.48k|    }                                                  \
  |  | 3667|  3.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  3.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  1.17k|                                             specs, value, loc));
 6152|       |
 6153|  1.17k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 208, False: 970]
  ------------------
 6154|    208|                value_width = calculate_text_width(
 6155|    208|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    208|                        .view());
 6157|    208|            }
 6158|  1.17k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  1.52k|        std::ptrdiff_t postfix_width = 0;
 6162|  1.52k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 1.15k, False: 374]
  ------------------
 6163|  1.15k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  1.15k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  1.15k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  1.15k|                                 value_width));
 6167|  1.15k|            std::tie(it, postfix_width) = postfix_result;
 6168|  1.15k|        }
 6169|       |
 6170|  1.52k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  1.52k|                                                 value_width, postfix_width);
 6172|  1.52k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 92, False: 1.43k]
  ------------------
 6173|     92|            return unexpected(e);
 6174|     92|        }
 6175|       |
 6176|  1.43k|        return it;
 6177|  1.52k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  4.33k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  4.33k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  4.33k|            auto rd = make_reader<T, char_type>();
 6187|  4.33k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 4.20k]
  |  |  ------------------
  ------------------
 6188|    124|                return unexpected(e);
 6189|    124|            }
 6190|       |
 6191|  4.20k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  4.33k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  4.20k|    {
 6113|  4.20k|        const bool need_skipped_width =
 6114|  4.20k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 250, False: 3.95k]
  |  Branch (6114:33): [True: 536, False: 3.42k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  4.20k|        auto it = rng.begin();
 6118|  4.20k|        std::ptrdiff_t prefix_width = 0;
 6119|  4.20k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 544, False: 3.66k]
  ------------------
 6120|    544|            auto max_width_view = take_width(rng, specs.precision);
 6121|    544|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    544|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    544|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    544|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    544|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 524]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|    544|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    524|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    524|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    524|            it = prefix_result.first.base();
 6124|    524|            prefix_width = prefix_result.second;
 6125|    524|        }
 6126|  3.66k|        else {
 6127|  3.66k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  3.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  3.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  3.66k|            std::tie(it, prefix_width) = prefix_result;
 6129|  3.66k|        }
 6130|  4.18k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  4.18k|        std::ptrdiff_t value_width = 0;
 6134|  4.18k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 524, False: 3.66k]
  ------------------
 6135|    524|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 518]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    518|            const auto initial_width = specs.precision - prefix_width;
 6143|    518|            auto max_width_view =
 6144|    518|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    518|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    518|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    518|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    518|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    518|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 170, False: 348]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    170|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    170|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    170|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    170|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    170|    }                                                  \
  |  |  |  | 3667|    518|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    348|            it = w_it.base();
 6147|    348|            value_width = initial_width - w_it.count();
 6148|    348|        }
 6149|  3.66k|        else {
 6150|  3.66k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  3.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  3.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  3.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.48k, False: 1.17k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  2.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  2.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  2.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  2.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  2.48k|    }                                                  \
  |  | 3667|  3.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  3.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  1.17k|                                             specs, value, loc));
 6152|       |
 6153|  1.17k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 208, False: 970]
  ------------------
 6154|    208|                value_width = calculate_text_width(
 6155|    208|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    208|                        .view());
 6157|    208|            }
 6158|  1.17k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  1.52k|        std::ptrdiff_t postfix_width = 0;
 6162|  1.52k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 1.15k, False: 374]
  ------------------
 6163|  1.15k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  1.15k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  1.15k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  1.15k|                                 value_width));
 6167|  1.15k|            std::tie(it, postfix_width) = postfix_result;
 6168|  1.15k|        }
 6169|       |
 6170|  1.52k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  1.52k|                                                 value_width, postfix_width);
 6172|  1.52k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 92, False: 1.43k]
  ------------------
 6173|     92|            return unexpected(e);
 6174|     92|        }
 6175|       |
 6176|  1.43k|        return it;
 6177|  1.52k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  4.15k|{
 5784|  4.15k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.15k]
  |  |  ------------------
  ------------------
 5785|      0|        return unexpected(e);
 5786|      0|    }
 5787|       |
 5788|  4.15k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 462, False: 3.69k]
  ------------------
 5789|    462|        return range.begin();
 5790|    462|    }
 5791|       |
 5792|  3.69k|    return skip_classic_whitespace(range);
 5793|  4.15k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5859|    462|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    462|                          basic_contiguous_scan_context<char_type>>) {
 5864|    462|            auto rd = make_reader<T, char_type>();
 5865|    462|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    462|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    462|    {
 5852|    462|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    462|                        .transform_error(make_eof_scan_error));
 5854|    462|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    462|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|    462|    {
 3517|    462|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    462|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|    462|        return read_default_with_base(range, value, 10);
 3519|    462|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|    462|    {
 3481|    462|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|    462|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|    462|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 462]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|    924|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|    924|                parse_integer_digits_without_thsep(
 3500|    924|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|    924|                    prefix_result.parsed_base));
 3502|       |
 3503|    924|        auto buf = make_contiguous_buffer(
 3504|    924|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|    924|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 462, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    462|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    462|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    462|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    462|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    462|    }                                                  \
  |  |  |  | 3667|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|      0|                                    prefix_result.parsed_base));
 3508|       |
 3509|      0|        return ranges::next(prefix_result.iterator,
 3510|      0|                            ranges::distance(buf.view().begin(), result_it));
 3511|    924|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5859|    462|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    462|                          basic_contiguous_scan_context<char_type>>) {
 5864|    462|            auto rd = make_reader<T, char_type>();
 5865|    462|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    462|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    462|    {
 5852|    462|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    462|                        .transform_error(make_eof_scan_error));
 5854|    462|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    462|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|    462|    {
 3517|    462|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    462|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|    462|        return read_default_with_base(range, value, 10);
 3519|    462|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|    462|    {
 3481|    462|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|    462|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|    462|        if constexpr (!std::is_signed_v<T>) {
 3485|    462|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 0, False: 462]
  ------------------
 3486|      0|                return unexpected_scan_error(
 3487|      0|                    scan_error::invalid_scanned_value,
 3488|      0|                    "Unexpected '-' sign when parsing an "
 3489|      0|                    "unsigned value");
 3490|      0|            }
 3491|    462|        }
 3492|       |
 3493|    462|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 462]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|    924|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|    924|                parse_integer_digits_without_thsep(
 3500|    924|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|    924|                    prefix_result.parsed_base));
 3502|       |
 3503|    924|        auto buf = make_contiguous_buffer(
 3504|    924|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|    924|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 462, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    462|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    462|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    462|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    462|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    462|    }                                                  \
  |  |  |  | 3667|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|      0|                                    prefix_result.parsed_base));
 3508|       |
 3509|      0|        return ranges::next(prefix_result.iterator,
 3510|      0|                            ranges::distance(buf.view().begin(), result_it));
 3511|    924|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5859|    462|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    462|                          basic_contiguous_scan_context<char_type>>) {
 5864|    462|            auto rd = make_reader<T, char_type>();
 5865|    462|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    462|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5851|    462|    {
 5852|    462|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    462|                        .transform_error(make_eof_scan_error));
 5854|    462|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    462|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5736|    838|    {
 5737|    838|        return true;
 5738|    838|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5753|    764|    {
 5754|    764|        detail::format_specs specs{};
 5755|    764|        specs.type = detail::presentation_type::int_hex;
 5756|       |
 5757|    764|        std::uintptr_t intvalue{};
 5758|    764|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    764|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    764|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    764|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    764|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 764, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    764|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    764|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    764|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    764|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    764|    }                                                  \
  |  |  |  | 3667|    764|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5759|      0|                                                                intvalue, loc));
 5760|      0|        value = reinterpret_cast<void*>(intvalue);
 5761|      0|        return result;
 5762|    764|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5859|    462|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    462|                          basic_contiguous_scan_context<char_type>>) {
 5864|    462|            auto rd = make_reader<T, char_type>();
 5865|    462|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    462|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    462|    {
 5852|    462|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    462|                        .transform_error(make_eof_scan_error));
 5854|    462|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    462|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3023|    980|    {
 3024|    980|        return true;
 3025|    980|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5492|    462|    {
 5493|    462|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    462|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5494|       |
 5495|    462|        return bool_reader<CharT>{}.read_classic(range, value);
 5496|    462|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5343|    826|    {
 5344|    826|        scan_error err{scan_error::invalid_scanned_value,
 5345|    826|                       "Failed to read boolean"};
 5346|       |
 5347|    826|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5347:13): [True: 780, False: 46]
  ------------------
 5348|    780|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5348:22): [True: 0, False: 780]
  ------------------
 5349|      0|                return *r;
 5350|      0|            }
 5351|    780|            else {
 5352|    780|                err = r.error();
 5353|    780|            }
 5354|    780|        }
 5355|       |
 5356|    826|        if (m_options & allow_text) {
  ------------------
  |  Branch (5356:13): [True: 806, False: 20]
  ------------------
 5357|    806|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5357:22): [True: 0, False: 806]
  ------------------
 5358|      0|                return *r;
 5359|      0|            }
 5360|    806|            else {
 5361|    806|                err = r.error();
 5362|    806|            }
 5363|    806|        }
 5364|       |
 5365|    826|        return unexpected(err);
 5366|    826|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5372|    798|    {
 5373|    798|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5373:18): [True: 0, False: 798]
  ------------------
 5374|      0|            value = false;
 5375|      0|            return *r;
 5376|      0|        }
 5377|    798|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5377:18): [True: 0, False: 798]
  ------------------
 5378|      0|            value = true;
 5379|      0|            return *r;
 5380|      0|        }
 5381|       |
 5382|    798|        return unexpected_scan_error(
 5383|    798|            scan_error::invalid_scanned_value,
 5384|    798|            "Failed to read numeric boolean value: No match");
 5385|    798|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5390|    806|    {
 5391|    806|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5391:18): [True: 0, False: 806]
  ------------------
 5392|      0|            value = true;
 5393|      0|            return *r;
 5394|      0|        }
 5395|    806|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5395:18): [True: 0, False: 806]
  ------------------
 5396|      0|            value = false;
 5397|      0|            return *r;
 5398|      0|        }
 5399|       |
 5400|    806|        return unexpected_scan_error(
 5401|    806|            scan_error::invalid_scanned_value,
 5402|    806|            "Failed to read textual boolean value: No match");
 5403|    806|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2182|  1.61k|{
 2183|  1.61k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 128, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    128|    }                                                  \
  |  |  |  | 3667|  1.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2184|  1.48k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2185|  1.48k|                    .transform_error(make_eof_parse_error));
 2186|       |
 2187|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2188|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2189|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2190|       |            return unexpected(parse_error::error);
 2191|       |        }
 2192|       |        return it;
 2193|       |    }
 2194|  1.48k|    else {
 2195|  1.48k|        auto range_it = range.begin();
 2196|  1.48k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2196:28): [True: 1.48k, False: 0]
  ------------------
 2197|  1.48k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 0]
  |  |  ------------------
  ------------------
 2198|  1.48k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2199|  1.48k|                return unexpected(parse_error::error);
 2200|  1.48k|            }
 2201|  1.48k|        }
 2202|      0|        return it;
 2203|  1.48k|    }
 2204|  1.48k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5859|    462|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    462|                          basic_contiguous_scan_context<char_type>>) {
 5864|    462|            auto rd = make_reader<T, char_type>();
 5865|    462|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    462|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    462|    {
 5852|    462|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    462|                        .transform_error(make_eof_scan_error));
 5854|    462|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    462|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3646|    462|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5859|    462|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    462|                          basic_contiguous_scan_context<char_type>>) {
 5864|    462|            auto rd = make_reader<T, char_type>();
 5865|    462|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    462|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    462|    {
 5852|    462|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    462|                        .transform_error(make_eof_scan_error));
 5854|    462|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    462|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|    462|    {
 4141|    462|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    462|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|    462|        float_reader<CharT> rd{};
 4144|    462|        return read_impl<Range>(
 4145|    462|            range, rd,
 4146|    462|            [](float_reader<CharT>& r, auto&&... args) {
 4147|    462|                return r.read_source(SCN_FWD(args)...);
 4148|    462|            },
 4149|    462|            value);
 4150|    462|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    462|        : m_fptr([](storage fn,
  743|    462|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    462|              cvref<T> obj = *get<T>(fn);
  745|    462|              if constexpr (std::is_void_v<R>) {
  746|    462|                  obj(static_cast<decltype(args)>(args)...);
  747|    462|              }
  748|    462|              else {
  749|    462|                  return obj(static_cast<decltype(args)>(args)...);
  750|    462|              }
  751|    462|          }),
  752|    462|          m_storage(std::addressof(f))
  753|    462|    {
  754|    462|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    462|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    462|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    462|              else {
  749|    462|                  return obj(static_cast<decltype(args)>(args)...);
  750|    462|              }
  751|    462|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    462|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    462|        else if constexpr (std::is_object_v<T>) {
  688|    462|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    462|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|    462|            [](float_reader<CharT>& r, auto&&... args) {
 4147|    462|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|    462|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    462|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    462|        {
  662|    462|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|    462|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    462|                          basic_contiguous_scan_context<char_type>>) {
 5864|    462|            auto rd = make_reader<T, char_type>();
 5865|    462|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    462|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|    462|    {
 5852|    462|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    462|                        .transform_error(make_eof_scan_error));
 5854|    462|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    462|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|    462|    {
 5255|    462|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    462|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    462|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    462|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|    462|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    462|                          basic_contiguous_scan_context<char_type>>) {
 5864|    462|            auto rd = make_reader<T, char_type>();
 5865|    462|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    462|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|    462|    {
 5852|    462|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    462|                        .transform_error(make_eof_scan_error));
 5854|    462|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    462|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|    462|    {
 5255|    462|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    462|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    462|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    462|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|    462|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    462|                          basic_contiguous_scan_context<char_type>>) {
 5864|    462|            auto rd = make_reader<T, char_type>();
 5865|    462|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    462|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|    462|    {
 5852|    462|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    462|                        .transform_error(make_eof_scan_error));
 5854|    462|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    462|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|    462|    {
 5255|    462|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    462|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    462|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    462|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   152k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   152k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   152k|          m_current(m_range.begin())
 2867|   152k|    {
 2868|   152k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|   312M|    {
 2872|   312M|        return m_current;
 2873|   312M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|   625M|    {
 2877|   625M|        return m_range.end();
 2878|   625M|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1208|   312M|{
 1209|       |    // TODO: optimize
 1210|   312M|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   312M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   312M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1211|   312M|    auto res = get_next_code_point(str);
 1212|   312M|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1213|   312M|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|   312M|    {
 2892|   312M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   312M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   312M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   312M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   312M|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 312M]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   312M|        }
 2898|   312M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   312M|    static_cast<    \
  |  |  929|   312M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   312M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|  26.2k|    {
 2882|  26.2k|        return ranges::subrange{begin(), end()};
 2883|  26.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6025|  1.14k|    {
 6026|  1.14k|        const bool need_skipped_width =
 6027|  1.14k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 34, False: 1.11k]
  |  Branch (6027:33): [True: 1.11k, False: 0]
  ------------------
 6028|  1.14k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  1.14k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 36, False: 1.11k]
  ------------------
 6032|  1.14k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 182, False: 930]
  ------------------
 6033|    218|            return skip_fill(rng, specs.precision, specs.fill,
 6034|    218|                             need_skipped_width);
 6035|    218|        }
 6036|    930|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 886, False: 44]
  |  Branch (6036:56): [True: 570, False: 316]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|    570|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 570, False: 0]
  ------------------
 6040|    570|                auto max_width_view = take_width(rng, specs.precision);
 6041|    570|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|    570|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    570|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    570|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 570]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    570|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    570|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|    570|                                  .transform_error(make_eof_scan_error));
 6043|    570|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|    570|            }
 6045|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|      0|                            make_eof_scan_error));
 6047|       |
 6048|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 0]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|      0|            return result_type{it, 0};
 6056|      0|        }
 6057|       |
 6058|    360|        return result_type{rng.begin(), 0};
 6059|    930|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5939|    218|{
 5940|    218|    using char_type = detail::char_t<Range>;
 5941|    218|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5942|       |
 5943|    218|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5943:9): [True: 218, False: 0]
  ------------------
 5944|    218|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5945|    218|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5946|       |
 5947|    218|        if (max_width == 0) {
  ------------------
  |  Branch (5947:13): [True: 0, False: 218]
  ------------------
 5948|      0|            auto it = read_while_code_unit(range, pred);
 5949|       |
 5950|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5950:17): [True: 0, False: 0]
  ------------------
 5951|      0|                auto prefix_width =
 5952|      0|                    static_cast<std::ptrdiff_t>(
 5953|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5954|      0|                    ranges::distance(range.begin(), it);
 5955|      0|                return result_type{it, prefix_width};
 5956|      0|            }
 5957|      0|            return result_type{it, 0};
 5958|      0|        }
 5959|       |
 5960|    218|        auto max_width_view = take_width(range, max_width);
 5961|    218|        auto w_it = read_while_code_unit(max_width_view, pred);
 5962|       |
 5963|    218|        if (want_skipped_width) {
  ------------------
  |  Branch (5963:13): [True: 218, False: 0]
  ------------------
 5964|    218|            return result_type{w_it.base(), max_width - w_it.count()};
 5965|    218|        }
 5966|      0|        return result_type{w_it.base(), 0};
 5967|    218|    }
 5968|       |
 5969|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5970|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5970:9): [True: 0, False: 0]
  ------------------
 5971|      0|        auto it = read_while_code_units(range, fill_chars);
 5972|       |
 5973|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5973:13): [True: 0, False: 0]
  ------------------
 5974|      0|            auto prefix_width =
 5975|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5976|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5977|      0|            return result_type{it, prefix_width};
 5978|      0|        }
 5979|      0|        return result_type{it, 0};
 5980|      0|    }
 5981|       |
 5982|      0|    auto max_width_view = take_width(range, max_width);
 5983|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5984|       |
 5985|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5985:9): [True: 0, False: 0]
  ------------------
 5986|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5987|      0|    }
 5988|      0|    return result_type{w_it.base(), 0};
 5989|      0|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    218|        : m_fptr([](storage fn,
  743|    218|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    218|              cvref<T> obj = *get<T>(fn);
  745|    218|              if constexpr (std::is_void_v<R>) {
  746|    218|                  obj(static_cast<decltype(args)>(args)...);
  747|    218|              }
  748|    218|              else {
  749|    218|                  return obj(static_cast<decltype(args)>(args)...);
  750|    218|              }
  751|    218|          }),
  752|    218|          m_storage(std::addressof(f))
  753|    218|    {
  754|    218|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    264|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    264|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    264|              else {
  749|    264|                  return obj(static_cast<decltype(args)>(args)...);
  750|    264|              }
  751|    264|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    264|    {
  684|    264|        if constexpr (std::is_const_v<T>) {
  685|    264|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    264|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5945|    264|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    218|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    218|        {
  667|    218|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|    218|{
 1964|    218|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    218|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|    218|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    218|    else {
 1949|    218|        auto first = range.begin();
 1950|    298|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 264, False: 34]
  ------------------
 1951|    264|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 184, False: 80]
  ------------------
 1952|    184|                return first;
 1953|    184|            }
 1954|    264|        }
 1955|     34|        return first;
 1956|    218|    }
 1957|    218|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2798|  1.35k|    {
 2799|  1.35k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2800|  1.35k|                                      m_count};
 2801|  1.35k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2705|  4.72k|    {
 2706|  4.72k|        return view;
 2707|  4.72k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2369|  1.35k|        : m_current(x), m_end(s), m_count(n)
 2370|  1.35k|    {
 2371|  1.35k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|    868|        {
 2770|    868|            return !(y == x);
 2771|    868|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2758|  2.00k|        {
 2759|  2.00k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2759:21): [True: 34, False: 1.97k]
  |  Branch (2759:39): [True: 34, False: 0]
  ------------------
 2760|  2.00k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2760:20): [True: 0, False: 1.97k]
  ------------------
 2761|  2.00k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2409|     34|    {
 2410|     34|        return m_multibyte_left;
 2411|     34|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2804|  2.00k|    {
 2805|  2.00k|        return sentinel<true>{m_base.get().end()};
 2806|  2.00k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2739|  2.00k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  2.00k|    static_cast<    \
  |  |  929|  2.00k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2414|  1.40k|    {
 2415|  1.40k|        return *m_current;
 2416|  1.40k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2423|    650|    {
 2424|    650|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|    650|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    650|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2425|    650|        _increment_current();
 2426|    650|        return *this;
 2427|    650|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2656|    650|    {
 2657|    650|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2657:13): [True: 650, False: 0]
  ------------------
 2658|    650|            auto cplen = _get_cp_length_at_current();
 2659|    650|            m_multibyte_left = cplen - 1;
 2660|    650|            m_count -= _get_width_at_current_cp_start(cplen);
 2661|    650|        }
 2662|      0|        else {
 2663|      0|            --m_multibyte_left;
 2664|      0|        }
 2665|       |
 2666|    650|        ++m_current;
 2667|    650|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2627|    650|    {
 2628|    650|        return static_cast<difference_type>(
 2629|    650|            detail::code_point_length_by_starting_code_unit(*m_current));
 2630|    650|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2633|    650|    {
 2634|    650|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|    650|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 650]
  |  |  ------------------
  ------------------
 2635|      0|            return 0;
 2636|      0|        }
 2637|       |
 2638|    650|        if (cplen == 1) {
  ------------------
  |  Branch (2638:13): [True: 650, False: 0]
  ------------------
 2639|    650|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|    650|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    650|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2640|    650|            auto cp = static_cast<char32_t>(*m_current);
 2641|    650|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2642|    650|        }
 2643|       |
 2644|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2645|      0|                                           cplen);
 2646|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2647|      0|            return 0;
 2648|      0|        }
 2649|       |
 2650|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2651|      0|        return static_cast<difference_type>(
 2652|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2653|      0|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2820|    788|    {
 2821|    788|        return take_width_view{r, n};
 2822|    788|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2788|    788|        : m_base(base), m_count(count)
 2789|    788|    {
 2790|    788|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2702|    788|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|    570|{
 2940|    570|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 570, False: 0]
  ------------------
 2941|    570|        auto it = read_while_classic_space(range);
 2942|    570|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|    570|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 570]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|    570|        return it;
 2948|    570|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|    570|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|    570|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|    570|    else {
 2114|    570|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|    570|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|    570|            return detail::is_cp_space(cp);
 2127|    570|        });
 2128|    570|    }
 2129|    570|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|    570|{
 2070|    570|    return read_until_code_point(range, std::not_fn(pred));
 2071|    570|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|    570|{
 2049|    570|    auto it = range.begin();
 2050|    570|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 570, False: 0]
  ------------------
 2051|    570|        const auto val =
 2052|    570|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|    570|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|    570|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 570, False: 0]
  |  |  ------------------
  ------------------
 2054|    570|            const auto cp = detail::decode_code_point_exhaustive(
 2055|    570|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|    570|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 570, False: 0]
  ------------------
 2057|    570|                return it;
 2058|    570|            }
 2059|    570|        }
 2060|      0|        it = val.iterator;
 2061|      0|    }
 2062|       |
 2063|      0|    return it;
 2064|    570|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1886|    570|{
 1887|    570|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|    570|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    570|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|    570|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|    570|    auto it = range.begin();
 1891|    570|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|    570|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 570]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|    570|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 570, False: 0]
  ------------------
 1900|    570|        ++it;
 1901|    570|        return {it, string_type(1, *range.begin())};
 1902|    570|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|    570|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  1.14k|{
  944|  1.14k|    return is_range_eof(r.begin(), r.end());
  945|  1.14k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  1.14k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.14k|    {
  937|  1.14k|        return begin == end;
  938|  1.14k|    }
  939|  1.14k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1877|    570|    {
 1878|    570|        return !codepoint.empty();
 1879|    570|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|    570|        : m_fptr([](storage fn,
  743|    570|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    570|              cvref<T> obj = *get<T>(fn);
  745|    570|              if constexpr (std::is_void_v<R>) {
  746|    570|                  obj(static_cast<decltype(args)>(args)...);
  747|    570|              }
  748|    570|              else {
  749|    570|                  return obj(static_cast<decltype(args)>(args)...);
  750|    570|              }
  751|    570|          }),
  752|    570|          m_storage(std::addressof(f))
  753|    570|    {
  754|    570|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|    570|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    570|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    570|              else {
  749|    570|                  return obj(static_cast<decltype(args)>(args)...);
  750|    570|              }
  751|    570|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|    570|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    570|        else if constexpr (std::is_object_v<T>) {
  688|    570|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    570|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|    570|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|    570|            return detail::is_cp_space(cp);
 2127|    570|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    570|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    570|        {
  662|    570|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|    570|{
  950|    570|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 570]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|    570|    return eof_error::good;
  954|    570|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2401|  2.76k|    {
 2402|  2.76k|        return m_current;
 2403|  2.76k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2405|  2.79k|    {
 2406|  2.79k|        return m_count;
 2407|  2.79k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|  7.94k|    {
 6026|  7.94k|        const bool need_skipped_width =
 6027|  7.94k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 3.32k, False: 4.61k]
  |  Branch (6027:33): [True: 0, False: 4.61k]
  ------------------
 6028|  7.94k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  7.94k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 54, False: 7.88k]
  ------------------
 6032|  7.94k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 266, False: 7.62k]
  ------------------
 6033|    320|            return skip_fill(rng, specs.precision, specs.fill,
 6034|    320|                             need_skipped_width);
 6035|    320|        }
 6036|  7.62k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 7.34k, False: 274]
  |  Branch (6036:56): [True: 2.29k, False: 5.05k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  2.29k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 2.29k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  4.58k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  2.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  4.58k|                            make_eof_scan_error));
 6047|       |
 6048|  4.58k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 1.83k, False: 460]
  ------------------
 6049|  1.83k|                return result_type{
 6050|  1.83k|                    it,
 6051|  1.83k|                    calculate_text_width(make_contiguous_buffer(
 6052|  1.83k|                                             ranges::subrange{rng.begin(), it})
 6053|  1.83k|                                             .view())};
 6054|  1.83k|            }
 6055|    460|            return result_type{it, 0};
 6056|  4.58k|        }
 6057|       |
 6058|  5.33k|        return result_type{rng.begin(), 0};
 6059|  7.62k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  1.77k|    {
 6068|  1.77k|        const bool need_skipped_width =
 6069|  1.77k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 522, False: 1.25k]
  |  Branch (6069:33): [True: 362, False: 888]
  ------------------
 6070|  1.77k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  1.77k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 80, False: 1.69k]
  ------------------
 6073|  1.77k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 148, False: 1.54k]
  ------------------
 6074|    228|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 66, False: 162]
  ------------------
 6075|    228|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 44, False: 22]
  ------------------
 6076|     44|                return result_type{rng.begin(), 0};
 6077|     44|            }
 6078|    184|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|    184|                             specs.fill, need_skipped_width);
 6080|    228|        }
 6081|  1.54k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 1.52k, False: 18]
  ------------------
 6082|  1.54k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 1.32k, False: 198]
  ------------------
 6083|  1.54k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 372, False: 956]
  |  Branch (6083:35): [True: 356, False: 16]
  ------------------
 6084|  1.32k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 260, False: 712]
  ------------------
 6085|    972|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 174, False: 86]
  ------------------
 6086|    530|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 174, False: 356]
  ------------------
 6087|    174|                const auto initial_width =
 6088|    174|                    specs.precision - prefix_width - value_width;
 6089|    174|                auto max_width_view = take_width(rng, initial_width);
 6090|    174|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|    174|                                  .transform_error(make_eof_scan_error));
 6092|    174|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|    174|            }
 6094|    712|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|    356|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 356]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|    712|                            make_eof_scan_error));
 6096|       |
 6097|    712|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 356, False: 0]
  ------------------
 6098|    356|                return result_type{
 6099|    356|                    it,
 6100|    356|                    calculate_text_width(make_contiguous_buffer(
 6101|    356|                                             ranges::subrange{rng.begin(), it})
 6102|    356|                                             .view())};
 6103|    356|            }
 6104|      0|            return result_type{it, 0};
 6105|    712|        }
 6106|  1.01k|        return result_type{rng.begin(), 0};
 6107|  1.54k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6181|  2.28k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  2.28k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  2.28k|            auto rd = make_reader<T, char_type>();
 6187|  2.28k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.84k, False: 444]
  |  |  ------------------
  ------------------
 6188|  1.84k|                return unexpected(e);
 6189|  1.84k|            }
 6190|       |
 6191|    444|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  2.28k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    444|    {
 6113|    444|        const bool need_skipped_width =
 6114|    444|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 238, False: 206]
  |  Branch (6114:33): [True: 108, False: 98]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    444|        auto it = rng.begin();
 6118|    444|        std::ptrdiff_t prefix_width = 0;
 6119|    444|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 110, False: 334]
  ------------------
 6120|    110|            auto max_width_view = take_width(rng, specs.precision);
 6121|    110|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    110|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    110|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    110|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 110]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    110|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    110|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    110|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    110|            it = prefix_result.first.base();
 6124|    110|            prefix_width = prefix_result.second;
 6125|    110|        }
 6126|    334|        else {
 6127|    334|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 334]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    334|            std::tie(it, prefix_width) = prefix_result;
 6129|    334|        }
 6130|    444|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    444|        std::ptrdiff_t value_width = 0;
 6134|    444|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 110, False: 334]
  ------------------
 6135|    110|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 2, False: 108]
  ------------------
 6136|      2|                return unexpected_scan_error(
 6137|      2|                    scan_error::invalid_scanned_value,
 6138|      2|                    "Too many fill characters before value, "
 6139|      2|                    "precision exceeded before reading value");
 6140|      2|            }
 6141|       |
 6142|    108|            const auto initial_width = specs.precision - prefix_width;
 6143|    108|            auto max_width_view =
 6144|    108|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    108|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    108|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    108|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    108|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 108, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    108|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    108|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    108|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    108|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    108|    }                                                  \
  |  |  |  | 3667|    108|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    334|        else {
 6150|    334|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 334, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    334|    }                                                  \
  |  | 3667|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6181|  2.28k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  2.28k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  2.28k|            auto rd = make_reader<T, char_type>();
 6187|  2.28k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.84k, False: 444]
  |  |  ------------------
  ------------------
 6188|  1.84k|                return unexpected(e);
 6189|  1.84k|            }
 6190|       |
 6191|    444|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  2.28k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    444|    {
 6113|    444|        const bool need_skipped_width =
 6114|    444|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 238, False: 206]
  |  Branch (6114:33): [True: 108, False: 98]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    444|        auto it = rng.begin();
 6118|    444|        std::ptrdiff_t prefix_width = 0;
 6119|    444|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 110, False: 334]
  ------------------
 6120|    110|            auto max_width_view = take_width(rng, specs.precision);
 6121|    110|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    110|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    110|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    110|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 110]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    110|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    110|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    110|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    110|            it = prefix_result.first.base();
 6124|    110|            prefix_width = prefix_result.second;
 6125|    110|        }
 6126|    334|        else {
 6127|    334|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 334]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    334|            std::tie(it, prefix_width) = prefix_result;
 6129|    334|        }
 6130|    444|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    444|        std::ptrdiff_t value_width = 0;
 6134|    444|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 110, False: 334]
  ------------------
 6135|    110|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 2, False: 108]
  ------------------
 6136|      2|                return unexpected_scan_error(
 6137|      2|                    scan_error::invalid_scanned_value,
 6138|      2|                    "Too many fill characters before value, "
 6139|      2|                    "precision exceeded before reading value");
 6140|      2|            }
 6141|       |
 6142|    108|            const auto initial_width = specs.precision - prefix_width;
 6143|    108|            auto max_width_view =
 6144|    108|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    108|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    108|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    108|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    108|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 108, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    108|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    108|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    108|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    108|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    108|    }                                                  \
  |  |  |  | 3667|    108|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    334|        else {
 6150|    334|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 334, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    334|    }                                                  \
  |  | 3667|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6181|  2.24k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  2.24k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  2.24k|            auto rd = make_reader<T, char_type>();
 6187|  2.24k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.86k, False: 376]
  |  |  ------------------
  ------------------
 6188|  1.86k|                return unexpected(e);
 6189|  1.86k|            }
 6190|       |
 6191|    376|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  2.24k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5741|  2.24k|    {
 5742|  2.24k|        reader_error_handler eh{};
 5743|  2.24k|        detail::check_pointer_type_specs(specs, eh);
 5744|  2.24k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.86k, False: 376]
  |  |  ------------------
  ------------------
 5745|  1.86k|            return {scan_error::invalid_format_string, eh.m_msg};
 5746|  1.86k|        }
 5747|    376|        return {};
 5748|  2.24k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6112|    376|    {
 6113|    376|        const bool need_skipped_width =
 6114|    376|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 234, False: 142]
  |  Branch (6114:33): [True: 72, False: 70]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    376|        auto it = rng.begin();
 6118|    376|        std::ptrdiff_t prefix_width = 0;
 6119|    376|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 74, False: 302]
  ------------------
 6120|     74|            auto max_width_view = take_width(rng, specs.precision);
 6121|     74|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|     74|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     74|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     74|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     74|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 74]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     74|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     74|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|     74|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|     74|            it = prefix_result.first.base();
 6124|     74|            prefix_width = prefix_result.second;
 6125|     74|        }
 6126|    302|        else {
 6127|    302|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    302|            std::tie(it, prefix_width) = prefix_result;
 6129|    302|        }
 6130|    376|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    376|        std::ptrdiff_t value_width = 0;
 6134|    376|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 74, False: 302]
  ------------------
 6135|     74|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 2, False: 72]
  ------------------
 6136|      2|                return unexpected_scan_error(
 6137|      2|                    scan_error::invalid_scanned_value,
 6138|      2|                    "Too many fill characters before value, "
 6139|      2|                    "precision exceeded before reading value");
 6140|      2|            }
 6141|       |
 6142|     72|            const auto initial_width = specs.precision - prefix_width;
 6143|     72|            auto max_width_view =
 6144|     72|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|     72|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|     72|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     72|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     72|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     72|    }                                                  \
  |  |  |  | 3667|     72|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    302|        else {
 6150|    302|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 302, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    302|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    302|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    302|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    302|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    302|    }                                                  \
  |  | 3667|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5770|     72|    {
 5771|     72|        SCN_UNUSED(specs);
  ------------------
  |  |  909|     72|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|     72|        return read_default(range, value, loc);
 5773|     72|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5753|     72|    {
 5754|     72|        detail::format_specs specs{};
 5755|     72|        specs.type = detail::presentation_type::int_hex;
 5756|       |
 5757|     72|        std::uintptr_t intvalue{};
 5758|     72|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|     72|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     72|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     72|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     72|    }                                                  \
  |  |  |  | 3667|     72|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5759|      0|                                                                intvalue, loc));
 5760|      0|        value = reinterpret_cast<void*>(intvalue);
 5761|      0|        return result;
 5762|     72|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5770|    302|    {
 5771|    302|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    302|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    302|        return read_default(range, value, loc);
 5773|    302|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6181|  2.28k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  2.28k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  2.28k|            auto rd = make_reader<T, char_type>();
 6187|  2.28k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.76k, False: 518]
  |  |  ------------------
  ------------------
 6188|  1.76k|                return unexpected(e);
 6189|  1.76k|            }
 6190|       |
 6191|    518|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  2.28k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  2.28k|    {
 3029|  2.28k|        reader_error_handler eh{};
 3030|  2.28k|        get_derived().check_specs_impl(specs, eh);
 3031|  2.28k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.76k, False: 518]
  |  |  ------------------
  ------------------
 3032|  1.76k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  1.76k|        }
 3034|    518|        return {};
 3035|  2.28k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3039|  2.28k|    {
 3040|  2.28k|        return static_cast<Derived&>(*this);
 3041|  2.28k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5485|  2.28k|    {
 5486|  2.28k|        detail::check_bool_type_specs(specs, eh);
 5487|  2.28k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    518|    {
 6113|    518|        const bool need_skipped_width =
 6114|    518|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 252, False: 266]
  |  Branch (6114:33): [True: 128, False: 138]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    518|        auto it = rng.begin();
 6118|    518|        std::ptrdiff_t prefix_width = 0;
 6119|    518|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 132, False: 386]
  ------------------
 6120|    132|            auto max_width_view = take_width(rng, specs.precision);
 6121|    132|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    132|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    132|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    132|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 132]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    132|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    132|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    132|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    132|            it = prefix_result.first.base();
 6124|    132|            prefix_width = prefix_result.second;
 6125|    132|        }
 6126|    386|        else {
 6127|    386|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    386|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 386]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    386|            std::tie(it, prefix_width) = prefix_result;
 6129|    386|        }
 6130|    518|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    518|        std::ptrdiff_t value_width = 0;
 6134|    518|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 132, False: 386]
  ------------------
 6135|    132|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 4, False: 128]
  ------------------
 6136|      4|                return unexpected_scan_error(
 6137|      4|                    scan_error::invalid_scanned_value,
 6138|      4|                    "Too many fill characters before value, "
 6139|      4|                    "precision exceeded before reading value");
 6140|      4|            }
 6141|       |
 6142|    128|            const auto initial_width = specs.precision - prefix_width;
 6143|    128|            auto max_width_view =
 6144|    128|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    128|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    128|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    128|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    128|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 128, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    128|    }                                                  \
  |  |  |  | 3667|    128|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    386|        else {
 6150|    386|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 386, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    386|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    386|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    386|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    386|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    386|    }                                                  \
  |  | 3667|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5504|    128|    {
 5505|    128|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5506|       |
 5507|    128|#if !SCN_DISABLE_LOCALE
 5508|    128|        if (specs.localized) {
  ------------------
  |  Branch (5508:13): [True: 20, False: 108]
  ------------------
 5509|     20|            return rd.read_localized(range, loc, value);
 5510|     20|        }
 5511|    108|#endif
 5512|       |
 5513|    108|        return rd.read_classic(range, value);
 5514|    128|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5517|    514|    {
 5518|    514|        SCN_GCC_COMPAT_PUSH
 5519|    514|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5520|       |
 5521|    514|        switch (specs.type) {
 5522|     70|            case detail::presentation_type::string:
  ------------------
  |  Branch (5522:13): [True: 70, False: 444]
  ------------------
 5523|     70|                return bool_reader_base::allow_text;
 5524|       |
 5525|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5525:13): [True: 14, False: 500]
  ------------------
 5526|     22|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5526:13): [True: 8, False: 506]
  ------------------
 5527|     30|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5527:13): [True: 8, False: 506]
  ------------------
 5528|     40|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5528:13): [True: 10, False: 504]
  ------------------
 5529|     50|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5529:13): [True: 10, False: 504]
  ------------------
 5530|     62|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5530:13): [True: 12, False: 502]
  ------------------
 5531|     62|                return bool_reader_base::allow_numeric;
 5532|       |
 5533|    382|            default:
  ------------------
  |  Branch (5533:13): [True: 382, False: 132]
  ------------------
 5534|    382|                return bool_reader_base::allow_text |
 5535|    382|                       bool_reader_base::allow_numeric;
 5536|    514|        }
 5537|       |
 5538|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5539|    514|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5416|     20|    {
 5417|     20|        scan_error err{scan_error::invalid_scanned_value,
 5418|     20|                       "Failed to read boolean"};
 5419|       |
 5420|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5420:13): [True: 18, False: 2]
  ------------------
 5421|     18|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5421:22): [True: 0, False: 18]
  ------------------
 5422|      0|                return *r;
 5423|      0|            }
 5424|     18|            else {
 5425|     18|                err = r.error();
 5426|     18|            }
 5427|     18|        }
 5428|       |
 5429|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5429:13): [True: 10, False: 10]
  ------------------
 5430|     10|            auto stdloc = loc.get<std::locale>();
 5431|     10|            const auto& numpunct =
 5432|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5433|     10|            const auto truename = numpunct.truename();
 5434|     10|            const auto falsename = numpunct.falsename();
 5435|       |
 5436|     10|            if (auto r =
  ------------------
  |  Branch (5436:22): [True: 0, False: 10]
  ------------------
 5437|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5438|      0|                return *r;
 5439|      0|            }
 5440|     10|            else {
 5441|     10|                err = r.error();
 5442|     10|            }
 5443|     10|        }
 5444|       |
 5445|     20|        return unexpected(err);
 5446|     20|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5372|    108|    {
 5373|    108|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5373:18): [True: 0, False: 108]
  ------------------
 5374|      0|            value = false;
 5375|      0|            return *r;
 5376|      0|        }
 5377|    108|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5377:18): [True: 0, False: 108]
  ------------------
 5378|      0|            value = true;
 5379|      0|            return *r;
 5380|      0|        }
 5381|       |
 5382|    108|        return unexpected_scan_error(
 5383|    108|            scan_error::invalid_scanned_value,
 5384|    108|            "Failed to read numeric boolean value: No match");
 5385|    108|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2134|    216|{
 2135|    216|    auto it = read_code_unit(range);
 2136|    216|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 216]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|    216|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 216, False: 0]
  |  |  ------------------
  ------------------
 2141|    216|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|    216|        return unexpected(parse_error::error);
 2143|    216|    }
 2144|       |
 2145|      0|    return *it;
 2146|    216|}
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5456|     10|    {
 5457|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5458|     10|        const auto shorter = std::pair{
 5459|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5459:13): [True: 10, False: 0]
  ------------------
 5460|     10|        const auto longer = std::pair{
 5461|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5461:13): [True: 0, False: 10]
  ------------------
 5462|       |
 5463|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5463:18): [True: 0, False: 10]
  ------------------
 5464|      0|            value = shorter.second;
 5465|      0|            return *r;
 5466|      0|        }
 5467|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5467:18): [True: 0, False: 10]
  ------------------
 5468|      0|            value = longer.second;
 5469|      0|            return *r;
 5470|      0|        }
 5471|       |
 5472|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5473|     10|                                     "read_textual: No match");
 5474|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2167|     20|{
 2168|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     14|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2169|      6|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2170|      6|                    .transform_error(make_eof_parse_error));
 2171|       |
 2172|      6|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2173|      6|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 2174|      6|        return unexpected(parse_error::error);
 2175|      6|    }
 2176|      0|    return it;
 2177|      6|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1844|    196|{
 1845|    196|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    196|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    196|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|    196|    else {
 1856|    196|        auto it = range.begin();
 1857|    196|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 196]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|    924|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 790, False: 134]
  ------------------
 1862|    790|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 62, False: 728]
  ------------------
 1863|     62|                return unexpected(eof_error::eof);
 1864|     62|            }
 1865|    790|        }
 1866|       |
 1867|    134|        return it;
 1868|    196|    }
 1869|    196|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    196|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    196|    else {
 1115|    196|        return 0;
 1116|    196|    }
 1117|    196|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5343|    108|    {
 5344|    108|        scan_error err{scan_error::invalid_scanned_value,
 5345|    108|                       "Failed to read boolean"};
 5346|       |
 5347|    108|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5347:13): [True: 90, False: 18]
  ------------------
 5348|     90|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5348:22): [True: 0, False: 90]
  ------------------
 5349|      0|                return *r;
 5350|      0|            }
 5351|     90|            else {
 5352|     90|                err = r.error();
 5353|     90|            }
 5354|     90|        }
 5355|       |
 5356|    108|        if (m_options & allow_text) {
  ------------------
  |  Branch (5356:13): [True: 88, False: 20]
  ------------------
 5357|     88|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5357:22): [True: 0, False: 88]
  ------------------
 5358|      0|                return *r;
 5359|      0|            }
 5360|     88|            else {
 5361|     88|                err = r.error();
 5362|     88|            }
 5363|     88|        }
 5364|       |
 5365|    108|        return unexpected(err);
 5366|    108|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5390|     88|    {
 5391|     88|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5391:18): [True: 0, False: 88]
  ------------------
 5392|      0|            value = true;
 5393|      0|            return *r;
 5394|      0|        }
 5395|     88|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5395:18): [True: 0, False: 88]
  ------------------
 5396|      0|            value = false;
 5397|      0|            return *r;
 5398|      0|        }
 5399|       |
 5400|     88|        return unexpected_scan_error(
 5401|     88|            scan_error::invalid_scanned_value,
 5402|     88|            "Failed to read textual boolean value: No match");
 5403|     88|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2182|    176|{
 2183|    176|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    176|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    176|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    176|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48, False: 128]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     48|    }                                                  \
  |  |  |  | 3667|    176|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2184|    128|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2185|    128|                    .transform_error(make_eof_parse_error));
 2186|       |
 2187|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2188|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2189|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2190|       |            return unexpected(parse_error::error);
 2191|       |        }
 2192|       |        return it;
 2193|       |    }
 2194|    128|    else {
 2195|    128|        auto range_it = range.begin();
 2196|    128|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2196:28): [True: 128, False: 0]
  ------------------
 2197|    128|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 0]
  |  |  ------------------
  ------------------
 2198|    128|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2199|    128|                return unexpected(parse_error::error);
 2200|    128|            }
 2201|    128|        }
 2202|      0|        return it;
 2203|    128|    }
 2204|    128|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5504|    386|    {
 5505|    386|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5506|       |
 5507|    386|#if !SCN_DISABLE_LOCALE
 5508|    386|        if (specs.localized) {
  ------------------
  |  Branch (5508:13): [True: 22, False: 364]
  ------------------
 5509|     22|            return rd.read_localized(range, loc, value);
 5510|     22|        }
 5511|    364|#endif
 5512|       |
 5513|    364|        return rd.read_classic(range, value);
 5514|    386|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5416|     22|    {
 5417|     22|        scan_error err{scan_error::invalid_scanned_value,
 5418|     22|                       "Failed to read boolean"};
 5419|       |
 5420|     22|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5420:13): [True: 18, False: 4]
  ------------------
 5421|     18|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5421:22): [True: 0, False: 18]
  ------------------
 5422|      0|                return *r;
 5423|      0|            }
 5424|     18|            else {
 5425|     18|                err = r.error();
 5426|     18|            }
 5427|     18|        }
 5428|       |
 5429|     22|        if (m_options & allow_text) {
  ------------------
  |  Branch (5429:13): [True: 10, False: 12]
  ------------------
 5430|     10|            auto stdloc = loc.get<std::locale>();
 5431|     10|            const auto& numpunct =
 5432|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5433|     10|            const auto truename = numpunct.truename();
 5434|     10|            const auto falsename = numpunct.falsename();
 5435|       |
 5436|     10|            if (auto r =
  ------------------
  |  Branch (5436:22): [True: 0, False: 10]
  ------------------
 5437|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5438|      0|                return *r;
 5439|      0|            }
 5440|     10|            else {
 5441|     10|                err = r.error();
 5442|     10|            }
 5443|     10|        }
 5444|       |
 5445|     22|        return unexpected(err);
 5446|     22|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5456|     10|    {
 5457|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5458|     10|        const auto shorter = std::pair{
 5459|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5459:13): [True: 10, False: 0]
  ------------------
 5460|     10|        const auto longer = std::pair{
 5461|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5461:13): [True: 0, False: 10]
  ------------------
 5462|       |
 5463|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5463:18): [True: 0, False: 10]
  ------------------
 5464|      0|            value = shorter.second;
 5465|      0|            return *r;
 5466|      0|        }
 5467|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5467:18): [True: 0, False: 10]
  ------------------
 5468|      0|            value = longer.second;
 5469|      0|            return *r;
 5470|      0|        }
 5471|       |
 5472|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5473|     10|                                     "read_textual: No match");
 5474|     10|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2167|     20|{
 2168|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2169|     18|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2170|     18|                    .transform_error(make_eof_parse_error));
 2171|       |
 2172|     18|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2173|     18|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 2174|     18|        return unexpected(parse_error::error);
 2175|     18|    }
 2176|      0|    return it;
 2177|     18|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6181|  2.24k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  2.24k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  2.24k|            auto rd = make_reader<T, char_type>();
 6187|  2.24k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.83k, False: 410]
  |  |  ------------------
  ------------------
 6188|  1.83k|                return unexpected(e);
 6189|  1.83k|            }
 6190|       |
 6191|    410|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  2.24k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    410|    {
 6113|    410|        const bool need_skipped_width =
 6114|    410|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 236, False: 174]
  |  Branch (6114:33): [True: 90, False: 84]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    410|        auto it = rng.begin();
 6118|    410|        std::ptrdiff_t prefix_width = 0;
 6119|    410|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 92, False: 318]
  ------------------
 6120|     92|            auto max_width_view = take_width(rng, specs.precision);
 6121|     92|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|     92|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     92|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     92|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     92|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 92]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     92|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     92|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|     92|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|     92|            it = prefix_result.first.base();
 6124|     92|            prefix_width = prefix_result.second;
 6125|     92|        }
 6126|    318|        else {
 6127|    318|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    318|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    318|            std::tie(it, prefix_width) = prefix_result;
 6129|    318|        }
 6130|    410|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    410|        std::ptrdiff_t value_width = 0;
 6134|    410|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 92, False: 318]
  ------------------
 6135|     92|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 2, False: 90]
  ------------------
 6136|      2|                return unexpected_scan_error(
 6137|      2|                    scan_error::invalid_scanned_value,
 6138|      2|                    "Too many fill characters before value, "
 6139|      2|                    "precision exceeded before reading value");
 6140|      2|            }
 6141|       |
 6142|     90|            const auto initial_width = specs.precision - prefix_width;
 6143|     90|            auto max_width_view =
 6144|     90|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|     90|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 70]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     70|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|     70|            it = w_it.base();
 6147|     70|            value_width = initial_width - w_it.count();
 6148|     70|        }
 6149|    318|        else {
 6150|    318|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20, False: 298]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     20|    }                                                  \
  |  | 3667|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    298|                                             specs, value, loc));
 6152|       |
 6153|    298|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 232, False: 66]
  ------------------
 6154|    232|                value_width = calculate_text_width(
 6155|    232|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    232|                        .view());
 6157|    232|            }
 6158|    298|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    368|        std::ptrdiff_t postfix_width = 0;
 6162|    368|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 368, False: 0]
  ------------------
 6163|    368|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    368|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    368|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    368|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    368|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    368|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    368|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    368|                                 value_width));
 6167|    368|            std::tie(it, postfix_width) = postfix_result;
 6168|    368|        }
 6169|       |
 6170|    368|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    368|                                                 value_width, postfix_width);
 6172|    368|            !e) {
  ------------------
  |  Branch (6172:13): [True: 230, False: 138]
  ------------------
 6173|    230|            return unexpected(e);
 6174|    230|        }
 6175|       |
 6176|    138|        return it;
 6177|    368|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6181|  2.28k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  2.28k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  2.28k|            auto rd = make_reader<T, char_type>();
 6187|  2.28k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.86k, False: 418]
  |  |  ------------------
  ------------------
 6188|  1.86k|                return unexpected(e);
 6189|  1.86k|            }
 6190|       |
 6191|    418|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  2.28k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    418|    {
 6113|    418|        const bool need_skipped_width =
 6114|    418|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 242, False: 176]
  |  Branch (6114:33): [True: 92, False: 84]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    418|        auto it = rng.begin();
 6118|    418|        std::ptrdiff_t prefix_width = 0;
 6119|    418|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 96, False: 322]
  ------------------
 6120|     96|            auto max_width_view = take_width(rng, specs.precision);
 6121|     96|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|     96|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     96|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     96|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     96|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 96]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     96|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     96|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|     96|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|     96|            it = prefix_result.first.base();
 6124|     96|            prefix_width = prefix_result.second;
 6125|     96|        }
 6126|    322|        else {
 6127|    322|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 322]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    322|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    322|            std::tie(it, prefix_width) = prefix_result;
 6129|    322|        }
 6130|    418|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    418|        std::ptrdiff_t value_width = 0;
 6134|    418|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 96, False: 322]
  ------------------
 6135|     96|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 4, False: 92]
  ------------------
 6136|      4|                return unexpected_scan_error(
 6137|      4|                    scan_error::invalid_scanned_value,
 6138|      4|                    "Too many fill characters before value, "
 6139|      4|                    "precision exceeded before reading value");
 6140|      4|            }
 6141|       |
 6142|     92|            const auto initial_width = specs.precision - prefix_width;
 6143|     92|            auto max_width_view =
 6144|     92|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|     92|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|     92|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     92|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     92|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     92|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 92, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     92|    }                                                  \
  |  |  |  | 3667|     92|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    322|        else {
 6150|    322|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 322, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    322|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    322|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    322|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    322|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    322|    }                                                  \
  |  | 3667|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    322|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|  2.24k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  2.24k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  2.24k|            auto rd = make_reader<T, char_type>();
 6187|  2.24k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80, False: 2.16k]
  |  |  ------------------
  ------------------
 6188|     80|                return unexpected(e);
 6189|     80|            }
 6190|       |
 6191|  2.16k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  2.24k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  2.16k|    {
 6113|  2.16k|        const bool need_skipped_width =
 6114|  2.16k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 640, False: 1.52k]
  |  Branch (6114:33): [True: 172, False: 1.34k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  2.16k|        auto it = rng.begin();
 6118|  2.16k|        std::ptrdiff_t prefix_width = 0;
 6119|  2.16k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 178, False: 1.98k]
  ------------------
 6120|    178|            auto max_width_view = take_width(rng, specs.precision);
 6121|    178|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    178|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    178|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    178|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    178|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 178]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    178|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    178|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    178|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    178|            it = prefix_result.first.base();
 6124|    178|            prefix_width = prefix_result.second;
 6125|    178|        }
 6126|  1.98k|        else {
 6127|  1.98k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  1.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.98k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  1.98k|            std::tie(it, prefix_width) = prefix_result;
 6129|  1.98k|        }
 6130|  2.16k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  2.16k|        std::ptrdiff_t value_width = 0;
 6134|  2.16k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 178, False: 1.98k]
  ------------------
 6135|    178|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 172]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    172|            const auto initial_width = specs.precision - prefix_width;
 6143|    172|            auto max_width_view =
 6144|    172|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    172|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    172|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    172|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    172|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    172|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 50, False: 122]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     50|    }                                                  \
  |  |  |  | 3667|    172|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    122|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    122|            it = w_it.base();
 6147|    122|            value_width = initial_width - w_it.count();
 6148|    122|        }
 6149|  1.98k|        else {
 6150|  1.98k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  1.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.36k, False: 620]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  1.36k|    }                                                  \
  |  | 3667|  1.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    620|                                             specs, value, loc));
 6152|       |
 6153|    620|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 286, False: 334]
  ------------------
 6154|    286|                value_width = calculate_text_width(
 6155|    286|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    286|                        .view());
 6157|    286|            }
 6158|    620|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    742|        std::ptrdiff_t postfix_width = 0;
 6162|    742|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 468, False: 274]
  ------------------
 6163|    468|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    468|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    468|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    468|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 468]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    468|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    468|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    468|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    468|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    468|                                 value_width));
 6167|    468|            std::tie(it, postfix_width) = postfix_result;
 6168|    468|        }
 6169|       |
 6170|    742|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    742|                                                 value_width, postfix_width);
 6172|    742|            !e) {
  ------------------
  |  Branch (6172:13): [True: 62, False: 680]
  ------------------
 6173|     62|            return unexpected(e);
 6174|     62|        }
 6175|       |
 6176|    680|        return it;
 6177|    742|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|  2.24k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  2.24k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  2.24k|            auto rd = make_reader<T, char_type>();
 6187|  2.24k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80, False: 2.16k]
  |  |  ------------------
  ------------------
 6188|     80|                return unexpected(e);
 6189|     80|            }
 6190|       |
 6191|  2.16k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  2.24k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|  2.16k|    {
 6113|  2.16k|        const bool need_skipped_width =
 6114|  2.16k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 640, False: 1.52k]
  |  Branch (6114:33): [True: 172, False: 1.34k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  2.16k|        auto it = rng.begin();
 6118|  2.16k|        std::ptrdiff_t prefix_width = 0;
 6119|  2.16k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 178, False: 1.98k]
  ------------------
 6120|    178|            auto max_width_view = take_width(rng, specs.precision);
 6121|    178|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    178|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    178|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    178|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    178|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 178]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    178|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    178|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    178|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    178|            it = prefix_result.first.base();
 6124|    178|            prefix_width = prefix_result.second;
 6125|    178|        }
 6126|  1.98k|        else {
 6127|  1.98k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  1.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.98k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  1.98k|            std::tie(it, prefix_width) = prefix_result;
 6129|  1.98k|        }
 6130|  2.16k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  2.16k|        std::ptrdiff_t value_width = 0;
 6134|  2.16k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 178, False: 1.98k]
  ------------------
 6135|    178|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 172]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    172|            const auto initial_width = specs.precision - prefix_width;
 6143|    172|            auto max_width_view =
 6144|    172|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    172|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    172|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    172|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    172|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    172|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 50, False: 122]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     50|    }                                                  \
  |  |  |  | 3667|    172|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    122|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    122|            it = w_it.base();
 6147|    122|            value_width = initial_width - w_it.count();
 6148|    122|        }
 6149|  1.98k|        else {
 6150|  1.98k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  1.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.36k, False: 620]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  1.36k|    }                                                  \
  |  | 3667|  1.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    620|                                             specs, value, loc));
 6152|       |
 6153|    620|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 286, False: 334]
  ------------------
 6154|    286|                value_width = calculate_text_width(
 6155|    286|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    286|                        .view());
 6157|    286|            }
 6158|    620|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    742|        std::ptrdiff_t postfix_width = 0;
 6162|    742|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 468, False: 274]
  ------------------
 6163|    468|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    468|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    468|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    468|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 468]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    468|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    468|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    468|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    468|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    468|                                 value_width));
 6167|    468|            std::tie(it, postfix_width) = postfix_result;
 6168|    468|        }
 6169|       |
 6170|    742|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    742|                                                 value_width, postfix_width);
 6172|    742|            !e) {
  ------------------
  |  Branch (6172:13): [True: 62, False: 680]
  ------------------
 6173|     62|            return unexpected(e);
 6174|     62|        }
 6175|       |
 6176|    680|        return it;
 6177|    742|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|  2.24k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  2.24k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  2.24k|            auto rd = make_reader<T, char_type>();
 6187|  2.24k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80, False: 2.16k]
  |  |  ------------------
  ------------------
 6188|     80|                return unexpected(e);
 6189|     80|            }
 6190|       |
 6191|  2.16k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  2.24k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  2.16k|    {
 6113|  2.16k|        const bool need_skipped_width =
 6114|  2.16k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 640, False: 1.52k]
  |  Branch (6114:33): [True: 172, False: 1.34k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  2.16k|        auto it = rng.begin();
 6118|  2.16k|        std::ptrdiff_t prefix_width = 0;
 6119|  2.16k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 178, False: 1.98k]
  ------------------
 6120|    178|            auto max_width_view = take_width(rng, specs.precision);
 6121|    178|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    178|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    178|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    178|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    178|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 178]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    178|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    178|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    178|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    178|            it = prefix_result.first.base();
 6124|    178|            prefix_width = prefix_result.second;
 6125|    178|        }
 6126|  1.98k|        else {
 6127|  1.98k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  1.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.98k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  1.98k|            std::tie(it, prefix_width) = prefix_result;
 6129|  1.98k|        }
 6130|  2.16k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  2.16k|        std::ptrdiff_t value_width = 0;
 6134|  2.16k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 178, False: 1.98k]
  ------------------
 6135|    178|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 172]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    172|            const auto initial_width = specs.precision - prefix_width;
 6143|    172|            auto max_width_view =
 6144|    172|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    172|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    172|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    172|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    172|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    172|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 50, False: 122]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     50|    }                                                  \
  |  |  |  | 3667|    172|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    122|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    122|            it = w_it.base();
 6147|    122|            value_width = initial_width - w_it.count();
 6148|    122|        }
 6149|  1.98k|        else {
 6150|  1.98k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  1.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.36k, False: 620]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  1.36k|    }                                                  \
  |  | 3667|  1.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    620|                                             specs, value, loc));
 6152|       |
 6153|    620|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 286, False: 334]
  ------------------
 6154|    286|                value_width = calculate_text_width(
 6155|    286|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    286|                        .view());
 6157|    286|            }
 6158|    620|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    742|        std::ptrdiff_t postfix_width = 0;
 6162|    742|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 468, False: 274]
  ------------------
 6163|    468|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    468|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    468|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    468|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 468]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    468|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    468|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    468|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    468|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    468|                                 value_width));
 6167|    468|            std::tie(it, postfix_width) = postfix_result;
 6168|    468|        }
 6169|       |
 6170|    742|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    742|                                                 value_width, postfix_width);
 6172|    742|            !e) {
  ------------------
  |  Branch (6172:13): [True: 62, False: 680]
  ------------------
 6173|     62|            return unexpected(e);
 6174|     62|        }
 6175|       |
 6176|    680|        return it;
 6177|    742|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|    628|    {
 3481|    628|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|    628|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|    628|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 628]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  1.25k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  1.25k|                parse_integer_digits_without_thsep(
 3500|  1.25k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  1.25k|                    prefix_result.parsed_base));
 3502|       |
 3503|  1.25k|        auto buf = make_contiguous_buffer(
 3504|  1.25k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  1.25k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 628, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    628|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    628|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    628|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    628|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    628|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|      0|                                    prefix_result.parsed_base));
 3508|       |
 3509|      0|        return ranges::next(prefix_result.iterator,
 3510|      0|                            ranges::distance(buf.view().begin(), result_it));
 3511|  1.25k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|    628|    {
 3481|    628|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|    628|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|    628|        if constexpr (!std::is_signed_v<T>) {
 3485|    628|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 0, False: 628]
  ------------------
 3486|      0|                return unexpected_scan_error(
 3487|      0|                    scan_error::invalid_scanned_value,
 3488|      0|                    "Unexpected '-' sign when parsing an "
 3489|      0|                    "unsigned value");
 3490|      0|            }
 3491|    628|        }
 3492|       |
 3493|    628|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 628]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  1.25k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  1.25k|                parse_integer_digits_without_thsep(
 3500|  1.25k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  1.25k|                    prefix_result.parsed_base));
 3502|       |
 3503|  1.25k|        auto buf = make_contiguous_buffer(
 3504|  1.25k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  1.25k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 628, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    628|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    628|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    628|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    628|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    628|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|      0|                                    prefix_result.parsed_base));
 3508|       |
 3509|      0|        return ranges::next(prefix_result.iterator,
 3510|      0|                            ranges::distance(buf.view().begin(), result_it));
 3511|  1.25k|    }

LLVMFuzzerTestOneInput:
   68|  4.23k|{
   69|  4.23k|    scn::fuzz::run(data, size);
   70|  4.23k|    return 0;
   71|  4.23k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  4.23k|{
   52|  4.23k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 4.23k]
  |  Branch (52:35): [True: 0, False: 4.23k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  4.23k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  4.23k|    run_for_source(sv);
   59|  4.23k|    run_for_source(wsv_reinterpret);
   60|  4.23k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 4.23k, False: 0]
  ------------------
   61|  4.23k|        run_for_source(wsv_transcode);
   62|  4.23k|    }
   63|  4.23k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  4.23k|{
   37|  4.23k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  4.23k|    run_for_type<char_type>(source);
   40|  4.23k|    run_for_type<int>(source);
   41|  4.23k|    run_for_type<unsigned>(source);
   42|  4.23k|    run_for_type<double>(source);
   43|  4.23k|    run_for_type<bool>(source);
   44|  4.23k|    run_for_type<void*>(source);
   45|  4.23k|    run_for_type<std::string>(source);
   46|  4.23k|    run_for_type<std::wstring>(source);
   47|  4.23k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  4.23k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.23k|{
   25|  4.23k|    {
   26|  4.23k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.23k|    }
   28|  4.23k|    {
   29|  4.23k|        auto _ =
   30|  4.23k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.23k|    }
   32|  4.23k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.23k|{
   25|  4.23k|    {
   26|  4.23k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.23k|    }
   28|  4.23k|    {
   29|  4.23k|        auto _ =
   30|  4.23k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.23k|    }
   32|  4.23k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.23k|{
   25|  4.23k|    {
   26|  4.23k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.23k|    }
   28|  4.23k|    {
   29|  4.23k|        auto _ =
   30|  4.23k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.23k|    }
   32|  4.23k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.23k|{
   25|  4.23k|    {
   26|  4.23k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.23k|    }
   28|  4.23k|    {
   29|  4.23k|        auto _ =
   30|  4.23k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.23k|    }
   32|  4.23k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.23k|{
   25|  4.23k|    {
   26|  4.23k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.23k|    }
   28|  4.23k|    {
   29|  4.23k|        auto _ =
   30|  4.23k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.23k|    }
   32|  4.23k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  4.23k|{
   25|  4.23k|    {
   26|  4.23k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.23k|    }
   28|  4.23k|    {
   29|  4.23k|        auto _ =
   30|  4.23k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.23k|    }
   32|  4.23k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  4.23k|{
   25|  4.23k|    {
   26|  4.23k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.23k|    }
   28|  4.23k|    {
   29|  4.23k|        auto _ =
   30|  4.23k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.23k|    }
   32|  4.23k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  4.23k|{
   25|  4.23k|    {
   26|  4.23k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.23k|    }
   28|  4.23k|    {
   29|  4.23k|        auto _ =
   30|  4.23k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.23k|    }
   32|  4.23k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  4.23k|{
   25|  4.23k|    {
   26|  4.23k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.23k|    }
   28|  4.23k|    {
   29|  4.23k|        auto _ =
   30|  4.23k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.23k|    }
   32|  4.23k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  8.47k|{
   37|  8.47k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  8.47k|    run_for_type<char_type>(source);
   40|  8.47k|    run_for_type<int>(source);
   41|  8.47k|    run_for_type<unsigned>(source);
   42|  8.47k|    run_for_type<double>(source);
   43|  8.47k|    run_for_type<bool>(source);
   44|  8.47k|    run_for_type<void*>(source);
   45|  8.47k|    run_for_type<std::string>(source);
   46|  8.47k|    run_for_type<std::wstring>(source);
   47|  8.47k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  8.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.47k|{
   25|  8.47k|    {
   26|  8.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.47k|    }
   28|  8.47k|    {
   29|  8.47k|        auto _ =
   30|  8.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.47k|    }
   32|  8.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.47k|{
   25|  8.47k|    {
   26|  8.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.47k|    }
   28|  8.47k|    {
   29|  8.47k|        auto _ =
   30|  8.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.47k|    }
   32|  8.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.47k|{
   25|  8.47k|    {
   26|  8.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.47k|    }
   28|  8.47k|    {
   29|  8.47k|        auto _ =
   30|  8.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.47k|    }
   32|  8.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.47k|{
   25|  8.47k|    {
   26|  8.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.47k|    }
   28|  8.47k|    {
   29|  8.47k|        auto _ =
   30|  8.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.47k|    }
   32|  8.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.47k|{
   25|  8.47k|    {
   26|  8.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.47k|    }
   28|  8.47k|    {
   29|  8.47k|        auto _ =
   30|  8.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.47k|    }
   32|  8.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  8.47k|{
   25|  8.47k|    {
   26|  8.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.47k|    }
   28|  8.47k|    {
   29|  8.47k|        auto _ =
   30|  8.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.47k|    }
   32|  8.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  8.47k|{
   25|  8.47k|    {
   26|  8.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.47k|    }
   28|  8.47k|    {
   29|  8.47k|        auto _ =
   30|  8.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.47k|    }
   32|  8.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  8.47k|{
   25|  8.47k|    {
   26|  8.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.47k|    }
   28|  8.47k|    {
   29|  8.47k|        auto _ =
   30|  8.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.47k|    }
   32|  8.47k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  8.47k|{
   25|  8.47k|    {
   26|  8.47k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.47k|    }
   28|  8.47k|    {
   29|  8.47k|        auto _ =
   30|  8.47k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.47k|    }
   32|  8.47k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  4.23k|{
   52|  4.23k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  4.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  4.23k|    string_buffer.resize(size);
   56|  4.23k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  4.23k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  4.23k|    const auto wsv_reinterpret_size =
   61|  4.23k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 91, False: 4.14k]
  ------------------
   62|  4.23k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  4.23k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  4.23k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  4.23k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  4.23k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  4.23k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  4.23k|}

