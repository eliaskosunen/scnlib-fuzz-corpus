_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|    940|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    586|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  3.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  5.77M|{
 3803|  5.77M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|  5.77M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|  5.77M|    }
 3806|  5.77M|    else if constexpr (sizeof(U) == 2) {
 3807|  5.77M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|  5.77M|    }
 3809|  5.77M|    else {
 3810|       |        // utf-32
 3811|  5.77M|        static_assert(sizeof(U) == 4);
 3812|  5.77M|        SCN_UNUSED(ch);
 3813|  5.77M|        return 1;
 3814|  5.77M|    }
 3815|  5.77M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  5.77M|{
 3767|  5.77M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  5.77M|    SCN_GCC_COMPAT_PUSH
 3770|  5.77M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  5.77M|    constexpr char lengths[] =
 3772|  5.77M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  5.77M|        "\1\1\1\1\1\1\1\1"
 3774|  5.77M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  5.77M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  5.77M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  5.77M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  5.77M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  5.77M|    SCN_GCC_COMPAT_POP
 3781|  5.77M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  5.30M|{
 4009|  5.30M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|  5.30M|        return decode_utf8_code_point_exhaustive(input);
 4011|  5.30M|    }
 4012|  5.30M|    else if constexpr (sizeof(CharT) == 2) {
 4013|  5.30M|        return decode_utf16_code_point_exhaustive(input);
 4014|  5.30M|    }
 4015|  5.30M|    else {
 4016|  5.30M|        SCN_EXPECT(input.size() == 1);
 4017|  5.30M|        auto cp = static_cast<char32_t>(input.front());
 4018|  5.30M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|  5.30M|            return invalid_code_point;
 4020|  5.30M|        }
 4021|  5.30M|        return cp;
 4022|  5.30M|    }
 4023|  5.30M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  5.30M|{
 3822|  5.30M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  5.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  5.30M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  5.30M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  5.30M|    };
 3827|       |
 3828|  5.30M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 4.74M, False: 555k]
  ------------------
 3829|  4.74M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 36, False: 4.74M]
  ------------------
 3830|     36|            SCN_UNLIKELY_ATTR
 3831|     36|            return invalid_code_point;
 3832|     36|        }
 3833|  4.74M|        return static_cast<char32_t>(input[0]);
 3834|  4.74M|    }
 3835|       |
 3836|   555k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 529k, False: 26.4k]
  ------------------
 3837|   529k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 24, False: 529k]
  ------------------
 3838|     24|            SCN_UNLIKELY_ATTR
 3839|     24|            return invalid_code_point;
 3840|     24|        }
 3841|   529k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 6.76k, False: 522k]
  ------------------
 3842|  6.76k|            SCN_UNLIKELY_ATTR
 3843|  6.76k|            return invalid_code_point;
 3844|  6.76k|        }
 3845|       |
 3846|   522k|        char32_t cp{};
 3847|   522k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|   522k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|   522k|        return cp;
 3850|   529k|    }
 3851|       |
 3852|  26.4k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 20.7k, False: 5.69k]
  ------------------
 3853|  20.7k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 6, False: 20.7k]
  ------------------
 3854|      6|            SCN_UNLIKELY_ATTR
 3855|      6|            return invalid_code_point;
 3856|      6|        }
 3857|  20.7k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 4.78k, False: 15.9k]
  ------------------
 3858|  20.7k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 257, False: 15.6k]
  ------------------
 3859|  5.03k|            SCN_UNLIKELY_ATTR
 3860|  5.03k|            return invalid_code_point;
 3861|  5.03k|        }
 3862|       |
 3863|  15.6k|        char32_t cp{};
 3864|  15.6k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  15.6k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  15.6k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  15.6k|        return cp;
 3868|  20.7k|    }
 3869|       |
 3870|  5.69k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 5.69k, False: 0]
  ------------------
 3871|  5.69k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 5.69k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  5.69k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 370, False: 5.32k]
  ------------------
 3876|    370|            SCN_UNLIKELY_ATTR
 3877|    370|            return invalid_code_point;
 3878|    370|        }
 3879|  5.32k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 521, False: 4.80k]
  ------------------
 3880|  5.32k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 589, False: 4.21k]
  ------------------
 3881|  5.32k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 284, False: 3.92k]
  ------------------
 3882|  1.39k|            SCN_UNLIKELY_ATTR
 3883|  1.39k|            return invalid_code_point;
 3884|  1.39k|        }
 3885|       |
 3886|  3.92k|        char32_t cp{};
 3887|  3.92k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  3.92k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  3.92k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  3.92k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  3.92k|        return cp;
 3892|  5.32k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|   580k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   580k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   580k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  2.00M|{
 3695|  2.00M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3695:19): [Folded - Ignored]
  |  Branch (3695:19): [Folded - Ignored]
  ------------------
 3696|  2.00M|                                          decltype(first), decltype(last)> &&
 3697|  2.00M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3697:19): [Folded - Ignored]
  ------------------
 3698|  2.00M|        return {first, last};
 3699|  2.00M|    }
 3700|  2.00M|    else {
 3701|  2.00M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  2.00M|                                       to_address(first), to_address(last)))};
 3703|  2.00M|    }
 3704|  2.00M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  6.04M|{
  322|  6.04M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  6.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  6.04M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  6.11M|{
  302|  6.11M|    return p;
  303|  6.11M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  1.15M|{
 3726|  1.15M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3726:19): [Folded - Ignored]
  |  Branch (3726:19): [Folded - Ignored]
  ------------------
 3727|  1.15M|                      typename std::basic_string_view<CharT>::iterator,
 3728|  1.15M|                      decltype(it)> &&
 3729|  1.15M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3729:19): [Folded - Ignored]
  ------------------
 3730|  1.15M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  1.15M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  1.15M|        return it;
 3732|  1.15M|    }
 3733|  1.15M|    else {
 3734|  1.15M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|  1.15M|    }
 3736|  1.15M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.34k|{
 8863|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5391|  8.69k|{
 5392|  8.69k|    detail::check_scan_arg_types<Args...>();
 5393|  8.69k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.69k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5130|  8.69k|{
 5131|  8.69k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  8.69k|                  "Scan argument types must be default constructible");
 5133|  8.69k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  8.69k|                  "Scan argument types must be Destructible");
 5135|  8.69k|    static_assert(
 5136|  8.69k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  8.69k|        "Scan argument types must not be references");
 5138|  8.69k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5344|  8.69k|    {
 5345|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  8.69k|    {
 5356|  8.69k|        return {detail::make_arg<
 5357|  8.69k|            kind, Context,
 5358|  8.69k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.69k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.69k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5165|  8.69k|{
 5166|  8.69k|    return make_value<Context>(value).ref_value;
 5167|  8.69k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5115|  8.69k|{
 5116|  8.69k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.69k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.69k|                                  needs_context_tag>) {
 5120|  8.69k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.69k|    }
 5122|  8.69k|    else {
 5123|  8.69k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.69k|            value, context_tag<Context>{}));
 5125|  8.69k|    }
 5126|  8.69k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4983|  8.69k|    {
 4984|  8.69k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4984:23): [Folded - Ignored]
  |  Branch (4984:23): [Folded - Ignored]
  ------------------
 4985|  8.69k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4985:23): [Folded - Ignored]
  ------------------
 4986|  8.69k|            return val;
 4987|  8.69k|        }
 4988|  8.69k|        else if constexpr (is_type_disabled<char_type>) {
 4989|  8.69k|            return unscannable_disabled{val};
 4990|  8.69k|        }
 4991|  8.69k|        else {
 4992|  8.69k|            SCN_UNUSED(val);
 4993|  8.69k|            return unscannable_char{};
 4994|  8.69k|        }
 4995|  8.69k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5084|  8.69k|{
 5085|  8.69k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  8.69k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  8.69k|    constexpr bool scannable_char =
 5089|  8.69k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  8.69k|    static_assert(scannable_char,
 5091|  8.69k|                  "Cannot scan an argument of an unsupported character "
 5092|  8.69k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  8.69k|    constexpr bool scannable_const =
 5095|  8.69k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  8.69k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  8.69k|    constexpr bool scannable_disabled =
 5099|  8.69k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  8.69k|    static_assert(scannable_disabled,
 5101|  8.69k|                  "Cannot scan an argument that has been disabled by "
 5102|  8.69k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  8.69k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  8.69k|    static_assert(
 5106|  8.69k|        scannable,
 5107|  8.69k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  8.69k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  8.69k|    return arg_value{arg};
 5111|  8.69k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4897|  8.69k|    {
 4898|  8.69k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8649|  39.1k|{
 8650|  39.1k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8651|  39.1k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8586|  39.1k|{
 8587|  39.1k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  39.1k|    auto result = vscan_impl(buffer, format, args);
 8590|  39.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  39.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.8k, False: 1.26k]
  |  |  ------------------
  ------------------
 8591|  37.8k|        return unexpected(result.error());
 8592|  37.8k|    }
 8593|  1.26k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  39.1k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4715|  78.2k|{
 4716|  78.2k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|  78.2k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|  78.2k|                  "\n"
 4720|  78.2k|                  "Unsupported range type given as input to a scanning "
 4721|  78.2k|                  "function.\n"
 4722|  78.2k|                  "A range needs to have a character type (value type) "
 4723|  78.2k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|  78.2k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|  78.2k|                  "to be included.\n"
 4726|  78.2k|                  "See the scnlib documentation for more details.");
 4727|  78.2k|    static_assert(
 4728|  78.2k|        !std::is_same_v<T, custom_char_traits>,
 4729|  78.2k|        "\n"
 4730|  78.2k|        "Unsupported range type given as input to a scanning "
 4731|  78.2k|        "function.\n"
 4732|  78.2k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|  78.2k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|  78.2k|        "not supported.");
 4735|  78.2k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|  78.2k|                  "\n"
 4737|  78.2k|                  "Unsupported range type given as input to a scanning "
 4738|  78.2k|                  "function.\n"
 4739|  78.2k|                  "file_marker_found cannot be used as an "
 4740|  78.2k|                  "source range type to scn::scan.\n"
 4741|  78.2k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|  78.2k|                  "and do not provide an explicit source range, "
 4743|  78.2k|                  "or use scn::scan with a FILE* directly.");
 4744|  78.2k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|  78.2k|                  "\n"
 4746|  78.2k|                  "Unsupported range type given as input to a scanning "
 4747|  78.2k|                  "function.\n"
 4748|  78.2k|                  "In order to be scannable, a range needs to satisfy "
 4749|  78.2k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|  78.2k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|  78.2k|                  "\n"
 4752|  78.2k|                  "Unsupported range type given as input to a scanning "
 4753|  78.2k|                  "function.\n"
 4754|  78.2k|                  "A range needs to model forward_range and have a valid "
 4755|  78.2k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|  78.2k|                  "Examples of scannable ranges are std::string, "
 4757|  78.2k|                  "std::string_view, "
 4758|  78.2k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|  78.2k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|  78.2k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|  78.2k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4607|  78.2k|{
 4608|  78.2k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4608:19): [Folded - Ignored]
  ------------------
 4609|  78.2k|        return r;
 4610|       |        // return make_string_scan_buffer(r);
 4611|  78.2k|    }
 4612|  78.2k|    else {
 4613|  78.2k|        return invalid_char_type{};
 4614|  78.2k|    }
 4615|  78.2k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1593|   238k|    {
 1594|   238k|        return has_value();
 1595|   238k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|   476k|    {
  481|   476k|        return m_has_value;
  482|   476k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1599|   235k|    {
 1600|   235k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   235k|        return this->get_unexpected().error();
 1602|   235k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   235k|    {
  464|   235k|        return m_unexpected;
  465|   235k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|  1.39M|    {
  357|  1.39M|        return m_unexpected;
  358|  1.39M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|   786k|    {
  343|   786k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   786k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   786k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  75.7k|    {
 1472|  75.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|  75.7k|    {
  443|  75.7k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|   816k|    {
  352|   816k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   816k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   816k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  78.2k|    {
 1173|  78.2k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5918|  2.53k|{
 5919|  2.53k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  2.53k|                      ranges::iterator_t<SourceRange>>) {
 5921|  2.53k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  2.53k|    }
 5923|  2.53k|    else {
 5924|  2.53k|        auto it = ranges::begin(source);
 5925|  2.53k|        while (n > 0) {
 5926|  2.53k|            --n;
 5927|  2.53k|            ++it;
 5928|  2.53k|        }
 5929|  2.53k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  2.53k|    }
 5931|  2.53k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  2.53k|    {
 2720|  2.53k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  2.53k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  2.53k|    {
 2701|  2.53k|        return decay_copy(t.begin());
 2702|  2.53k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1944|   100k|{
 1945|   100k|    return SCN_FWD(t);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|   100k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5905|  2.53k|{
 5906|  2.53k|    return ranges::end(source);
 5907|  2.53k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  2.53k|    {
 2777|  2.53k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  2.53k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  2.53k|    {
 2759|  2.53k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  2.53k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3311|   832k|    {
 3312|   832k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1648|  2.81k|    {
 1649|  2.81k|        return value();
 1650|  2.81k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1622|  2.81k|    {
 1623|  2.81k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.81k|        return this->get_value();
 1625|  2.81k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  2.81k|    {
  447|  2.81k|        return m_value;
  448|  2.81k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  2.53k|    {
 1426|  2.53k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  2.53k|    {
  433|  2.53k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7970|  8.69k|    {
 7971|  8.69k|        return m_str;
 7972|  8.69k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.69k|    {
 5422|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5374|  8.69k|    {
 5375|  8.69k|        return m_argptrs;
 5376|  8.69k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5473|  78.2k|    {
 5474|  78.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  8.69k|{
 8816|  8.69k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.54k, False: 150]
  |  |  ------------------
  ------------------
 8817|  8.54k|        return unexpected(result.error());
 8818|  8.54k|    }
 8819|    150|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    150|    static_cast<    \
  |  |  929|    150|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    150|    static_cast<    \
  |  |  929|    150|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.69k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1593|  78.2k|    {
 1594|  78.2k|        return has_value();
 1595|  78.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   156k|    {
  481|   156k|        return m_has_value;
  482|   156k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1599|  75.7k|    {
 1600|  75.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  75.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  75.7k|        return this->get_unexpected().error();
 1602|  75.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  75.7k|    {
  464|  75.7k|        return m_unexpected;
  465|  75.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  8.54k|    {
 1472|  8.54k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.54k|    {
  443|  8.54k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.69k|    {
 1173|  8.69k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|  2.53k|    {
 1649|  2.53k|        return value();
 1650|  2.53k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.53k|    {
 1623|  2.53k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.53k|        return this->get_value();
 1625|  2.53k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.53k|    {
  447|  2.53k|        return m_value;
  448|  2.53k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5825|    150|    {
 5826|    150|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5676|  2.53k|    {
 5677|  2.53k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5611|    150|    {
 5612|    150|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|    150|    {
 1426|    150|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|    150|    {
  433|    150|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5369|  8.69k|    {
 5370|  8.69k|        return m_args;
 5371|  8.69k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7686|  78.2k|{
 7687|  78.2k|    return s;
 7688|  78.2k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7663|  78.2k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.69k|    {
 7967|  8.69k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.34k|{
 8930|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.34k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8667|  39.1k|{
 8668|  39.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8669|  39.1k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8602|  39.1k|{
 8603|  39.1k|#if !SCN_DISABLE_LOCALE
 8604|  39.1k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  39.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  39.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  39.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  39.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  39.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.8k, False: 1.26k]
  |  |  ------------------
  ------------------
 8611|  37.8k|        return unexpected(result.error());
 8612|  37.8k|    }
 8613|  1.26k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  39.1k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.34k|{
 8863|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5391|  8.69k|{
 5392|  8.69k|    detail::check_scan_arg_types<Args...>();
 5393|  8.69k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.69k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5130|  26.0k|{
 5131|  26.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  26.0k|                  "Scan argument types must be default constructible");
 5133|  26.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  26.0k|                  "Scan argument types must be Destructible");
 5135|  26.0k|    static_assert(
 5136|  26.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  26.0k|        "Scan argument types must not be references");
 5138|  26.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5344|  8.69k|    {
 5345|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  8.69k|    {
 5356|  8.69k|        return {detail::make_arg<
 5357|  8.69k|            kind, Context,
 5358|  8.69k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.69k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.69k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5165|  8.69k|{
 5166|  8.69k|    return make_value<Context>(value).ref_value;
 5167|  8.69k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5115|  8.69k|{
 5116|  8.69k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.69k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.69k|                                  needs_context_tag>) {
 5120|  8.69k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.69k|    }
 5122|  8.69k|    else {
 5123|  8.69k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.69k|            value, context_tag<Context>{}));
 5125|  8.69k|    }
 5126|  8.69k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4954|  8.69k|    {                                                                        \
 4955|  8.69k|        return val;                                                          \
 4956|  8.69k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5084|  26.0k|{
 5085|  26.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  26.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  26.0k|    constexpr bool scannable_char =
 5089|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  26.0k|    static_assert(scannable_char,
 5091|  26.0k|                  "Cannot scan an argument of an unsupported character "
 5092|  26.0k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  26.0k|    constexpr bool scannable_const =
 5095|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  26.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  26.0k|    constexpr bool scannable_disabled =
 5099|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  26.0k|    static_assert(scannable_disabled,
 5101|  26.0k|                  "Cannot scan an argument that has been disabled by "
 5102|  26.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  26.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  26.0k|    static_assert(
 5106|  26.0k|        scannable,
 5107|  26.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  26.0k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  26.0k|    return arg_value{arg};
 5111|  26.0k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4897|  26.0k|    {
 4898|  26.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7970|  8.69k|    {
 7971|  8.69k|        return m_str;
 7972|  8.69k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.69k|    {
 5422|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5374|  8.69k|    {
 5375|  8.69k|        return m_argptrs;
 5376|  8.69k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  8.69k|{
 8816|  8.69k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.69k, False: 0]
  |  |  ------------------
  ------------------
 8817|  8.69k|        return unexpected(result.error());
 8818|  8.69k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.69k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  8.69k|    {
 1472|  8.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.69k|    {
  443|  8.69k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.69k|    {
 1173|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5369|  8.69k|    {
 5370|  8.69k|        return m_args;
 5371|  8.69k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.69k|    {
 7967|  8.69k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.34k|{
 8930|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.34k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.34k|{
 8863|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5391|  8.69k|{
 5392|  8.69k|    detail::check_scan_arg_types<Args...>();
 5393|  8.69k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.69k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5130|  26.0k|{
 5131|  26.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  26.0k|                  "Scan argument types must be default constructible");
 5133|  26.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  26.0k|                  "Scan argument types must be Destructible");
 5135|  26.0k|    static_assert(
 5136|  26.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  26.0k|        "Scan argument types must not be references");
 5138|  26.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5344|  8.69k|    {
 5345|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  8.69k|    {
 5356|  8.69k|        return {detail::make_arg<
 5357|  8.69k|            kind, Context,
 5358|  8.69k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.69k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.69k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5165|  8.69k|{
 5166|  8.69k|    return make_value<Context>(value).ref_value;
 5167|  8.69k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5115|  8.69k|{
 5116|  8.69k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.69k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.69k|                                  needs_context_tag>) {
 5120|  8.69k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.69k|    }
 5122|  8.69k|    else {
 5123|  8.69k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.69k|            value, context_tag<Context>{}));
 5125|  8.69k|    }
 5126|  8.69k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4954|  8.69k|    {                                                                        \
 4955|  8.69k|        return val;                                                          \
 4956|  8.69k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5084|  26.0k|{
 5085|  26.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  26.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  26.0k|    constexpr bool scannable_char =
 5089|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  26.0k|    static_assert(scannable_char,
 5091|  26.0k|                  "Cannot scan an argument of an unsupported character "
 5092|  26.0k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  26.0k|    constexpr bool scannable_const =
 5095|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  26.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  26.0k|    constexpr bool scannable_disabled =
 5099|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  26.0k|    static_assert(scannable_disabled,
 5101|  26.0k|                  "Cannot scan an argument that has been disabled by "
 5102|  26.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  26.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  26.0k|    static_assert(
 5106|  26.0k|        scannable,
 5107|  26.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  26.0k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  26.0k|    return arg_value{arg};
 5111|  26.0k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4897|  26.0k|    {
 4898|  26.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7970|  8.69k|    {
 7971|  8.69k|        return m_str;
 7972|  8.69k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.69k|    {
 5422|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5374|  8.69k|    {
 5375|  8.69k|        return m_argptrs;
 5376|  8.69k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  8.69k|{
 8816|  8.69k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.69k, False: 0]
  |  |  ------------------
  ------------------
 8817|  8.69k|        return unexpected(result.error());
 8818|  8.69k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.69k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  8.69k|    {
 1472|  8.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.69k|    {
  443|  8.69k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.69k|    {
 1173|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5369|  8.69k|    {
 5370|  8.69k|        return m_args;
 5371|  8.69k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.69k|    {
 7967|  8.69k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.34k|{
 8930|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.34k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.34k|{
 8863|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5391|  8.69k|{
 5392|  8.69k|    detail::check_scan_arg_types<Args...>();
 5393|  8.69k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.69k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5130|  26.0k|{
 5131|  26.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  26.0k|                  "Scan argument types must be default constructible");
 5133|  26.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  26.0k|                  "Scan argument types must be Destructible");
 5135|  26.0k|    static_assert(
 5136|  26.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  26.0k|        "Scan argument types must not be references");
 5138|  26.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5344|  8.69k|    {
 5345|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  8.69k|    {
 5356|  8.69k|        return {detail::make_arg<
 5357|  8.69k|            kind, Context,
 5358|  8.69k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.69k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.69k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5165|  8.69k|{
 5166|  8.69k|    return make_value<Context>(value).ref_value;
 5167|  8.69k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5115|  8.69k|{
 5116|  8.69k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.69k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.69k|                                  needs_context_tag>) {
 5120|  8.69k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.69k|    }
 5122|  8.69k|    else {
 5123|  8.69k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.69k|            value, context_tag<Context>{}));
 5125|  8.69k|    }
 5126|  8.69k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4954|  8.69k|    {                                                                        \
 4955|  8.69k|        return val;                                                          \
 4956|  8.69k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5084|  26.0k|{
 5085|  26.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  26.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  26.0k|    constexpr bool scannable_char =
 5089|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  26.0k|    static_assert(scannable_char,
 5091|  26.0k|                  "Cannot scan an argument of an unsupported character "
 5092|  26.0k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  26.0k|    constexpr bool scannable_const =
 5095|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  26.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  26.0k|    constexpr bool scannable_disabled =
 5099|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  26.0k|    static_assert(scannable_disabled,
 5101|  26.0k|                  "Cannot scan an argument that has been disabled by "
 5102|  26.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  26.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  26.0k|    static_assert(
 5106|  26.0k|        scannable,
 5107|  26.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  26.0k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  26.0k|    return arg_value{arg};
 5111|  26.0k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4897|  26.0k|    {
 4898|  26.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7970|  8.69k|    {
 7971|  8.69k|        return m_str;
 7972|  8.69k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.69k|    {
 5422|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5374|  8.69k|    {
 5375|  8.69k|        return m_argptrs;
 5376|  8.69k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  8.69k|{
 8816|  8.69k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.69k, False: 0]
  |  |  ------------------
  ------------------
 8817|  8.69k|        return unexpected(result.error());
 8818|  8.69k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.69k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  8.69k|    {
 1472|  8.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.69k|    {
  443|  8.69k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.69k|    {
 1173|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5369|  8.69k|    {
 5370|  8.69k|        return m_args;
 5371|  8.69k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.69k|    {
 7967|  8.69k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.34k|{
 8930|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.34k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.34k|{
 8863|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5391|  8.69k|{
 5392|  8.69k|    detail::check_scan_arg_types<Args...>();
 5393|  8.69k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.69k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5130|  26.0k|{
 5131|  26.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  26.0k|                  "Scan argument types must be default constructible");
 5133|  26.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  26.0k|                  "Scan argument types must be Destructible");
 5135|  26.0k|    static_assert(
 5136|  26.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  26.0k|        "Scan argument types must not be references");
 5138|  26.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5344|  8.69k|    {
 5345|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  8.69k|    {
 5356|  8.69k|        return {detail::make_arg<
 5357|  8.69k|            kind, Context,
 5358|  8.69k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.69k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.69k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5165|  8.69k|{
 5166|  8.69k|    return make_value<Context>(value).ref_value;
 5167|  8.69k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5115|  8.69k|{
 5116|  8.69k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.69k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.69k|                                  needs_context_tag>) {
 5120|  8.69k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.69k|    }
 5122|  8.69k|    else {
 5123|  8.69k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.69k|            value, context_tag<Context>{}));
 5125|  8.69k|    }
 5126|  8.69k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4954|  8.69k|    {                                                                        \
 4955|  8.69k|        return val;                                                          \
 4956|  8.69k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5084|  26.0k|{
 5085|  26.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  26.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  26.0k|    constexpr bool scannable_char =
 5089|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  26.0k|    static_assert(scannable_char,
 5091|  26.0k|                  "Cannot scan an argument of an unsupported character "
 5092|  26.0k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  26.0k|    constexpr bool scannable_const =
 5095|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  26.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  26.0k|    constexpr bool scannable_disabled =
 5099|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  26.0k|    static_assert(scannable_disabled,
 5101|  26.0k|                  "Cannot scan an argument that has been disabled by "
 5102|  26.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  26.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  26.0k|    static_assert(
 5106|  26.0k|        scannable,
 5107|  26.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  26.0k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  26.0k|    return arg_value{arg};
 5111|  26.0k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4897|  26.0k|    {
 4898|  26.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7970|  8.69k|    {
 7971|  8.69k|        return m_str;
 7972|  8.69k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.69k|    {
 5422|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5374|  8.69k|    {
 5375|  8.69k|        return m_argptrs;
 5376|  8.69k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  8.69k|{
 8816|  8.69k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.69k, False: 0]
  |  |  ------------------
  ------------------
 8817|  8.69k|        return unexpected(result.error());
 8818|  8.69k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.69k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  8.69k|    {
 1472|  8.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.69k|    {
  443|  8.69k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.69k|    {
 1173|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5369|  8.69k|    {
 5370|  8.69k|        return m_args;
 5371|  8.69k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.69k|    {
 7967|  8.69k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.34k|{
 8930|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.34k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8862|  4.34k|{
 8863|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5391|  8.69k|{
 5392|  8.69k|    detail::check_scan_arg_types<Args...>();
 5393|  8.69k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.69k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5130|  26.0k|{
 5131|  26.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  26.0k|                  "Scan argument types must be default constructible");
 5133|  26.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  26.0k|                  "Scan argument types must be Destructible");
 5135|  26.0k|    static_assert(
 5136|  26.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  26.0k|        "Scan argument types must not be references");
 5138|  26.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5344|  8.69k|    {
 5345|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5355|  8.69k|    {
 5356|  8.69k|        return {detail::make_arg<
 5357|  8.69k|            kind, Context,
 5358|  8.69k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.69k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.69k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5165|  8.69k|{
 5166|  8.69k|    return make_value<Context>(value).ref_value;
 5167|  8.69k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5115|  8.69k|{
 5116|  8.69k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.69k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.69k|                                  needs_context_tag>) {
 5120|  8.69k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.69k|    }
 5122|  8.69k|    else {
 5123|  8.69k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.69k|            value, context_tag<Context>{}));
 5125|  8.69k|    }
 5126|  8.69k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4954|  8.69k|    {                                                                        \
 4955|  8.69k|        return val;                                                          \
 4956|  8.69k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5084|  26.0k|{
 5085|  26.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  26.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  26.0k|    constexpr bool scannable_char =
 5089|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  26.0k|    static_assert(scannable_char,
 5091|  26.0k|                  "Cannot scan an argument of an unsupported character "
 5092|  26.0k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  26.0k|    constexpr bool scannable_const =
 5095|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  26.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  26.0k|    constexpr bool scannable_disabled =
 5099|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  26.0k|    static_assert(scannable_disabled,
 5101|  26.0k|                  "Cannot scan an argument that has been disabled by "
 5102|  26.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  26.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  26.0k|    static_assert(
 5106|  26.0k|        scannable,
 5107|  26.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  26.0k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  26.0k|    return arg_value{arg};
 5111|  26.0k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4897|  26.0k|    {
 4898|  26.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7970|  8.69k|    {
 7971|  8.69k|        return m_str;
 7972|  8.69k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.69k|    {
 5422|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5374|  8.69k|    {
 5375|  8.69k|        return m_argptrs;
 5376|  8.69k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8815|  8.69k|{
 8816|  8.69k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.69k, False: 0]
  |  |  ------------------
  ------------------
 8817|  8.69k|        return unexpected(result.error());
 8818|  8.69k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.69k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  8.69k|    {
 1472|  8.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  442|  8.69k|    {
  443|  8.69k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.69k|    {
 1173|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5369|  8.69k|    {
 5370|  8.69k|        return m_args;
 5371|  8.69k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.69k|    {
 7967|  8.69k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8929|  4.34k|{
 8930|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.34k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8862|  4.34k|{
 8863|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5391|  8.69k|{
 5392|  8.69k|    detail::check_scan_arg_types<Args...>();
 5393|  8.69k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.69k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5130|  26.0k|{
 5131|  26.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  26.0k|                  "Scan argument types must be default constructible");
 5133|  26.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  26.0k|                  "Scan argument types must be Destructible");
 5135|  26.0k|    static_assert(
 5136|  26.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  26.0k|        "Scan argument types must not be references");
 5138|  26.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5344|  8.69k|    {
 5345|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  8.69k|    {
 5356|  8.69k|        return {detail::make_arg<
 5357|  8.69k|            kind, Context,
 5358|  8.69k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.69k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.69k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5165|  8.69k|{
 5166|  8.69k|    return make_value<Context>(value).ref_value;
 5167|  8.69k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5115|  8.69k|{
 5116|  8.69k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.69k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.69k|                                  needs_context_tag>) {
 5120|  8.69k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.69k|    }
 5122|  8.69k|    else {
 5123|  8.69k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.69k|            value, context_tag<Context>{}));
 5125|  8.69k|    }
 5126|  8.69k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4954|  8.69k|    {                                                                        \
 4955|  8.69k|        return val;                                                          \
 4956|  8.69k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5084|  26.0k|{
 5085|  26.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  26.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  26.0k|    constexpr bool scannable_char =
 5089|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  26.0k|    static_assert(scannable_char,
 5091|  26.0k|                  "Cannot scan an argument of an unsupported character "
 5092|  26.0k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  26.0k|    constexpr bool scannable_const =
 5095|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  26.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  26.0k|    constexpr bool scannable_disabled =
 5099|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  26.0k|    static_assert(scannable_disabled,
 5101|  26.0k|                  "Cannot scan an argument that has been disabled by "
 5102|  26.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  26.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  26.0k|    static_assert(
 5106|  26.0k|        scannable,
 5107|  26.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  26.0k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  26.0k|    return arg_value{arg};
 5111|  26.0k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4897|  26.0k|    {
 4898|  26.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7970|  8.69k|    {
 7971|  8.69k|        return m_str;
 7972|  8.69k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.69k|    {
 5422|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5374|  8.69k|    {
 5375|  8.69k|        return m_argptrs;
 5376|  8.69k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8815|  8.69k|{
 8816|  8.69k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.90k, False: 794]
  |  |  ------------------
  ------------------
 8817|  7.90k|        return unexpected(result.error());
 8818|  7.90k|    }
 8819|    794|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    794|    static_cast<    \
  |  |  929|    794|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    794|    static_cast<    \
  |  |  929|    794|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.69k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1471|  7.90k|    {
 1472|  7.90k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  7.90k|    {
  622|  7.90k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  7.90k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  7.90k|    {
  685|  7.90k|        scn::detail::construct_at(unexpected_ptr(),
  686|  7.90k|                                  std::forward<Args>(args)...);
  687|  7.90k|        m_has_value = false;
  688|  7.90k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  387|  50.5k|{
  388|  50.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  50.5k|        T(std::forward<Args>(args)...);
  390|  50.5k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  15.8k|    {
  714|  15.8k|        return reinterpret_cast<unexpected<E>*>(
  715|  15.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  15.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  15.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.69k|    {
 1173|  8.69k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5825|    794|    {
 5826|    794|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5611|    864|    {
 5612|    864|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1425|    794|    {
 1426|    794|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|    794|    {
  612|    794|        construct(std::forward<Args>(args)...);
  613|    794|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|    794|    {
  678|    794|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|    794|        m_has_value = true;
  680|    794|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|    794|{
  388|    794|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|    794|        T(std::forward<Args>(args)...);
  390|    794|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5817|    794|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  1.58k|    {
  702|  1.58k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.58k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  1.58k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5821|  1.58k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5369|  8.69k|    {
 5370|  8.69k|        return m_args;
 5371|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5366|  8.69k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.69k|    {
 7967|  8.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  8.69k|    {
  627|  8.69k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 794, False: 7.90k]
  ------------------
  628|    794|            destroy_value();
  629|    794|        }
  630|  7.90k|        else {
  631|  7.90k|            destroy_unexpected();
  632|  7.90k|        }
  633|  8.69k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  8.69k|    {
  671|  8.69k|        return m_has_value;
  672|  8.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|    794|    {
  692|    794|        scn::detail::destroy_at(value_ptr());
  693|    794|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|    794|{
  394|    794|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|    794|        for (auto& elem : *p) {
  396|    794|            scn::detail::destroy_at(&elem);
  397|    794|        }
  398|    794|    }
  399|    794|    else {
  400|    794|        p->~T();
  401|    794|    }
  402|    794|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  7.90k|    {
  696|  7.90k|        scn::detail::destroy_at(unexpected_ptr());
  697|  7.90k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  393|  50.5k|{
  394|  50.5k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  50.5k|        for (auto& elem : *p) {
  396|  50.5k|            scn::detail::destroy_at(&elem);
  397|  50.5k|        }
  398|  50.5k|    }
  399|  50.5k|    else {
  400|  50.5k|        p->~T();
  401|  50.5k|    }
  402|  50.5k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8929|  4.34k|{
 8930|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.34k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8862|  4.34k|{
 8863|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5391|  8.69k|{
 5392|  8.69k|    detail::check_scan_arg_types<Args...>();
 5393|  8.69k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.69k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5130|  26.0k|{
 5131|  26.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  26.0k|                  "Scan argument types must be default constructible");
 5133|  26.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  26.0k|                  "Scan argument types must be Destructible");
 5135|  26.0k|    static_assert(
 5136|  26.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  26.0k|        "Scan argument types must not be references");
 5138|  26.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5344|  8.69k|    {
 5345|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  8.69k|    {
 5356|  8.69k|        return {detail::make_arg<
 5357|  8.69k|            kind, Context,
 5358|  8.69k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.69k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.69k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5165|  8.69k|{
 5166|  8.69k|    return make_value<Context>(value).ref_value;
 5167|  8.69k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5115|  8.69k|{
 5116|  8.69k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.69k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.69k|                                  needs_context_tag>) {
 5120|  8.69k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.69k|    }
 5122|  8.69k|    else {
 5123|  8.69k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.69k|            value, context_tag<Context>{}));
 5125|  8.69k|    }
 5126|  8.69k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4954|  8.69k|    {                                                                        \
 4955|  8.69k|        return val;                                                          \
 4956|  8.69k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5084|  26.0k|{
 5085|  26.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  26.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  26.0k|    constexpr bool scannable_char =
 5089|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  26.0k|    static_assert(scannable_char,
 5091|  26.0k|                  "Cannot scan an argument of an unsupported character "
 5092|  26.0k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  26.0k|    constexpr bool scannable_const =
 5095|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  26.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  26.0k|    constexpr bool scannable_disabled =
 5099|  26.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  26.0k|    static_assert(scannable_disabled,
 5101|  26.0k|                  "Cannot scan an argument that has been disabled by "
 5102|  26.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  26.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  26.0k|    static_assert(
 5106|  26.0k|        scannable,
 5107|  26.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  26.0k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  26.0k|    return arg_value{arg};
 5111|  26.0k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4897|  26.0k|    {
 4898|  26.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7970|  8.69k|    {
 7971|  8.69k|        return m_str;
 7972|  8.69k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.69k|    {
 5422|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5374|  8.69k|    {
 5375|  8.69k|        return m_argptrs;
 5376|  8.69k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8815|  8.69k|{
 8816|  8.69k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.90k, False: 794]
  |  |  ------------------
  ------------------
 8817|  7.90k|        return unexpected(result.error());
 8818|  7.90k|    }
 8819|    794|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    794|    static_cast<    \
  |  |  929|    794|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    794|    static_cast<    \
  |  |  929|    794|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.69k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1471|  7.90k|    {
 1472|  7.90k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  7.90k|    {
  622|  7.90k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  7.90k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  7.90k|    {
  685|  7.90k|        scn::detail::construct_at(unexpected_ptr(),
  686|  7.90k|                                  std::forward<Args>(args)...);
  687|  7.90k|        m_has_value = false;
  688|  7.90k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  15.8k|    {
  714|  15.8k|        return reinterpret_cast<unexpected<E>*>(
  715|  15.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  15.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  15.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.69k|    {
 1173|  8.69k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5825|    794|    {
 5826|    794|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5611|    864|    {
 5612|    864|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1425|    794|    {
 1426|    794|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|    794|    {
  612|    794|        construct(std::forward<Args>(args)...);
  613|    794|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|    794|    {
  678|    794|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|    794|        m_has_value = true;
  680|    794|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|    794|{
  388|    794|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|    794|        T(std::forward<Args>(args)...);
  390|    794|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5817|    794|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  1.58k|    {
  702|  1.58k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.58k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  1.58k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5821|  1.58k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5369|  8.69k|    {
 5370|  8.69k|        return m_args;
 5371|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5366|  8.69k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.69k|    {
 7967|  8.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  8.69k|    {
  627|  8.69k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 794, False: 7.90k]
  ------------------
  628|    794|            destroy_value();
  629|    794|        }
  630|  7.90k|        else {
  631|  7.90k|            destroy_unexpected();
  632|  7.90k|        }
  633|  8.69k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  8.69k|    {
  671|  8.69k|        return m_has_value;
  672|  8.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|    794|    {
  692|    794|        scn::detail::destroy_at(value_ptr());
  693|    794|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|    794|{
  394|    794|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|    794|        for (auto& elem : *p) {
  396|    794|            scn::detail::destroy_at(&elem);
  397|    794|        }
  398|    794|    }
  399|    794|    else {
  400|    794|        p->~T();
  401|    794|    }
  402|    794|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  7.90k|    {
  696|  7.90k|        scn::detail::destroy_at(unexpected_ptr());
  697|  7.90k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8929|  4.34k|{
 8930|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.34k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.34k|{
 8863|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.34k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5391|  8.69k|{
 5392|  8.69k|    detail::check_scan_arg_types<Args...>();
 5393|  8.69k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.69k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5130|  8.69k|{
 5131|  8.69k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  8.69k|                  "Scan argument types must be default constructible");
 5133|  8.69k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  8.69k|                  "Scan argument types must be Destructible");
 5135|  8.69k|    static_assert(
 5136|  8.69k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  8.69k|        "Scan argument types must not be references");
 5138|  8.69k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5344|  8.69k|    {
 5345|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  8.69k|    {
 5356|  8.69k|        return {detail::make_arg<
 5357|  8.69k|            kind, Context,
 5358|  8.69k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.69k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.69k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5165|  8.69k|{
 5166|  8.69k|    return make_value<Context>(value).ref_value;
 5167|  8.69k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5115|  8.69k|{
 5116|  8.69k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.69k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.69k|                                  needs_context_tag>) {
 5120|  8.69k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.69k|    }
 5122|  8.69k|    else {
 5123|  8.69k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.69k|            value, context_tag<Context>{}));
 5125|  8.69k|    }
 5126|  8.69k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4954|  8.69k|    {                                                                        \
 4955|  8.69k|        return val;                                                          \
 4956|  8.69k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5084|  8.69k|{
 5085|  8.69k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  8.69k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  8.69k|    constexpr bool scannable_char =
 5089|  8.69k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  8.69k|    static_assert(scannable_char,
 5091|  8.69k|                  "Cannot scan an argument of an unsupported character "
 5092|  8.69k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  8.69k|    constexpr bool scannable_const =
 5095|  8.69k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  8.69k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  8.69k|    constexpr bool scannable_disabled =
 5099|  8.69k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  8.69k|    static_assert(scannable_disabled,
 5101|  8.69k|                  "Cannot scan an argument that has been disabled by "
 5102|  8.69k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  8.69k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  8.69k|    static_assert(
 5106|  8.69k|        scannable,
 5107|  8.69k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  8.69k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  8.69k|    return arg_value{arg};
 5111|  8.69k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4897|  8.69k|    {
 4898|  8.69k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7970|  8.69k|    {
 7971|  8.69k|        return m_str;
 7972|  8.69k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.69k|    {
 5422|  8.69k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5374|  8.69k|    {
 5375|  8.69k|        return m_argptrs;
 5376|  8.69k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8815|  8.69k|{
 8816|  8.69k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.90k, False: 794]
  |  |  ------------------
  ------------------
 8817|  7.90k|        return unexpected(result.error());
 8818|  7.90k|    }
 8819|    794|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    794|    static_cast<    \
  |  |  929|    794|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    794|    static_cast<    \
  |  |  929|    794|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.69k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1471|  7.90k|    {
 1472|  7.90k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  7.90k|    {
  443|  7.90k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.69k|    {
 1173|  8.69k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5825|    794|    {
 5826|    794|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5611|    794|    {
 5612|    794|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1425|    794|    {
 1426|    794|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|    794|    {
  433|    794|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5369|  8.69k|    {
 5370|  8.69k|        return m_args;
 5371|  8.69k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.69k|    {
 7967|  8.69k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.34k|{
 8930|  4.34k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.34k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.34k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.34k|    static_cast<    \
  |  |  929|  4.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.34k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5130|  17.3k|{
 5131|  17.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  17.3k|                  "Scan argument types must be default constructible");
 5133|  17.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  17.3k|                  "Scan argument types must be Destructible");
 5135|  17.3k|    static_assert(
 5136|  17.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  17.3k|        "Scan argument types must not be references");
 5138|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5084|  17.3k|{
 5085|  17.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  17.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  17.3k|    constexpr bool scannable_char =
 5089|  17.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  17.3k|    static_assert(scannable_char,
 5091|  17.3k|                  "Cannot scan an argument of an unsupported character "
 5092|  17.3k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  17.3k|    constexpr bool scannable_const =
 5095|  17.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  17.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  17.3k|    constexpr bool scannable_disabled =
 5099|  17.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  17.3k|    static_assert(scannable_disabled,
 5101|  17.3k|                  "Cannot scan an argument that has been disabled by "
 5102|  17.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  17.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  17.3k|    static_assert(
 5106|  17.3k|        scannable,
 5107|  17.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  17.3k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  17.3k|    return arg_value{arg};
 5111|  17.3k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4897|  17.3k|    {
 4898|  17.3k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8586|  78.2k|{
 8587|  78.2k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  78.2k|    auto result = vscan_impl(buffer, format, args);
 8590|  78.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.1k, False: 140]
  |  |  ------------------
  ------------------
 8591|  78.1k|        return unexpected(result.error());
 8592|  78.1k|    }
 8593|    140|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    140|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  78.2k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4715|   156k|{
 4716|   156k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|   156k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|   156k|                  "\n"
 4720|   156k|                  "Unsupported range type given as input to a scanning "
 4721|   156k|                  "function.\n"
 4722|   156k|                  "A range needs to have a character type (value type) "
 4723|   156k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|   156k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|   156k|                  "to be included.\n"
 4726|   156k|                  "See the scnlib documentation for more details.");
 4727|   156k|    static_assert(
 4728|   156k|        !std::is_same_v<T, custom_char_traits>,
 4729|   156k|        "\n"
 4730|   156k|        "Unsupported range type given as input to a scanning "
 4731|   156k|        "function.\n"
 4732|   156k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|   156k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|   156k|        "not supported.");
 4735|   156k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|   156k|                  "\n"
 4737|   156k|                  "Unsupported range type given as input to a scanning "
 4738|   156k|                  "function.\n"
 4739|   156k|                  "file_marker_found cannot be used as an "
 4740|   156k|                  "source range type to scn::scan.\n"
 4741|   156k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|   156k|                  "and do not provide an explicit source range, "
 4743|   156k|                  "or use scn::scan with a FILE* directly.");
 4744|   156k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|   156k|                  "\n"
 4746|   156k|                  "Unsupported range type given as input to a scanning "
 4747|   156k|                  "function.\n"
 4748|   156k|                  "In order to be scannable, a range needs to satisfy "
 4749|   156k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|   156k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|   156k|                  "\n"
 4752|   156k|                  "Unsupported range type given as input to a scanning "
 4753|   156k|                  "function.\n"
 4754|   156k|                  "A range needs to model forward_range and have a valid "
 4755|   156k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|   156k|                  "Examples of scannable ranges are std::string, "
 4757|   156k|                  "std::string_view, "
 4758|   156k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|   156k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|   156k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|   156k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4607|   156k|{
 4608|   156k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4608:19): [Folded - Ignored]
  ------------------
 4609|   156k|        return r;
 4610|       |        // return make_string_scan_buffer(r);
 4611|   156k|    }
 4612|   156k|    else {
 4613|   156k|        return invalid_char_type{};
 4614|   156k|    }
 4615|   156k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|   156k|    {
 1472|   156k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   156k|    {
  443|   156k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   156k|    {
 1173|   156k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5918|    280|{
 5919|    280|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|    280|                      ranges::iterator_t<SourceRange>>) {
 5921|    280|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|    280|    }
 5923|    280|    else {
 5924|    280|        auto it = ranges::begin(source);
 5925|    280|        while (n > 0) {
 5926|    280|            --n;
 5927|    280|            ++it;
 5928|    280|        }
 5929|    280|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|    280|    }
 5931|    280|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|    280|    {
 2720|    280|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|    280|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|    280|    {
 2701|    280|        return decay_copy(t.begin());
 2702|    280|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1944|  9.38k|{
 1945|  9.38k|    return SCN_FWD(t);
  ------------------
  |  |  930|  9.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  9.38k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5905|    280|{
 5906|    280|    return ranges::end(source);
 5907|    280|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|    280|    {
 2777|    280|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|    280|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|    280|    {
 2759|    280|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|    280|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3311|   260k|    {
 3312|   260k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|    280|    {
 1426|    280|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|    280|    {
  433|    280|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5473|   156k|    {
 5474|   156k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 70]
  |  |  ------------------
  ------------------
 8817|  17.3k|        return unexpected(result.error());
 8818|  17.3k|    }
 8819|     70|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     70|    static_cast<    \
  |  |  929|     70|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     70|    static_cast<    \
  |  |  929|     70|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1593|   156k|    {
 1594|   156k|        return has_value();
 1595|   156k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   313k|    {
  481|   313k|        return m_has_value;
  482|   313k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1599|   156k|    {
 1600|   156k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   156k|        return this->get_unexpected().error();
 1602|   156k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   156k|    {
  464|   156k|        return m_unexpected;
  465|   156k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  17.3k|    {
 1472|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  17.3k|    {
  443|  17.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|    280|    {
 1649|    280|        return value();
 1650|    280|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|    280|    {
 1623|    280|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    280|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    280|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    280|        return this->get_value();
 1625|    280|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|    280|    {
  447|    280|        return m_value;
  448|    280|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5825|     70|    {
 5826|     70|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5676|    280|    {
 5677|    280|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5611|     70|    {
 5612|     70|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|     70|    {
 1426|     70|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|     70|    {
  433|     70|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7691|   156k|{
 7692|   156k|    return s;
 7693|   156k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7663|   156k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8602|  78.2k|{
 8603|  78.2k|#if !SCN_DISABLE_LOCALE
 8604|  78.2k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  78.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  78.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  78.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  78.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.1k, False: 140]
  |  |  ------------------
  ------------------
 8611|  78.1k|        return unexpected(result.error());
 8612|  78.1k|    }
 8613|    140|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    140|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  78.2k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 0]
  |  |  ------------------
  ------------------
 8817|  17.3k|        return unexpected(result.error());
 8818|  17.3k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  17.3k|    {
 1472|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  17.3k|    {
  443|  17.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 0]
  |  |  ------------------
  ------------------
 8817|  17.3k|        return unexpected(result.error());
 8818|  17.3k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  17.3k|    {
 1472|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  17.3k|    {
  443|  17.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 0]
  |  |  ------------------
  ------------------
 8817|  17.3k|        return unexpected(result.error());
 8818|  17.3k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  17.3k|    {
 1472|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  17.3k|    {
  443|  17.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 0]
  |  |  ------------------
  ------------------
 8817|  17.3k|        return unexpected(result.error());
 8818|  17.3k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  17.3k|    {
 1472|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  17.3k|    {
  443|  17.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 0]
  |  |  ------------------
  ------------------
 8817|  17.3k|        return unexpected(result.error());
 8818|  17.3k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  17.3k|    {
 1472|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  442|  17.3k|    {
  443|  17.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 70]
  |  |  ------------------
  ------------------
 8817|  17.3k|        return unexpected(result.error());
 8818|  17.3k|    }
 8819|     70|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     70|    static_cast<    \
  |  |  929|     70|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     70|    static_cast<    \
  |  |  929|     70|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1471|  17.3k|    {
 1472|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  17.3k|    {
  622|  17.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  17.3k|    {
  685|  17.3k|        scn::detail::construct_at(unexpected_ptr(),
  686|  17.3k|                                  std::forward<Args>(args)...);
  687|  17.3k|        m_has_value = false;
  688|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  34.6k|    {
  714|  34.6k|        return reinterpret_cast<unexpected<E>*>(
  715|  34.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  34.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  34.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5825|     70|    {
 5826|     70|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1425|     70|    {
 1426|     70|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|     70|    {
  612|     70|        construct(std::forward<Args>(args)...);
  613|     70|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|     70|    {
  678|     70|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|     70|        m_has_value = true;
  680|     70|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|     70|{
  388|     70|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|     70|        T(std::forward<Args>(args)...);
  390|     70|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5817|     70|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|    140|    {
  702|    140|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    140|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|    140|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5821|    140|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5366|  17.3k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  17.3k|    {
  627|  17.3k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 70, False: 17.3k]
  ------------------
  628|     70|            destroy_value();
  629|     70|        }
  630|  17.3k|        else {
  631|  17.3k|            destroy_unexpected();
  632|  17.3k|        }
  633|  17.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  17.3k|    {
  671|  17.3k|        return m_has_value;
  672|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|     70|    {
  692|     70|        scn::detail::destroy_at(value_ptr());
  693|     70|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|     70|{
  394|     70|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|     70|        for (auto& elem : *p) {
  396|     70|            scn::detail::destroy_at(&elem);
  397|     70|        }
  398|     70|    }
  399|     70|    else {
  400|     70|        p->~T();
  401|     70|    }
  402|     70|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  17.3k|    {
  696|  17.3k|        scn::detail::destroy_at(unexpected_ptr());
  697|  17.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 70]
  |  |  ------------------
  ------------------
 8817|  17.3k|        return unexpected(result.error());
 8818|  17.3k|    }
 8819|     70|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     70|    static_cast<    \
  |  |  929|     70|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     70|    static_cast<    \
  |  |  929|     70|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1471|  17.3k|    {
 1472|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  17.3k|    {
  622|  17.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  17.3k|    {
  685|  17.3k|        scn::detail::construct_at(unexpected_ptr(),
  686|  17.3k|                                  std::forward<Args>(args)...);
  687|  17.3k|        m_has_value = false;
  688|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  34.6k|    {
  714|  34.6k|        return reinterpret_cast<unexpected<E>*>(
  715|  34.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  34.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  34.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5825|     70|    {
 5826|     70|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1425|     70|    {
 1426|     70|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|     70|    {
  612|     70|        construct(std::forward<Args>(args)...);
  613|     70|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|     70|    {
  678|     70|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|     70|        m_has_value = true;
  680|     70|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|     70|{
  388|     70|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|     70|        T(std::forward<Args>(args)...);
  390|     70|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5817|     70|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|    140|    {
  702|    140|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    140|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|    140|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5821|    140|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5366|  17.3k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  17.3k|    {
  627|  17.3k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 70, False: 17.3k]
  ------------------
  628|     70|            destroy_value();
  629|     70|        }
  630|  17.3k|        else {
  631|  17.3k|            destroy_unexpected();
  632|  17.3k|        }
  633|  17.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  17.3k|    {
  671|  17.3k|        return m_has_value;
  672|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|     70|    {
  692|     70|        scn::detail::destroy_at(value_ptr());
  693|     70|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|     70|{
  394|     70|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|     70|        for (auto& elem : *p) {
  396|     70|            scn::detail::destroy_at(&elem);
  397|     70|        }
  398|     70|    }
  399|     70|    else {
  400|     70|        p->~T();
  401|     70|    }
  402|     70|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  17.3k|    {
  696|  17.3k|        scn::detail::destroy_at(unexpected_ptr());
  697|  17.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5391|  17.3k|{
 5392|  17.3k|    detail::check_scan_arg_types<Args...>();
 5393|  17.3k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  17.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5130|  17.3k|{
 5131|  17.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  17.3k|                  "Scan argument types must be default constructible");
 5133|  17.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  17.3k|                  "Scan argument types must be Destructible");
 5135|  17.3k|    static_assert(
 5136|  17.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  17.3k|        "Scan argument types must not be references");
 5138|  17.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5344|  17.3k|    {
 5345|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  17.3k|    {
 5356|  17.3k|        return {detail::make_arg<
 5357|  17.3k|            kind, Context,
 5358|  17.3k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  17.3k|                                 typename Context::char_type>::value>(args)...};
 5360|  17.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5165|  17.3k|{
 5166|  17.3k|    return make_value<Context>(value).ref_value;
 5167|  17.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5115|  17.3k|{
 5116|  17.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  17.3k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  17.3k|                                  needs_context_tag>) {
 5120|  17.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  17.3k|    }
 5122|  17.3k|    else {
 5123|  17.3k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  17.3k|            value, context_tag<Context>{}));
 5125|  17.3k|    }
 5126|  17.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4954|  17.3k|    {                                                                        \
 4955|  17.3k|        return val;                                                          \
 4956|  17.3k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5084|  17.3k|{
 5085|  17.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  17.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  17.3k|    constexpr bool scannable_char =
 5089|  17.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  17.3k|    static_assert(scannable_char,
 5091|  17.3k|                  "Cannot scan an argument of an unsupported character "
 5092|  17.3k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  17.3k|    constexpr bool scannable_const =
 5095|  17.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  17.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  17.3k|    constexpr bool scannable_disabled =
 5099|  17.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  17.3k|    static_assert(scannable_disabled,
 5101|  17.3k|                  "Cannot scan an argument that has been disabled by "
 5102|  17.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  17.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  17.3k|    static_assert(
 5106|  17.3k|        scannable,
 5107|  17.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  17.3k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  17.3k|    return arg_value{arg};
 5111|  17.3k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4897|  17.3k|    {
 4898|  17.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7970|  17.3k|    {
 7971|  17.3k|        return m_str;
 7972|  17.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  17.3k|    {
 5422|  17.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5374|  17.3k|    {
 5375|  17.3k|        return m_argptrs;
 5376|  17.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8815|  17.3k|{
 8816|  17.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 70]
  |  |  ------------------
  ------------------
 8817|  17.3k|        return unexpected(result.error());
 8818|  17.3k|    }
 8819|     70|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     70|    static_cast<    \
  |  |  929|     70|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     70|    static_cast<    \
  |  |  929|     70|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  17.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1471|  17.3k|    {
 1472|  17.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  17.3k|    {
  443|  17.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.3k|    {
 1173|  17.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5825|     70|    {
 5826|     70|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5611|     70|    {
 5612|     70|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1425|     70|    {
 1426|     70|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|     70|    {
  433|     70|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5369|  17.3k|    {
 5370|  17.3k|        return m_args;
 5371|  17.3k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  17.3k|    {
 7967|  17.3k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3563|   442k|    {
 3564|   442k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   442k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|   442k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  3.38M|    {
 3570|  3.38M|        return m_code == good;
 3571|  3.38M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|  60.7k|    {
 3581|  60.7k|        return m_code;
 3582|  60.7k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6176|  4.40k|    {
 6177|  4.40k|        return m_size;
 6178|  4.40k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6217|  4.20k|    {
 6218|  4.20k|        SCN_GCC_COMPAT_PUSH
 6219|  4.20k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6220|  4.20k|        switch (type) {
 6221|  1.89k|            case presentation_type::none:
  ------------------
  |  Branch (6221:13): [True: 1.89k, False: 2.31k]
  ------------------
 6222|  1.89k|                return 10;
 6223|     44|            case presentation_type::int_generic:
  ------------------
  |  Branch (6223:13): [True: 44, False: 4.16k]
  ------------------
 6224|     44|                return 0;
 6225|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6225:13): [True: 0, False: 4.20k]
  ------------------
 6226|      0|                return arbitrary_base;
 6227|       |
 6228|     20|            case presentation_type::int_binary:
  ------------------
  |  Branch (6228:13): [True: 20, False: 4.18k]
  ------------------
 6229|     20|                return 2;
 6230|     46|            case presentation_type::int_octal:
  ------------------
  |  Branch (6230:13): [True: 46, False: 4.16k]
  ------------------
 6231|     46|                return 8;
 6232|     36|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6232:13): [True: 36, False: 4.17k]
  ------------------
 6233|     60|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6233:13): [True: 24, False: 4.18k]
  ------------------
 6234|     60|                return 10;
 6235|  2.14k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6235:13): [True: 2.14k, False: 2.06k]
  ------------------
 6236|  2.14k|                return 16;
 6237|       |
 6238|      0|            default:
  ------------------
  |  Branch (6238:13): [True: 0, False: 4.20k]
  ------------------
 6239|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6240|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6241|  4.20k|        }
 6242|  4.20k|        SCN_GCC_COMPAT_POP
 6243|  4.20k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6255|  66.7k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6258|  9.50k|    {
 6259|  9.50k|        m_specs.align = align;
 6260|  9.50k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6267|    272|    {
 6268|    272|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|    272|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6268:23): [Folded - Ignored]
  ------------------
 6269|    272|            m_specs.localized = true;
 6270|    272|        }
 6271|      0|        else {
 6272|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6273|      0|        }
 6274|    272|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6277|  14.6k|    {
 6278|  14.6k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6278:13): [True: 0, False: 14.6k]
  |  Branch (6278:39): [True: 0, False: 0]
  ------------------
 6279|       |            // clang-format off
 6280|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6281|       |            // clang-format on
 6282|      0|        }
 6283|       |
 6284|  14.6k|        m_specs.width = width;
 6285|  14.6k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6287|  8.19k|    {
 6288|  8.19k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6288:13): [True: 84, False: 8.11k]
  ------------------
 6289|       |            // clang-format off
 6290|     84|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6291|       |            // clang-format on
 6292|     84|        }
 6293|       |
 6294|  8.11k|        m_specs.precision = prec;
 6295|  8.11k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6298|  73.3k|    {
 6299|  73.3k|        m_specs.type = type;
 6300|  73.3k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6303|  2.10M|    {
 6304|  2.10M|        const auto cp_value = static_cast<unsigned>(cp);
 6305|  2.10M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  2.10M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.86M, False: 245k]
  |  |  ------------------
  ------------------
 6306|  1.86M|            m_specs.charset_literals[cp_value / 8] |=
 6307|  1.86M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6308|  1.86M|        }
 6309|   245k|        else {
 6310|   245k|            m_specs.charset_has_nonascii = true;
 6311|   245k|        }
 6312|  2.10M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6315|  11.0k|    {
 6316|  11.0k|        const auto begin_value = static_cast<unsigned>(begin);
 6317|  11.0k|        const auto end_value = static_cast<unsigned>(end);
 6318|  11.0k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  11.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6319|       |
 6320|  11.0k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  11.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.35k, False: 4.66k]
  |  |  ------------------
  ------------------
 6321|       |            // No need to bit-twiddle with a mask, because with the
 6322|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6323|  6.35k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  6.35k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6324|   433k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6324:40): [True: 427k, False: 6.35k]
  ------------------
 6325|   427k|                m_specs.charset_literals[v / 8] |=
 6326|   427k|                    static_cast<unsigned char>(1ul << (v % 8));
 6327|   427k|            }
 6328|  6.35k|        }
 6329|  4.66k|        else {
 6330|  4.66k|            m_specs.charset_has_nonascii = true;
 6331|  4.66k|        }
 6332|  11.0k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6335|  2.34k|    {
 6336|  2.34k|        m_specs.charset_is_inverted = true;
 6337|  2.34k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6354|  36.1k|    {
 6355|  36.1k|        m_specs.regexp_flags = flags;
 6356|  36.1k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6360|  11.2k|    {
 6361|  11.2k|        SCN_UNLIKELY_ATTR
 6362|  11.2k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6363|  11.2k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6371|  2.19M|    {
 6372|  2.19M|        return static_cast<bool>(m_error);
 6373|  2.19M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|  60.7k|{
 3605|  60.7k|    return a.code() == b;
 3606|  60.7k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|  60.7k|{
 3609|  60.7k|    return !(a == b);
 3610|  60.7k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3903|   206k|{
 3904|   206k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3905|       |
 3906|   206k|    const auto is_trailing_code_unit = [](char ch) {
 3907|   206k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3908|   206k|    };
 3909|       |
 3910|   206k|    if (input.size() == 1) {
  ------------------
  |  Branch (3910:9): [True: 184k, False: 21.9k]
  ------------------
 3911|   184k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3912|   184k|        return static_cast<char32_t>(input[0]);
 3913|   184k|    }
 3914|       |
 3915|  21.9k|    if (input.size() == 2) {
  ------------------
  |  Branch (3915:9): [True: 21.1k, False: 792]
  ------------------
 3916|  21.1k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3917|  21.1k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3918|       |
 3919|  21.1k|        char32_t cp{};
 3920|  21.1k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3921|  21.1k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3922|  21.1k|        return cp;
 3923|  21.1k|    }
 3924|       |
 3925|    792|    if (input.size() == 3) {
  ------------------
  |  Branch (3925:9): [True: 602, False: 190]
  ------------------
 3926|    602|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|    602|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    602|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3927|    602|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    602|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    602|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3928|    602|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    602|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    602|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3929|       |
 3930|    602|        char32_t cp{};
 3931|    602|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3932|    602|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3933|    602|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3934|    602|        return cp;
 3935|    602|    }
 3936|       |
 3937|    190|    if (input.size() == 4) {
  ------------------
  |  Branch (3937:9): [True: 190, False: 0]
  ------------------
 3938|    190|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    190|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    190|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3939|    190|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    190|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    190|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3940|    190|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    190|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    190|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3941|    190|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    190|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    190|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3942|    190|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    190|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    190|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|       |
 3944|    190|        char32_t cp{};
 3945|    190|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3946|    190|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3947|    190|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3948|    190|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3949|    190|        return cp;
 3950|    190|    }
 3951|       |
 3952|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3953|       |    // gcc 7 thinks we'll get here, even when we won't
 3954|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3955|      0|#endif
 3956|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3957|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6106|  52.2k|{
 6107|  52.2k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6108|  52.2k|                                    static_cast<unsigned>(b));
 6109|  52.2k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6111|  4.82k|{
 6112|  4.82k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6113|  4.82k|                                    static_cast<unsigned>(b));
 6114|  4.82k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6126|  4.82k|{
 6127|  4.82k|    return a = a | b;
 6128|  4.82k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7058|    742|{
 7059|    742|    switch (type) {
 7060|    130|        case arg_type::none_type:
  ------------------
  |  Branch (7060:9): [True: 130, False: 612]
  ------------------
 7061|    130|            return arg_type_category::none;
 7062|       |
 7063|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7063:9): [True: 0, False: 742]
  ------------------
 7064|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 742]
  ------------------
 7065|     68|        case arg_type::int_type:
  ------------------
  |  Branch (7065:9): [True: 68, False: 674]
  ------------------
 7066|     68|        case arg_type::long_type:
  ------------------
  |  Branch (7066:9): [True: 0, False: 742]
  ------------------
 7067|     68|        case arg_type::llong_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 742]
  ------------------
 7068|     68|            return arg_type_category::integer;
 7069|       |
 7070|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 742]
  ------------------
 7071|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 742]
  ------------------
 7072|     68|        case arg_type::uint_type:
  ------------------
  |  Branch (7072:9): [True: 68, False: 674]
  ------------------
 7073|     68|        case arg_type::ulong_type:
  ------------------
  |  Branch (7073:9): [True: 0, False: 742]
  ------------------
 7074|     68|        case arg_type::ullong_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 742]
  ------------------
 7075|     68|            return arg_type_category::unsigned_integer;
 7076|       |
 7077|     68|        case arg_type::pointer_type:
  ------------------
  |  Branch (7077:9): [True: 68, False: 674]
  ------------------
 7078|     68|            return arg_type_category::pointer;
 7079|     68|        case arg_type::bool_type:
  ------------------
  |  Branch (7079:9): [True: 68, False: 674]
  ------------------
 7080|     68|            return arg_type_category::boolean;
 7081|     48|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7081:9): [True: 48, False: 694]
  ------------------
 7082|     68|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7082:9): [True: 20, False: 722]
  ------------------
 7083|     68|        case arg_type::code_point_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 742]
  ------------------
 7084|     68|            return arg_type_category::character;
 7085|       |
 7086|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 742]
  ------------------
 7087|     68|        case arg_type::double_type:
  ------------------
  |  Branch (7087:9): [True: 68, False: 674]
  ------------------
 7088|     68|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 742]
  ------------------
 7089|     68|            return arg_type_category::floating;
 7090|       |
 7091|     48|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7091:9): [True: 48, False: 694]
  ------------------
 7092|    116|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7092:9): [True: 68, False: 674]
  ------------------
 7093|    136|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7093:9): [True: 20, False: 722]
  ------------------
 7094|    204|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7094:9): [True: 68, False: 674]
  ------------------
 7095|    204|            return arg_type_category::string;
 7096|       |
 7097|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 742]
  ------------------
 7098|      0|            return arg_type_category::custom;
 7099|       |
 7100|      0|            SCN_CLANG_PUSH
 7101|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7102|      0|        default:
  ------------------
  |  Branch (7102:9): [True: 0, False: 742]
  ------------------
 7103|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|    742|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7105|    742|            SCN_CLANG_POP
 7106|    742|    }
 7107|       |
 7108|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|    742|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|    936|{
 3650|    936|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    936|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    936|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7144|  13.3k|{
 7145|  13.3k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.2k, False: 2.07k]
  |  |  ------------------
  ------------------
 7146|  11.2k|        return handler.on_error("Invalid type specifier for integer type");
 7147|  11.2k|    }
 7148|  2.07k|    if (specs.localized) {
  ------------------
  |  Branch (7148:9): [True: 80, False: 1.99k]
  ------------------
 7149|     80|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 72]
  |  |  ------------------
  ------------------
 7150|       |            // clang-format off
 7151|      8|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7152|       |            // clang-format on
 7153|      8|            return;
 7154|      8|        }
 7155|     72|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72]
  |  |  ------------------
  ------------------
 7156|       |            // clang-format off
 7157|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7158|       |            // clang-format on
 7159|      0|        }
 7160|     72|    }
 7161|  2.07k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1944|     64|{
 1945|     64|    return SCN_FWD(t);
  ------------------
  |  |  930|     64|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|     64|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  2.28k|{
 3650|  2.28k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  2.28k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7188|  6.67k|{
 7189|  6.67k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7189:9): [True: 5.72k, False: 950]
  ------------------
 7190|  6.67k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7190:10): [True: 86, False: 5.64k]
  ------------------
 7191|  5.72k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7191:10): [True: 5.55k, False: 86]
  ------------------
 7192|  5.64k|        SCN_UNLIKELY_ATTR
 7193|  5.64k|        return handler.on_error("Invalid type specifier for float type");
 7194|  5.64k|    }
 7195|  6.67k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  480|  23.6k|    {
  481|  23.6k|        return m_has_value;
  482|  23.6k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1593|  11.8k|    {
 1594|  11.8k|        return has_value();
 1595|  11.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  446|  11.8k|    {
  447|  11.8k|        return m_value;
  448|  11.8k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1622|  11.8k|    {
 1623|  11.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  11.8k|        return this->get_value();
 1625|  11.8k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1658|  11.8k|    {
 1659|  11.8k|        return std::move(value());
 1660|  11.8k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3649|  6.78k|{
 3650|  6.78k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  6.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  6.78k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3649|  3.25k|{
 3650|  3.25k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  3.25k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3649|    150|{
 3650|    150|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    150|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3649|    150|{
 3650|    150|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    150|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3649|  1.14k|{
 3650|  1.14k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.14k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7200|  19.8k|{
 7201|  19.8k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7201:9): [True: 2.77k, False: 17.0k]
  ------------------
 7202|  19.8k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7202:9): [True: 876, False: 16.2k]
  ------------------
 7203|  19.8k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7203:9): [True: 3.61k, False: 12.6k]
  ------------------
 7204|  19.8k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7204:9): [True: 11.2k, False: 1.33k]
  ------------------
 7205|  19.8k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7205:9): [True: 732, False: 606]
  ------------------
 7206|  19.2k|        return;
 7207|  19.2k|    }
 7208|    606|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7208:9): [True: 138, False: 468]
  ------------------
 7209|    138|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    138|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 126]
  |  |  ------------------
  ------------------
 7210|       |            // clang-format off
 7211|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7212|       |            // clang-format on
 7213|     12|        }
 7214|    126|        return;
 7215|    138|    }
 7216|    468|    SCN_UNLIKELY_ATTR
 7217|    468|    handler.on_error("Invalid type specifier for string");
 7218|    468|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3649|  4.59k|{
 3650|  4.59k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  4.59k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3649|     32|{
 3650|     32|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|     32|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7234|  6.67k|{
 7235|  6.67k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7235:9): [True: 5.72k, False: 950]
  ------------------
 7236|  6.67k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7236:9): [True: 5.42k, False: 300]
  ------------------
 7237|  6.67k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7237:9): [True: 5.41k, False: 18]
  ------------------
 7238|  6.67k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7238:9): [True: 5.39k, False: 12]
  ------------------
 7239|  6.67k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7239:9): [True: 5.38k, False: 12]
  ------------------
 7240|  6.67k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7240:9): [True: 5.37k, False: 8]
  ------------------
 7241|  6.67k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7241:9): [True: 5.35k, False: 20]
  ------------------
 7242|  6.67k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7242:9): [True: 5.34k, False: 16]
  ------------------
 7243|  5.34k|        SCN_UNLIKELY_ATTR
 7244|  5.34k|        return handler.on_error("Invalid type specifier for boolean");
 7245|  5.34k|    }
 7246|  6.67k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7166|  6.62k|{
 7167|  6.62k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7167:9): [True: 5.62k, False: 996]
  ------------------
 7168|  6.62k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7168:9): [True: 0, False: 996]
  ------------------
 7169|  5.62k|        SCN_UNLIKELY_ATTR
 7170|  5.62k|        return handler.on_error("Invalid type specifier for character type");
 7171|  5.62k|    }
 7172|  6.62k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7223|  6.62k|{
 7224|  6.62k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7224:9): [True: 5.69k, False: 926]
  ------------------
 7225|  6.62k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7225:9): [True: 5.68k, False: 8]
  ------------------
 7226|  5.68k|        SCN_UNLIKELY_ATTR
 7227|  5.68k|        return handler.on_error("Invalid type specifier for pointer");
 7228|  5.68k|    }
 7229|  6.62k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA70_KcEEEDaDpOT_:
 3649|      8|{
 3650|      8|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|      8|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   139k|{
 3711|   139k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|   139k|                                          const CharT*, const CharT*>) {
 3713|   139k|        return {first, last};
 3714|   139k|    }
 3715|   139k|    else {
 3716|   139k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   139k|    }
 3718|   139k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   158k|{
 3711|   158k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|   158k|                                          const CharT*, const CharT*>) {
 3713|   158k|        return {first, last};
 3714|   158k|    }
 3715|   158k|    else {
 3716|   158k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   158k|    }
 3718|   158k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  2.03M|    {
 3326|  2.03M|        return m_iterator;
 3327|  2.03M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  2.36M|    {
 3330|  2.36M|        return m_sentinel;
 3331|  2.36M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|   404k|    {
 3326|   404k|        return m_iterator;
 3327|   404k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|   484k|    {
 3330|   484k|        return m_sentinel;
 3331|   484k|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7986|   123k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|     84|{
 1207|     84|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|     84|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|  1.56k|    {
  357|  1.56k|        return m_unexpected;
  358|  1.56k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3649|  5.28k|{
 3650|  5.28k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  5.28k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|  26.3k|    {
  343|  26.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  26.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  26.3k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|  80.3k|    {
 1472|  80.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  81.2k|    {
  443|  81.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   110k|    {
 1173|   110k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|  22.3k|    {
 1426|  22.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  22.3k|    {
  433|  22.3k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1593|   111k|    {
 1594|   111k|        return has_value();
 1595|   111k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|   220k|    {
  481|   220k|        return m_has_value;
  482|   220k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1599|  80.3k|    {
 1600|  80.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  80.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  80.3k|        return this->get_unexpected().error();
 1602|  80.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  80.3k|    {
  464|  80.3k|        return m_unexpected;
  465|  80.3k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|  19.6k|    {
 1659|  19.6k|        return std::move(value());
 1660|  19.6k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|  28.5k|    {
 1623|  28.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  28.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  28.5k|        return this->get_value();
 1625|  28.5k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|  28.5k|    {
  447|  28.5k|        return m_value;
  448|  28.5k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|  27.6k|    {
 1472|  27.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  28.5k|    {
  443|  28.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  45.5k|    {
 1173|  45.5k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|  15.5k|    {
 1426|  15.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  15.5k|    {
  433|  15.5k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1593|  46.4k|    {
 1594|  46.4k|        return has_value();
 1595|  46.4k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|  90.2k|    {
  481|  90.2k|        return m_has_value;
  482|  90.2k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1599|  27.6k|    {
 1600|  27.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  27.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  27.6k|        return this->get_unexpected().error();
 1602|  27.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  27.6k|    {
  464|  27.6k|        return m_unexpected;
  465|  27.6k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|  13.3k|    {
 1659|  13.3k|        return std::move(value());
 1660|  13.3k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|  16.0k|    {
 1623|  16.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  16.0k|        return this->get_value();
 1625|  16.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|  16.0k|    {
  447|  16.0k|        return m_value;
  448|  16.0k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  8.47k|    {
 1833|  8.47k|        return detail::transform_error_impl(std::move(*this),
 1834|  8.47k|                                            std::forward<F>(f));
 1835|  8.47k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  8.47k|{
 1319|  8.47k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  8.47k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  8.47k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  8.47k|            return result(*std::forward<Exp>(exp));
 1323|  8.47k|        }
 1324|       |
 1325|  8.47k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  8.47k|        return result(unexpect, monostate{});
 1327|  8.47k|    }
 1328|  8.47k|    else {
 1329|  8.47k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  8.47k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.47k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.47k, False: 0]
  |  |  ------------------
  ------------------
 1331|  8.47k|                   ? result(*std::forward<Exp>(exp))
 1332|  8.47k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  8.47k|    }
 1336|  8.47k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  86.1k|    {
  481|  86.1k|        return m_has_value;
  482|  86.1k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|  10.3k|    {
 1659|  10.3k|        return std::move(value());
 1660|  10.3k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|  40.2k|    {
 1623|  40.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  40.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  40.2k|        return this->get_value();
 1625|  40.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  40.2k|    {
  447|  40.2k|        return m_value;
  448|  40.2k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1609|    104|    {
 1610|    104|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    104|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    104|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    104|        return std::move(this->get_unexpected().error());
 1612|    104|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|    104|    {
  464|    104|        return m_unexpected;
  465|    104|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|    936|    {
 1482|    936|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|   346k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6182|  2.78k|    {
 6183|  2.78k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  2.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6184|  2.78k|        CharT r{};
 6185|  2.78k|        std::memcpy(&r, m_data, m_size);
 6186|  2.78k|        return r;
 6187|  2.78k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  342|    842|    {
  343|    842|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    842|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|    842|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|    926|    {
  352|    926|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    926|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|    926|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6191|    564|    {
 6192|    564|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6193|    564|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2957|     64|    {
 2958|     64|        return fn::impl(std::forward<T>(t));
 2959|     64|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2948|     64|    {
 2949|     64|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2950|     64|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2925|     64|    {
 2926|     64|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|     64|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2891|     64|    {
 2892|     64|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     64|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|     64|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|     84|    {
  343|     84|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|     84|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|     84|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  342|      8|    {
  343|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  356|  18.1k|    {
  357|  18.1k|        return m_unexpected;
  358|  18.1k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  3.32k|    {
  352|  3.32k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.32k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  3.32k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  342|  28.2k|    {
  343|  28.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  28.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  28.2k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  356|  28.2k|    {
  357|  28.2k|        return m_unexpected;
  358|  28.2k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  351|  28.2k|    {
  352|  28.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  28.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  28.2k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|    554|{
 1207|    554|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|    554|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  342|  2.76k|    {
  343|  2.76k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.76k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  2.76k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1206|  1.22k|{
 1207|  1.22k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  1.22k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  68.1k|{
  322|  68.1k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  68.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  68.1k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3341|   123k|    {
 3342|   123k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|   123k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|    284|    {
 1472|    284|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|    284|    {
  443|    284|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  45.8k|    {
 1173|  45.8k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  45.5k|    {
 1426|  45.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  45.5k|    {
  433|  45.5k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1593|  35.4k|    {
 1594|  35.4k|        return has_value();
 1595|  35.4k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1648|  29.8k|    {
 1649|  29.8k|        return value();
 1650|  29.8k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1425|  5.36k|    {
 1426|  5.36k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  5.36k|    {
  433|  5.36k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  5.74k|    {
 1173|  5.74k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|    384|    {
 1472|    384|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    384|    {
  443|    384|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1593|  1.89k|    {
 1594|  1.89k|        return has_value();
 1595|  1.89k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  480|  9.90k|    {
  481|  9.90k|        return m_has_value;
  482|  9.90k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1648|    306|    {
 1649|    306|        return value();
 1650|    306|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1622|  3.88k|    {
 1623|  3.88k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.88k|        return this->get_value();
 1625|  3.88k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  446|  3.88k|    {
  447|  3.88k|        return m_value;
  448|  3.88k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1832|  2.23k|    {
 1833|  2.23k|        return detail::transform_error_impl(std::move(*this),
 1834|  2.23k|                                            std::forward<F>(f));
 1835|  2.23k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1318|  2.23k|{
 1319|  2.23k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.23k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.23k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.23k|            return result(*std::forward<Exp>(exp));
 1323|  2.23k|        }
 1324|       |
 1325|  2.23k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.23k|        return result(unexpect, monostate{});
 1327|  2.23k|    }
 1328|  2.23k|    else {
 1329|  2.23k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.23k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.23k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.15k, False: 84]
  |  |  ------------------
  ------------------
 1331|  2.23k|                   ? result(*std::forward<Exp>(exp))
 1332|  2.23k|                   : result(unexpect,
 1333|     84|                            trivial_invoke(std::forward<F>(f),
 1334|     84|                                           std::forward<Exp>(exp).error()));
 1335|  2.23k|    }
 1336|  2.23k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1658|  3.58k|    {
 1659|  3.58k|        return std::move(value());
 1660|  3.58k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1425|  3.28k|    {
 1426|  3.28k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  3.28k|    {
  433|  3.28k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.63k|    {
 1173|  8.63k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1609|    276|    {
 1610|    276|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    276|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    276|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    276|        return std::move(this->get_unexpected().error());
 1612|    276|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  463|    276|    {
  464|    276|        return m_unexpected;
  465|    276|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1481|  1.30k|    {
 1482|  1.30k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  4.66k|    {
  443|  4.66k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|     84|    {
 1472|     84|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|     84|    {
  443|     84|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  23.0k|    {
 1173|  23.0k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  22.9k|    {
 1426|  22.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  22.9k|    {
  433|  22.9k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1593|  23.0k|    {
 1594|  23.0k|        return has_value();
 1595|  23.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|  46.0k|    {
  481|  46.0k|        return m_has_value;
  482|  46.0k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1599|     84|    {
 1600|     84|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     84|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     84|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|     84|        return this->get_unexpected().error();
 1602|     84|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|     84|    {
  464|     84|        return m_unexpected;
  465|     84|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  22.9k|    {
 1659|  22.9k|        return std::move(value());
 1660|  22.9k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  22.9k|    {
 1623|  22.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  22.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  22.9k|        return this->get_value();
 1625|  22.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|  22.9k|    {
  447|  22.9k|        return m_value;
  448|  22.9k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|  3.36k|    {
 1472|  3.36k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|    436|    {
 1472|    436|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    628|    {
  443|    628|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  6.03k|    {
 1173|  6.03k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  3.97k|    {
 1472|  3.97k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  3.97k|    {
  443|  3.97k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1593|  5.54k|    {
 1594|  5.54k|        return has_value();
 1595|  5.54k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  480|  10.8k|    {
  481|  10.8k|        return m_has_value;
  482|  10.8k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1599|  1.91k|    {
 1600|  1.91k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.91k|        return this->get_unexpected().error();
 1602|  1.91k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  463|  2.65k|    {
  464|  2.65k|        return m_unexpected;
  465|  2.65k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1425|    994|    {
 1426|    994|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|    994|    {
  433|    994|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    994|    {
 1173|    994|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1622|  1.43k|    {
 1623|  1.43k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  1.43k|        return this->get_value();
 1625|  1.43k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  446|  1.43k|    {
  447|  1.43k|        return m_value;
  448|  1.43k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1593|    750|    {
 1594|    750|        return has_value();
 1595|    750|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  480|  1.98k|    {
  481|  1.98k|        return m_has_value;
  482|  1.98k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    750|    {
 1173|    750|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1658|    994|    {
 1659|    994|        return std::move(value());
 1660|    994|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1622|    994|    {
 1623|    994|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    994|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    994|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    994|        return this->get_value();
 1625|    994|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  446|    994|    {
  447|    994|        return m_value;
  448|    994|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3329|   177k|    {
 3330|   177k|        return m_sentinel;
 3331|   177k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1832|  1.62k|    {
 1833|  1.62k|        return detail::transform_error_impl(std::move(*this),
 1834|  1.62k|                                            std::forward<F>(f));
 1835|  1.62k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1318|  1.62k|{
 1319|  1.62k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  1.62k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  1.62k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  1.62k|            return result(*std::forward<Exp>(exp));
 1323|  1.62k|        }
 1324|       |
 1325|  1.62k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  1.62k|        return result(unexpect, monostate{});
 1327|  1.62k|    }
 1328|  1.62k|    else {
 1329|  1.62k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  1.62k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.62k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.43k, False: 192]
  |  |  ------------------
  ------------------
 1331|  1.62k|                   ? result(*std::forward<Exp>(exp))
 1332|  1.62k|                   : result(unexpect,
 1333|    192|                            trivial_invoke(std::forward<F>(f),
 1334|    192|                                           std::forward<Exp>(exp).error()));
 1335|  1.62k|    }
 1336|  1.62k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1425|  1.43k|    {
 1426|  1.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  1.43k|    {
  433|  1.43k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1481|    192|    {
 1482|    192|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1658|  1.43k|    {
 1659|  1.43k|        return std::move(value());
 1660|  1.43k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3325|   340k|    {
 3326|   340k|        return m_iterator;
 3327|   340k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1425|    750|    {
 1426|    750|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|    750|    {
  433|    750|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1832|    750|    {
 1833|    750|        return detail::transform_error_impl(std::move(*this),
 1834|    750|                                            std::forward<F>(f));
 1835|    750|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1318|    750|{
 1319|    750|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    750|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    750|        if (SCN_LIKELY(exp.has_value())) {
 1322|    750|            return result(*std::forward<Exp>(exp));
 1323|    750|        }
 1324|       |
 1325|    750|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    750|        return result(unexpect, monostate{});
 1327|    750|    }
 1328|    750|    else {
 1329|    750|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    750|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    750|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 750, False: 0]
  |  |  ------------------
  ------------------
 1331|    750|                   ? result(*std::forward<Exp>(exp))
 1332|    750|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    750|    }
 1336|    750|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  480|  1.50k|    {
  481|  1.50k|        return m_has_value;
  482|  1.50k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1658|    750|    {
 1659|    750|        return std::move(value());
 1660|    750|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1622|    750|    {
 1623|    750|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    750|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    750|        return this->get_value();
 1625|    750|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  446|    750|    {
  447|    750|        return m_value;
  448|    750|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1425|    750|    {
 1426|    750|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|    750|    {
  433|    750|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    750|    {
 1173|    750|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1593|    750|    {
 1594|    750|        return has_value();
 1595|    750|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.50k|    {
  481|  1.50k|        return m_has_value;
  482|  1.50k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1658|    750|    {
 1659|    750|        return std::move(value());
 1660|    750|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1622|    750|    {
 1623|    750|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    750|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    750|        return this->get_value();
 1625|    750|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    750|    {
  447|    750|        return m_value;
  448|    750|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1832|    734|    {
 1833|    734|        return detail::transform_error_impl(std::move(*this),
 1834|    734|                                            std::forward<F>(f));
 1835|    734|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1318|    734|{
 1319|    734|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    734|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    734|        if (SCN_LIKELY(exp.has_value())) {
 1322|    734|            return result(*std::forward<Exp>(exp));
 1323|    734|        }
 1324|       |
 1325|    734|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    734|        return result(unexpect, monostate{});
 1327|    734|    }
 1328|    734|    else {
 1329|    734|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    734|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    734|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 734]
  |  |  ------------------
  ------------------
 1331|    734|                   ? result(*std::forward<Exp>(exp))
 1332|    734|                   : result(unexpect,
 1333|    734|                            trivial_invoke(std::forward<F>(f),
 1334|    734|                                           std::forward<Exp>(exp).error()));
 1335|    734|    }
 1336|    734|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1609|    734|    {
 1610|    734|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    734|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    734|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    734|        return std::move(this->get_unexpected().error());
 1612|    734|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3643|  1.22k|    {
 3644|  1.22k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3311|   118k|    {
 3312|   118k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  1.57k|    {
 2720|  1.57k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  1.57k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  1.57k|    {
 2701|  1.57k|        return decay_copy(t.begin());
 2702|  1.57k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1944|  3.39k|{
 1945|  3.39k|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  3.39k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3325|  1.57k|    {
 3326|  1.57k|        return m_iterator;
 3327|  1.57k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  1.57k|    {
 2777|  1.57k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  1.57k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  1.57k|    {
 2759|  1.57k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  1.57k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3329|  1.57k|    {
 3330|  1.57k|        return m_sentinel;
 3331|  1.57k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_LPv0EEET_SA_:
 3311|  1.57k|    {
 3312|  1.57k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|     16|    {
 1472|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  621|     16|    {
  622|     16|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  684|     16|    {
  685|     16|        scn::detail::construct_at(unexpected_ptr(),
  686|     16|                                  std::forward<Args>(args)...);
  687|     16|        m_has_value = false;
  688|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     48|    {
  714|     48|        return reinterpret_cast<unexpected<E>*>(
  715|     48|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     48|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     48|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|     16|    {
 1173|     16|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1593|     16|    {
 1594|     16|        return has_value();
 1595|     16|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  670|     48|    {
  671|     48|        return m_has_value;
  672|     48|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1599|     16|    {
 1600|     16|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|     16|        return this->get_unexpected().error();
 1602|     16|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     16|    {
  654|     16|        return *unexpected_ptr();
  655|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  626|     16|    {
  627|     16|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 16]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     16|        else {
  631|     16|            destroy_unexpected();
  632|     16|        }
  633|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     16|    {
  696|     16|        scn::detail::destroy_at(unexpected_ptr());
  697|     16|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1593|  8.87k|    {
 1594|  8.87k|        return has_value();
 1595|  8.87k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  17.2k|    {
  481|  17.2k|        return m_has_value;
  482|  17.2k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1599|  4.42k|    {
 1600|  4.42k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  4.42k|        return this->get_unexpected().error();
 1602|  4.42k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  4.42k|    {
  464|  4.42k|        return m_unexpected;
  465|  4.42k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1658|  3.28k|    {
 1659|  3.28k|        return std::move(value());
 1660|  3.28k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1622|  3.96k|    {
 1623|  3.96k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.96k|        return this->get_value();
 1625|  3.96k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.96k|    {
  447|  3.96k|        return m_value;
  448|  3.96k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  1.01k|    {
 1472|  1.01k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.12k|    {
  443|  1.12k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  13.8k|    {
 1173|  13.8k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  10.8k|    {
 1472|  10.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  10.8k|    {
  443|  10.8k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1593|  14.7k|    {
 1594|  14.7k|        return has_value();
 1595|  14.7k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  23.0k|    {
  481|  23.0k|        return m_has_value;
  482|  23.0k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1599|  5.50k|    {
 1600|  5.50k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  5.50k|        return this->get_unexpected().error();
 1602|  5.50k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  5.50k|    {
  464|  5.50k|        return m_unexpected;
  465|  5.50k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1425|  3.55k|    {
 1426|  3.55k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  3.55k|    {
  433|  3.55k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.55k|    {
 1173|  3.55k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1622|  1.84k|    {
 1623|  1.84k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  1.84k|        return this->get_value();
 1625|  1.84k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  1.84k|    {
  447|  1.84k|        return m_value;
  448|  1.84k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1593|  2.65k|    {
 1594|  2.65k|        return has_value();
 1595|  2.65k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  7.11k|    {
  481|  7.11k|        return m_has_value;
  482|  7.11k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.65k|    {
 1173|  2.65k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|  3.55k|    {
 1659|  3.55k|        return std::move(value());
 1660|  3.55k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|  3.55k|    {
 1623|  3.55k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.55k|        return this->get_value();
 1625|  3.55k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  3.55k|    {
  447|  3.55k|        return m_value;
  448|  3.55k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3216|  97.3k|    {
 3217|  97.3k|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 1.58k, False: 95.7k]
  ------------------
 3218|  97.3k|                   ? nullptr
 3219|  97.3k|                   : std::addressof(*ranges::begin(derived()));
 3220|  97.3k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|  97.3k|    {
 3001|  97.3k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  97.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|  97.3k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|  97.3k|    {
 2974|  97.3k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  97.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|  97.3k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3334|  97.3k|    {
 3335|  97.3k|        return m_iterator == m_sentinel;
 3336|  97.3k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3175|   193k|    {
 3176|   193k|        return static_cast<D&>(*this);
 3177|   193k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  95.7k|    {
 2720|  95.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  95.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  95.7k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  95.7k|    {
 2701|  95.7k|        return decay_copy(t.begin());
 2702|  95.7k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1425|  1.84k|    {
 1426|  1.84k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.84k|    {
  433|  1.84k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1425|  2.65k|    {
 1426|  2.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.65k|    {
  433|  2.65k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  2.65k|    {
 1833|  2.65k|        return detail::transform_error_impl(std::move(*this),
 1834|  2.65k|                                            std::forward<F>(f));
 1835|  2.65k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1318|  2.65k|{
 1319|  2.65k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.65k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.65k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.65k|            return result(*std::forward<Exp>(exp));
 1323|  2.65k|        }
 1324|       |
 1325|  2.65k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.65k|        return result(unexpect, monostate{});
 1327|  2.65k|    }
 1328|  2.65k|    else {
 1329|  2.65k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.65k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.65k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.65k, False: 0]
  |  |  ------------------
  ------------------
 1331|  2.65k|                   ? result(*std::forward<Exp>(exp))
 1332|  2.65k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  2.65k|    }
 1336|  2.65k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  480|  5.30k|    {
  481|  5.30k|        return m_has_value;
  482|  5.30k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1658|  2.65k|    {
 1659|  2.65k|        return std::move(value());
 1660|  2.65k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1622|  2.65k|    {
 1623|  2.65k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.65k|        return this->get_value();
 1625|  2.65k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  446|  2.65k|    {
  447|  2.65k|        return m_value;
  448|  2.65k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  2.65k|    {
 1426|  2.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.65k|    {
  433|  2.65k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.65k|    {
 1173|  2.65k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1593|  2.65k|    {
 1594|  2.65k|        return has_value();
 1595|  2.65k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.30k|    {
  481|  5.30k|        return m_has_value;
  482|  5.30k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  2.65k|    {
 1659|  2.65k|        return std::move(value());
 1660|  2.65k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  2.65k|    {
 1623|  2.65k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.65k|        return this->get_value();
 1625|  2.65k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.65k|    {
  447|  2.65k|        return m_value;
  448|  2.65k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1471|     32|    {
 1472|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  621|     32|    {
  622|     32|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  684|     32|    {
  685|     32|        scn::detail::construct_at(unexpected_ptr(),
  686|     32|                                  std::forward<Args>(args)...);
  687|     32|        m_has_value = false;
  688|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     96|    {
  714|     96|        return reinterpret_cast<unexpected<E>*>(
  715|     96|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     96|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     96|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|     32|    {
 1173|     32|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1593|     32|    {
 1594|     32|        return has_value();
 1595|     32|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  670|     96|    {
  671|     96|        return m_has_value;
  672|     96|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1599|     32|    {
 1600|     32|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|     32|        return this->get_unexpected().error();
 1602|     32|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     32|    {
  654|     32|        return *unexpected_ptr();
  655|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  626|     32|    {
  627|     32|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 32]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     32|        else {
  631|     32|            destroy_unexpected();
  632|     32|        }
  633|     32|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     32|    {
  696|     32|        scn::detail::destroy_at(unexpected_ptr());
  697|     32|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  83.1k|    {
 2851|  83.1k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  83.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  83.1k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  83.1k|    {
 2832|  83.1k|        return t.data();
 2833|  83.1k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  5.04k|    {
 1426|  5.04k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.04k|    {
  433|  5.04k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1471|   235k|    {
 1472|   235k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|   235k|    {
  443|   235k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   238k|    {
 1173|   238k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1425|  2.81k|    {
 1426|  2.81k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  2.81k|    {
  433|  2.81k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1206|  2.65k|{
 1207|  2.65k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  2.65k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1832|    244|    {
 1833|    244|        return detail::transform_error_impl(std::move(*this),
 1834|    244|                                            std::forward<F>(f));
 1835|    244|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1318|    244|{
 1319|    244|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    244|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    244|        if (SCN_LIKELY(exp.has_value())) {
 1322|    244|            return result(*std::forward<Exp>(exp));
 1323|    244|        }
 1324|       |
 1325|    244|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    244|        return result(unexpect, monostate{});
 1327|    244|    }
 1328|    244|    else {
 1329|    244|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    244|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    244|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 244, False: 0]
  |  |  ------------------
  ------------------
 1331|    244|                   ? result(*std::forward<Exp>(exp))
 1332|    244|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    244|    }
 1336|    244|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1425|    244|    {
 1426|    244|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|    244|    {
  433|    244|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    244|    {
 1173|    244|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|    244|    {
 1594|    244|        return has_value();
 1595|    244|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    488|    {
  481|    488|        return m_has_value;
  482|    488|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1658|    244|    {
 1659|    244|        return std::move(value());
 1660|    244|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1622|    244|    {
 1623|    244|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    244|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    244|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    244|        return this->get_value();
 1625|    244|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    244|    {
  447|    244|        return m_value;
  448|    244|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1818|    488|    {
 1819|    488|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|    488|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1318|    488|{
 1319|    488|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    488|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    488|        if (SCN_LIKELY(exp.has_value())) {
 1322|    488|            return result(*std::forward<Exp>(exp));
 1323|    488|        }
 1324|       |
 1325|    488|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    488|        return result(unexpect, monostate{});
 1327|    488|    }
 1328|    488|    else {
 1329|    488|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    488|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    488|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 488]
  |  |  ------------------
  ------------------
 1331|    488|                   ? result(*std::forward<Exp>(exp))
 1332|    488|                   : result(unexpect,
 1333|    488|                            trivial_invoke(std::forward<F>(f),
 1334|    488|                                           std::forward<Exp>(exp).error()));
 1335|    488|    }
 1336|    488|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1648|    678|    {
 1649|    678|        return value();
 1650|    678|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|    238|    {
 2720|    238|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|    238|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|    238|    {
 2701|    238|        return decay_copy(t.begin());
 2702|    238|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|    230|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|    906|    {
 1833|    906|        return detail::transform_error_impl(std::move(*this),
 1834|    906|                                            std::forward<F>(f));
 1835|    906|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1318|    906|{
 1319|    906|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    906|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    906|        if (SCN_LIKELY(exp.has_value())) {
 1322|    906|            return result(*std::forward<Exp>(exp));
 1323|    906|        }
 1324|       |
 1325|    906|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    906|        return result(unexpect, monostate{});
 1327|    906|    }
 1328|    906|    else {
 1329|    906|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    906|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    906|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 906, False: 0]
  |  |  ------------------
  ------------------
 1331|    906|                   ? result(*std::forward<Exp>(exp))
 1332|    906|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    906|    }
 1336|    906|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|    906|    {
 1426|    906|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|    906|    {
  433|    906|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    906|    {
 1173|    906|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|    906|    {
 1594|    906|        return has_value();
 1595|    906|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.81k|    {
  481|  1.81k|        return m_has_value;
  482|  1.81k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|    906|    {
 1659|    906|        return std::move(value());
 1660|    906|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|    906|    {
 1623|    906|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    906|        return this->get_value();
 1625|    906|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    906|    {
  447|    906|        return m_value;
  448|    906|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1818|    936|    {
 1819|    936|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|    936|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1318|    936|{
 1319|    936|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    936|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    936|        if (SCN_LIKELY(exp.has_value())) {
 1322|    936|            return result(*std::forward<Exp>(exp));
 1323|    936|        }
 1324|       |
 1325|    936|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    936|        return result(unexpect, monostate{});
 1327|    936|    }
 1328|    936|    else {
 1329|    936|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    936|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    936|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 936]
  |  |  ------------------
  ------------------
 1331|    936|                   ? result(*std::forward<Exp>(exp))
 1332|    936|                   : result(unexpect,
 1333|    936|                            trivial_invoke(std::forward<F>(f),
 1334|    936|                                           std::forward<Exp>(exp).error()));
 1335|    936|    }
 1336|    936|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3643|    936|    {
 3644|    936|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  8.96k|    {
 1649|  8.96k|        return value();
 1650|  8.96k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6692|  3.02k|{
 6693|  3.02k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6694|  3.02k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  3.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6695|       |
 6696|  3.02k|    auto start = begin;
 6697|  3.02k|    ++begin;
 6698|       |
 6699|  3.02k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.02k]
  |  |  ------------------
  ------------------
 6700|       |        // clang-format off
 6701|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6702|       |        // clang-format on
 6703|      0|        return {};
 6704|      0|    }
 6705|  3.02k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6705:9): [True: 372, False: 2.65k]
  ------------------
 6706|    372|        handler.on_charset_inverted();
 6707|    372|        ++begin;
 6708|    372|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 372]
  |  |  ------------------
  ------------------
 6709|       |            // clang-format off
 6710|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6711|       |            // clang-format on
 6712|      0|            return {};
 6713|      0|        }
 6714|    372|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6714:13): [True: 6, False: 366]
  ------------------
 6715|      6|            handler.on_charset_single(char32_t{']'});
 6716|      6|            ++begin;
 6717|      6|        }
 6718|    372|    }
 6719|  2.65k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6719:14): [True: 0, False: 2.65k]
  ------------------
 6720|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6721|      0|    }
 6722|       |
 6723|   704k|    while (begin != end) {
  ------------------
  |  Branch (6723:12): [True: 704k, False: 0]
  ------------------
 6724|   704k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   704k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 704k]
  |  |  ------------------
  ------------------
 6725|      0|            break;
 6726|      0|        }
 6727|       |
 6728|   704k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 3.02k, False: 701k]
  ------------------
 6729|  3.02k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6730|  3.02k|        }
 6731|       |
 6732|   701k|        parse_presentation_set_literal(begin, end, handler);
 6733|   701k|    }
 6734|       |
 6735|      0|    SCN_UNLIKELY_ATTR
 6736|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6737|      0|    return {};
 6738|  3.02k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6656|   701k|{
 6657|   701k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   701k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   701k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6658|       |
 6659|   701k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6660|   701k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|   701k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 701k]
  |  |  ------------------
  ------------------
 6661|      0|        return;
 6662|      0|    }
 6663|       |
 6664|   701k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6664:9): [True: 701k, False: 0]
  |  Branch (6664:25): [True: 3.37k, False: 697k]
  |  Branch (6664:49): [True: 3.37k, False: 0]
  ------------------
 6665|   701k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6665:9): [True: 3.30k, False: 72]
  ------------------
 6666|  3.30k|        ++begin;
 6667|       |
 6668|  3.30k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6669|  3.30k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  3.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.30k]
  |  |  ------------------
  ------------------
 6670|      0|            return;
 6671|      0|        }
 6672|       |
 6673|  3.30k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  3.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.30k]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6676|       |            // clang-format on
 6677|      0|            return;
 6678|      0|        }
 6679|       |
 6680|  3.30k|        handler.on_charset_range(cp_first, cp_second + 1);
 6681|  3.30k|        return;
 6682|  3.30k|    }
 6683|       |
 6684|   697k|    handler.on_charset_single(cp_first);
 6685|   697k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6632|   704k|{
 6633|   704k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   704k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   704k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6634|       |
 6635|   704k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6636|   704k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  1.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 704k]
  |  |  |  Branch (859:45): [True: 0, False: 704k]
  |  |  |  Branch (859:45): [True: 0, False: 704k]
  |  |  ------------------
  ------------------
 6637|      0|        handler.on_error("Invalid encoding in format string");
 6638|      0|        return invalid_code_point;
 6639|      0|    }
 6640|       |
 6641|   704k|    const auto cp =
 6642|   704k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6643|   704k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   704k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 704k]
  |  |  ------------------
  ------------------
 6644|      0|        handler.on_error("Invalid encoding in format string");
 6645|      0|        return invalid_code_point;
 6646|      0|    }
 6647|       |
 6648|   704k|    begin += len;
 6649|   704k|    return cp;
 6650|   704k|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  11.8k|    {
 1173|  11.8k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1425|  11.8k|    {
 1426|  11.8k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  432|  11.8k|    {
  433|  11.8k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6247|  13.0k|    {
 6248|  13.0k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6249|  13.0k|                charset_string_size};
 6250|  13.0k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1425|    678|    {
 1426|    678|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  432|    678|    {
  433|    678|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1425|  2.07k|    {
 1426|  2.07k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  432|  2.07k|    {
  433|  2.07k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4028|   206k|{
 4029|   206k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4029:19): [Folded - Ignored]
  ------------------
 4030|   206k|        return decode_utf8_code_point_exhaustive_valid(input);
 4031|   206k|    }
 4032|   206k|    else if constexpr (sizeof(CharT) == 2) {
 4033|   206k|        return decode_utf16_code_point_exhaustive_valid(input);
 4034|   206k|    }
 4035|   206k|    else {
 4036|   206k|        SCN_EXPECT(input.size() == 1);
 4037|   206k|        return static_cast<char32_t>(input.front());
 4038|   206k|    }
 4039|   206k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3906|  22.9k|    const auto is_trailing_code_unit = [](char ch) {
 3907|  22.9k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3908|  22.9k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6182|  1.06k|    {
 6183|  1.06k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  1.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6184|  1.06k|        CharT r{};
 6185|  1.06k|        std::memcpy(&r, m_data, m_size);
 6186|  1.06k|        return r;
 6187|  1.06k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   287k|{
 3803|   287k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|   287k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|   287k|    }
 3806|   287k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3806:24): [Folded - Ignored]
  ------------------
 3807|   287k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|   287k|    }
 3809|   287k|    else {
 3810|       |        // utf-32
 3811|   287k|        static_assert(sizeof(U) == 4);
 3812|   287k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   287k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   287k|        return 1;
 3814|   287k|    }
 3815|   287k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   256k|{
 4009|   256k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|   256k|        return decode_utf8_code_point_exhaustive(input);
 4011|   256k|    }
 4012|   256k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4012:24): [Folded - Ignored]
  ------------------
 4013|   256k|        return decode_utf16_code_point_exhaustive(input);
 4014|   256k|    }
 4015|   256k|    else {
 4016|   256k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   256k|        auto cp = static_cast<char32_t>(input.front());
 4018|   256k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.2k, False: 182k]
  |  |  ------------------
  ------------------
 4019|  74.2k|            return invalid_code_point;
 4020|  74.2k|        }
 4021|   182k|        return cp;
 4022|   256k|    }
 4023|   256k|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  39.3k|{
 3695|  39.3k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3695:19): [Folded - Ignored]
  |  Branch (3695:19): [Folded - Ignored]
  ------------------
 3696|  39.3k|                                          decltype(first), decltype(last)> &&
 3697|  39.3k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3697:19): [Folded - Ignored]
  ------------------
 3698|  39.3k|        return {first, last};
 3699|  39.3k|    }
 3700|  39.3k|    else {
 3701|  39.3k|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  39.3k|                                       to_address(first), to_address(last)))};
 3703|  39.3k|    }
 3704|  39.3k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|   118k|{
  322|   118k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   118k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|   119k|{
  302|   119k|    return p;
  303|   119k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  5.83k|{
 3726|  5.83k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3726:19): [Folded - Ignored]
  |  Branch (3726:19): [Folded - Ignored]
  ------------------
 3727|  5.83k|                      typename std::basic_string_view<CharT>::iterator,
 3728|  5.83k|                      decltype(it)> &&
 3729|  5.83k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3729:19): [Folded - Ignored]
  ------------------
 3730|  5.83k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  5.83k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  5.83k|        return it;
 3732|  5.83k|    }
 3733|  5.83k|    else {
 3734|  5.83k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|  5.83k|    }
 3736|  5.83k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  1.79k|{
  322|  1.79k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  1.79k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3341|  16.0k|    {
 3342|  16.0k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  16.0k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|    134|    {
 1472|    134|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|    134|    {
  443|    134|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  19.3k|    {
 1173|  19.3k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  19.2k|    {
 1426|  19.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  19.2k|    {
  433|  19.2k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1593|  5.39k|    {
 1594|  5.39k|        return has_value();
 1595|  5.39k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  33.3k|    {
  481|  33.3k|        return m_has_value;
  482|  33.3k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|  13.8k|    {
 1623|  13.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  13.8k|        return this->get_value();
 1625|  13.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  13.8k|    {
  447|  13.8k|        return m_value;
  448|  13.8k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1425|  3.27k|    {
 1426|  3.27k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  3.27k|    {
  433|  3.27k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.39k|    {
 1173|  3.39k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|    124|    {
 1472|    124|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    124|    {
  443|    124|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1593|    974|    {
 1594|    974|        return has_value();
 1595|    974|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  480|  5.82k|    {
  481|  5.82k|        return m_has_value;
  482|  5.82k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1622|  2.30k|    {
 1623|  2.30k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.30k|        return this->get_value();
 1625|  2.30k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  446|  2.30k|    {
  447|  2.30k|        return m_value;
  448|  2.30k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1832|  1.44k|    {
 1833|  1.44k|        return detail::transform_error_impl(std::move(*this),
 1834|  1.44k|                                            std::forward<F>(f));
 1835|  1.44k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1318|  1.44k|{
 1319|  1.44k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  1.44k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  1.44k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  1.44k|            return result(*std::forward<Exp>(exp));
 1323|  1.44k|        }
 1324|       |
 1325|  1.44k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  1.44k|        return result(unexpect, monostate{});
 1327|  1.44k|    }
 1328|  1.44k|    else {
 1329|  1.44k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  1.44k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.44k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.44k, False: 0]
  |  |  ------------------
  ------------------
 1331|  1.44k|                   ? result(*std::forward<Exp>(exp))
 1332|  1.44k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  1.44k|    }
 1336|  1.44k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1658|  2.30k|    {
 1659|  2.30k|        return std::move(value());
 1660|  2.30k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1425|  1.76k|    {
 1426|  1.76k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  1.76k|    {
  433|  1.76k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  4.36k|    {
 1173|  4.36k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1609|    124|    {
 1610|    124|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    124|        return std::move(this->get_unexpected().error());
 1612|    124|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  463|    124|    {
  464|    124|        return m_unexpected;
  465|    124|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1481|    814|    {
 1482|    814|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  2.59k|    {
  443|  2.59k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.17k|    {
 1173|  8.17k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  8.17k|    {
 1426|  8.17k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  8.17k|    {
  433|  8.17k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  8.37k|    {
 1833|  8.37k|        return detail::transform_error_impl(std::move(*this),
 1834|  8.37k|                                            std::forward<F>(f));
 1835|  8.37k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  8.37k|{
 1319|  8.37k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  8.37k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  8.37k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  8.37k|            return result(*std::forward<Exp>(exp));
 1323|  8.37k|        }
 1324|       |
 1325|  8.37k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  8.37k|        return result(unexpect, monostate{});
 1327|  8.37k|    }
 1328|  8.37k|    else {
 1329|  8.37k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  8.37k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.37k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.37k, False: 0]
  |  |  ------------------
  ------------------
 1331|  8.37k|                   ? result(*std::forward<Exp>(exp))
 1332|  8.37k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  8.37k|    }
 1336|  8.37k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|  13.8k|    {
 1659|  13.8k|        return std::move(value());
 1660|  13.8k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1609|    134|    {
 1610|    134|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    134|        return std::move(this->get_unexpected().error());
 1612|    134|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|    134|    {
  464|    134|        return m_unexpected;
  465|    134|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|    898|    {
 1482|    898|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1593|  8.17k|    {
 1594|  8.17k|        return has_value();
 1595|  8.17k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|  16.3k|    {
  481|  16.3k|        return m_has_value;
  482|  16.3k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  8.17k|    {
 1659|  8.17k|        return std::move(value());
 1660|  8.17k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  8.17k|    {
 1623|  8.17k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  8.17k|        return this->get_value();
 1625|  8.17k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|  8.17k|    {
  447|  8.17k|        return m_value;
  448|  8.17k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|  1.77k|    {
 1472|  1.77k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|    288|    {
 1472|    288|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    412|    {
  443|    412|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.74k|    {
 1173|  3.74k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  2.47k|    {
 1472|  2.47k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  2.47k|    {
  443|  2.47k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1593|  3.41k|    {
 1594|  3.41k|        return has_value();
 1595|  3.41k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  480|  6.83k|    {
  481|  6.83k|        return m_has_value;
  482|  6.83k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1599|  1.26k|    {
 1600|  1.26k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.26k|        return this->get_unexpected().error();
 1602|  1.26k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  463|  1.75k|    {
  464|  1.75k|        return m_unexpected;
  465|  1.75k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1425|    650|    {
 1426|    650|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|    650|    {
  433|    650|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    650|    {
 1173|    650|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1622|    852|    {
 1623|    852|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    852|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    852|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    852|        return this->get_value();
 1625|    852|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  446|    852|    {
  447|    852|        return m_value;
  448|    852|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1593|    486|    {
 1594|    486|        return has_value();
 1595|    486|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  480|  1.30k|    {
  481|  1.30k|        return m_has_value;
  482|  1.30k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    486|    {
 1173|    486|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1658|    650|    {
 1659|    650|        return std::move(value());
 1660|    650|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1622|    650|    {
 1623|    650|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    650|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    650|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    650|        return this->get_value();
 1625|    650|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  446|    650|    {
  447|    650|        return m_value;
  448|    650|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3329|  51.5k|    {
 3330|  51.5k|        return m_sentinel;
 3331|  51.5k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1832|    976|    {
 1833|    976|        return detail::transform_error_impl(std::move(*this),
 1834|    976|                                            std::forward<F>(f));
 1835|    976|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1318|    976|{
 1319|    976|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    976|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    976|        if (SCN_LIKELY(exp.has_value())) {
 1322|    976|            return result(*std::forward<Exp>(exp));
 1323|    976|        }
 1324|       |
 1325|    976|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    976|        return result(unexpect, monostate{});
 1327|    976|    }
 1328|    976|    else {
 1329|    976|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    976|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    976|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 852, False: 124]
  |  |  ------------------
  ------------------
 1331|    976|                   ? result(*std::forward<Exp>(exp))
 1332|    976|                   : result(unexpect,
 1333|    124|                            trivial_invoke(std::forward<F>(f),
 1334|    124|                                           std::forward<Exp>(exp).error()));
 1335|    976|    }
 1336|    976|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1425|    852|    {
 1426|    852|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|    852|    {
  433|    852|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1481|    124|    {
 1482|    124|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1658|    852|    {
 1659|    852|        return std::move(value());
 1660|    852|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3325|  55.2k|    {
 3326|  55.2k|        return m_iterator;
 3327|  55.2k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1425|    486|    {
 1426|    486|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|    486|    {
  433|    486|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1832|    486|    {
 1833|    486|        return detail::transform_error_impl(std::move(*this),
 1834|    486|                                            std::forward<F>(f));
 1835|    486|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1318|    486|{
 1319|    486|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    486|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    486|        if (SCN_LIKELY(exp.has_value())) {
 1322|    486|            return result(*std::forward<Exp>(exp));
 1323|    486|        }
 1324|       |
 1325|    486|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    486|        return result(unexpect, monostate{});
 1327|    486|    }
 1328|    486|    else {
 1329|    486|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    486|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    486|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 486, False: 0]
  |  |  ------------------
  ------------------
 1331|    486|                   ? result(*std::forward<Exp>(exp))
 1332|    486|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    486|    }
 1336|    486|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  480|    972|    {
  481|    972|        return m_has_value;
  482|    972|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1658|    486|    {
 1659|    486|        return std::move(value());
 1660|    486|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1622|    486|    {
 1623|    486|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    486|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    486|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    486|        return this->get_value();
 1625|    486|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  446|    486|    {
  447|    486|        return m_value;
  448|    486|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1425|    486|    {
 1426|    486|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|    486|    {
  433|    486|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    486|    {
 1173|    486|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1593|    486|    {
 1594|    486|        return has_value();
 1595|    486|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    972|    {
  481|    972|        return m_has_value;
  482|    972|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1658|    486|    {
 1659|    486|        return std::move(value());
 1660|    486|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1622|    486|    {
 1623|    486|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    486|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    486|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    486|        return this->get_value();
 1625|    486|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    486|    {
  447|    486|        return m_value;
  448|    486|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1832|    486|    {
 1833|    486|        return detail::transform_error_impl(std::move(*this),
 1834|    486|                                            std::forward<F>(f));
 1835|    486|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1318|    486|{
 1319|    486|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    486|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    486|        if (SCN_LIKELY(exp.has_value())) {
 1322|    486|            return result(*std::forward<Exp>(exp));
 1323|    486|        }
 1324|       |
 1325|    486|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    486|        return result(unexpect, monostate{});
 1327|    486|    }
 1328|    486|    else {
 1329|    486|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    486|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    486|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 486]
  |  |  ------------------
  ------------------
 1331|    486|                   ? result(*std::forward<Exp>(exp))
 1332|    486|                   : result(unexpect,
 1333|    486|                            trivial_invoke(std::forward<F>(f),
 1334|    486|                                           std::forward<Exp>(exp).error()));
 1335|    486|    }
 1336|    486|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1609|    486|    {
 1610|    486|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    486|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    486|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    486|        return std::move(this->get_unexpected().error());
 1612|    486|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3643|    814|    {
 3644|    814|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3311|  19.6k|    {
 3312|  19.6k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|    316|    {
 2720|    316|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|    316|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|    316|    {
 2701|    316|        return decay_copy(t.begin());
 2702|    316|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1944|    792|{
 1945|    792|    return SCN_FWD(t);
  ------------------
  |  |  930|    792|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|    792|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3325|    316|    {
 3326|    316|        return m_iterator;
 3327|    316|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|    316|    {
 2777|    316|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|    316|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|    316|    {
 2759|    316|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|    316|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3329|    316|    {
 3330|    316|        return m_sentinel;
 3331|    316|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_LPv0EEET_SA_:
 3311|    316|    {
 3312|    316|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1593|  4.52k|    {
 1594|  4.52k|        return has_value();
 1595|  4.52k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  8.72k|    {
  481|  8.72k|        return m_has_value;
  482|  8.72k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1599|  2.42k|    {
 1600|  2.42k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  2.42k|        return this->get_unexpected().error();
 1602|  2.42k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  2.42k|    {
  464|  2.42k|        return m_unexpected;
  465|  2.42k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1658|  1.76k|    {
 1659|  1.76k|        return std::move(value());
 1660|  1.76k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1622|  1.76k|    {
 1623|  1.76k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  1.76k|        return this->get_value();
 1625|  1.76k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  1.76k|    {
  447|  1.76k|        return m_value;
  448|  1.76k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  1.02k|    {
 1472|  1.02k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.16k|    {
  443|  1.16k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.5k|    {
 1173|  17.5k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  10.8k|    {
 1472|  10.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  10.8k|    {
  443|  10.8k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1593|  18.3k|    {
 1594|  18.3k|        return has_value();
 1595|  18.3k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  30.2k|    {
  481|  30.2k|        return m_has_value;
  482|  30.2k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1599|  5.50k|    {
 1600|  5.50k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  5.50k|        return this->get_unexpected().error();
 1602|  5.50k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  5.50k|    {
  464|  5.50k|        return m_unexpected;
  465|  5.50k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1425|  3.57k|    {
 1426|  3.57k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  3.57k|    {
  433|  3.57k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.57k|    {
 1173|  3.57k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1622|  5.46k|    {
 1623|  5.46k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  5.46k|        return this->get_value();
 1625|  5.46k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  5.46k|    {
  447|  5.46k|        return m_value;
  448|  5.46k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1593|  2.68k|    {
 1594|  2.68k|        return has_value();
 1595|  2.68k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  7.15k|    {
  481|  7.15k|        return m_has_value;
  482|  7.15k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.68k|    {
 1173|  2.68k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|  3.57k|    {
 1659|  3.57k|        return std::move(value());
 1660|  3.57k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|  3.57k|    {
 1623|  3.57k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.57k|        return this->get_value();
 1625|  3.57k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  3.57k|    {
  447|  3.57k|        return m_value;
  448|  3.57k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  5.59k|    {
 1833|  5.59k|        return detail::transform_error_impl(std::move(*this),
 1834|  5.59k|                                            std::forward<F>(f));
 1835|  5.59k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  5.59k|{
 1319|  5.59k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  5.59k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  5.59k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  5.59k|            return result(*std::forward<Exp>(exp));
 1323|  5.59k|        }
 1324|       |
 1325|  5.59k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  5.59k|        return result(unexpect, monostate{});
 1327|  5.59k|    }
 1328|  5.59k|    else {
 1329|  5.59k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  5.59k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  5.59k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.46k, False: 134]
  |  |  ------------------
  ------------------
 1331|  5.59k|                   ? result(*std::forward<Exp>(exp))
 1332|  5.59k|                   : result(unexpect,
 1333|    134|                            trivial_invoke(std::forward<F>(f),
 1334|    134|                                           std::forward<Exp>(exp).error()));
 1335|  5.59k|    }
 1336|  5.59k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1425|  5.46k|    {
 1426|  5.46k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.46k|    {
  433|  5.46k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1481|    134|    {
 1482|    134|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1658|  5.46k|    {
 1659|  5.46k|        return std::move(value());
 1660|  5.46k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1425|  2.68k|    {
 1426|  2.68k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.68k|    {
  433|  2.68k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  2.68k|    {
 1833|  2.68k|        return detail::transform_error_impl(std::move(*this),
 1834|  2.68k|                                            std::forward<F>(f));
 1835|  2.68k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1318|  2.68k|{
 1319|  2.68k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.68k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.68k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.68k|            return result(*std::forward<Exp>(exp));
 1323|  2.68k|        }
 1324|       |
 1325|  2.68k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.68k|        return result(unexpect, monostate{});
 1327|  2.68k|    }
 1328|  2.68k|    else {
 1329|  2.68k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.68k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.68k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.68k, False: 0]
  |  |  ------------------
  ------------------
 1331|  2.68k|                   ? result(*std::forward<Exp>(exp))
 1332|  2.68k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  2.68k|    }
 1336|  2.68k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  480|  5.36k|    {
  481|  5.36k|        return m_has_value;
  482|  5.36k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1658|  2.68k|    {
 1659|  2.68k|        return std::move(value());
 1660|  2.68k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1622|  2.68k|    {
 1623|  2.68k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.68k|        return this->get_value();
 1625|  2.68k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  446|  2.68k|    {
  447|  2.68k|        return m_value;
  448|  2.68k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  2.68k|    {
 1426|  2.68k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.68k|    {
  433|  2.68k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.68k|    {
 1173|  2.68k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1593|  2.68k|    {
 1594|  2.68k|        return has_value();
 1595|  2.68k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.36k|    {
  481|  5.36k|        return m_has_value;
  482|  5.36k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  2.68k|    {
 1659|  2.68k|        return std::move(value());
 1660|  2.68k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  2.68k|    {
 1623|  2.68k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.68k|        return this->get_value();
 1625|  2.68k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.68k|    {
  447|  2.68k|        return m_value;
  448|  2.68k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1471|     24|    {
 1472|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  621|     24|    {
  622|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  684|     24|    {
  685|     24|        scn::detail::construct_at(unexpected_ptr(),
  686|     24|                                  std::forward<Args>(args)...);
  687|     24|        m_has_value = false;
  688|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     72|    {
  714|     72|        return reinterpret_cast<unexpected<E>*>(
  715|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     72|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|     24|    {
 1173|     24|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1593|     24|    {
 1594|     24|        return has_value();
 1595|     24|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|     72|    {
  671|     72|        return m_has_value;
  672|     72|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1599|     24|    {
 1600|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|     24|        return this->get_unexpected().error();
 1602|     24|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     24|    {
  654|     24|        return *unexpected_ptr();
  655|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|     24|    {
  627|     24|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 24]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     24|        else {
  631|     24|            destroy_unexpected();
  632|     24|        }
  633|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     24|    {
  696|     24|        scn::detail::destroy_at(unexpected_ptr());
  697|     24|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  9.86k|    {
 2851|  9.86k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  9.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  9.86k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  9.86k|    {
 2832|  9.86k|        return t.data();
 2833|  9.86k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3216|  11.0k|    {
 3217|  11.0k|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 2.24k, False: 8.82k]
  ------------------
 3218|  11.0k|                   ? nullptr
 3219|  11.0k|                   : std::addressof(*ranges::begin(derived()));
 3220|  11.0k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|  11.0k|    {
 3001|  11.0k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|  11.0k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|  11.0k|    {
 2974|  11.0k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|  11.0k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3334|  11.0k|    {
 3335|  11.0k|        return m_iterator == m_sentinel;
 3336|  11.0k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3175|  19.8k|    {
 3176|  19.8k|        return static_cast<D&>(*this);
 3177|  19.8k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  8.82k|    {
 2720|  8.82k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  8.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  8.82k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  8.82k|    {
 2701|  8.82k|        return decay_copy(t.begin());
 2702|  8.82k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  1.41k|    {
 1426|  1.41k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.41k|    {
  433|  1.41k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1832|    164|    {
 1833|    164|        return detail::transform_error_impl(std::move(*this),
 1834|    164|                                            std::forward<F>(f));
 1835|    164|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1318|    164|{
 1319|    164|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    164|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    164|        if (SCN_LIKELY(exp.has_value())) {
 1322|    164|            return result(*std::forward<Exp>(exp));
 1323|    164|        }
 1324|       |
 1325|    164|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    164|        return result(unexpect, monostate{});
 1327|    164|    }
 1328|    164|    else {
 1329|    164|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    164|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    164|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 164, False: 0]
  |  |  ------------------
  ------------------
 1331|    164|                   ? result(*std::forward<Exp>(exp))
 1332|    164|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    164|    }
 1336|    164|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1425|    164|    {
 1426|    164|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|    164|    {
  433|    164|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    164|    {
 1173|    164|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|    164|    {
 1594|    164|        return has_value();
 1595|    164|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    328|    {
  481|    328|        return m_has_value;
  482|    328|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1658|    164|    {
 1659|    164|        return std::move(value());
 1660|    164|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1622|    164|    {
 1623|    164|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    164|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    164|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    164|        return this->get_value();
 1625|    164|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    164|    {
  447|    164|        return m_value;
  448|    164|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1818|    328|    {
 1819|    328|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|    328|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1318|    328|{
 1319|    328|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    328|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    328|        if (SCN_LIKELY(exp.has_value())) {
 1322|    328|            return result(*std::forward<Exp>(exp));
 1323|    328|        }
 1324|       |
 1325|    328|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    328|        return result(unexpect, monostate{});
 1327|    328|    }
 1328|    328|    else {
 1329|    328|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    328|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    328|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 328]
  |  |  ------------------
  ------------------
 1331|    328|                   ? result(*std::forward<Exp>(exp))
 1332|    328|                   : result(unexpect,
 1333|    328|                            trivial_invoke(std::forward<F>(f),
 1334|    328|                                           std::forward<Exp>(exp).error()));
 1335|    328|    }
 1336|    328|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|      4|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|    160|    {
 2720|    160|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    160|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|    160|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|    160|    {
 2701|    160|        return decay_copy(t.begin());
 2702|    160|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|    158|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|    892|    {
 1833|    892|        return detail::transform_error_impl(std::move(*this),
 1834|    892|                                            std::forward<F>(f));
 1835|    892|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1318|    892|{
 1319|    892|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    892|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    892|        if (SCN_LIKELY(exp.has_value())) {
 1322|    892|            return result(*std::forward<Exp>(exp));
 1323|    892|        }
 1324|       |
 1325|    892|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    892|        return result(unexpect, monostate{});
 1327|    892|    }
 1328|    892|    else {
 1329|    892|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    892|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    892|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 892, False: 0]
  |  |  ------------------
  ------------------
 1331|    892|                   ? result(*std::forward<Exp>(exp))
 1332|    892|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    892|    }
 1336|    892|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|    892|    {
 1426|    892|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|    892|    {
  433|    892|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    892|    {
 1173|    892|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|    892|    {
 1594|    892|        return has_value();
 1595|    892|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.78k|    {
  481|  1.78k|        return m_has_value;
  482|  1.78k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|    892|    {
 1659|    892|        return std::move(value());
 1660|    892|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|    892|    {
 1623|    892|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    892|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    892|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    892|        return this->get_value();
 1625|    892|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    892|    {
  447|    892|        return m_value;
  448|    892|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1818|    898|    {
 1819|    898|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|    898|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1318|    898|{
 1319|    898|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    898|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    898|        if (SCN_LIKELY(exp.has_value())) {
 1322|    898|            return result(*std::forward<Exp>(exp));
 1323|    898|        }
 1324|       |
 1325|    898|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    898|        return result(unexpect, monostate{});
 1327|    898|    }
 1328|    898|    else {
 1329|    898|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    898|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    898|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 898]
  |  |  ------------------
  ------------------
 1331|    898|                   ? result(*std::forward<Exp>(exp))
 1332|    898|                   : result(unexpect,
 1333|    898|                            trivial_invoke(std::forward<F>(f),
 1334|    898|                                           std::forward<Exp>(exp).error()));
 1335|    898|    }
 1336|    898|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3643|    898|    {
 3644|    898|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  2.74k|    {
 1649|  2.74k|        return value();
 1650|  2.74k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6247|  1.98k|    {
 6248|  1.98k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6249|  1.98k|                charset_string_size};
 6250|  1.98k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3649|  1.76k|{
 3650|  1.76k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.76k|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5461|  78.2k|    {
 5462|  78.2k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 78.2k]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|  78.2k|        return static_cast<std::size_t>(m_desc &
 5467|  78.2k|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|  78.2k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5486|   135k|    {
 5487|   135k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|   135k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5429|  57.4k|    {
 5430|  57.4k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  57.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 57.4k]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|  57.4k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  57.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 57.3k]
  |  |  ------------------
  ------------------
 5438|     68|            return {};
 5439|     68|        }
 5440|       |
 5441|  57.3k|        const auto t = type(id);
 5442|  57.3k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  57.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.45k, False: 55.9k]
  |  |  ------------------
  ------------------
 5443|  1.45k|            return {};
 5444|  1.45k|        }
 5445|       |
 5446|  55.9k|        basic_scan_arg<Context> arg;
 5447|  55.9k|        arg.m_type = t;
 5448|  55.9k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 55.9k, False: 0]
  ------------------
 5449|  55.9k|            arg.m_value.ref_value = m_builtin_values[id];
 5450|  55.9k|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|  55.9k|        return arg;
 5455|  57.3k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5236|  57.4k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4893|  77.6k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5495|  57.3k|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|  57.3k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|  57.3k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|  57.3k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|  57.3k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5490|  55.9k|    {
 5491|  55.9k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|  55.9k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5242|   111k|    {
 5243|   111k|        return m_type != detail::arg_type::none_type;
 5244|   111k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  5.86k|{
 8413|  5.86k|#define SCN_VISIT(Type)                                         \
 8414|  5.86k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  5.86k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  5.86k|    }                                                           \
 8417|  5.86k|    else {                                                      \
 8418|  5.86k|        return vis(monostate_val);                              \
 8419|  5.86k|    }
 8420|       |
 8421|  5.86k|    monostate monostate_val{};
 8422|       |
 8423|  5.86k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 5.86k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 5.86k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|    652|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 652, False: 5.21k]
  ------------------
 8429|    652|            SCN_VISIT(int);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 5.86k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 5.86k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 5.86k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 5.86k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|    652|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 652, False: 5.21k]
  ------------------
 8439|    652|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 5.86k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 5.86k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|    652|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 652, False: 5.21k]
  ------------------
 8445|    652|            SCN_VISIT(void*);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8446|    652|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 652, False: 5.21k]
  ------------------
 8447|    652|            SCN_VISIT(bool);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8448|    652|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 652, False: 5.21k]
  ------------------
 8449|    652|            SCN_VISIT(char);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 5.86k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 5.86k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 5.86k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|    652|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 652, False: 5.21k]
  ------------------
 8457|    652|            SCN_VISIT(double);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 5.86k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|    652|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 652, False: 5.21k]
  ------------------
 8461|    652|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8462|    652|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 652, False: 5.21k]
  ------------------
 8463|    652|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 5.86k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|    652|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 652, False: 5.21k]
  ------------------
 8467|    652|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 5.86k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 5.86k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 5.86k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 5.86k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 5.86k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  5.86k|            SCN_CLANG_POP
 8491|  5.86k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  1.95k|    {
 1833|  1.95k|        return detail::transform_error_impl(std::move(*this),
 1834|  1.95k|                                            std::forward<F>(f));
 1835|  1.95k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  1.95k|{
 1319|  1.95k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  1.95k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  1.95k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  1.95k|            return result(*std::forward<Exp>(exp));
 1323|  1.95k|        }
 1324|       |
 1325|  1.95k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  1.95k|        return result(unexpect, monostate{});
 1327|  1.95k|    }
 1328|  1.95k|    else {
 1329|  1.95k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  1.95k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.95k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.84k, False: 104]
  |  |  ------------------
  ------------------
 1331|  1.95k|                   ? result(*std::forward<Exp>(exp))
 1332|  1.95k|                   : result(unexpect,
 1333|    104|                            trivial_invoke(std::forward<F>(f),
 1334|    104|                                           std::forward<Exp>(exp).error()));
 1335|  1.95k|    }
 1336|  1.95k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1481|    104|    {
 1482|    104|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1658|  1.84k|    {
 1659|  1.84k|        return std::move(value());
 1660|  1.84k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5540|  78.2k|    {
 5541|  78.2k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8051|  78.2k|    {
 8052|  78.2k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|  78.2k|{
 7040|  78.2k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|  78.2k|    handler.check_args_exhausted();
 7042|  78.2k|    return handler.get_error();
 7043|  78.2k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|  78.2k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|  78.2k|    auto begin = format.data();
 7009|  78.2k|    auto it = begin;
 7010|  78.2k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   262k|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 255k, False: 6.61k]
  ------------------
 7013|   255k|        const auto ch = *it++;
 7014|   255k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 81.7k, False: 174k]
  ------------------
 7015|  81.7k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  81.7k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  81.7k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 70.4k, False: 11.3k]
  ------------------
 7019|  70.4k|                return;
 7020|  70.4k|            }
 7021|  81.7k|        }
 7022|   174k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 2.56k, False: 171k]
  ------------------
 7023|  2.56k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  4.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.21k, False: 1.35k]
  |  |  |  Branch (859:45): [True: 380, False: 2.18k]
  |  |  |  Branch (859:45): [True: 834, False: 1.35k]
  |  |  ------------------
  ------------------
 7024|  1.21k|                handler.on_error("Unmatched '}' in format string");
 7025|  1.21k|                return;
 7026|  1.21k|            }
 7027|       |
 7028|  1.35k|            handler.on_literal_text(begin, it);
 7029|  1.35k|            begin = ++it;
 7030|  1.35k|        }
 7031|   255k|    }
 7032|       |
 7033|  6.61k|    handler.on_literal_text(begin, end);
 7034|  6.61k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6937|  81.7k|{
 6938|  81.7k|    struct id_adapter {
 6939|  81.7k|        constexpr void operator()()
 6940|  81.7k|        {
 6941|  81.7k|            arg_id = handler.on_arg_id();
 6942|  81.7k|        }
 6943|  81.7k|        constexpr void operator()(std::size_t id)
 6944|  81.7k|        {
 6945|  81.7k|            arg_id = handler.on_arg_id(id);
 6946|  81.7k|        }
 6947|       |
 6948|  81.7k|        constexpr void on_error(const char* msg)
 6949|  81.7k|        {
 6950|  81.7k|            SCN_UNLIKELY_ATTR
 6951|  81.7k|            handler.on_error(msg);
 6952|  81.7k|        }
 6953|       |
 6954|  81.7k|        Handler& handler;
 6955|  81.7k|        std::size_t arg_id;
 6956|  81.7k|    };
 6957|       |
 6958|  81.7k|    ++begin;
 6959|  81.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  81.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 81.6k]
  |  |  ------------------
  ------------------
 6960|     96|        handler.on_error("Unexpected end of replacement field");
 6961|     96|        return begin;
 6962|     96|    }
 6963|       |
 6964|  81.6k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 5.87k, False: 75.7k]
  ------------------
 6965|  5.87k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|  5.87k|    }
 6967|  75.7k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 4.62k, False: 71.1k]
  ------------------
 6968|  4.62k|        handler.on_literal_text(begin, begin + 1);
 6969|  4.62k|    }
 6970|  71.1k|    else {
 6971|  71.1k|        auto adapter = id_adapter{handler, 0};
 6972|  71.1k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  71.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  71.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 71.0k]
  |  |  ------------------
  ------------------
 6975|    110|            handler.on_error("Missing '}' in format string");
 6976|    110|            return begin;
 6977|    110|        }
 6978|       |
 6979|  71.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 140, False: 70.9k]
  ------------------
 6980|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|    140|        }
 6982|  70.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 51.4k, False: 19.4k]
  ------------------
 6983|  51.4k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  51.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 51.4k]
  |  |  ------------------
  ------------------
 6984|     74|                handler.on_error("Unexpected end of replacement field");
 6985|     74|                return begin;
 6986|     74|            }
 6987|  51.4k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  51.4k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.15k, False: 48.2k]
  |  |  |  Branch (859:45): [True: 0, False: 51.4k]
  |  |  |  Branch (859:45): [True: 3.15k, False: 48.2k]
  |  |  ------------------
  ------------------
 6989|  3.15k|                handler.on_error("Unknown format specifier");
 6990|  3.15k|                return begin;
 6991|  3.15k|            }
 6992|  51.4k|        }
 6993|  19.4k|        else {
 6994|  19.4k|            SCN_UNLIKELY_ATTR
 6995|  19.4k|            handler.on_error("Missing '}' in format string");
 6996|  19.4k|            return begin;
 6997|  19.4k|        }
 6998|  71.0k|    }
 6999|  58.8k|    return begin + 1;
 7000|  81.6k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8034|  57.4k|    {
 8035|  57.4k|        return m_args.get(id);
 8036|  57.4k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8039|  6.01k|    {
 8040|  6.01k|        return m_args;
 8041|  6.01k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8044|  53.9k|    {
 8045|  53.9k|        return m_locale;
 8046|  53.9k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5561|  54.3k|    {
 5562|  54.3k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 54.3k]
  |  |  ------------------
  ------------------
 5563|     42|            on_error(
 5564|     42|                "Cannot switch from manual to automatic argument indexing");
 5565|     42|            return 0;
 5566|     42|        }
 5567|       |
 5568|  54.3k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|  54.3k|        do_check_arg_id(id);
 5570|  54.3k|        return id;
 5571|  54.3k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5585|    112|    {
 5586|    112|        return detail::handle_error(
 5587|    112|            scan_error{scan_error::invalid_format_string, msg});
 5588|    112|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6049|  57.3k|{
 6050|  57.3k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|  57.3k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|  57.3k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  71.1k|{
 6439|  71.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  71.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  71.1k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 71.1k, False: 0]
  |  Branch (6440:26): [True: 22.6k, False: 48.5k]
  ------------------
 6441|  22.6k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  22.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|  22.6k|    }
 6443|       |
 6444|  48.5k|    handler();
 6445|  48.5k|    return begin;
 6446|  71.1k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6408|  22.6k|{
 6409|  22.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  22.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6410|       |
 6411|  22.6k|    CharT c = *begin;
 6412|  22.6k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6412:9): [True: 19.1k, False: 3.52k]
  |  Branch (6412:27): [True: 196, False: 3.32k]
  ------------------
 6413|  19.3k|        handler.on_error("Invalid argument ID");
 6414|  19.3k|        return begin;
 6415|  19.3k|    }
 6416|       |
 6417|  3.32k|    int idx = 0;
 6418|  3.32k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6418:9): [True: 336, False: 2.98k]
  ------------------
 6419|    336|        idx = parse_simple_int(begin, end);
 6420|    336|    }
 6421|  2.98k|    else {
 6422|  2.98k|        ++begin;
 6423|  2.98k|    }
 6424|       |
 6425|  3.32k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6425:9): [True: 110, False: 3.21k]
  |  Branch (6425:26): [True: 3.07k, False: 140]
  |  Branch (6425:50): [True: 84, False: 2.99k]
  ------------------
 6426|    194|        handler.on_error("Invalid argument ID");
 6427|    194|        return begin;
 6428|    194|    }
 6429|  3.13k|    handler(idx);
 6430|       |
 6431|  3.13k|    return begin;
 6432|  3.32k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6949|  19.5k|        {
 6950|  19.5k|            SCN_UNLIKELY_ATTR
 6951|  19.5k|            handler.on_error(msg);
 6952|  19.5k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6387|  10.8k|{
 6388|  10.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6389|  10.8k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6390|       |
 6391|  10.8k|    unsigned long long value = 0;
 6392|  50.5k|    do {
 6393|  50.5k|        value *= 10;
 6394|  50.5k|        value += static_cast<unsigned long long>(*begin - '0');
 6395|  50.5k|        if (value >
  ------------------
  |  Branch (6395:13): [True: 116, False: 50.4k]
  ------------------
 6396|  50.5k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6397|    116|            return -1;
 6398|    116|        }
 6399|  50.4k|        ++begin;
 6400|  50.4k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6400:14): [True: 50.1k, False: 278]
  |  Branch (6400:30): [True: 47.5k, False: 2.59k]
  |  Branch (6400:47): [True: 39.6k, False: 7.91k]
  ------------------
 6401|  10.7k|    return static_cast<int>(value);
 6402|  10.8k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6944|  3.13k|        {
 6945|  3.13k|            arg_id = handler.on_arg_id(id);
 6946|  3.13k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5574|  3.13k|    {
 5575|  3.13k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  3.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 3.06k]
  |  |  ------------------
  ------------------
 5576|     70|            on_error(
 5577|     70|                "Cannot switch from manual to automatic argument indexing");
 5578|     70|            return;
 5579|     70|        }
 5580|  3.06k|        m_next_arg_id = -1;
 5581|  3.06k|        do_check_arg_id(id);
 5582|  3.06k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  48.5k|        {
 6941|  48.5k|            arg_id = handler.on_arg_id();
 6942|  48.5k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5247|   102k|    {
 5248|   102k|        return m_type;
 5249|   102k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5556|  47.9k|    {
 5557|  47.9k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|  47.9k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5545|  99.3k|    {
 5546|  99.3k|        return m_format.data();
 5547|  99.3k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|  51.4k|    {
 7118|  51.4k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  51.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  51.4k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6853|  51.4k|{
 6854|  51.4k|    auto do_presentation = [&]() -> const CharT* {
 6855|  51.4k|        if (*begin == CharT{'['}) {
 6856|  51.4k|            auto set = parse_presentation_set(begin, end, handler);
 6857|  51.4k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  51.4k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  51.4k|                return begin;
 6862|  51.4k|            }
 6863|  51.4k|            handler.on_character_set_string(set);
 6864|  51.4k|            return begin;
 6865|  51.4k|        }
 6866|  51.4k|        if (*begin == CharT{'/'}) {
 6867|  51.4k|            return parse_presentation_regex(begin, end, handler);
 6868|  51.4k|        }
 6869|  51.4k|        presentation_type type = parse_presentation_type(*begin++);
 6870|  51.4k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  51.4k|            handler.on_error("Invalid type specifier in format string");
 6872|  51.4k|            return begin;
 6873|  51.4k|        }
 6874|  51.4k|        handler.on_type(type);
 6875|  51.4k|        return begin;
 6876|  51.4k|    };
 6877|       |
 6878|  51.4k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 50.3k, False: 1.10k]
  |  Branch (6878:28): [True: 2.18k, False: 48.1k]
  ------------------
 6879|  51.4k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 932, False: 1.25k]
  |  Branch (6879:36): [True: 880, False: 52]
  ------------------
 6880|    880|        return do_presentation();
 6881|    880|    }
 6882|       |
 6883|  50.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.5k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  50.5k|    begin = parse_align(begin, end, handler);
 6889|  50.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118, False: 50.4k]
  |  |  ------------------
  ------------------
 6890|    118|        handler.on_error("Unexpected end of format string");
 6891|    118|        return begin;
 6892|    118|    }
 6893|       |
 6894|  50.4k|    begin = parse_width(begin, end, handler);
 6895|  50.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 50.2k]
  |  |  ------------------
  ------------------
 6896|    120|        handler.on_error("Unexpected end of format string");
 6897|    120|        return begin;
 6898|    120|    }
 6899|       |
 6900|  50.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 6.59k, False: 43.7k]
  ------------------
 6901|  6.59k|        ++begin;
 6902|  6.59k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 6.55k]
  |  |  ------------------
  ------------------
 6903|     34|            handler.on_error("Unexpected end of format string");
 6904|     34|            return begin;
 6905|     34|        }
 6906|  6.55k|        begin = parse_precision(begin, end, handler);
 6907|  6.55k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80, False: 6.47k]
  |  |  ------------------
  ------------------
 6908|     80|            handler.on_error("Unexpected end of format string");
 6909|     80|            return begin;
 6910|     80|        }
 6911|  6.55k|    }
 6912|       |
 6913|  50.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 482, False: 49.7k]
  ------------------
 6914|    482|        handler.on_localized();
 6915|    482|        ++begin;
 6916|    482|    }
 6917|  50.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 50.1k]
  |  |  ------------------
  ------------------
 6918|     52|        handler.on_error("Unexpected end of format string");
 6919|     52|        return begin;
 6920|     52|    }
 6921|       |
 6922|  50.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 50.1k, False: 0]
  |  Branch (6922:25): [True: 46.0k, False: 4.11k]
  ------------------
 6923|  46.0k|        do_presentation();
 6924|  46.0k|    }
 6925|  50.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.02k, False: 48.1k]
  |  |  ------------------
  ------------------
 6926|  2.02k|        handler.on_error("Unexpected end of format string");
 6927|  2.02k|        return begin;
 6928|  2.02k|    }
 6929|       |
 6930|  48.1k|    return begin;
 6931|  50.1k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6502|  2.18k|{
 6503|  2.18k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 878, False: 1.30k]
  |  Branch (6503:33): [True: 808, False: 70]
  ------------------
 6504|  2.18k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 232, False: 1.14k]
  |  Branch (6504:33): [True: 124, False: 108]
  ------------------
 6505|  2.18k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|  46.9k|    auto do_presentation = [&]() -> const CharT* {
 6855|  46.9k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 11.7k, False: 35.1k]
  ------------------
 6856|  11.7k|            auto set = parse_presentation_set(begin, end, handler);
 6857|  11.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 904, False: 10.8k]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|    904|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|    904|                return begin;
 6862|    904|            }
 6863|  10.8k|            handler.on_character_set_string(set);
 6864|  10.8k|            return begin;
 6865|  11.7k|        }
 6866|  35.1k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 30.6k, False: 4.48k]
  ------------------
 6867|  30.6k|            return parse_presentation_regex(begin, end, handler);
 6868|  30.6k|        }
 6869|  4.48k|        presentation_type type = parse_presentation_type(*begin++);
 6870|  4.48k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  4.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 636, False: 3.84k]
  |  |  ------------------
  ------------------
 6871|    636|            handler.on_error("Invalid type specifier in format string");
 6872|    636|            return begin;
 6873|    636|        }
 6874|  3.84k|        handler.on_type(type);
 6875|  3.84k|        return begin;
 6876|  4.48k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6692|  11.7k|{
 6693|  11.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6694|  11.7k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6695|       |
 6696|  11.7k|    auto start = begin;
 6697|  11.7k|    ++begin;
 6698|       |
 6699|  11.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 11.7k]
  |  |  ------------------
  ------------------
 6700|       |        // clang-format off
 6701|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6702|       |        // clang-format on
 6703|     42|        return {};
 6704|     42|    }
 6705|  11.7k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6705:9): [True: 2.21k, False: 9.52k]
  ------------------
 6706|  2.21k|        handler.on_charset_inverted();
 6707|  2.21k|        ++begin;
 6708|  2.21k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.17k]
  |  |  ------------------
  ------------------
 6709|       |            // clang-format off
 6710|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6711|       |            // clang-format on
 6712|     34|            return {};
 6713|     34|        }
 6714|  2.17k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6714:13): [True: 54, False: 2.12k]
  ------------------
 6715|     54|            handler.on_charset_single(char32_t{']'});
 6716|     54|            ++begin;
 6717|     54|        }
 6718|  2.17k|    }
 6719|  9.52k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6719:14): [True: 34, False: 9.49k]
  ------------------
 6720|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6721|     34|    }
 6722|       |
 6723|  2.13M|    while (begin != end) {
  ------------------
  |  Branch (6723:12): [True: 2.13M, False: 514]
  ------------------
 6724|  2.13M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 280, False: 2.13M]
  |  |  ------------------
  ------------------
 6725|    280|            break;
 6726|    280|        }
 6727|       |
 6728|  2.13M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 10.8k, False: 2.11M]
  ------------------
 6729|  10.8k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6730|  10.8k|        }
 6731|       |
 6732|  2.11M|        parse_presentation_set_literal(begin, end, handler);
 6733|  2.11M|    }
 6734|       |
 6735|    794|    SCN_UNLIKELY_ATTR
 6736|    794|    handler.on_error("Invalid [character set] specifier in format string");
 6737|    794|    return {};
 6738|  11.6k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6656|  2.11M|{
 6657|  2.11M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6658|       |
 6659|  2.11M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6660|  2.11M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  2.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 168, False: 2.11M]
  |  |  ------------------
  ------------------
 6661|    168|        return;
 6662|    168|    }
 6663|       |
 6664|  2.11M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6664:9): [True: 2.11M, False: 212]
  |  Branch (6664:25): [True: 11.1k, False: 2.10M]
  |  Branch (6664:49): [True: 11.1k, False: 34]
  ------------------
 6665|  2.11M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6665:9): [True: 10.8k, False: 250]
  ------------------
 6666|  10.8k|        ++begin;
 6667|       |
 6668|  10.8k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6669|  10.8k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 10.8k]
  |  |  ------------------
  ------------------
 6670|     70|            return;
 6671|     70|        }
 6672|       |
 6673|  10.8k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 10.7k]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|     40|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6676|       |            // clang-format on
 6677|     40|            return;
 6678|     40|        }
 6679|       |
 6680|  10.7k|        handler.on_charset_range(cp_first, cp_second + 1);
 6681|  10.7k|        return;
 6682|  10.8k|    }
 6683|       |
 6684|  2.10M|    handler.on_charset_single(cp_first);
 6685|  2.10M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6632|  2.13M|{
 6633|  2.13M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6634|       |
 6635|  2.13M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6636|  2.13M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  4.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 152, False: 2.13M]
  |  |  |  Branch (859:45): [True: 90, False: 2.13M]
  |  |  |  Branch (859:45): [True: 62, False: 2.13M]
  |  |  ------------------
  ------------------
 6637|    152|        handler.on_error("Invalid encoding in format string");
 6638|    152|        return invalid_code_point;
 6639|    152|    }
 6640|       |
 6641|  2.13M|    const auto cp =
 6642|  2.13M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6643|  2.13M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86, False: 2.13M]
  |  |  ------------------
  ------------------
 6644|     86|        handler.on_error("Invalid encoding in format string");
 6645|     86|        return invalid_code_point;
 6646|     86|    }
 6647|       |
 6648|  2.13M|    begin += len;
 6649|  2.13M|    return cp;
 6650|  2.13M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6341|  10.8k|    {
 6342|  10.8k|        m_specs.charset_string_data = fmt.data();
 6343|  10.8k|        m_specs.charset_string_size = fmt.size();
 6344|  10.8k|        on_type(presentation_type::string_set);
 6345|  10.8k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6744|  30.6k|{
 6745|  30.6k|#if !SCN_DISABLE_REGEX
 6746|  30.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  30.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6747|  30.6k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  30.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6748|       |
 6749|  30.6k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  61.2k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6749:19): [Folded - Ignored]
  |  Branch (6749:19): [Folded - Ignored]
  ------------------
 6750|  30.6k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6750:19): [Folded - Ignored]
  ------------------
 6751|  30.6k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6752|  30.6k|        return begin;
 6753|  30.6k|    }
 6754|       |
 6755|  30.6k|    auto start = begin;
 6756|  30.6k|    ++begin;
 6757|       |
 6758|  30.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 30.6k]
  |  |  ------------------
  ------------------
 6759|     34|        handler.on_error("Unexpected end of regex in format string");
 6760|     34|        return begin;
 6761|     34|    }
 6762|       |
 6763|  30.6k|    handler.on_type(presentation_type::regex);
 6764|  7.04M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6764:12): [True: 7.04M, False: 196]
  ------------------
 6765|  7.04M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6765:13): [True: 49.3k, False: 6.99M]
  ------------------
 6766|  49.3k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6766:17): [True: 30.4k, False: 18.9k]
  ------------------
 6767|  30.4k|                break;
 6768|  30.4k|            }
 6769|  18.9k|            else {
 6770|  18.9k|                handler.on_type(presentation_type::regex_escaped);
 6771|  18.9k|            }
 6772|  49.3k|        }
 6773|  7.04M|    }
 6774|  30.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 196, False: 30.4k]
  |  |  ------------------
  ------------------
 6775|    196|        handler.on_error("Unexpected end of regex in format string");
 6776|    196|        return begin;
 6777|    196|    }
 6778|       |
 6779|  30.4k|    auto regex_end = begin;
 6780|  30.4k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6781|  30.4k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  30.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 30.3k]
  |  |  ------------------
  ------------------
 6782|     34|        handler.on_error("Invalid (empty) regex in format string");
 6783|     34|        return begin;
 6784|     34|    }
 6785|  30.3k|    handler.on_regex_pattern(regex_pattern);
 6786|  30.3k|    ++begin;
 6787|       |
 6788|  30.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 30.3k]
  |  |  ------------------
  ------------------
 6789|     34|        handler.on_error("Unexpected end of regex in format string");
 6790|     34|        return begin;
 6791|     34|    }
 6792|       |
 6793|  30.3k|    regex_flags flags{regex_flags::none};
 6794|  30.3k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6795|  30.3k|        {{'m', regex_flags::multiline},
 6796|  30.3k|         {'s', regex_flags::singleline},
 6797|  30.3k|         {'i', regex_flags::nocase},
 6798|  30.3k|         {'n', regex_flags::nocapture}}};
 6799|  34.7k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6799:12): [True: 34.7k, False: 60]
  ------------------
 6800|  34.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6800:13): [True: 30.0k, False: 4.66k]
  ------------------
 6801|  30.0k|            break;
 6802|  30.0k|        }
 6803|  4.66k|        bool found_flag = false;
 6804|  12.5k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6804:24): [True: 12.5k, False: 176]
  ------------------
 6805|  12.5k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6805:17): [True: 8.07k, False: 4.48k]
  ------------------
 6806|  8.07k|                continue;
 6807|  8.07k|            }
 6808|  4.48k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6808:17): [True: 34, False: 4.45k]
  ------------------
 6809|     34|                handler.on_error("Flag set multiple times in regex");
 6810|     34|                return begin;
 6811|     34|            }
 6812|  4.45k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6813|  4.45k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6813:17): [True: 48, False: 4.40k]
  ------------------
 6814|       |                // clang-format off
 6815|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6816|       |                // clang-format on
 6817|     48|            }
 6818|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6819|       |            if (*begin == CharT{'m'}) {
 6820|       |                // clang-format off
 6821|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6822|       |                // clang-format on
 6823|       |            }
 6824|       |#endif
 6825|  4.45k|#endif
 6826|  4.45k|            flags |= flag.second;
 6827|  4.45k|            found_flag = true;
 6828|  4.45k|            break;
 6829|  4.48k|        }
 6830|  4.62k|        if (!found_flag) {
  ------------------
  |  Branch (6830:13): [True: 176, False: 4.45k]
  ------------------
 6831|    176|            handler.on_error("Invalid flag in regex");
 6832|    176|            return begin;
 6833|    176|        }
 6834|  4.62k|    }
 6835|  30.1k|    handler.on_regex_flags(flags);
 6836|       |
 6837|  30.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  30.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60, False: 30.0k]
  |  |  ------------------
  ------------------
 6838|     60|        handler.on_error("Unexpected end of regex in format string");
 6839|     60|        return begin;
 6840|     60|    }
 6841|       |
 6842|  30.0k|    return begin;
 6843|       |#else
 6844|       |    handler.on_error("Regular expression support is disabled");
 6845|       |    return {};
 6846|       |#endif
 6847|  30.1k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6349|  30.3k|    {
 6350|  30.3k|        m_specs.charset_string_data = pattern.data();
 6351|  30.3k|        m_specs.charset_string_size = pattern.size();
 6352|  30.3k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6450|  4.48k|{
 6451|  4.48k|    switch (type) {
 6452|    106|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 106, False: 4.37k]
  ------------------
 6453|    158|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 52, False: 4.42k]
  ------------------
 6454|    158|            return presentation_type::int_binary;
 6455|    130|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 130, False: 4.35k]
  ------------------
 6456|    130|            return presentation_type::int_decimal;
 6457|    178|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 178, False: 4.30k]
  ------------------
 6458|    178|            return presentation_type::int_generic;
 6459|     70|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 70, False: 4.41k]
  ------------------
 6460|     70|            return presentation_type::int_unsigned_decimal;
 6461|    160|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 160, False: 4.32k]
  ------------------
 6462|    160|            return presentation_type::int_octal;
 6463|     78|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 78, False: 4.40k]
  ------------------
 6464|    112|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 34, False: 4.44k]
  ------------------
 6465|    112|            return presentation_type::int_hex;
 6466|     34|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 34, False: 4.44k]
  ------------------
 6467|     68|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 34, False: 4.44k]
  ------------------
 6468|     68|            return presentation_type::int_arbitrary_base;
 6469|    124|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 124, False: 4.35k]
  ------------------
 6470|    266|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 142, False: 4.33k]
  ------------------
 6471|    266|            return presentation_type::float_hex;
 6472|     70|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 70, False: 4.41k]
  ------------------
 6473|    122|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 52, False: 4.42k]
  ------------------
 6474|    122|            return presentation_type::float_scientific;
 6475|    214|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 214, False: 4.26k]
  ------------------
 6476|    320|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 106, False: 4.37k]
  ------------------
 6477|    320|            return presentation_type::float_fixed;
 6478|     78|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 78, False: 4.40k]
  ------------------
 6479|    154|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 76, False: 4.40k]
  ------------------
 6480|    154|            return presentation_type::float_general;
 6481|  1.56k|        case 's':
  ------------------
  |  Branch (6481:9): [True: 1.56k, False: 2.91k]
  ------------------
 6482|  1.56k|            return presentation_type::string;
 6483|    430|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 430, False: 4.05k]
  ------------------
 6484|    430|            return presentation_type::character;
 6485|     34|        case '?':
  ------------------
  |  Branch (6485:9): [True: 34, False: 4.44k]
  ------------------
 6486|     34|            return presentation_type::escaped_character;
 6487|     78|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 78, False: 4.40k]
  ------------------
 6488|     78|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 4.48k]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 4.48k]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|    636|        default:
  ------------------
  |  Branch (6495:9): [True: 636, False: 3.84k]
  ------------------
 6496|    636|            return presentation_type::none;
 6497|  4.48k|    }
 6498|  4.48k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6527|  50.5k|{
 6528|  50.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  50.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  50.5k|    auto check_align = [](wchar_t ch) {
 6531|  50.5k|        switch (ch) {
 6532|  50.5k|            case L'<':
 6533|  50.5k|                return align_type::left;
 6534|  50.5k|            case L'>':
 6535|  50.5k|                return align_type::right;
 6536|  50.5k|            case L'^':
 6537|  50.5k|                return align_type::center;
 6538|  50.5k|            default:
 6539|  50.5k|                return align_type::none;
 6540|  50.5k|        }
 6541|  50.5k|    };
 6542|       |
 6543|  50.5k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  50.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 50.4k]
  |  |  |  Branch (859:45): [True: 38, False: 50.4k]
  |  |  |  Branch (859:45): [True: 4, False: 50.4k]
  |  |  ------------------
  ------------------
 6545|  50.5k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|     42|        handler.on_error("Invalid encoding in fill character");
 6547|     42|        return begin;
 6548|     42|    }
 6549|       |
 6550|  50.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  50.4k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  50.4k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  50.4k|    const auto begin_before_fill = begin;
 6555|  50.4k|    begin += potential_fill_len;
 6556|       |
 6557|  50.4k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 1.06k, False: 49.4k]
  ------------------
 6558|  1.06k|        return begin_before_fill;
 6559|  1.06k|    }
 6560|       |
 6561|  49.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  49.4k|    const auto begin_after_fill = begin;
 6563|  49.4k|    ++begin;
 6564|       |
 6565|  49.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 48.6k, False: 746]
  ------------------
 6566|  48.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  48.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54, False: 48.6k]
  |  |  ------------------
  ------------------
 6567|     54|            handler.on_error("Invalid fill character '{' in format string");
 6568|     54|            return begin;
 6569|     54|        }
 6570|  48.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 9.03k, False: 39.5k]
  ------------------
 6571|  9.03k|            return begin_before_fill;
 6572|  9.03k|        }
 6573|  48.6k|    }
 6574|       |
 6575|  40.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 36.1k, False: 4.23k]
  ------------------
 6576|  36.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 3.44k, False: 32.6k]
  ------------------
 6577|  3.44k|            handler.on_align(potential_align_on_fill);
 6578|  3.44k|            return begin_after_fill;
 6579|  3.44k|        }
 6580|  32.6k|        return begin_before_fill;
 6581|  36.1k|    }
 6582|       |
 6583|  4.23k|    handler.on_fill(potential_fill);
 6584|  4.23k|    handler.on_align(potential_align_after_fill);
 6585|  4.23k|    return begin;
 6586|  40.3k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6509|  50.5k|{
 6510|  50.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  50.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|  50.5k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|  50.5k|        return 1;
 6513|  50.5k|    }
 6514|  50.5k|    else {
 6515|  50.5k|        const auto lengths =
 6516|  50.5k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|  50.5k|            "\3\4";
 6518|  50.5k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|  50.5k|        return len;
 6520|  50.5k|    }
 6521|  50.5k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|  99.9k|    auto check_align = [](wchar_t ch) {
 6531|  99.9k|        switch (ch) {
 6532|  1.10k|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 1.10k, False: 98.8k]
  ------------------
 6533|  1.10k|                return align_type::left;
 6534|  1.67k|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 1.67k, False: 98.2k]
  ------------------
 6535|  1.67k|                return align_type::right;
 6536|  6.17k|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 6.17k, False: 93.7k]
  ------------------
 6537|  6.17k|                return align_type::center;
 6538|  90.9k|            default:
  ------------------
  |  Branch (6538:13): [True: 90.9k, False: 8.95k]
  ------------------
 6539|  90.9k|                return align_type::none;
 6540|  99.9k|        }
 6541|  99.9k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6263|  4.23k|    {
 6264|  4.23k|        m_specs.fill = fill;
 6265|  4.23k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6144|  4.23k|    {
 6145|  4.23k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  4.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6146|  4.23k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  4.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6147|  4.23k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6147:23): [Folded - Ignored]
  ------------------
 6148|  9.76k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6148:32): [True: 5.53k, False: 4.23k]
  ------------------
 6149|  5.53k|                SCN_GCC_PUSH
 6150|  5.53k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6151|  5.53k|                m_data[i] = s[i];
 6152|  5.53k|                SCN_GCC_POP
 6153|  5.53k|            }
 6154|  4.23k|            m_size = static_cast<unsigned char>(s.size());
 6155|  4.23k|        }
 6156|  4.23k|        else if constexpr (sizeof(CharT) == 2) {
 6157|  4.23k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6158|  4.23k|            m_data[1] =
 6159|  4.23k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6160|  4.23k|            if (s.size() == 1) {
 6161|  4.23k|                return;
 6162|  4.23k|            }
 6163|  4.23k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6164|  4.23k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6165|  4.23k|        }
 6166|  4.23k|        else {
 6167|  4.23k|            const auto front = static_cast<unsigned>(s.front());
 6168|  4.23k|            m_data[0] = static_cast<char>(front);
 6169|  4.23k|            m_data[1] = static_cast<char>(front >> 8);
 6170|  4.23k|            m_data[2] = static_cast<char>(front >> 16);
 6171|  4.23k|            m_data[3] = static_cast<char>(front >> 24);
 6172|  4.23k|        }
 6173|  4.23k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6592|  50.4k|{
 6593|  50.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  50.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  50.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 15.3k, False: 35.0k]
  |  Branch (6595:33): [True: 4.13k, False: 11.2k]
  ------------------
 6596|  4.13k|        int width = parse_simple_int(begin, end);
 6597|  4.13k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  4.13k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.10k, False: 34]
  |  |  ------------------
  ------------------
 6598|  4.10k|            handler.on_width(width);
 6599|  4.10k|        }
 6600|     34|        else {
 6601|     34|            handler.on_error("Invalid field width");
 6602|     34|            return begin;
 6603|     34|        }
 6604|  4.13k|    }
 6605|  50.3k|    return begin;
 6606|  50.4k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6612|  6.55k|{
 6613|  6.55k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6614|       |
 6615|  6.55k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6615:9): [True: 6.52k, False: 34]
  |  Branch (6615:33): [True: 6.42k, False: 94]
  ------------------
 6616|  6.42k|        int prec = parse_simple_int(begin, end);
 6617|  6.42k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  6.42k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.38k, False: 48]
  |  |  ------------------
  ------------------
 6618|  6.38k|            handler.on_precision(prec);
 6619|  6.38k|        }
 6620|     48|        else {
 6621|     48|            handler.on_error("Invalid field precision");
 6622|     48|            return begin;
 6623|     48|        }
 6624|  6.42k|    }
 6625|  6.50k|    return begin;
 6626|  6.55k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7122|    482|    {
 7123|    482|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|    482|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 434, False: 48]
  ------------------
 7125|    482|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 386, False: 48]
  ------------------
 7126|    482|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 338, False: 48]
  ------------------
 7127|    482|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 290, False: 48]
  ------------------
 7128|    290|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|    290|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|    290|        }
 7133|       |
 7134|    192|        Handler::on_localized();
 7135|    192|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  47.7k|{
 8413|  47.7k|#define SCN_VISIT(Type)                                         \
 8414|  47.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  47.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  47.7k|    }                                                           \
 8417|  47.7k|    else {                                                      \
 8418|  47.7k|        return vis(monostate_val);                              \
 8419|  47.7k|    }
 8420|       |
 8421|  47.7k|    monostate monostate_val{};
 8422|       |
 8423|  47.7k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 47.7k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 47.7k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|  5.33k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 5.33k, False: 42.4k]
  ------------------
 8429|  5.33k|            SCN_VISIT(int);
  ------------------
  |  | 8414|  5.33k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.33k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.33k|    }                                                           \
  |  | 8417|  5.33k|    else {                                                      \
  |  | 8418|  5.33k|        return vis(monostate_val);                              \
  |  | 8419|  5.33k|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 47.7k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 47.7k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 47.7k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 47.7k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|  5.33k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 5.33k, False: 42.4k]
  ------------------
 8439|  5.33k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|  5.33k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.33k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.33k|    }                                                           \
  |  | 8417|  5.33k|    else {                                                      \
  |  | 8418|  5.33k|        return vis(monostate_val);                              \
  |  | 8419|  5.33k|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 47.7k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 47.7k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|  5.29k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 5.29k, False: 42.5k]
  ------------------
 8445|  5.29k|            SCN_VISIT(void*);
  ------------------
  |  | 8414|  5.29k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.29k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.29k|    }                                                           \
  |  | 8417|  5.29k|    else {                                                      \
  |  | 8418|  5.29k|        return vis(monostate_val);                              \
  |  | 8419|  5.29k|    }
  ------------------
 8446|  5.33k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 5.33k, False: 42.4k]
  ------------------
 8447|  5.33k|            SCN_VISIT(bool);
  ------------------
  |  | 8414|  5.33k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.33k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.33k|    }                                                           \
  |  | 8417|  5.33k|    else {                                                      \
  |  | 8418|  5.33k|        return vis(monostate_val);                              \
  |  | 8419|  5.33k|    }
  ------------------
 8448|  5.29k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 5.29k, False: 42.5k]
  ------------------
 8449|  5.29k|            SCN_VISIT(char);
  ------------------
  |  | 8414|  5.29k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.29k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.29k|    }                                                           \
  |  | 8417|  5.29k|    else {                                                      \
  |  | 8418|  5.29k|        return vis(monostate_val);                              \
  |  | 8419|  5.29k|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 47.7k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 47.7k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 47.7k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|  5.33k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 5.33k, False: 42.4k]
  ------------------
 8457|  5.33k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  5.33k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.33k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.33k|    }                                                           \
  |  | 8417|  5.33k|    else {                                                      \
  |  | 8418|  5.33k|        return vis(monostate_val);                              \
  |  | 8419|  5.33k|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 47.7k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|  5.29k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 5.29k, False: 42.5k]
  ------------------
 8461|  5.29k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|  5.29k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.29k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.29k|    }                                                           \
  |  | 8417|  5.29k|    else {                                                      \
  |  | 8418|  5.29k|        return vis(monostate_val);                              \
  |  | 8419|  5.29k|    }
  ------------------
 8462|  5.29k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 5.29k, False: 42.5k]
  ------------------
 8463|  5.29k|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|  5.29k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.29k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.29k|    }                                                           \
  |  | 8417|  5.29k|    else {                                                      \
  |  | 8418|  5.29k|        return vis(monostate_val);                              \
  |  | 8419|  5.29k|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 47.7k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|  5.29k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 5.29k, False: 42.5k]
  ------------------
 8467|  5.29k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|  5.29k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.29k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.29k|    }                                                           \
  |  | 8417|  5.29k|    else {                                                      \
  |  | 8418|  5.29k|        return vis(monostate_val);                              \
  |  | 8419|  5.29k|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 47.7k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 47.7k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 47.7k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 47.7k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 47.7k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  47.7k|            SCN_CLANG_POP
 8491|  47.7k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5461|   156k|    {
 5462|   156k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|   156k|        return static_cast<std::size_t>(m_desc &
 5467|   156k|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|   156k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5486|   176k|    {
 5487|   176k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|   176k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5429|  20.1k|    {
 5430|  20.1k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.1k]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|  20.1k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76, False: 20.1k]
  |  |  ------------------
  ------------------
 5438|     76|            return {};
 5439|     76|        }
 5440|       |
 5441|  20.1k|        const auto t = type(id);
 5442|  20.1k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.36k, False: 18.7k]
  |  |  ------------------
  ------------------
 5443|  1.36k|            return {};
 5444|  1.36k|        }
 5445|       |
 5446|  18.7k|        basic_scan_arg<Context> arg;
 5447|  18.7k|        arg.m_type = t;
 5448|  18.7k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 18.7k, False: 0]
  ------------------
 5449|  18.7k|            arg.m_value.ref_value = m_builtin_values[id];
 5450|  18.7k|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|  18.7k|        return arg;
 5455|  20.1k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5236|  20.1k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5495|  20.1k|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|  20.1k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|  20.1k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|  20.1k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|  20.1k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5490|  18.7k|    {
 5491|  18.7k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|  18.7k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5242|  36.9k|    {
 5243|  36.9k|        return m_type != detail::arg_type::none_type;
 5244|  36.9k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  4.77k|{
 8413|  4.77k|#define SCN_VISIT(Type)                                         \
 8414|  4.77k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  4.77k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  4.77k|    }                                                           \
 8417|  4.77k|    else {                                                      \
 8418|  4.77k|        return vis(monostate_val);                              \
 8419|  4.77k|    }
 8420|       |
 8421|  4.77k|    monostate monostate_val{};
 8422|       |
 8423|  4.77k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 4.77k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 4.77k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|    530|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 530, False: 4.24k]
  ------------------
 8429|    530|            SCN_VISIT(int);
  ------------------
  |  | 8414|    530|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    530|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    530|    }                                                           \
  |  | 8417|    530|    else {                                                      \
  |  | 8418|    530|        return vis(monostate_val);                              \
  |  | 8419|    530|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 4.77k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 4.77k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 4.77k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 4.77k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|    530|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 530, False: 4.24k]
  ------------------
 8439|    530|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|    530|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    530|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    530|    }                                                           \
  |  | 8417|    530|    else {                                                      \
  |  | 8418|    530|        return vis(monostate_val);                              \
  |  | 8419|    530|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 4.77k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 4.77k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|    530|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 530, False: 4.24k]
  ------------------
 8445|    530|            SCN_VISIT(void*);
  ------------------
  |  | 8414|    530|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    530|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    530|    }                                                           \
  |  | 8417|    530|    else {                                                      \
  |  | 8418|    530|        return vis(monostate_val);                              \
  |  | 8419|    530|    }
  ------------------
 8446|    530|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 530, False: 4.24k]
  ------------------
 8447|    530|            SCN_VISIT(bool);
  ------------------
  |  | 8414|    530|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    530|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    530|    }                                                           \
  |  | 8417|    530|    else {                                                      \
  |  | 8418|    530|        return vis(monostate_val);                              \
  |  | 8419|    530|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 4.77k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|    530|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 530, False: 4.24k]
  ------------------
 8451|    530|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|    530|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    530|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    530|    }                                                           \
  |  | 8417|    530|    else {                                                      \
  |  | 8418|    530|        return vis(monostate_val);                              \
  |  | 8419|    530|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 4.77k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 4.77k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|    530|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 530, False: 4.24k]
  ------------------
 8457|    530|            SCN_VISIT(double);
  ------------------
  |  | 8414|    530|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    530|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    530|    }                                                           \
  |  | 8417|    530|    else {                                                      \
  |  | 8418|    530|        return vis(monostate_val);                              \
  |  | 8419|    530|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 4.77k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 4.77k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|    530|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 530, False: 4.24k]
  ------------------
 8463|    530|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|    530|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    530|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    530|    }                                                           \
  |  | 8417|    530|    else {                                                      \
  |  | 8418|    530|        return vis(monostate_val);                              \
  |  | 8419|    530|    }
  ------------------
 8464|    530|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 530, False: 4.24k]
  ------------------
 8465|    530|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|    530|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    530|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    530|    }                                                           \
  |  | 8417|    530|    else {                                                      \
  |  | 8418|    530|        return vis(monostate_val);                              \
  |  | 8419|    530|    }
  ------------------
 8466|    530|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 530, False: 4.24k]
  ------------------
 8467|    530|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|    530|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    530|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    530|    }                                                           \
  |  | 8417|    530|    else {                                                      \
  |  | 8418|    530|        return vis(monostate_val);                              \
  |  | 8419|    530|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 4.77k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 4.77k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 4.77k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 4.77k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 4.77k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  4.77k|            SCN_CLANG_POP
 8491|  4.77k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5540|   156k|    {
 5541|   156k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8051|   156k|    {
 8052|   156k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|   156k|{
 7040|   156k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|   156k|    handler.check_args_exhausted();
 7042|   156k|    return handler.get_error();
 7043|   156k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|   156k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|   156k|    auto begin = format.data();
 7009|   156k|    auto it = begin;
 7010|   156k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   323M|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 323M, False: 59.4k]
  ------------------
 7013|   323M|        const auto ch = *it++;
 7014|   323M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 20.9k, False: 323M]
  ------------------
 7015|  20.9k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  20.9k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  20.9k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 18.1k, False: 2.81k]
  ------------------
 7019|  18.1k|                return;
 7020|  18.1k|            }
 7021|  20.9k|        }
 7022|   323M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 79.1k, False: 323M]
  ------------------
 7023|  79.1k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.9k, False: 252]
  |  |  |  Branch (859:45): [True: 294, False: 78.8k]
  |  |  |  Branch (859:45): [True: 78.6k, False: 252]
  |  |  ------------------
  ------------------
 7024|  78.9k|                handler.on_error("Unmatched '}' in format string");
 7025|  78.9k|                return;
 7026|  78.9k|            }
 7027|       |
 7028|    252|            handler.on_literal_text(begin, it);
 7029|    252|            begin = ++it;
 7030|    252|        }
 7031|   323M|    }
 7032|       |
 7033|  59.4k|    handler.on_literal_text(begin, end);
 7034|  59.4k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6937|  20.9k|{
 6938|  20.9k|    struct id_adapter {
 6939|  20.9k|        constexpr void operator()()
 6940|  20.9k|        {
 6941|  20.9k|            arg_id = handler.on_arg_id();
 6942|  20.9k|        }
 6943|  20.9k|        constexpr void operator()(std::size_t id)
 6944|  20.9k|        {
 6945|  20.9k|            arg_id = handler.on_arg_id(id);
 6946|  20.9k|        }
 6947|       |
 6948|  20.9k|        constexpr void on_error(const char* msg)
 6949|  20.9k|        {
 6950|  20.9k|            SCN_UNLIKELY_ATTR
 6951|  20.9k|            handler.on_error(msg);
 6952|  20.9k|        }
 6953|       |
 6954|  20.9k|        Handler& handler;
 6955|  20.9k|        std::size_t arg_id;
 6956|  20.9k|    };
 6957|       |
 6958|  20.9k|    ++begin;
 6959|  20.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  20.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 20.8k]
  |  |  ------------------
  ------------------
 6960|    106|        handler.on_error("Unexpected end of replacement field");
 6961|    106|        return begin;
 6962|    106|    }
 6963|       |
 6964|  20.8k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 4.69k, False: 16.1k]
  ------------------
 6965|  4.69k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|  4.69k|    }
 6967|  16.1k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 132, False: 16.0k]
  ------------------
 6968|    132|        handler.on_literal_text(begin, begin + 1);
 6969|    132|    }
 6970|  16.0k|    else {
 6971|  16.0k|        auto adapter = id_adapter{handler, 0};
 6972|  16.0k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  16.0k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80, False: 15.9k]
  |  |  ------------------
  ------------------
 6975|     80|            handler.on_error("Missing '}' in format string");
 6976|     80|            return begin;
 6977|     80|        }
 6978|       |
 6979|  15.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 168, False: 15.7k]
  ------------------
 6980|    168|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|    168|        }
 6982|  15.7k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 15.3k, False: 422]
  ------------------
 6983|  15.3k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54, False: 15.3k]
  |  |  ------------------
  ------------------
 6984|     54|                handler.on_error("Unexpected end of replacement field");
 6985|     54|                return begin;
 6986|     54|            }
 6987|  15.3k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  15.3k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.52k, False: 12.7k]
  |  |  |  Branch (859:45): [True: 0, False: 15.3k]
  |  |  |  Branch (859:45): [True: 2.52k, False: 12.7k]
  |  |  ------------------
  ------------------
 6989|  2.52k|                handler.on_error("Unknown format specifier");
 6990|  2.52k|                return begin;
 6991|  2.52k|            }
 6992|  15.3k|        }
 6993|    422|        else {
 6994|    422|            SCN_UNLIKELY_ATTR
 6995|    422|            handler.on_error("Missing '}' in format string");
 6996|    422|            return begin;
 6997|    422|        }
 6998|  15.9k|    }
 6999|  17.7k|    return begin + 1;
 7000|  20.8k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8034|  20.1k|    {
 8035|  20.1k|        return m_args.get(id);
 8036|  20.1k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8039|  4.86k|    {
 8040|  4.86k|        return m_args;
 8041|  4.86k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8044|  17.1k|    {
 8045|  17.1k|        return m_locale;
 8046|  17.1k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5561|  19.9k|    {
 5562|  19.9k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 19.9k]
  |  |  ------------------
  ------------------
 5563|     16|            on_error(
 5564|     16|                "Cannot switch from manual to automatic argument indexing");
 5565|     16|            return 0;
 5566|     16|        }
 5567|       |
 5568|  19.9k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|  19.9k|        do_check_arg_id(id);
 5570|  19.9k|        return id;
 5571|  19.9k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5585|    130|    {
 5586|    130|        return detail::handle_error(
 5587|    130|            scan_error{scan_error::invalid_format_string, msg});
 5588|    130|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6049|  20.1k|{
 6050|  20.1k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|  20.1k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|  20.1k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  16.0k|{
 6439|  16.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  16.0k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 16.0k, False: 0]
  |  Branch (6440:26): [True: 796, False: 15.2k]
  ------------------
 6441|    796|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|    796|    }
 6443|       |
 6444|  15.2k|    handler();
 6445|  15.2k|    return begin;
 6446|  16.0k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6408|    796|{
 6409|    796|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    796|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    796|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6410|       |
 6411|    796|    CharT c = *begin;
 6412|    796|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6412:9): [True: 160, False: 636]
  |  Branch (6412:27): [True: 148, False: 488]
  ------------------
 6413|    308|        handler.on_error("Invalid argument ID");
 6414|    308|        return begin;
 6415|    308|    }
 6416|       |
 6417|    488|    int idx = 0;
 6418|    488|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6418:9): [True: 264, False: 224]
  ------------------
 6419|    264|        idx = parse_simple_int(begin, end);
 6420|    264|    }
 6421|    224|    else {
 6422|    224|        ++begin;
 6423|    224|    }
 6424|       |
 6425|    488|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6425:9): [True: 80, False: 408]
  |  Branch (6425:26): [True: 240, False: 168]
  |  Branch (6425:50): [True: 114, False: 126]
  ------------------
 6426|    194|        handler.on_error("Invalid argument ID");
 6427|    194|        return begin;
 6428|    194|    }
 6429|    294|    handler(idx);
 6430|       |
 6431|    294|    return begin;
 6432|    488|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6949|    502|        {
 6950|    502|            SCN_UNLIKELY_ATTR
 6951|    502|            handler.on_error(msg);
 6952|    502|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6387|  12.6k|{
 6388|  12.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6389|  12.6k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  12.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6390|       |
 6391|  12.6k|    unsigned long long value = 0;
 6392|  14.2k|    do {
 6393|  14.2k|        value *= 10;
 6394|  14.2k|        value += static_cast<unsigned long long>(*begin - '0');
 6395|  14.2k|        if (value >
  ------------------
  |  Branch (6395:13): [True: 0, False: 14.2k]
  ------------------
 6396|  14.2k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6397|      0|            return -1;
 6398|      0|        }
 6399|  14.2k|        ++begin;
 6400|  14.2k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6400:14): [True: 14.0k, False: 260]
  |  Branch (6400:30): [True: 6.09k, False: 7.93k]
  |  Branch (6400:47): [True: 1.64k, False: 4.45k]
  ------------------
 6401|  12.6k|    return static_cast<int>(value);
 6402|  12.6k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6944|    294|        {
 6945|    294|            arg_id = handler.on_arg_id(id);
 6946|    294|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5574|    294|    {
 5575|    294|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 180]
  |  |  ------------------
  ------------------
 5576|    114|            on_error(
 5577|    114|                "Cannot switch from manual to automatic argument indexing");
 5578|    114|            return;
 5579|    114|        }
 5580|    180|        m_next_arg_id = -1;
 5581|    180|        do_check_arg_id(id);
 5582|    180|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  15.2k|        {
 6941|  15.2k|            arg_id = handler.on_arg_id();
 6942|  15.2k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5247|  30.6k|    {
 5248|  30.6k|        return m_type;
 5249|  30.6k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5556|  12.2k|    {
 5557|  12.2k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|  12.2k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5545|  27.6k|    {
 5546|  27.6k|        return m_format.data();
 5547|  27.6k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|  15.3k|    {
 7118|  15.3k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  15.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  15.3k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6853|  15.3k|{
 6854|  15.3k|    auto do_presentation = [&]() -> const CharT* {
 6855|  15.3k|        if (*begin == CharT{'['}) {
 6856|  15.3k|            auto set = parse_presentation_set(begin, end, handler);
 6857|  15.3k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  15.3k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  15.3k|                return begin;
 6862|  15.3k|            }
 6863|  15.3k|            handler.on_character_set_string(set);
 6864|  15.3k|            return begin;
 6865|  15.3k|        }
 6866|  15.3k|        if (*begin == CharT{'/'}) {
 6867|  15.3k|            return parse_presentation_regex(begin, end, handler);
 6868|  15.3k|        }
 6869|  15.3k|        presentation_type type = parse_presentation_type(*begin++);
 6870|  15.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  15.3k|            handler.on_error("Invalid type specifier in format string");
 6872|  15.3k|            return begin;
 6873|  15.3k|        }
 6874|  15.3k|        handler.on_type(type);
 6875|  15.3k|        return begin;
 6876|  15.3k|    };
 6877|       |
 6878|  15.3k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 14.3k, False: 936]
  |  Branch (6878:28): [True: 3.00k, False: 11.3k]
  ------------------
 6879|  15.3k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 340, False: 2.66k]
  |  Branch (6879:36): [True: 270, False: 70]
  ------------------
 6880|    270|        return do_presentation();
 6881|    270|    }
 6882|       |
 6883|  15.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.0k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  15.0k|    begin = parse_align(begin, end, handler);
 6889|  15.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108, False: 14.9k]
  |  |  ------------------
  ------------------
 6890|    108|        handler.on_error("Unexpected end of format string");
 6891|    108|        return begin;
 6892|    108|    }
 6893|       |
 6894|  14.9k|    begin = parse_width(begin, end, handler);
 6895|  14.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100, False: 14.8k]
  |  |  ------------------
  ------------------
 6896|    100|        handler.on_error("Unexpected end of format string");
 6897|    100|        return begin;
 6898|    100|    }
 6899|       |
 6900|  14.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 1.96k, False: 12.8k]
  ------------------
 6901|  1.96k|        ++begin;
 6902|  1.96k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 1.91k]
  |  |  ------------------
  ------------------
 6903|     46|            handler.on_error("Unexpected end of format string");
 6904|     46|            return begin;
 6905|     46|        }
 6906|  1.91k|        begin = parse_precision(begin, end, handler);
 6907|  1.91k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 1.81k]
  |  |  ------------------
  ------------------
 6908|    106|            handler.on_error("Unexpected end of format string");
 6909|    106|            return begin;
 6910|    106|        }
 6911|  1.91k|    }
 6912|       |
 6913|  14.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 260, False: 14.4k]
  ------------------
 6914|    260|        handler.on_localized();
 6915|    260|        ++begin;
 6916|    260|    }
 6917|  14.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 14.6k]
  |  |  ------------------
  ------------------
 6918|     70|        handler.on_error("Unexpected end of format string");
 6919|     70|        return begin;
 6920|     70|    }
 6921|       |
 6922|  14.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 14.6k, False: 0]
  |  Branch (6922:25): [True: 9.85k, False: 4.76k]
  ------------------
 6923|  9.85k|        do_presentation();
 6924|  9.85k|    }
 6925|  14.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.50k, False: 13.1k]
  |  |  ------------------
  ------------------
 6926|  1.50k|        handler.on_error("Unexpected end of format string");
 6927|  1.50k|        return begin;
 6928|  1.50k|    }
 6929|       |
 6930|  13.1k|    return begin;
 6931|  14.6k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6502|  3.00k|{
 6503|  3.00k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 268, False: 2.74k]
  |  Branch (6503:33): [True: 234, False: 34]
  ------------------
 6504|  3.00k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 212, False: 2.56k]
  |  Branch (6504:33): [True: 106, False: 106]
  ------------------
 6505|  3.00k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|  10.1k|    auto do_presentation = [&]() -> const CharT* {
 6855|  10.1k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 664, False: 9.46k]
  ------------------
 6856|    664|            auto set = parse_presentation_set(begin, end, handler);
 6857|    664|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|    664|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 602, False: 62]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|    602|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|    602|                return begin;
 6862|    602|            }
 6863|     62|            handler.on_character_set_string(set);
 6864|     62|            return begin;
 6865|    664|        }
 6866|  9.46k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 6.63k, False: 2.83k]
  ------------------
 6867|  6.63k|            return parse_presentation_regex(begin, end, handler);
 6868|  6.63k|        }
 6869|  2.83k|        presentation_type type = parse_presentation_type(*begin++);
 6870|  2.83k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 436, False: 2.39k]
  |  |  ------------------
  ------------------
 6871|    436|            handler.on_error("Invalid type specifier in format string");
 6872|    436|            return begin;
 6873|    436|        }
 6874|  2.39k|        handler.on_type(type);
 6875|  2.39k|        return begin;
 6876|  2.83k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6692|    664|{
 6693|    664|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    664|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    664|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6694|    664|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    664|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    664|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6695|       |
 6696|    664|    auto start = begin;
 6697|    664|    ++begin;
 6698|       |
 6699|    664|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    664|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 624]
  |  |  ------------------
  ------------------
 6700|       |        // clang-format off
 6701|     40|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6702|       |        // clang-format on
 6703|     40|        return {};
 6704|     40|    }
 6705|    624|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6705:9): [True: 136, False: 488]
  ------------------
 6706|    136|        handler.on_charset_inverted();
 6707|    136|        ++begin;
 6708|    136|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 108]
  |  |  ------------------
  ------------------
 6709|       |            // clang-format off
 6710|     28|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6711|       |            // clang-format on
 6712|     28|            return {};
 6713|     28|        }
 6714|    108|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6714:13): [True: 46, False: 62]
  ------------------
 6715|     46|            handler.on_charset_single(char32_t{']'});
 6716|     46|            ++begin;
 6717|     46|        }
 6718|    108|    }
 6719|    488|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6719:14): [True: 28, False: 460]
  ------------------
 6720|     28|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6721|     28|    }
 6722|       |
 6723|  2.45k|    while (begin != end) {
  ------------------
  |  Branch (6723:12): [True: 2.20k, False: 252]
  ------------------
 6724|  2.20k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 254, False: 1.94k]
  |  |  ------------------
  ------------------
 6725|    254|            break;
 6726|    254|        }
 6727|       |
 6728|  1.94k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 62, False: 1.88k]
  ------------------
 6729|     62|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6730|     62|        }
 6731|       |
 6732|  1.88k|        parse_presentation_set_literal(begin, end, handler);
 6733|  1.88k|    }
 6734|       |
 6735|    506|    SCN_UNLIKELY_ATTR
 6736|    506|    handler.on_error("Invalid [character set] specifier in format string");
 6737|    506|    return {};
 6738|    568|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6656|  1.88k|{
 6657|  1.88k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6658|       |
 6659|  1.88k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6660|  1.88k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 224, False: 1.66k]
  |  |  ------------------
  ------------------
 6661|    224|        return;
 6662|    224|    }
 6663|       |
 6664|  1.66k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6664:9): [True: 1.55k, False: 102]
  |  Branch (6664:25): [True: 368, False: 1.19k]
  |  Branch (6664:49): [True: 340, False: 28]
  ------------------
 6665|  1.66k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6665:9): [True: 308, False: 32]
  ------------------
 6666|    308|        ++begin;
 6667|       |
 6668|    308|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6669|    308|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 280]
  |  |  ------------------
  ------------------
 6670|     28|            return;
 6671|     28|        }
 6672|       |
 6673|    280|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 252]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|     28|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6676|       |            // clang-format on
 6677|     28|            return;
 6678|     28|        }
 6679|       |
 6680|    252|        handler.on_charset_range(cp_first, cp_second + 1);
 6681|    252|        return;
 6682|    280|    }
 6683|       |
 6684|  1.35k|    handler.on_charset_single(cp_first);
 6685|  1.35k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6632|  2.19k|{
 6633|  2.19k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6634|       |
 6635|  2.19k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6636|  2.19k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.19k]
  |  |  |  Branch (859:45): [True: 0, False: 2.19k]
  |  |  |  Branch (859:45): [True: 0, False: 2.19k]
  |  |  ------------------
  ------------------
 6637|      0|        handler.on_error("Invalid encoding in format string");
 6638|      0|        return invalid_code_point;
 6639|      0|    }
 6640|       |
 6641|  2.19k|    const auto cp =
 6642|  2.19k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6643|  2.19k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 252, False: 1.94k]
  |  |  ------------------
  ------------------
 6644|    252|        handler.on_error("Invalid encoding in format string");
 6645|    252|        return invalid_code_point;
 6646|    252|    }
 6647|       |
 6648|  1.94k|    begin += len;
 6649|  1.94k|    return cp;
 6650|  2.19k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6341|     62|    {
 6342|     62|        m_specs.charset_string_data = fmt.data();
 6343|     62|        m_specs.charset_string_size = fmt.size();
 6344|     62|        on_type(presentation_type::string_set);
 6345|     62|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6744|  6.63k|{
 6745|  6.63k|#if !SCN_DISABLE_REGEX
 6746|  6.63k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6747|  6.63k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  6.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6748|       |
 6749|  6.63k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  13.2k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6749:19): [Folded - Ignored]
  |  Branch (6749:19): [Folded - Ignored]
  ------------------
 6750|  6.63k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6750:19): [Folded - Ignored]
  ------------------
 6751|  6.63k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6752|  6.63k|        return begin;
 6753|  6.63k|    }
 6754|       |
 6755|  6.63k|    auto start = begin;
 6756|  6.63k|    ++begin;
 6757|       |
 6758|  6.63k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 6.59k]
  |  |  ------------------
  ------------------
 6759|     36|        handler.on_error("Unexpected end of regex in format string");
 6760|     36|        return begin;
 6761|     36|    }
 6762|       |
 6763|  6.59k|    handler.on_type(presentation_type::regex);
 6764|   849k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6764:12): [True: 849k, False: 130]
  ------------------
 6765|   849k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6765:13): [True: 6.56k, False: 842k]
  ------------------
 6766|  6.56k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6766:17): [True: 6.46k, False: 96]
  ------------------
 6767|  6.46k|                break;
 6768|  6.46k|            }
 6769|     96|            else {
 6770|     96|                handler.on_type(presentation_type::regex_escaped);
 6771|     96|            }
 6772|  6.56k|        }
 6773|   849k|    }
 6774|  6.59k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 130, False: 6.46k]
  |  |  ------------------
  ------------------
 6775|    130|        handler.on_error("Unexpected end of regex in format string");
 6776|    130|        return begin;
 6777|    130|    }
 6778|       |
 6779|  6.46k|    auto regex_end = begin;
 6780|  6.46k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6781|  6.46k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  6.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 6.42k]
  |  |  ------------------
  ------------------
 6782|     44|        handler.on_error("Invalid (empty) regex in format string");
 6783|     44|        return begin;
 6784|     44|    }
 6785|  6.42k|    handler.on_regex_pattern(regex_pattern);
 6786|  6.42k|    ++begin;
 6787|       |
 6788|  6.42k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 6.38k]
  |  |  ------------------
  ------------------
 6789|     34|        handler.on_error("Unexpected end of regex in format string");
 6790|     34|        return begin;
 6791|     34|    }
 6792|       |
 6793|  6.38k|    regex_flags flags{regex_flags::none};
 6794|  6.38k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6795|  6.38k|        {{'m', regex_flags::multiline},
 6796|  6.38k|         {'s', regex_flags::singleline},
 6797|  6.38k|         {'i', regex_flags::nocase},
 6798|  6.38k|         {'n', regex_flags::nocapture}}};
 6799|  6.75k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6799:12): [True: 6.75k, False: 0]
  ------------------
 6800|  6.75k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6800:13): [True: 5.98k, False: 770]
  ------------------
 6801|  5.98k|            break;
 6802|  5.98k|        }
 6803|    770|        bool found_flag = false;
 6804|  2.24k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6804:24): [True: 2.24k, False: 402]
  ------------------
 6805|  2.24k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6805:17): [True: 1.87k, False: 368]
  ------------------
 6806|  1.87k|                continue;
 6807|  1.87k|            }
 6808|    368|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6808:17): [True: 0, False: 368]
  ------------------
 6809|      0|                handler.on_error("Flag set multiple times in regex");
 6810|      0|                return begin;
 6811|      0|            }
 6812|    368|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6813|    368|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6813:17): [True: 270, False: 98]
  ------------------
 6814|       |                // clang-format off
 6815|    270|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6816|       |                // clang-format on
 6817|    270|            }
 6818|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6819|       |            if (*begin == CharT{'m'}) {
 6820|       |                // clang-format off
 6821|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6822|       |                // clang-format on
 6823|       |            }
 6824|       |#endif
 6825|    368|#endif
 6826|    368|            flags |= flag.second;
 6827|    368|            found_flag = true;
 6828|    368|            break;
 6829|    368|        }
 6830|    770|        if (!found_flag) {
  ------------------
  |  Branch (6830:13): [True: 402, False: 368]
  ------------------
 6831|    402|            handler.on_error("Invalid flag in regex");
 6832|    402|            return begin;
 6833|    402|        }
 6834|    770|    }
 6835|  5.98k|    handler.on_regex_flags(flags);
 6836|       |
 6837|  5.98k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  5.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.98k]
  |  |  ------------------
  ------------------
 6838|      0|        handler.on_error("Unexpected end of regex in format string");
 6839|      0|        return begin;
 6840|      0|    }
 6841|       |
 6842|  5.98k|    return begin;
 6843|       |#else
 6844|       |    handler.on_error("Regular expression support is disabled");
 6845|       |    return {};
 6846|       |#endif
 6847|  5.98k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6349|  6.42k|    {
 6350|  6.42k|        m_specs.charset_string_data = pattern.data();
 6351|  6.42k|        m_specs.charset_string_size = pattern.size();
 6352|  6.42k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6450|  2.83k|{
 6451|  2.83k|    switch (type) {
 6452|     34|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 34, False: 2.79k]
  ------------------
 6453|     68|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 34, False: 2.79k]
  ------------------
 6454|     68|            return presentation_type::int_binary;
 6455|     90|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 90, False: 2.74k]
  ------------------
 6456|     90|            return presentation_type::int_decimal;
 6457|     52|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 52, False: 2.78k]
  ------------------
 6458|     52|            return presentation_type::int_generic;
 6459|     52|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 52, False: 2.78k]
  ------------------
 6460|     52|            return presentation_type::int_unsigned_decimal;
 6461|     88|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 88, False: 2.74k]
  ------------------
 6462|     88|            return presentation_type::int_octal;
 6463|     34|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 34, False: 2.79k]
  ------------------
 6464|     98|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 64, False: 2.76k]
  ------------------
 6465|     98|            return presentation_type::int_hex;
 6466|     34|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 34, False: 2.79k]
  ------------------
 6467|     62|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 28, False: 2.80k]
  ------------------
 6468|     62|            return presentation_type::int_arbitrary_base;
 6469|    160|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 160, False: 2.67k]
  ------------------
 6470|    194|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 34, False: 2.79k]
  ------------------
 6471|    194|            return presentation_type::float_hex;
 6472|     72|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 72, False: 2.76k]
  ------------------
 6473|    114|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 42, False: 2.79k]
  ------------------
 6474|    114|            return presentation_type::float_scientific;
 6475|     58|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 58, False: 2.77k]
  ------------------
 6476|    116|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 58, False: 2.77k]
  ------------------
 6477|    116|            return presentation_type::float_fixed;
 6478|     34|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 34, False: 2.79k]
  ------------------
 6479|     68|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 34, False: 2.79k]
  ------------------
 6480|     68|            return presentation_type::float_general;
 6481|  1.18k|        case 's':
  ------------------
  |  Branch (6481:9): [True: 1.18k, False: 1.64k]
  ------------------
 6482|  1.18k|            return presentation_type::string;
 6483|     62|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 62, False: 2.77k]
  ------------------
 6484|     62|            return presentation_type::character;
 6485|     34|        case '?':
  ------------------
  |  Branch (6485:9): [True: 34, False: 2.79k]
  ------------------
 6486|     34|            return presentation_type::escaped_character;
 6487|    112|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 112, False: 2.72k]
  ------------------
 6488|    112|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 2.83k]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 2.83k]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|    436|        default:
  ------------------
  |  Branch (6495:9): [True: 436, False: 2.39k]
  ------------------
 6496|    436|            return presentation_type::none;
 6497|  2.83k|    }
 6498|  2.83k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6527|  15.0k|{
 6528|  15.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  15.0k|    auto check_align = [](wchar_t ch) {
 6531|  15.0k|        switch (ch) {
 6532|  15.0k|            case L'<':
 6533|  15.0k|                return align_type::left;
 6534|  15.0k|            case L'>':
 6535|  15.0k|                return align_type::right;
 6536|  15.0k|            case L'^':
 6537|  15.0k|                return align_type::center;
 6538|  15.0k|            default:
 6539|  15.0k|                return align_type::none;
 6540|  15.0k|        }
 6541|  15.0k|    };
 6542|       |
 6543|  15.0k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  15.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.0k]
  |  |  |  Branch (859:45): [True: 0, False: 15.0k]
  |  |  |  Branch (859:45): [True: 0, False: 15.0k]
  |  |  ------------------
  ------------------
 6545|  15.0k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|  15.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  15.0k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  15.0k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  15.0k|    const auto begin_before_fill = begin;
 6555|  15.0k|    begin += potential_fill_len;
 6556|       |
 6557|  15.0k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 936, False: 14.1k]
  ------------------
 6558|    936|        return begin_before_fill;
 6559|    936|    }
 6560|       |
 6561|  14.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  14.1k|    const auto begin_after_fill = begin;
 6563|  14.1k|    ++begin;
 6564|       |
 6565|  14.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 14.1k, False: 0]
  ------------------
 6566|  14.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 14.0k]
  |  |  ------------------
  ------------------
 6567|     42|            handler.on_error("Invalid fill character '{' in format string");
 6568|     42|            return begin;
 6569|     42|        }
 6570|  14.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 624, False: 13.4k]
  ------------------
 6571|    624|            return begin_before_fill;
 6572|    624|        }
 6573|  14.0k|    }
 6574|       |
 6575|  13.4k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 12.8k, False: 630]
  ------------------
 6576|  12.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 1.19k, False: 11.6k]
  ------------------
 6577|  1.19k|            handler.on_align(potential_align_on_fill);
 6578|  1.19k|            return begin_after_fill;
 6579|  1.19k|        }
 6580|  11.6k|        return begin_before_fill;
 6581|  12.8k|    }
 6582|       |
 6583|    630|    handler.on_fill(potential_fill);
 6584|    630|    handler.on_align(potential_align_after_fill);
 6585|    630|    return begin;
 6586|  13.4k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6509|  15.0k|{
 6510|  15.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|  15.0k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|  15.0k|        return 1;
 6513|  15.0k|    }
 6514|  15.0k|    else {
 6515|  15.0k|        const auto lengths =
 6516|  15.0k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|  15.0k|            "\3\4";
 6518|  15.0k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|  15.0k|        return len;
 6520|  15.0k|    }
 6521|  15.0k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|  29.1k|    auto check_align = [](wchar_t ch) {
 6531|  29.1k|        switch (ch) {
 6532|    980|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 980, False: 28.1k]
  ------------------
 6533|    980|                return align_type::left;
 6534|    284|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 284, False: 28.8k]
  ------------------
 6535|    284|                return align_type::right;
 6536|    752|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 752, False: 28.4k]
  ------------------
 6537|    752|                return align_type::center;
 6538|  27.1k|            default:
  ------------------
  |  Branch (6538:13): [True: 27.1k, False: 2.01k]
  ------------------
 6539|  27.1k|                return align_type::none;
 6540|  29.1k|        }
 6541|  29.1k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6263|    630|    {
 6264|    630|        m_specs.fill = fill;
 6265|    630|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6144|    630|    {
 6145|    630|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|    630|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    630|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6146|    630|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|    630|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    630|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6147|    630|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6147:23): [Folded - Ignored]
  ------------------
 6148|    630|            for (size_t i = 0; i < s.size(); ++i) {
 6149|    630|                SCN_GCC_PUSH
 6150|    630|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6151|    630|                m_data[i] = s[i];
 6152|    630|                SCN_GCC_POP
 6153|    630|            }
 6154|    630|            m_size = static_cast<unsigned char>(s.size());
 6155|    630|        }
 6156|    630|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6156:28): [Folded - Ignored]
  ------------------
 6157|    630|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6158|    630|            m_data[1] =
 6159|    630|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6160|    630|            if (s.size() == 1) {
 6161|    630|                return;
 6162|    630|            }
 6163|    630|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6164|    630|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6165|    630|        }
 6166|    630|        else {
 6167|    630|            const auto front = static_cast<unsigned>(s.front());
 6168|    630|            m_data[0] = static_cast<char>(front);
 6169|    630|            m_data[1] = static_cast<char>(front >> 8);
 6170|    630|            m_data[2] = static_cast<char>(front >> 16);
 6171|    630|            m_data[3] = static_cast<char>(front >> 24);
 6172|    630|        }
 6173|    630|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6592|  14.9k|{
 6593|  14.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  14.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 14.0k, False: 864]
  |  Branch (6595:33): [True: 10.5k, False: 3.50k]
  ------------------
 6596|  10.5k|        int width = parse_simple_int(begin, end);
 6597|  10.5k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  10.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 10.5k, False: 0]
  |  |  ------------------
  ------------------
 6598|  10.5k|            handler.on_width(width);
 6599|  10.5k|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|  10.5k|    }
 6605|  14.9k|    return begin;
 6606|  14.9k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6612|  1.91k|{
 6613|  1.91k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6614|       |
 6615|  1.91k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6615:9): [True: 1.88k, False: 34]
  |  Branch (6615:33): [True: 1.81k, False: 70]
  ------------------
 6616|  1.81k|        int prec = parse_simple_int(begin, end);
 6617|  1.81k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  1.81k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.81k, False: 0]
  |  |  ------------------
  ------------------
 6618|  1.81k|            handler.on_precision(prec);
 6619|  1.81k|        }
 6620|      0|        else {
 6621|      0|            handler.on_error("Invalid field precision");
 6622|      0|            return begin;
 6623|      0|        }
 6624|  1.81k|    }
 6625|  1.91k|    return begin;
 6626|  1.91k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7122|    260|    {
 7123|    260|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|    260|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 240, False: 20]
  ------------------
 7125|    260|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 220, False: 20]
  ------------------
 7126|    260|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 200, False: 20]
  ------------------
 7127|    260|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 180, False: 20]
  ------------------
 7128|    180|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|    180|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|    180|        }
 7133|       |
 7134|     80|        Handler::on_localized();
 7135|     80|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  12.0k|{
 8413|  12.0k|#define SCN_VISIT(Type)                                         \
 8414|  12.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  12.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  12.0k|    }                                                           \
 8417|  12.0k|    else {                                                      \
 8418|  12.0k|        return vis(monostate_val);                              \
 8419|  12.0k|    }
 8420|       |
 8421|  12.0k|    monostate monostate_val{};
 8422|       |
 8423|  12.0k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 12.0k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 12.0k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|  1.34k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 1.34k, False: 10.6k]
  ------------------
 8429|  1.34k|            SCN_VISIT(int);
  ------------------
  |  | 8414|  1.34k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.34k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.34k|    }                                                           \
  |  | 8417|  1.34k|    else {                                                      \
  |  | 8418|  1.34k|        return vis(monostate_val);                              \
  |  | 8419|  1.34k|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 12.0k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 12.0k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 12.0k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 12.0k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|  1.34k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 1.34k, False: 10.6k]
  ------------------
 8439|  1.34k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|  1.34k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.34k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.34k|    }                                                           \
  |  | 8417|  1.34k|    else {                                                      \
  |  | 8418|  1.34k|        return vis(monostate_val);                              \
  |  | 8419|  1.34k|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 12.0k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 12.0k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|  1.32k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 1.32k, False: 10.6k]
  ------------------
 8445|  1.32k|            SCN_VISIT(void*);
  ------------------
  |  | 8414|  1.32k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.32k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.32k|    }                                                           \
  |  | 8417|  1.32k|    else {                                                      \
  |  | 8418|  1.32k|        return vis(monostate_val);                              \
  |  | 8419|  1.32k|    }
  ------------------
 8446|  1.34k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 1.34k, False: 10.6k]
  ------------------
 8447|  1.34k|            SCN_VISIT(bool);
  ------------------
  |  | 8414|  1.34k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.34k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.34k|    }                                                           \
  |  | 8417|  1.34k|    else {                                                      \
  |  | 8418|  1.34k|        return vis(monostate_val);                              \
  |  | 8419|  1.34k|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 12.0k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|  1.32k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 1.32k, False: 10.6k]
  ------------------
 8451|  1.32k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|  1.32k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.32k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.32k|    }                                                           \
  |  | 8417|  1.32k|    else {                                                      \
  |  | 8418|  1.32k|        return vis(monostate_val);                              \
  |  | 8419|  1.32k|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 12.0k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 12.0k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|  1.34k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 1.34k, False: 10.6k]
  ------------------
 8457|  1.34k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  1.34k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.34k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.34k|    }                                                           \
  |  | 8417|  1.34k|    else {                                                      \
  |  | 8418|  1.34k|        return vis(monostate_val);                              \
  |  | 8419|  1.34k|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 12.0k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 12.0k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|  1.32k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 1.32k, False: 10.6k]
  ------------------
 8463|  1.32k|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|  1.32k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.32k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.32k|    }                                                           \
  |  | 8417|  1.32k|    else {                                                      \
  |  | 8418|  1.32k|        return vis(monostate_val);                              \
  |  | 8419|  1.32k|    }
  ------------------
 8464|  1.32k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 1.32k, False: 10.6k]
  ------------------
 8465|  1.32k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|  1.32k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.32k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.32k|    }                                                           \
  |  | 8417|  1.32k|    else {                                                      \
  |  | 8418|  1.32k|        return vis(monostate_val);                              \
  |  | 8419|  1.32k|    }
  ------------------
 8466|  1.32k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 1.32k, False: 10.6k]
  ------------------
 8467|  1.32k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|  1.32k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  1.32k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  1.32k|    }                                                           \
  |  | 8417|  1.32k|    else {                                                      \
  |  | 8418|  1.32k|        return vis(monostate_val);                              \
  |  | 8419|  1.32k|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 12.0k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 12.0k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 12.0k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 12.0k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 12.0k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  12.0k|            SCN_CLANG_POP
 8491|  12.0k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.69k|{
   89|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.69k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.69k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  78.2k|{
   44|  78.2k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  78.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  78.2k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.69k|{
  127|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.69k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.69k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  78.2k|{
   60|  78.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  78.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  78.2k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.69k|{
   89|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.69k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.69k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.69k|{
  127|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.69k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.69k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.69k|{
   89|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.69k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.69k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.69k|{
  127|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.69k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.69k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.69k|{
   89|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.69k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.69k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.69k|{
  127|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.69k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.69k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.69k|{
   89|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.69k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.69k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.69k|{
  127|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.69k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.69k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.69k|{
   89|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.69k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.69k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.69k|{
  127|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.69k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.69k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  8.69k|{
   89|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.69k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.69k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  8.69k|{
  127|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.69k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.69k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.69k|{
   89|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.69k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.69k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  8.69k|{
  127|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.69k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.69k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.69k|{
   89|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.69k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.69k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.69k|{
  127|  8.69k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.69k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.69k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.69k|    static_cast<    \
  |  |  929|  8.69k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.69k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   117k|{
  653|   117k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   117k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    136|{
  659|    136|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    136|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 68, False: 68]
  ------------------
  661|    136|                    : std::locale{};
  662|    136|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    876|{
 1221|    876|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    876|                                  m_nan_payload_buffer, value);
 1223|    876|    value = this->setsign(value);
 1224|    876|    return n;
 1225|    876|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    886|{
 1221|    886|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    886|                                  m_nan_payload_buffer, value);
 1223|    886|    value = this->setsign(value);
 1224|    886|    return n;
 1225|    886|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     18|{
 1461|     18|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     18|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     18|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     18|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     18|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 18, False: 0]
  ------------------
 1467|     18|        SCN_UNLIKELY_ATTR
 1468|     18|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     18|                                     "Invalid integer value");
 1470|     18|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    872|{
 1461|    872|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    872|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    872|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    872|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    872|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 872, False: 0]
  ------------------
 1467|    872|        SCN_UNLIKELY_ATTR
 1468|    872|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    872|                                     "Invalid integer value");
 1470|    872|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    902|{
 1461|    902|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    902|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    902|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    902|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    902|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 902, False: 0]
  ------------------
 1467|    902|        SCN_UNLIKELY_ATTR
 1468|    902|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    902|                                     "Invalid integer value");
 1470|    902|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    872|{
 1461|    872|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    872|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    872|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    872|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    872|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 872, False: 0]
  ------------------
 1467|    872|        SCN_UNLIKELY_ATTR
 1468|    872|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    872|                                     "Invalid integer value");
 1470|    872|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    886|{
 1461|    886|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    886|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    886|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    886|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    886|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    886|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    886|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    886|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    886|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    886|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    886|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    886|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    886|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 886, False: 0]
  ------------------
 1467|    886|        SCN_UNLIKELY_ATTR
 1468|    886|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    886|                                     "Invalid integer value");
 1470|    886|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    858|{
 1461|    858|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    858|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    858|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    858|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    858|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    858|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    858|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    858|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    858|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    858|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    858|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    858|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    858|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 858, False: 0]
  ------------------
 1467|    858|        SCN_UNLIKELY_ATTR
 1468|    858|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    858|                                     "Invalid integer value");
 1470|    858|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    872|{
 1461|    872|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    872|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    872|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    872|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    872|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 872, False: 0]
  ------------------
 1467|    872|        SCN_UNLIKELY_ATTR
 1468|    872|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    872|                                     "Invalid integer value");
 1470|    872|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|  39.1k|{
 2176|  39.1k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|  39.1k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|  78.2k|{
 2200|  78.2k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|  78.2k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  3.42k|{
  194|  3.42k|    return find_classic_impl(
  195|  3.42k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  3.42k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  3.42k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  68.0k|{
  202|  68.0k|    return find_classic_impl(
  203|  68.0k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  68.0k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  68.0k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    242|{
  673|    242|    return e;
  674|    242|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|  39.1k|{
 2133|  39.1k|    return vscan_internal(source, format, args);
 2134|  39.1k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|  78.2k|{
 2153|  78.2k|    return vscan_internal(source, format, args);
 2154|  78.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.42k|{
  118|  3.42k|    auto it = source.begin();
  119|       |
  120|  14.2k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 11.5k, False: 2.68k]
  ------------------
  121|  11.5k|        auto sv =
  122|  11.5k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  11.5k|                .substr(0, 8);
  124|       |
  125|  11.5k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 4.23k, False: 7.30k]
  ------------------
  126|  4.23k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  4.23k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  4.23k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 474, False: 3.75k]
  ------------------
  129|    474|                break;
  130|    474|            }
  131|  3.75k|            continue;
  132|  4.23k|        }
  133|       |
  134|  30.5k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 23.4k, False: 7.03k]
  ------------------
  135|  23.4k|            auto tmp =
  136|  23.4k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  23.4k|            auto res = get_next_code_point(tmp);
  138|  23.4k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 270, False: 23.2k]
  ------------------
  139|    270|                return it;
  140|    270|            }
  141|  23.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  23.2k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  23.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  23.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  23.2k|        }
  145|  7.30k|    }
  146|       |
  147|  3.15k|    return detail::make_string_view_iterator(source, it);
  148|  3.42k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  79.2k|{
  105|  79.2k|    static_assert(sizeof(*source.data()) == 1);
  106|  79.2k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  79.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  79.2k|    uint64_t word{};
  108|  79.2k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  79.2k|    return has_byte_greater(word, 127) != 0;
  111|  79.2k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  27.1k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  23.4k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  68.0k|{
  118|  68.0k|    auto it = source.begin();
  119|       |
  120|  70.1k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 67.6k, False: 2.51k]
  ------------------
  121|  67.6k|        auto sv =
  122|  67.6k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  67.6k|                .substr(0, 8);
  124|       |
  125|  67.6k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 51.9k, False: 15.7k]
  ------------------
  126|  51.9k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  51.9k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  51.9k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 51.0k, False: 868]
  ------------------
  129|  51.0k|                break;
  130|  51.0k|            }
  131|    868|            continue;
  132|  51.9k|        }
  133|       |
  134|  19.6k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 18.3k, False: 1.25k]
  ------------------
  135|  18.3k|            auto tmp =
  136|  18.3k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  18.3k|            auto res = get_next_code_point(tmp);
  138|  18.3k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 14.4k, False: 3.90k]
  ------------------
  139|  14.4k|                return it;
  140|  14.4k|            }
  141|  3.90k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  3.90k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  3.90k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  3.90k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  3.90k|        }
  145|  15.7k|    }
  146|       |
  147|  53.5k|    return detail::make_string_view_iterator(source, it);
  148|  68.0k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  57.6k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  18.3k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    876|{
 1138|    876|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 876]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    876|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 876]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    876|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 876]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    876|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 876]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    876|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    876|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    876|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    876|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 12, False: 864]
  ------------------
 1185|     12|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 1186|     12|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     12|                                         "Invalid floating-point digit");
 1188|     12|        }
 1189|     12|    }
 1190|    864|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    864|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 864, False: 0]
  |  |  ------------------
  ------------------
 1191|    864|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    864|                                     "Invalid floating-point digit");
 1193|    864|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    886|{
 1138|    886|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 886]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    886|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 886]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    886|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 886]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    886|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 886]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    886|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    886|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    886|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    886|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 10, False: 876]
  ------------------
 1185|     10|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 1186|     10|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     10|                                         "Invalid floating-point digit");
 1188|     10|        }
 1189|     10|    }
 1190|    876|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 876, False: 0]
  |  |  ------------------
  ------------------
 1191|    876|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    876|                                     "Invalid floating-point digit");
 1193|    876|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  78.2k|{
 1625|  78.2k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 77.9k, False: 378]
  ------------------
 1626|  77.9k|        return false;
 1627|  77.9k|    }
 1628|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 252]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|  78.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  78.2k|    {
 1903|  78.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   234k|    {
 1722|   234k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 234k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   234k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  78.2k|    {
 1853|  78.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  78.2k|{
 2030|  78.2k|    const auto beg = handler.get_ctx().begin();
 2031|  78.2k|    detail::parse_format_string<false>(format, handler);
 2032|  78.2k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.7k, False: 2.52k]
  |  |  ------------------
  ------------------
 2033|  75.7k|        return unexpected(handler.error);
 2034|  75.7k|    }
 2035|  2.52k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  78.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|   695k|    {
 2014|   695k|        return ctx.get();
 2015|   695k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   695k|    {
 1857|   695k|        return contiguous_ctx;
 1858|   695k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  94.3k|    {
 1907|   199k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 110k, False: 89.1k]
  ------------------
 1908|   110k|            auto it = get_ctx().begin();
 1909|   110k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.11k, False: 109k]
  ------------------
 1910|  1.11k|                SCN_UNLIKELY_ATTR
 1911|  1.11k|                return on_error("Unexpected end of source");
 1912|  1.11k|            }
 1913|       |
 1914|   109k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   109k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   109k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 2.57k, False: 106k]
  ------------------
 1917|  2.57k|                return on_error("Invalid encoding in format string");
 1918|  2.57k|            }
 1919|   106k|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 59.0k, False: 47.6k]
  ------------------
 1920|  59.0k|                get_ctx().advance_to(
 1921|  59.0k|                    impl::read_while_classic_space(get_ctx().range()));
 1922|  59.0k|                begin = detail::to_address(std::prev(after_space_it));
 1923|  59.0k|                continue;
 1924|  59.0k|            }
 1925|       |
 1926|  47.6k|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 1.46k, False: 46.2k]
  ------------------
 1927|  1.46k|                SCN_UNLIKELY_ATTR
 1928|  1.46k|                return on_error("Unexpected literal character in source");
 1929|  1.46k|            }
 1930|  46.2k|            get_ctx().advance_to(ranges::next(it));
 1931|  46.2k|        }
 1932|  94.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1963|  6.01k|    {
 1964|  6.01k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1965|  6.01k|        set_arg_as_visited(arg_id);
 1966|       |
 1967|  6.01k|        on_visit_scan_arg(
 1968|  6.01k|            impl::default_arg_reader<context_type>{
 1969|  6.01k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1970|  6.01k|            arg);
 1971|  6.01k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  57.4k|{
 1681|  57.4k|    auto arg = ctx.arg(id);
 1682|  57.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  57.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.52k, False: 55.9k]
  |  |  ------------------
  ------------------
 1683|  1.52k|        handler.on_error("Failed to find argument with ID");
 1684|  1.52k|    }
 1685|  57.4k|    return arg;
 1686|  57.4k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  77.6k|    {
 1797|  77.6k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  77.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 74.6k]
  |  |  ------------------
  ------------------
 1798|  2.96k|            on_error("Invalid out-of-range argument ID");
 1799|  2.96k|            return;
 1800|  2.96k|        }
 1801|       |
 1802|  74.6k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  74.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 74.5k]
  |  |  ------------------
  ------------------
 1803|    106|            return on_error("Argument with this ID has already been scanned");
 1804|    106|        }
 1805|       |
 1806|  74.5k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  74.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 74.5k, False: 0]
  |  |  ------------------
  ------------------
 1807|  74.5k|            visited_args_lower64 |= (1ull << id);
 1808|  74.5k|            return;
 1809|  74.5k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  74.6k|    {
 1782|  74.6k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  74.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 74.6k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  74.6k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  74.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 74.6k, False: 0]
  |  |  ------------------
  ------------------
 1788|  74.6k|            return (visited_args_lower64 >> id) & 1ull;
 1789|  74.6k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  74.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  6.01k|    {
 1948|  6.01k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 160, False: 5.85k]
  |  Branch (1948:23): [True: 0, False: 5.85k]
  ------------------
 1949|    160|            SCN_UNLIKELY_ATTR
 1950|    160|            return;
 1951|    160|        }
 1952|       |
 1953|  5.85k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  5.85k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.00k, False: 1.84k]
  |  |  ------------------
  ------------------
 1955|  4.00k|            on_error(r.error());
 1956|  4.00k|        }
 1957|  1.84k|        else {
 1958|  1.84k|            get_ctx().advance_to(*r);
 1959|  1.84k|        }
 1960|  5.85k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  60.7k|    {
 1766|  60.7k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  60.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60.7k, False: 0]
  |  |  ------------------
  ------------------
 1767|  60.7k|            error = err;
 1768|  60.7k|        }
 1769|  60.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|  54.3k|    {
 1936|  54.3k|        return parse_ctx.next_arg_id();
 1937|  54.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1939|  3.13k|    {
 1940|  3.13k|        parse_ctx.check_arg_id(id);
 1941|  3.13k|        return id;
 1942|  3.13k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|  51.4k|    {
 1977|  51.4k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  51.4k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  51.4k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 51.4k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  51.4k|        auto specs = detail::format_specs{};
 1990|  51.4k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  51.4k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  51.4k|            arg.type()};
 1993|       |
 1994|  51.4k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  51.4k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 2.42k, False: 48.9k]
  |  Branch (1995:29): [True: 834, False: 48.1k]
  ------------------
 1996|  3.26k|            SCN_UNLIKELY_ATTR
 1997|  3.26k|            on_error("Missing '}' in format string");
 1998|  3.26k|            return parse_ctx.begin();
 1999|  3.26k|        }
 2000|  48.1k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  48.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 234, False: 47.9k]
  |  |  ------------------
  ------------------
 2001|    234|            return parse_ctx.begin();
 2002|    234|        }
 2003|  47.9k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  47.9k|        on_visit_scan_arg(
 2006|  47.9k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  47.9k|                                           get_ctx().locale()},
 2008|  47.9k|            arg);
 2009|  47.9k|        return parse_ctx.begin();
 2010|  48.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  51.4k|    {
 1701|  51.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  47.9k|    {
 1948|  47.9k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 122, False: 47.7k]
  |  Branch (1948:23): [True: 0, False: 47.7k]
  ------------------
 1949|    122|            SCN_UNLIKELY_ATTR
 1950|    122|            return;
 1951|    122|        }
 1952|       |
 1953|  47.7k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  47.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  47.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  47.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.7k, False: 5.04k]
  |  |  ------------------
  ------------------
 1955|  42.7k|            on_error(r.error());
 1956|  42.7k|        }
 1957|  5.04k|        else {
 1958|  5.04k|            get_ctx().advance_to(*r);
 1959|  5.04k|        }
 1960|  47.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   363k|    {
 1761|   363k|        SCN_UNLIKELY_ATTR
 1762|   363k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   363k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   234k|    {
 1729|   234k|        {
 1730|   234k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 234k]
  ------------------
 1731|   234k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 234k]
  ------------------
 1732|   234k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   234k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   234k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 160k, False: 74.5k]
  ------------------
 1736|   160k|                return on_error("Argument list not exhausted");
 1737|   160k|            }
 1738|   234k|        }
 1739|       |
 1740|  74.5k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 74.5k, False: 0]
  ------------------
 1741|  74.5k|            return;
 1742|  74.5k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   234k|    {
 1777|   234k|        return error;
 1778|   234k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|   408k|    {
 1773|   408k|        return static_cast<bool>(error);
 1774|   408k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  78.2k|{
 2045|  78.2k|    const auto argcount = args.size();
 2046|  78.2k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 18, False: 78.2k]
  |  Branch (2046:60): [True: 18, False: 0]
  ------------------
 2047|     18|        auto arg = args.get(0);
 2048|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|     18|    }
 2050|       |
 2051|  78.2k|    auto handler = format_handler<true, CharT>{
 2052|  78.2k|        ranges::subrange<const CharT*>{source.data(),
 2053|  78.2k|                                       source.data() + source.size()},
 2054|  78.2k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  78.2k|    static_cast<    \
  |  |  929|  78.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  78.2k|    static_cast<    \
  |  |  929|  78.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  78.2k|    return vscan_parse_format_string(format, handler);
 2056|  78.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   156k|{
 2045|   156k|    const auto argcount = args.size();
 2046|   156k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 18, False: 156k]
  |  Branch (2046:60): [True: 18, False: 0]
  ------------------
 2047|     18|        auto arg = args.get(0);
 2048|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|     18|    }
 2050|       |
 2051|   156k|    auto handler = format_handler<true, CharT>{
 2052|   156k|        ranges::subrange<const CharT*>{source.data(),
 2053|   156k|                                       source.data() + source.size()},
 2054|   156k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   156k|    return vscan_parse_format_string(format, handler);
 2056|   156k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   156k|{
 1625|   156k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 145k, False: 10.8k]
  ------------------
 1626|   145k|        return false;
 1627|   145k|    }
 1628|  10.8k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 10.6k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   156k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   156k|    {
 1903|   156k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   156k|    {
 1853|   156k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   156k|{
 2030|   156k|    const auto beg = handler.get_ctx().begin();
 2031|   156k|    detail::parse_format_string<false>(format, handler);
 2032|   156k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 156k, False: 272]
  |  |  ------------------
  ------------------
 2033|   156k|        return unexpected(handler.error);
 2034|   156k|    }
 2035|    272|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   156k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|   635k|    {
 2014|   635k|        return ctx.get();
 2015|   635k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|   635k|    {
 1857|   635k|        return contiguous_ctx;
 1858|   635k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  80.8k|    {
 1907|   173k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 152k, False: 21.0k]
  ------------------
 1908|   152k|            auto it = get_ctx().begin();
 1909|   152k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 666, False: 152k]
  ------------------
 1910|    666|                SCN_UNLIKELY_ATTR
 1911|    666|                return on_error("Unexpected end of source");
 1912|    666|            }
 1913|       |
 1914|   152k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   152k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   152k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 58.6k, False: 93.6k]
  ------------------
 1917|  58.6k|                return on_error("Invalid encoding in format string");
 1918|  58.6k|            }
 1919|  93.6k|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 1.79k, False: 91.8k]
  ------------------
 1920|  1.79k|                get_ctx().advance_to(
 1921|  1.79k|                    impl::read_while_classic_space(get_ctx().range()));
 1922|  1.79k|                begin = detail::to_address(std::prev(after_space_it));
 1923|  1.79k|                continue;
 1924|  1.79k|            }
 1925|       |
 1926|  91.8k|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 472, False: 91.3k]
  ------------------
 1927|    472|                SCN_UNLIKELY_ATTR
 1928|    472|                return on_error("Unexpected literal character in source");
 1929|    472|            }
 1930|  91.3k|            get_ctx().advance_to(ranges::next(it));
 1931|  91.3k|        }
 1932|  80.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1963|  4.86k|    {
 1964|  4.86k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1965|  4.86k|        set_arg_as_visited(arg_id);
 1966|       |
 1967|  4.86k|        on_visit_scan_arg(
 1968|  4.86k|            impl::default_arg_reader<context_type>{
 1969|  4.86k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1970|  4.86k|            arg);
 1971|  4.86k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  20.1k|{
 1681|  20.1k|    auto arg = ctx.arg(id);
 1682|  20.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.43k, False: 18.7k]
  |  |  ------------------
  ------------------
 1683|  1.43k|        handler.on_error("Failed to find argument with ID");
 1684|  1.43k|    }
 1685|  20.1k|    return arg;
 1686|  20.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  4.86k|    {
 1948|  4.86k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 110, False: 4.75k]
  |  Branch (1948:23): [True: 0, False: 4.75k]
  ------------------
 1949|    110|            SCN_UNLIKELY_ATTR
 1950|    110|            return;
 1951|    110|        }
 1952|       |
 1953|  4.75k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  4.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  4.75k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  4.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.42k, False: 1.33k]
  |  |  ------------------
  ------------------
 1955|  3.42k|            on_error(r.error());
 1956|  3.42k|        }
 1957|  1.33k|        else {
 1958|  1.33k|            get_ctx().advance_to(*r);
 1959|  1.33k|        }
 1960|  4.75k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|  19.9k|    {
 1936|  19.9k|        return parse_ctx.next_arg_id();
 1937|  19.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1939|    294|    {
 1940|    294|        parse_ctx.check_arg_id(id);
 1941|    294|        return id;
 1942|    294|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|  15.3k|    {
 1977|  15.3k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  15.3k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  15.3k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 15.3k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  15.3k|        auto specs = detail::format_specs{};
 1990|  15.3k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  15.3k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  15.3k|            arg.type()};
 1993|       |
 1994|  15.3k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  15.3k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 1.93k, False: 13.3k]
  |  Branch (1995:29): [True: 960, False: 12.4k]
  ------------------
 1996|  2.89k|            SCN_UNLIKELY_ATTR
 1997|  2.89k|            on_error("Missing '}' in format string");
 1998|  2.89k|            return parse_ctx.begin();
 1999|  2.89k|        }
 2000|  12.4k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 132, False: 12.2k]
  |  |  ------------------
  ------------------
 2001|    132|            return parse_ctx.begin();
 2002|    132|        }
 2003|  12.2k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  12.2k|        on_visit_scan_arg(
 2006|  12.2k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  12.2k|                                           get_ctx().locale()},
 2008|  12.2k|            arg);
 2009|  12.2k|        return parse_ctx.begin();
 2010|  12.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  15.3k|    {
 1701|  15.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  12.2k|    {
 1948|  12.2k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 272, False: 12.0k]
  |  Branch (1948:23): [True: 0, False: 12.0k]
  ------------------
 1949|    272|            SCN_UNLIKELY_ATTR
 1950|    272|            return;
 1951|    272|        }
 1952|       |
 1953|  12.0k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  12.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.6k, False: 1.41k]
  |  |  ------------------
  ------------------
 1955|  10.6k|            on_error(r.error());
 1956|  10.6k|        }
 1957|  1.41k|        else {
 1958|  1.41k|            get_ctx().advance_to(*r);
 1959|  1.41k|        }
 1960|  12.0k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  4.34k|{
 1363|  4.34k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  4.34k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  4.34k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  4.34k|            std::u32string tmp;
 1368|  4.34k|            transcode_to_string_impl_to32(src, tmp);
 1369|  4.34k|            return transcode_to_string_impl_32to16<false>(
 1370|  4.34k|                std::u32string_view{tmp}, dest);
 1371|  4.34k|        }
 1372|  4.34k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  4.34k|            return transcode_to_string_impl_to32(src, dest);
 1374|  4.34k|        }
 1375|  4.34k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  4.34k|{
 1256|  4.34k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  4.34k|    auto it = src.begin();
 1259|   769k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 764k, False: 4.34k]
  ------------------
 1260|   764k|        auto res = get_next_code_point(
 1261|   764k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   764k|                                                                 src.end()));
 1263|   764k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   764k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.9k, False: 749k]
  |  |  ------------------
  ------------------
 1264|  14.9k|            dest.push_back(DestCharT{0xfffd});
 1265|  14.9k|        }
 1266|   749k|        else {
 1267|   749k|            dest.push_back(res.value);
 1268|   749k|        }
 1269|   764k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   764k|    }
 1271|  4.34k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   954k|{
 1169|   954k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   954k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   954k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   954k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   954k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   954k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.5k, False: 939k]
  |  |  ------------------
  ------------------
 1173|  14.5k|        return {get_start_for_next_code_point(input),
 1174|  14.5k|                detail::invalid_code_point};
 1175|  14.5k|    }
 1176|   939k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   939k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.12k, False: 937k]
  |  |  ------------------
  ------------------
 1177|  2.12k|        return {input.end(), detail::invalid_code_point};
 1178|  2.12k|    }
 1179|       |
 1180|   937k|    return {input.begin() + len,
 1181|   937k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   939k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  14.5k|{
 1155|  14.5k|    auto it = input.begin();
 1156|  76.6k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 73.4k, False: 3.24k]
  ------------------
 1157|  73.4k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 11.3k, False: 62.1k]
  ------------------
 1158|  11.3k|            break;
 1159|  11.3k|        }
 1160|  73.4k|    }
 1161|  14.5k|    return it;
 1162|  14.5k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  45.3k|    {
  809|  45.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  45.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  45.3k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  16.5k|    {
  823|  16.5k|        return a.m_code == b.m_code;
  824|  16.5k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  34.0k|    {
 2931|  34.0k|        SCN_UNLIKELY_ATTR
 2932|  34.0k|        m_msg = msg;
 2933|  34.0k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  59.8k|    {
 2936|  59.8k|        return m_msg == nullptr;
 2937|  59.8k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  1.02k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4989|   697k|    {
 4990|   697k|        on_charset_range(cp, cp + 1);
 4991|   697k|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4994|   701k|    {
 4995|   701k|        if (end <= 127) {
  ------------------
  |  Branch (4995:13): [True: 416k, False: 284k]
  ------------------
 4996|   416k|            return;
 4997|   416k|        }
 4998|       |
 4999|  64.6M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4999:25): [True: 64.6M, False: 284k]
  ------------------
 5000|       |            // TODO: check for overlap
 5001|  64.6M|            if (elem.first == end) {
  ------------------
  |  Branch (5001:17): [True: 96, False: 64.6M]
  ------------------
 5002|     96|                elem.first = begin;
 5003|     96|                return;
 5004|     96|            }
 5005|       |
 5006|  64.6M|            if (elem.second == begin) {
  ------------------
  |  Branch (5006:17): [True: 336, False: 64.6M]
  ------------------
 5007|    336|                elem.second = end;
 5008|    336|                return;
 5009|    336|            }
 5010|  64.6M|        }
 5011|       |
 5012|   284k|        extra_ranges.push_back(std::make_pair(begin, end));
 5013|   284k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5016|    372|    {
 5017|       |        // no-op
 5018|    372|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5031|   707k|    {
 5032|   707k|        return static_cast<bool>(err);
 5033|   707k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5349|  1.31k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  84.8k|{
  458|  84.8k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  84.8k|        static_cast<unsigned char>(ch))];
  460|  84.8k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   587k|{
  469|   587k|    return static_cast<unsigned char>(ch) <= 127;
  470|   587k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   633k|{
  483|   633k|    return cp <= 127;
  484|   633k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  79.2k|{
  539|  79.2k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  79.2k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  47.6k|{
  784|  47.6k|    return e != eof_error::good;
  785|  47.6k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|     84|{
  798|     84|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|     84|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     84|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|     84|    return scan_error{scan_error::end_of_range, "EOF"};
  800|     84|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    562|{
  845|    562|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    562|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    562|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    562|    return parse_error::eof;
  847|    562|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.87k|{
  854|  3.87k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.87k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.87k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 54, False: 3.81k]
  ------------------
  859|     54|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     54|    }
  861|       |
  862|  3.81k|    return scan_error{code, msg};
  863|  3.87k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.87k|{
  868|  3.87k|    return [code, msg](parse_error err) {
  869|  3.87k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.87k|    };
  871|  3.87k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   388k|{
 1200|       |    // Pattern_White_Space property
 1201|   388k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 246k, False: 142k]
  |  Branch (1201:27): [True: 52.6k, False: 193k]
  ------------------
 1202|   388k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 9.86k, False: 326k]
  ------------------
 1203|   388k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 6.81k, False: 319k]
  ------------------
 1204|   388k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 760, False: 318k]
  ------------------
 1205|   388k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 1.89k, False: 316k]
  ------------------
 1206|   388k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 620, False: 316k]
  ------------------
 1207|   388k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 20, False: 316k]
  ------------------
 1208|   388k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  3.61k|{
 2220|  3.61k|    unsigned char running_diff{0};
 2221|  12.6k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 9.02k, False: 3.61k]
  ------------------
 2222|  9.02k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  9.02k|    }
 2224|  3.61k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 3.61k]
  |  Branch (2224:33): [True: 0, False: 3.61k]
  ------------------
 2225|  3.61k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   195k|{
 2303|   195k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 21.1k, False: 174k]
  ------------------
 2304|   195k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 618, False: 20.5k]
  ------------------
 2305|  21.1k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 90, False: 20.4k]
  ------------------
 2306|  21.1k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 48, False: 20.4k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  21.1k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 18.2k, False: 2.11k]
  |  Branch (2308:27): [True: 2.32k, False: 15.9k]
  |  Branch (2308:43): [True: 2.23k, False: 96]
  ------------------
 2309|  21.1k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 15.9k, False: 2.20k]
  |  Branch (2309:27): [True: 92, False: 15.8k]
  ------------------
 2310|  21.1k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 15.8k, False: 2.20k]
  |  Branch (2310:27): [True: 106, False: 15.7k]
  ------------------
 2311|  21.1k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 15.6k, False: 2.28k]
  |  Branch (2311:27): [True: 72, False: 15.6k]
  ------------------
 2312|  21.1k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 15.6k, False: 2.28k]
  |  Branch (2312:27): [True: 256, False: 15.3k]
  ------------------
 2313|  21.1k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 15.3k, False: 2.28k]
  |  Branch (2313:27): [True: 36, False: 15.3k]
  ------------------
 2314|  21.1k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 15.3k, False: 2.28k]
  |  Branch (2314:27): [True: 78, False: 15.2k]
  ------------------
 2315|  21.1k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 15.0k, False: 2.48k]
  |  Branch (2315:28): [True: 84, False: 14.9k]
  ------------------
 2316|  21.1k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 14.9k, False: 2.48k]
  |  Branch (2316:28): [True: 268, False: 14.6k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  21.1k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 14.8k, False: 2.33k]
  |  Branch (2318:28): [True: 96, False: 14.7k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  21.1k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 14.7k, False: 2.33k]
  |  Branch (2320:28): [True: 60, False: 14.6k]
  ------------------
 2321|  4.13k|        return 2;
 2322|  4.13k|    }
 2323|   191k|    return 1;
 2324|   195k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|   150k|{
 2328|   150k|    return calculate_text_width_for_fmt_v10(cp);
 2329|   150k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    356|{
 2343|    356|    return calculate_text_width_for_fmt_v10(cp);
 2344|    356|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  15.3k|{
 3123|  15.3k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  15.3k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  7.39k|{
 3127|  7.39k|#if WCHAR_MIN < 0
 3128|  7.39k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 7.39k, False: 0]
  |  Branch (3128:20): [True: 7.39k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  7.39k|        return char_to_int(static_cast<char>(ch));
 3133|  7.39k|    }
 3134|      0|    return 255;
 3135|  7.39k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4270|  11.8k|{
 4271|  11.8k|    std::regex_constants::syntax_option_type result{};
 4272|  11.8k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4272:9): [True: 258, False: 11.5k]
  ------------------
 4273|    258|#if SCN_HAS_STD_REGEX_MULTILINE
 4274|    258|        result |= std::regex_constants::multiline;
 4275|       |#else
 4276|       |        return unexpected_scan_error(
 4277|       |            scan_error::invalid_format_string,
 4278|       |            "/m flag for regex isn't supported by regex backend");
 4279|       |#endif
 4280|    258|    }
 4281|  11.8k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4281:9): [True: 0, False: 11.8k]
  ------------------
 4282|  11.8k|        detail::regex_flags::none) {
 4283|      0|        return unexpected_scan_error(
 4284|      0|            scan_error::invalid_format_string,
 4285|      0|            "/s flag for regex isn't supported by regex backend");
 4286|      0|    }
 4287|  11.8k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4287:9): [True: 1.17k, False: 10.6k]
  ------------------
 4288|  1.17k|        result |= std::regex_constants::icase;
 4289|  1.17k|    }
 4290|  11.8k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4290:9): [True: 6, False: 11.8k]
  ------------------
 4291|      6|        result |= std::regex_constants::nosubs;
 4292|      6|    }
 4293|  11.8k|    return result;
 4294|  11.8k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4637|    732|{
 4638|    732|    std::string result{pattern};
 4639|  6.85k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4639:24): [True: 6.12k, False: 732]
  ------------------
 4640|  6.12k|        result.replace(n, 2, "/");
 4641|  6.12k|        ++n;
 4642|  6.12k|    }
 4643|    732|    return result;
 4644|    732|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  7.19k|{
 6008|  7.19k|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 1.66k, False: 5.53k]
  ------------------
 6009|  1.66k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 690, False: 970]
  ------------------
 6010|    690|            return {scan_error::invalid_scanned_value,
 6011|    690|                    "Scanned value too narrow, width did not exceed what "
 6012|    690|                    "was specified in the format string"};
 6013|    690|        }
 6014|  1.66k|    }
 6015|  6.50k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 1.45k, False: 5.04k]
  ------------------
 6016|  1.45k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 44, False: 1.41k]
  ------------------
 6017|     44|            return {scan_error::invalid_scanned_value,
 6018|     44|                    "Scanned value too wide, width exceeded the specified "
 6019|     44|                    "precision"};
 6020|     44|        }
 6021|  1.45k|    }
 6022|  6.46k|    return {};
 6023|  6.50k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   102k|    {
  304|   102k|        ranges::advance(x, n);
  305|   102k|        return x;
  306|   102k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   102k|    {
  268|   102k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   102k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   163k|    {
  151|   163k|        i += n;
  152|   163k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   101k|    {
  108|   101k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   101k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   101k|    {
   87|   101k|        return s - i;
   88|   101k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  5.46k|    {
  304|  5.46k|        ranges::advance(x, n);
  305|  5.46k|        return x;
  306|  5.46k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  5.46k|    {
  268|  5.46k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.46k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  5.46k|    {
  151|  5.46k|        i += n;
  152|  5.46k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|    474|    {
  108|    474|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|    474|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|    474|    {
   87|    474|        return s - i;
   88|    474|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5623|  5.29k|    {
 5624|  5.29k|        reader_error_handler eh{};
 5625|  5.29k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  5.29k|            detail::check_code_point_type_specs(specs, eh);
 5627|  5.29k|        }
 5628|  5.29k|        else {
 5629|  5.29k|            detail::check_char_type_specs(specs, eh);
 5630|  5.29k|        }
 5631|  5.29k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.81k, False: 478]
  |  |  ------------------
  ------------------
 5632|  4.81k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  4.81k|        }
 5634|    478|        return {};
 5635|  5.29k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  30.8k|    {
  763|  30.8k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  30.8k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  3.84k|    {
  754|  3.84k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  6.55k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.55k|              cvref<T> obj = *get<T>(fn);
  745|  6.55k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.55k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.55k|              }
  748|  6.55k|              else {
  749|  6.55k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.55k|              }
  751|  6.55k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  6.55k|    {
  684|  6.55k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.55k|            return static_cast<T*>(s.m_cp);
  686|  6.55k|        }
  687|  6.55k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.55k|            return static_cast<T*>(s.m_p);
  689|  6.55k|        }
  690|  6.55k|        else {
  691|  6.55k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.55k|        }
  693|  6.55k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  3.84k|        {
  662|  3.84k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  1.36M|    {
  763|  1.36M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.36M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  14.7k|    {
  754|  14.7k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|   642k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   642k|              cvref<T> obj = *get<T>(fn);
  745|   642k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   642k|                  obj(static_cast<decltype(args)>(args)...);
  747|   642k|              }
  748|   642k|              else {
  749|   642k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   642k|              }
  751|   642k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   642k|    {
  684|   642k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   642k|            return static_cast<T*>(s.m_cp);
  686|   642k|        }
  687|   642k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   642k|            return static_cast<T*>(s.m_p);
  689|   642k|        }
  690|   642k|        else {
  691|   642k|            return reinterpret_cast<T*>(s.m_fp);
  692|   642k|        }
  693|   642k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  14.7k|        {
  662|  14.7k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5618|  1.55k|    {
 5619|  1.55k|        return false;
 5620|  1.55k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.87k|    return [code, msg](parse_error err) {
  869|  3.87k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.87k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|     72|    {
 1780|     72|        auto stdloc = loc.get<std::locale>();
 1781|     72|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     72|        grouping = numpunct.grouping();
 1783|     72|        thousands_sep =
 1784|     72|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 72]
  ------------------
 1785|     72|        decimal_point = numpunct.decimal_point();
 1786|     72|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|     94|{
 1717|     94|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 94, False: 0]
  ------------------
 1718|     94|        return std::use_facet<Facet>(stdloc);
 1719|     94|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     94|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  31.5k|{
 2349|  31.5k|    size_t count{0};
 2350|  31.5k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  31.5k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  31.5k|    });
 2353|  31.5k|    return count;
 2354|  31.5k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  31.5k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  31.5k|    auto it = input.begin();
 1448|  70.0k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 38.4k, False: 31.5k]
  ------------------
 1449|  38.4k|        auto res = get_next_code_point(
 1450|  38.4k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  38.4k|        cb(res.value);
 1452|  38.4k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  38.4k|    }
 1454|  31.5k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  44.2k|    {
  763|  44.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  44.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  44.2k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  31.5k|    {
  754|  31.5k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  38.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.4k|              cvref<T> obj = *get<T>(fn);
  745|  38.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  38.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.4k|              }
  748|  38.4k|              else {
  749|  38.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.4k|              }
  751|  38.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  38.4k|    {
  684|  38.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  38.4k|            return static_cast<T*>(s.m_cp);
  686|  38.4k|        }
  687|  38.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  38.4k|            return static_cast<T*>(s.m_p);
  689|  38.4k|        }
  690|  38.4k|        else {
  691|  38.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  38.4k|        }
  693|  38.4k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  38.4k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  38.4k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  38.4k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  31.5k|        {
  662|  31.5k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  3.63k|    {
 1582|  3.63k|        return m_view;
 1583|  3.63k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  3.87k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|  17.3k|    {
 2382|  17.3k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|  1.19k|    {
 2421|  1.19k|        return m_multibyte_left;
 2422|  1.19k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|   357k|    {
 2426|   357k|        return *m_current;
 2427|   357k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   292k|    {
 2435|   292k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   292k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   292k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   292k|        _increment_current();
 2437|   292k|        return *this;
 2438|   292k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   292k|    {
 2668|   292k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 150k, False: 142k]
  ------------------
 2669|   150k|            auto cplen = _get_cp_length_at_current();
 2670|   150k|            m_multibyte_left = cplen - 1;
 2671|   150k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|   150k|        }
 2673|   142k|        else {
 2674|   142k|            --m_multibyte_left;
 2675|   142k|        }
 2676|       |
 2677|   292k|        ++m_current;
 2678|   292k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|   150k|    {
 2639|   150k|        return static_cast<difference_type>(
 2640|   150k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|   150k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|   150k|    {
 2645|   150k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 900, False: 149k]
  |  |  ------------------
  ------------------
 2646|    900|            return 0;
 2647|    900|        }
 2648|       |
 2649|   149k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 119k, False: 29.8k]
  ------------------
 2650|   119k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|   119k|            auto cp = static_cast<char32_t>(*m_current);
 2652|   119k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|   119k|        }
 2654|       |
 2655|  29.8k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  29.8k|                                           cplen);
 2657|  29.8k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 29.6k]
  |  |  ------------------
  ------------------
 2658|    174|            return 0;
 2659|    174|        }
 2660|       |
 2661|  29.6k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  29.6k|        return static_cast<difference_type>(
 2663|  29.6k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  29.8k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  31.9k|{
 1857|  31.9k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  31.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  31.9k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  31.9k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  31.9k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 284, False: 31.6k]
  ------------------
 1862|    284|            return unexpected(eof_error::eof);
 1863|    284|        }
 1864|       |
 1865|  31.6k|        return ranges::next(range.begin(), count);
 1866|  31.9k|    }
 1867|  31.9k|    else {
 1868|  31.9k|        auto it = range.begin();
 1869|  31.9k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  31.9k|            return ranges::next(it, count);
 1871|  31.9k|        }
 1872|       |
 1873|  31.9k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  31.9k|            if (it == range.end()) {
 1875|  31.9k|                return unexpected(eof_error::eof);
 1876|  31.9k|            }
 1877|  31.9k|        }
 1878|       |
 1879|  31.9k|        return it;
 1880|  31.9k|    }
 1881|  31.9k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  2.68k|    {
  268|  2.68k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.68k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.68k|    {
  161|  2.68k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.68k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.68k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.68k|        else {
  169|  2.68k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.68k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.68k|        }
  173|  2.68k|    }
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|   158k|    {
 2531|   158k|        return !(a == b);
 2532|   158k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|   160k|    {
 2523|   160k|        return a.m_current == b.m_current;
 2524|   160k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|   110k|    {
 1890|   110k|        return !codepoint.empty();
 1891|   110k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  6.49k|    {
 2832|  6.49k|        return take_width_view{r, n};
 2833|  6.49k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|  6.49k|    {
 2801|  6.49k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  6.49k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5662|    256|    {
 5663|    256|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 226, False: 30]
  ------------------
 5664|    256|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 30]
  ------------------
 5665|    226|            return read_default(range, value, loc);
 5666|    226|        }
 5667|       |
 5668|     30|        reader_impl_for_int<CharT> reader{};
 5669|     30|        signed char tmp_value{};
 5670|     30|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     30|        value = static_cast<signed char>(value);
 5672|     30|        return ret;
 5673|    256|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5644|    226|    {
 5645|    226|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    226|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    226|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    226|            return code_unit_reader<char>{}.read(range, value);
 5648|    226|        }
 5649|    226|        else {
 5650|    226|            SCN_UNUSED(range);
 5651|    226|            SCN_EXPECT(false);
 5652|    226|            SCN_UNREACHABLE;
 5653|    226|        }
 5654|    226|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5563|    226|    {
 5564|    226|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    226|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 226]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    226|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    226|        ch = *range.begin();
 5566|    226|        return it;
 5567|    226|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.72k|{
 1846|  1.72k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.72k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.72k|    return ranges::next(range.begin());
 1851|  1.72k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  1.72k|{
  950|  1.72k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.72k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.72k|    return eof_error::good;
  954|  1.72k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  1.72k|{
  944|  1.72k|    return is_range_eof(r.begin(), r.end());
  945|  1.72k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|   114k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   114k|    {
  937|   114k|        return begin == end;
  938|   114k|    }
  939|   114k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   286k|        {
 2770|   286k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 1.19k, False: 284k]
  |  Branch (2770:39): [True: 764, False: 432]
  ------------------
 2771|   286k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 924, False: 284k]
  ------------------
 2772|   286k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|   212k|    {
 2816|   212k|        return sentinel<true>{m_base.get().end()};
 2817|   212k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|   247k|    {
 2717|   247k|        return view;
 2718|   247k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|   212k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.75k|    {
  296|  1.75k|        ++x;
  297|  1.75k|        return x;
  298|  1.75k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  17.3k|    {
 2810|  17.3k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  17.3k|                                      m_count};
 2812|  17.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     30|    {
 3539|     30|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|     30|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     30|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     30|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     30|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     30|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     30|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 30]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     30|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 30]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     30|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     30|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 30, False: 0]
  |  |  ------------------
  ------------------
 3565|     30|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     30|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     30|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     30|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|     30|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    750|{
 3326|    750|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|    750|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    750|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    750|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    750|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 750]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    750|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    750|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    750|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    750|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    750|        parse_integer_base_prefix(
 3331|    750|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    750|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 750]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    750|    else {
 3343|    750|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 750]
  |  Branch (3343:13): [True: 750, False: 0]
  ------------------
 3344|    750|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 750, False: 0]
  ------------------
 3345|    750|            digits_begin_it = base_prefix_begin_it;
 3346|    750|        }
 3347|    750|    }
 3348|       |
 3349|    750|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 750, False: 0]
  ------------------
 3350|    750|        sign = sign_type::plus_sign;
 3351|    750|    }
 3352|    750|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    750|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    750|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|    994|{
 3141|    994|    auto r = read_one_of_code_unit(range, "+-");
 3142|    994|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 994, False: 0]
  ------------------
 3143|    994|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 994, False: 0]
  ------------------
 3144|    994|            return std::pair{range.begin(), sign_type::default_sign};
 3145|    994|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|    994|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|    994|{
 2272|    994|    auto it = read_code_unit(range);
 2273|    994|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    994|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 994]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  1.98k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.98k, False: 994]
  ------------------
 2278|  1.98k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 1.98k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  1.98k|    }
 2282|       |
 2283|    994|    return unexpected(parse_error::error);
 2284|    994|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    750|{
 3293|    750|    switch (base) {
 3294|      8|        case 2:
  ------------------
  |  Branch (3294:9): [True: 8, False: 742]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      8|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      8|                    false};
 3298|       |
 3299|     10|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 10, False: 740]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     10|            bool zero_parsed = false;
 3302|     10|            auto it = apply_opt(
 3303|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     10|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    230|        case 16:
  ------------------
  |  Branch (3307:9): [True: 230, False: 520]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    230|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    230|                    false};
 3311|       |
 3312|     26|        case 0:
  ------------------
  |  Branch (3312:9): [True: 26, False: 724]
  ------------------
 3313|       |            // detect base
 3314|     26|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    476|        default:
  ------------------
  |  Branch (3316:9): [True: 476, False: 274]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    476|            return {range.begin(), base, false};
 3319|    750|    }
 3320|    750|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    248|{
 2291|    248|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 248, False: 0]
  ------------------
 2292|    248|        return range.begin();
 2293|    248|    }
 2294|      0|    return *result;
 2295|    248|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     34|{
 3244|     34|    return read_matching_string_classic_nocase(range, "0b");
 3245|     34|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  1.05k|{
 2231|  1.05k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.05k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.05k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.05k|        if (range.size() < str.size()) {
 2236|  1.05k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.05k|        }
 2238|  1.05k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.05k|            return unexpected(parse_error::error);
 2240|  1.05k|        }
 2241|  1.05k|        return ranges::next(range.begin(), str.size());
 2242|  1.05k|    }
 2243|  1.05k|    else {
 2244|  1.05k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.05k|            if (ch < 'A' || ch > 'Z') {
 2246|  1.05k|                return ch;
 2247|  1.05k|            }
 2248|  1.05k|            return static_cast<char_type>(ch +
 2249|  1.05k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.05k|        };
 2251|       |
 2252|  1.05k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 110, False: 940]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    110|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    110|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    110|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    110|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    110|    }                                                  \
  |  |  |  | 3667|  1.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    940|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    940|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    940|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    940|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    940|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 940, False: 0]
  |  |  ------------------
  ------------------
 2257|    940|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    940|                    return ascii_tolower(a) ==
 2259|    940|                           static_cast<detail::char_t<Range>>(b);
 2260|    940|                }))) {
 2261|    940|            return unexpected(parse_error::error);
 2262|    940|        }
 2263|       |
 2264|      0|        return it;
 2265|    940|    }
 2266|  1.05k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  1.41k|{
 1857|  1.41k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.41k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.41k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.41k|        if (sz < count) {
 1862|  1.41k|            return unexpected(eof_error::eof);
 1863|  1.41k|        }
 1864|       |
 1865|  1.41k|        return ranges::next(range.begin(), count);
 1866|  1.41k|    }
 1867|  1.41k|    else {
 1868|  1.41k|        auto it = range.begin();
 1869|  1.41k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 1.41k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  4.82k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 3.63k, False: 1.19k]
  ------------------
 1874|  3.63k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 218, False: 3.41k]
  ------------------
 1875|    218|                return unexpected(eof_error::eof);
 1876|    218|            }
 1877|  3.63k|        }
 1878|       |
 1879|  1.19k|        return it;
 1880|  1.41k|    }
 1881|  1.41k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  1.41k|{
 1095|  1.41k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.41k|        return r.size();
 1097|  1.41k|    }
 1098|  1.41k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.41k|                           ranges::const_iterator_t<Range>,
 1100|  1.41k|                           typename detail::basic_scan_buffer<
 1101|  1.41k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.41k|        if constexpr (ranges::common_range<Range>) {
 1103|  1.41k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.41k|        }
 1105|  1.41k|        else {
 1106|  1.41k|            if (r.begin().stores_parent()) {
 1107|  1.41k|                return static_cast<size_t>(
 1108|  1.41k|                    r.begin().parent()->chars_available() -
 1109|  1.41k|                    r.begin().position());
 1110|  1.41k|            }
 1111|  1.41k|            return r.begin().contiguous_segment().size();
 1112|  1.41k|        }
 1113|  1.41k|    }
 1114|  1.41k|    else {
 1115|  1.41k|        return 0;
 1116|  1.41k|    }
 1117|  1.41k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|    940|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    940|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 70, False: 870]
  |  Branch (2245:29): [True: 870, False: 0]
  ------------------
 2246|    940|                return ch;
 2247|    940|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    940|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     36|{
 3258|     36|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 36]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     36|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 36]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     36|    return unexpected(parse_error::error);
 3268|     36|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     36|{
 2146|     36|    auto it = read_code_unit(range);
 2147|     36|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     36|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 2152|     36|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     36|        return unexpected(parse_error::error);
 2154|     36|    }
 2155|       |
 2156|      0|    return *it;
 2157|     36|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     36|{
 1846|     36|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     36|    return ranges::next(range.begin());
 1851|     36|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.73k|{
  950|  1.73k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 1.65k]
  |  |  ------------------
  ------------------
  951|     84|        return eof_error::eof;
  952|     84|    }
  953|  1.65k|    return eof_error::good;
  954|  1.73k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|   112k|{
  944|   112k|    return is_range_eof(r.begin(), r.end());
  945|   112k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    256|{
 3251|    256|    return read_matching_string_classic_nocase(range, "0x");
 3252|    256|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     26|{
 3274|     26|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 26]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     26|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 26]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     26|    {
 3281|     26|        bool zero_parsed{false};
 3282|     26|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 26]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     26|    }
 3286|     26|    return {range.begin(), 10, false};
 3287|     26|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    734|{
 3360|    734|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    734|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    734|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    734|            return unexpected_scan_error(
 3365|    734|                scan_error::invalid_scanned_value,
 3366|    734|                "Failed to parse integer: No digits found");
 3367|    734|        }
 3368|    734|        return range.end();
 3369|    734|    }
 3370|    734|    else {
 3371|    734|        return read_while1_code_unit(range,
 3372|    734|                                     [&](char_type ch) noexcept {
 3373|    734|                                         return char_to_int(ch) < base;
 3374|    734|                                     })
 3375|    734|            .transform_error(map_parse_error_to_scan_error(
 3376|    734|                scan_error::invalid_scanned_value,
 3377|    734|                "Failed to parse integer: No digits found"));
 3378|    734|    }
 3379|    734|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|    978|{
 1996|    978|    auto it = read_while_code_unit(range, pred);
 1997|    978|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 978, False: 0]
  ------------------
 1998|    978|        return unexpected(parse_error::error);
 1999|    978|    }
 2000|      0|    return it;
 2001|    978|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|    978|{
 1976|    978|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    978|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|    978|{
 1957|    978|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    978|        return std::find_if(range.begin(), range.end(), pred);
 1959|    978|    }
 1960|    978|    else {
 1961|    978|        auto first = range.begin();
 1962|    978|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 978, False: 0]
  ------------------
 1963|    978|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 978, False: 0]
  ------------------
 1964|    978|                return first;
 1965|    978|            }
 1966|    978|        }
 1967|      0|        return first;
 1968|    978|    }
 1969|    978|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|   164k|        {
 2781|   164k|            return !(y == x);
 2782|   164k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_:
  753|    734|    {
  754|    734|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|    734|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    734|              cvref<T> obj = *get<T>(fn);
  745|    734|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    734|                  obj(static_cast<decltype(args)>(args)...);
  747|    734|              }
  748|    734|              else {
  749|    734|                  return obj(static_cast<decltype(args)>(args)...);
  750|    734|              }
  751|    734|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    734|    {
  684|    734|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    734|            return static_cast<T*>(s.m_cp);
  686|    734|        }
  687|    734|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    734|            return static_cast<T*>(s.m_p);
  689|    734|        }
  690|    734|        else {
  691|    734|            return reinterpret_cast<T*>(s.m_fp);
  692|    734|        }
  693|    734|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3372|    734|                                     [&](char_type ch) noexcept {
 3373|    734|                                         return char_to_int(ch) < base;
 3374|    734|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_LPv0EEEPSP_:
  661|    734|        {
  662|    734|        }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  1.57k|{
 1683|  1.57k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.57k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.57k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.57k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  1.57k|    }
 1688|  1.57k|    else {
 1689|  1.57k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  1.57k|    }
 1691|  1.57k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EELPv0EEEOT_:
 1536|  1.57k|    {
 1537|  1.57k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  1.57k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  1.57k|    {
 1621|  1.57k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.57k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.57k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.57k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.57k|            m_storage.reset();
 1627|  1.57k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.57k|        }
 1629|  1.57k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.57k|                                          std::basic_string<CharT>>) {
 1631|  1.57k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.57k|            m_view = string_view_type{*m_storage};
 1633|  1.57k|        }
 1634|  1.57k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.57k|                                          typename detail::basic_scan_buffer<
 1636|  1.57k|                                              value_t>::forward_iterator> &&
 1637|  1.57k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.57k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.57k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.57k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.57k|                             detail::to_address(end_seg.end()))) {
 1642|  1.57k|                auto& str = m_storage.emplace();
 1643|  1.57k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.57k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.57k|                m_view = string_view_type{str};
 1646|  1.57k|                return;
 1647|  1.57k|            }
 1648|       |
 1649|  1.57k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.57k|                                                            end_seg.data());
 1651|  1.57k|            m_storage.reset();
 1652|  1.57k|        }
 1653|  1.57k|        else {
 1654|  1.57k|            auto& str = m_storage.emplace();
 1655|  1.57k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|  1.57k|                str.reserve(range.size());
 1657|  1.57k|            }
 1658|  1.57k|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|  1.57k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.57k|                          std::back_inserter(str));
 1661|  1.57k|            }
 1662|  1.57k|            else {
 1663|  1.57k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.57k|                     ++it) {
 1665|  1.57k|                    str.push_back(*it);
 1666|  1.57k|                }
 1667|  1.57k|            }
 1668|  1.57k|            m_view = string_view_type{str};
 1669|  1.57k|        }
 1670|  1.57k|    }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     16|{
 3390|     16|    std::basic_string<CharT> output;
 3391|     16|    std::string thsep_indices;
 3392|     16|    auto it = range.begin();
 3393|     16|    bool digit_matched = false;
 3394|     16|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 16, False: 0]
  ------------------
 3395|     16|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 16]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     16|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 16, False: 0]
  ------------------
 3400|     16|            break;
 3401|     16|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     16|    }
 3407|     16|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3408|     16|        return unexpected_scan_error(
 3409|     16|            scan_error::invalid_scanned_value,
 3410|     16|            "Failed to parse integer: No digits found");
 3411|     16|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     16|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   290k|    {
 2413|   290k|        return m_current;
 2414|   290k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   290k|    {
 2417|   290k|        return m_count;
 2418|   290k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5662|    220|    {
 5663|    220|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 202, False: 18]
  ------------------
 5664|    220|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 18]
  ------------------
 5665|    202|            return read_default(range, value, loc);
 5666|    202|        }
 5667|       |
 5668|     18|        reader_impl_for_int<CharT> reader{};
 5669|     18|        signed char tmp_value{};
 5670|     18|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     18|        value = static_cast<signed char>(value);
 5672|     18|        return ret;
 5673|    220|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5644|    854|    {
 5645|    854|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    854|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    854|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    854|            return code_unit_reader<char>{}.read(range, value);
 5648|    854|        }
 5649|    854|        else {
 5650|    854|            SCN_UNUSED(range);
 5651|    854|            SCN_EXPECT(false);
 5652|    854|            SCN_UNREACHABLE;
 5653|    854|        }
 5654|    854|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5563|    854|    {
 5564|    854|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    854|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    854|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    854|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    854|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 854]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    854|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    854|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    854|        ch = *range.begin();
 5566|    854|        return it;
 5567|    854|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.22k|{
 1846|  6.22k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.22k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.22k|    return ranges::next(range.begin());
 1851|  6.22k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  21.5k|{
  950|  21.5k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  21.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.5k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  21.5k|    return eof_error::good;
  954|  21.5k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   572k|{
  944|   572k|    return is_range_eof(r.begin(), r.end());
  945|   572k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   682k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   682k|    {
  937|   682k|        return begin == end;
  938|   682k|    }
  939|   682k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  52.4k|    {
  296|  52.4k|        ++x;
  297|  52.4k|        return x;
  298|  52.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|     18|    {
 3539|     18|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     18|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     18|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 18]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     18|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 18]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     18|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     18|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 3565|     18|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|     18|                    parse_integer_digits_without_thsep(
 3567|     18|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|     18|                        prefix_result.parsed_base));
 3569|       |
 3570|     18|            auto buf = make_contiguous_buffer(
 3571|     18|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|     18|            SCN_TRY(result_it,
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|     18|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.65k|{
 3326|  2.65k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|  2.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.65k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.65k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.65k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.65k|        parse_integer_base_prefix(
 3331|  2.65k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.65k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.65k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.65k|    else {
 3343|  2.65k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.65k]
  ------------------
 3344|  2.65k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.65k, False: 0]
  ------------------
 3345|  2.65k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.65k|        }
 3347|  2.65k|    }
 3348|       |
 3349|  2.65k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.65k, False: 0]
  ------------------
 3350|  2.65k|        sign = sign_type::plus_sign;
 3351|  2.65k|    }
 3352|  2.65k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.65k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.65k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.55k|{
 3141|  3.55k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.55k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.55k, False: 0]
  ------------------
 3143|  3.55k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.55k, False: 0]
  ------------------
 3144|  3.55k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.55k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.55k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.55k|{
 2272|  3.55k|    auto it = read_code_unit(range);
 2273|  3.55k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.55k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.11k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.11k, False: 3.55k]
  ------------------
 2278|  7.11k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.11k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.11k|    }
 2282|       |
 2283|  3.55k|    return unexpected(parse_error::error);
 2284|  3.55k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.65k|{
 3293|  2.65k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 2.64k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     22|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 22, False: 2.63k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     22|            bool zero_parsed = false;
 3302|     22|            auto it = apply_opt(
 3303|     22|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     22|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    868|        case 16:
  ------------------
  |  Branch (3307:9): [True: 868, False: 1.78k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    868|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    868|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 2.64k]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.74k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.74k, False: 908]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.74k|            return {range.begin(), base, false};
 3319|  2.65k|    }
 3320|  2.65k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    896|{
 2291|    896|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 896, False: 0]
  ------------------
 2292|    896|        return range.begin();
 2293|    896|    }
 2294|      0|    return *result;
 2295|    896|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.62k|{
 2231|  3.62k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.62k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.62k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.62k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 3.61k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  3.61k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 3.61k, False: 0]
  ------------------
 2239|  3.61k|            return unexpected(parse_error::error);
 2240|  3.61k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  3.61k|    }
 2243|  3.62k|    else {
 2244|  3.62k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.62k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.62k|                return ch;
 2247|  3.62k|            }
 2248|  3.62k|            return static_cast<char_type>(ch +
 2249|  3.62k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.62k|        };
 2251|       |
 2252|  3.62k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  3.62k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.62k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.62k|        if (SCN_UNLIKELY(!std::equal(
 2257|  3.62k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.62k|                    return ascii_tolower(a) ==
 2259|  3.62k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.62k|                }))) {
 2261|  3.62k|            return unexpected(parse_error::error);
 2262|  3.62k|        }
 2263|       |
 2264|  3.62k|        return it;
 2265|  3.62k|    }
 2266|  3.62k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.81k|{
 2146|  1.81k|    auto it = read_code_unit(range);
 2147|  1.81k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.81k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.81k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.81k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.81k|        return unexpected(parse_error::error);
 2154|  1.81k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.81k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    880|{
 3251|    880|    return read_matching_string_classic_nocase(range, "0x");
 3252|    880|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.62k|{
 3360|  2.62k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.62k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.62k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.62k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.62k|        return range.end();
 3369|  2.62k|    }
 3370|  2.62k|    else {
 3371|  2.62k|        return read_while1_code_unit(range,
 3372|  2.62k|                                     [&](char_type ch) noexcept {
 3373|  2.62k|                                         return char_to_int(ch) < base;
 3374|  2.62k|                                     })
 3375|  2.62k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.62k|                scan_error::invalid_scanned_value,
 3377|  2.62k|                "Failed to parse integer: No digits found"));
 3378|  2.62k|    }
 3379|  2.62k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     32|{
 3390|     32|    std::basic_string<CharT> output;
 3391|     32|    std::string thsep_indices;
 3392|     32|    auto it = range.begin();
 3393|     32|    bool digit_matched = false;
 3394|     32|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 32, False: 0]
  ------------------
 3395|     32|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 32]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     32|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 32, False: 0]
  ------------------
 3400|     32|            break;
 3401|     32|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     32|    }
 3407|     32|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3408|     32|        return unexpected_scan_error(
 3409|     32|            scan_error::invalid_scanned_value,
 3410|     32|            "Failed to parse integer: No digits found");
 3411|     32|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     32|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  13.4k|{
 1683|  13.4k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  13.4k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  13.4k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  13.4k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  13.4k|    }
 1688|  13.4k|    else {
 1689|  13.4k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  13.4k|    }
 1691|  13.4k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  13.4k|    {
 1490|  13.4k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|   154k|    {
 1503|   154k|        return sv;
 1504|   154k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|  3.05k|{
 5951|  3.05k|    using char_type = detail::char_t<Range>;
 5952|  3.05k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  3.05k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 2.58k, False: 474]
  ------------------
 5955|  2.58k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  2.58k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  2.58k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 1.75k, False: 828]
  ------------------
 5959|  1.75k|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|  1.75k|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 162, False: 1.59k]
  ------------------
 5962|    162|                auto prefix_width =
 5963|    162|                    static_cast<std::ptrdiff_t>(
 5964|    162|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    162|                    ranges::distance(range.begin(), it);
 5966|    162|                return result_type{it, prefix_width};
 5967|    162|            }
 5968|  1.59k|            return result_type{it, 0};
 5969|  1.75k|        }
 5970|       |
 5971|    828|        auto max_width_view = take_width(range, max_width);
 5972|    828|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    828|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 828, False: 0]
  ------------------
 5975|    828|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    828|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    828|    }
 5979|       |
 5980|    474|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    474|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 144, False: 330]
  ------------------
 5982|    144|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|    144|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 64, False: 80]
  ------------------
 5985|     64|            auto prefix_width =
 5986|     64|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|     64|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|     64|            return result_type{it, prefix_width};
 5989|     64|        }
 5990|     80|        return result_type{it, 0};
 5991|    144|    }
 5992|       |
 5993|    330|    auto max_width_view = take_width(range, max_width);
 5994|    330|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    330|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 330, False: 0]
  ------------------
 5997|    330|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    330|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    330|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.97k|{
 1976|  1.97k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.97k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  2.22k|{
 1957|  2.22k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.22k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.22k|    }
 1960|  2.22k|    else {
 1961|  2.22k|        auto first = range.begin();
 1962|  2.22k|        for (; first != range.end(); ++first) {
 1963|  2.22k|            if (pred(*first)) {
 1964|  2.22k|                return first;
 1965|  2.22k|            }
 1966|  2.22k|        }
 1967|  2.22k|        return first;
 1968|  2.22k|    }
 1969|  2.22k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  2.58k|    {
  754|  2.58k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  3.01k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.01k|              cvref<T> obj = *get<T>(fn);
  745|  3.01k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.01k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.01k|              }
  748|  3.01k|              else {
  749|  3.01k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.01k|              }
  751|  3.01k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  3.01k|    {
  684|  3.01k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.01k|            return static_cast<T*>(s.m_cp);
  686|  3.01k|        }
  687|  3.01k|        else if constexpr (std::is_object_v<T>) {
  688|  3.01k|            return static_cast<T*>(s.m_p);
  689|  3.01k|        }
  690|  3.01k|        else {
  691|  3.01k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.01k|        }
  693|  3.01k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  3.01k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  2.58k|        {
  667|  2.58k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    888|{
 1976|    888|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    888|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|  1.18k|{
 1957|  1.18k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.18k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.18k|    }
 1960|  1.18k|    else {
 1961|  1.18k|        auto first = range.begin();
 1962|  15.4k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 15.1k, False: 280]
  ------------------
 1963|  15.1k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 902, False: 14.2k]
  ------------------
 1964|    902|                return first;
 1965|    902|            }
 1966|  15.1k|        }
 1967|    280|        return first;
 1968|  1.18k|    }
 1969|  1.18k|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    144|{
 2037|    144|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    144|    auto it = range.begin();
 2040|    186|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 186, False: 0]
  ------------------
 2041|    186|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    186|                                           needle.size());
 2043|    186|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 6, False: 180]
  ------------------
 2044|      6|            return it;
 2045|      6|        }
 2046|    180|        static_assert(
 2047|    180|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    180|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 138, False: 42]
  ------------------
 2049|    138|            return it;
 2050|    138|        }
 2051|     42|        it = *r;
 2052|     42|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    330|{
 2037|    330|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    330|    auto it = range.begin();
 2040|    384|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 360, False: 24]
  ------------------
 2041|    360|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    360|                                           needle.size());
 2043|    360|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 108, False: 252]
  ------------------
 2044|    108|            return it;
 2045|    108|        }
 2046|    252|        static_assert(
 2047|    252|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    252|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 198, False: 54]
  ------------------
 2049|    198|            return it;
 2050|    198|        }
 2051|     54|        it = *r;
 2052|     54|    }
 2053|     24|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     24|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|     24|    return it;
 2055|     24|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|  2.00k|{
 2951|  2.00k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.70k, False: 306]
  ------------------
 2952|  1.70k|        auto it = read_while_classic_space(range);
 2953|  1.70k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.70k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 1.61k]
  |  |  ------------------
  ------------------
 2955|     84|            return unexpected(e);
 2956|     84|        }
 2957|       |
 2958|  1.61k|        return it;
 2959|  1.70k|    }
 2960|       |
 2961|    306|    return read_while_classic_space(range);
 2962|  2.00k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|  2.00k|{
 2117|  2.00k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.00k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.00k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.00k|        auto buf = make_contiguous_buffer(range);
 2121|  2.00k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.00k|        return ranges::next(range.begin(),
 2123|  2.00k|                            ranges::distance(buf.view().begin(), it));
 2124|  2.00k|    }
 2125|  2.00k|    else {
 2126|  2.00k|        auto it = range.begin();
 2127|       |
 2128|  2.00k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.00k|            auto seg = get_contiguous_beginning(range);
 2130|  2.00k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.00k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 2.00k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  2.00k|            ranges::advance(it, seg.size());
 2135|  2.00k|        }
 2136|       |
 2137|  2.00k|        return read_while_code_point(
 2138|  2.00k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.00k|    }
 2140|  2.00k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  2.68k|{
 1039|  2.68k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.68k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.68k|        return r;
 1042|  2.68k|    }
 1043|  2.68k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.68k|                           ranges::const_iterator_t<Range>,
 1045|  2.68k|                           typename detail::basic_scan_buffer<
 1046|  2.68k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.68k|        if constexpr (ranges::common_range<Range>) {
 1048|  2.68k|            auto seg = r.begin().contiguous_segment();
 1049|  2.68k|            auto dist =
 1050|  2.68k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.68k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.68k|        }
 1053|  2.68k|        else {
 1054|  2.68k|            return r.begin().contiguous_segment();
 1055|  2.68k|        }
 1056|  2.68k|    }
 1057|  2.68k|    else {
 1058|  2.68k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.68k|    }
 1060|  2.68k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|  2.36k|{
 2082|  2.36k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.36k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|  2.46k|{
 2061|  2.46k|    auto it = range.begin();
 2062|  93.5k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 93.3k, False: 256]
  ------------------
 2063|  93.3k|        const auto val =
 2064|  93.3k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  93.3k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  93.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 91.9k, False: 1.41k]
  |  |  ------------------
  ------------------
 2066|  91.9k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  91.9k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  91.9k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.20k, False: 89.7k]
  ------------------
 2069|  2.20k|                return it;
 2070|  2.20k|            }
 2071|  91.9k|        }
 2072|  91.1k|        it = val.iterator;
 2073|  91.1k|    }
 2074|       |
 2075|    256|    return it;
 2076|  2.46k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|   110k|{
 1899|   110k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   110k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   110k|    auto it = range.begin();
 1903|   110k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   110k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.36k, False: 107k]
  |  |  ------------------
  ------------------
 1906|  3.36k|        ++it;
 1907|  3.36k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  3.36k|        return {it, {}};
 1909|  3.36k|    }
 1910|       |
 1911|   107k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 97.7k, False: 9.66k]
  ------------------
 1912|  97.7k|        ++it;
 1913|  97.7k|        return {it, string_type(1, *range.begin())};
 1914|  97.7k|    }
 1915|       |
 1916|  9.66k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  9.66k|    return {it, string_type{range.begin(), it}};
 1918|   107k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  3.36k|{
 1155|  3.36k|    auto it = input.begin();
 1156|  11.8k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 11.7k, False: 102]
  ------------------
 1157|  11.7k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 3.26k, False: 8.43k]
  ------------------
 1158|  3.26k|            break;
 1159|  3.26k|        }
 1160|  11.7k|    }
 1161|  3.36k|    return it;
 1162|  3.36k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  9.66k|    {
  283|  9.66k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  9.66k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  9.66k|    {
  227|  9.66k|        constexpr iter_difference_t<I> zero{0};
  228|  9.66k|        iter_difference_t<I> counter{0};
  229|       |
  230|  9.66k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 9.66k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  9.66k|        else {
  237|  30.1k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 20.4k, False: 9.63k]
  |  Branch (237:34): [True: 20.4k, False: 36]
  ------------------
  238|  20.4k|                ++i;
  239|  20.4k|                ++counter;
  240|  20.4k|            }
  241|  9.66k|        }
  242|       |
  243|  9.66k|        return counter;
  244|  9.66k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  2.00k|    {
  754|  2.00k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  6.70k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.70k|              cvref<T> obj = *get<T>(fn);
  745|  6.70k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.70k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.70k|              }
  748|  6.70k|              else {
  749|  6.70k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.70k|              }
  751|  6.70k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  6.70k|    {
  684|  6.70k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.70k|            return static_cast<T*>(s.m_cp);
  686|  6.70k|        }
  687|  6.70k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.70k|            return static_cast<T*>(s.m_p);
  689|  6.70k|        }
  690|  6.70k|        else {
  691|  6.70k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.70k|        }
  693|  6.70k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  6.70k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  2.00k|        {
  662|  2.00k|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  6.97k|{
 2951|  6.97k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 6.79k, False: 174]
  ------------------
 2952|  6.79k|        auto it = read_while_classic_space(range);
 2953|  6.79k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  6.79k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.79k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  6.79k|        return it;
 2959|  6.79k|    }
 2960|       |
 2961|    174|    return read_while_classic_space(range);
 2962|  6.97k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  66.0k|{
 2117|  66.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  66.0k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  66.0k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  66.0k|        auto buf = make_contiguous_buffer(range);
 2121|  66.0k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  66.0k|        return ranges::next(range.begin(),
 2123|  66.0k|                            ranges::distance(buf.view().begin(), it));
 2124|  66.0k|    }
 2125|  66.0k|    else {
 2126|  66.0k|        auto it = range.begin();
 2127|       |
 2128|  66.0k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  66.0k|            auto seg = get_contiguous_beginning(range);
 2130|  66.0k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  66.0k|                seg_it != seg.end()) {
 2132|  66.0k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  66.0k|            }
 2134|  66.0k|            ranges::advance(it, seg.size());
 2135|  66.0k|        }
 2136|       |
 2137|  66.0k|        return read_while_code_point(
 2138|  66.0k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  66.0k|    }
 2140|  66.0k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  68.8k|{
 1683|  68.8k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  68.8k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  68.8k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  68.8k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  68.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  68.8k|    }
 1688|  68.8k|    else {
 1689|  68.8k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  68.8k|    }
 1691|  68.8k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  68.8k|    {
 1490|  68.8k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  10.6k|    {
 3040|  10.6k|        reader_error_handler eh{};
 3041|  10.6k|        get_derived().check_specs_impl(specs, eh);
 3042|  10.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.66k, False: 1.00k]
  |  |  ------------------
  ------------------
 3043|  9.66k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.66k|        }
 3045|  1.00k|        return {};
 3046|  10.6k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  10.6k|    {
 3051|  10.6k|        return static_cast<Derived&>(*this);
 3052|  10.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  10.6k|    {
 3485|  10.6k|        detail::check_int_type_specs(specs, eh);
 3486|  10.6k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  2.30k|    {
 3035|  2.30k|        return true;
 3036|  2.30k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    248|    {
 3539|    248|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 248]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    248|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    248|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 248]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    248|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 248]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    248|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    248|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 240, False: 8]
  |  |  ------------------
  ------------------
 3565|    240|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 240, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    240|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    240|    }                                                  \
  |  |  |  | 3667|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    236|    {
 3539|    236|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    236|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    236|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    236|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    236|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    236|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    236|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 236]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    236|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 236]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    236|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    236|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 220, False: 16]
  |  |  ------------------
  ------------------
 3565|    220|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    220|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 220]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    220|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    220|                    parse_integer_digits_without_thsep(
 3567|    220|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    220|                        prefix_result.parsed_base));
 3569|       |
 3570|    220|            auto buf = make_contiguous_buffer(
 3571|    220|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    220|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    220|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 220, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    220|    }                                                  \
  |  |  |  | 3667|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    220|        }
 3580|       |
 3581|     16|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     16|            localized_number_formatting_options<CharT>{loc};
 3586|     16|#endif
 3587|       |
 3588|     16|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    248|    {
 3539|    248|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 248]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    248|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    248|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 248]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    248|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 248]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    248|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    248|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 240, False: 8]
  |  |  ------------------
  ------------------
 3565|    240|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 240, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    240|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    240|    }                                                  \
  |  |  |  | 3667|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    236|    {
 3539|    236|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    236|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    236|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    236|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    236|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    236|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    236|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 236]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    236|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 236]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    236|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    236|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 220, False: 16]
  |  |  ------------------
  ------------------
 3565|    220|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    220|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 220]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    220|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    220|                    parse_integer_digits_without_thsep(
 3567|    220|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    220|                        prefix_result.parsed_base));
 3569|       |
 3570|    220|            auto buf = make_contiguous_buffer(
 3571|    220|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    220|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    220|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 220, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    220|    }                                                  \
  |  |  |  | 3667|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    220|        }
 3580|       |
 3581|     16|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     16|            localized_number_formatting_options<CharT>{loc};
 3586|     16|#endif
 3587|       |
 3588|     16|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    224|    {
 3539|    224|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    224|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    224|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    224|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 224]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    224|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    224|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    224|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    224|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 224]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    224|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 224]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    224|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    224|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 224, False: 0]
  |  |  ------------------
  ------------------
 3565|    224|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    224|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    224|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    224|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 224, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    224|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    224|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    224|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    224|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    224|    }                                                  \
  |  |  |  | 3667|    224|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    858|    {
 3539|    858|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    858|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    858|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    858|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    858|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 858]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    858|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    858|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    858|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    858|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 858]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    858|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 858]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    858|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    858|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 858, False: 0]
  |  |  ------------------
  ------------------
 3565|    858|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    858|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    858|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    858|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    858|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 858]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    858|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    858|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    858|                    parse_integer_digits_without_thsep(
 3567|    858|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    858|                        prefix_result.parsed_base));
 3569|       |
 3570|    858|            auto buf = make_contiguous_buffer(
 3571|    858|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    858|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    858|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    858|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    858|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    858|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 858, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    858|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    858|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    858|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    858|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    858|    }                                                  \
  |  |  |  | 3667|    858|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    858|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.33k|    {
 3040|  5.33k|        reader_error_handler eh{};
 3041|  5.33k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.33k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.82k, False: 510]
  |  |  ------------------
  ------------------
 3043|  4.82k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.82k|        }
 3045|    510|        return {};
 3046|  5.33k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  5.33k|    {
 3051|  5.33k|        return static_cast<Derived&>(*this);
 3052|  5.33k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  5.33k|    {
 4145|  5.33k|        detail::check_float_type_specs(specs, eh);
 4146|  5.33k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.16k|    {
 3035|  1.16k|        return true;
 3036|  1.16k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|    498|    {
 4217|    498|        unsigned options{};
 4218|    498|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 24, False: 474]
  ------------------
 4219|     24|            options |= float_reader_base::allow_thsep;
 4220|     24|        }
 4221|       |
 4222|    498|        SCN_GCC_COMPAT_PUSH
 4223|    498|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    498|        switch (specs.type) {
 4226|     28|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 28, False: 470]
  ------------------
 4227|     28|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      6|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 6, False: 492]
  ------------------
 4230|      6|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     18|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 18, False: 480]
  ------------------
 4233|     18|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      4|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 4, False: 494]
  ------------------
 4236|      4|                return options | float_reader_base::allow_scientific |
 4237|      4|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    442|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 442, False: 56]
  ------------------
 4240|    442|                return options | float_reader_base::allow_scientific |
 4241|    442|                       float_reader_base::allow_fixed |
 4242|    442|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 498]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    498|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    498|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    498|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|    498|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.15k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  2.30k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|    876|    {
 4057|    876|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 876, False: 0]
  ------------------
 4058|    876|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 876, False: 0]
  ------------------
 4059|    876|            return;
 4060|    876|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|    608|    {
 1587|    608|        return m_storage.has_value();
 1588|    608|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    304|    {
 1592|    304|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    304|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    304|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    304|        return *m_storage;
 1594|    304|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    244|    {
  763|    244|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    244|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    244|    {
 3705|    244|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 244]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    244|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    244|        auto it = sign_result.first;
 3708|    244|        m_sign = sign_result.second;
 3709|       |
 3710|    244|        auto digits_begin = it;
 3711|    244|        auto r = ranges::subrange{it, range.end()};
 3712|    244|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    244|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    244|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    244|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    244|                SCN_TRY_ASSIGN(
 3717|    244|                    it,
 3718|    244|                    do_read_source_impl(
 3719|    244|                        r,
 3720|    244|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    244|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    244|            }
 3723|    244|            else {
 3724|    244|                auto cb = [&](const auto& rr)
 3725|    244|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    244|                    auto res = read_all(rr);
 3727|    244|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    244|                        return unexpected_scan_error(
 3729|    244|                            scan_error::invalid_scanned_value,
 3730|    244|                            "Invalid float value");
 3731|    244|                    }
 3732|    244|                    return res;
 3733|    244|                };
 3734|    244|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    244|            }
 3736|    244|        }
 3737|    244|        else {
 3738|    244|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 244, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    244|    }                                                  \
  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    244|    {
 4000|    244|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    244|        const bool allowed_nonhex =
 4002|    244|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    244|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    244|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 244, False: 0]
  |  Branch (4005:45): [True: 0, False: 244]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    244|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 244]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    244|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 244, False: 0]
  |  Branch (4014:45): [True: 0, False: 244]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    244|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 244]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    244|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 236, False: 8]
  |  Branch (4021:28): [True: 6, False: 230]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      6|            auto it = range.begin();
 4025|       |
 4026|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 6]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      6|            else {
 4031|      6|                m_kind = float_kind::hex_without_prefix;
 4032|      6|            }
 4033|       |
 4034|      6|            return read_hex(ranges::subrange{it, range.end()});
 4035|      6|        }
 4036|    238|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 8, False: 230]
  |  Branch (4036:29): [True: 8, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      8|            m_kind = float_kind::generic;
 4040|      8|            return read_regular_float(range);
 4041|      8|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    230|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 230]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    230|        m_kind = float_kind::generic;
 4052|    230|        return read_regular(range);
 4053|    230|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    244|    {
 3811|    244|        auto it = range.begin();
 3812|    244|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 244, False: 0]
  ------------------
 3813|    244|            return unexpected(r.error());
 3814|    244|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    244|    {
 3834|    244|        auto it = range.begin();
 3835|    244|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 244, False: 0]
  ------------------
 3836|    244|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    244|                scan_error::invalid_scanned_value,
 3838|    244|                "Invalid floating-point NaN value"));
 3839|    244|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    236|    {
 3804|    236|        return read_matching_string_classic_nocase(range, "0x");
 3805|    236|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      6|    {
 3904|      6|        auto it = range.begin();
 3905|       |
 3906|      6|        std::ptrdiff_t digits_count = 0;
 3907|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3909|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      6|                scan_error::invalid_scanned_value,
 3911|      6|                "Invalid hexadecimal floating-point value"));
 3912|      6|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      6|    {
 3789|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      6|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      6|        return read_while1_code_unit(
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      6|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    238|    {
 3944|    238|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    238|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 232, False: 6]
  |  Branch (3945:50): [True: 0, False: 232]
  ------------------
 3946|       |
 3947|    238|        auto it = ranges::begin(range);
 3948|    238|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    238|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    238|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 238, False: 0]
  |  |  ------------------
  ------------------
 3952|    238|            return r.transform_error(
 3953|    238|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    238|                                              "Invalid floating-point value"));
 3955|    238|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    238|    {
 3774|    238|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 238]
  |  |  |  Branch (859:45): [True: 0, False: 238]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    238|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    238|        return read_while1_code_unit(
 3783|    238|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    238|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|    238|    {
  754|    238|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|    238|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    238|              cvref<T> obj = *get<T>(fn);
  745|    238|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    238|                  obj(static_cast<decltype(args)>(args)...);
  747|    238|              }
  748|    238|              else {
  749|    238|                  return obj(static_cast<decltype(args)>(args)...);
  750|    238|              }
  751|    238|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    238|    {
  684|    238|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    238|            return static_cast<T*>(s.m_cp);
  686|    238|        }
  687|    238|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    238|            return static_cast<T*>(s.m_p);
  689|    238|        }
  690|    238|        else {
  691|    238|            return reinterpret_cast<T*>(s.m_fp);
  692|    238|        }
  693|    238|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3783|    238|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|    238|        {
  662|    238|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    236|    {
 3665|    236|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 236]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    236|        return read_source_impl(range);
 3671|    236|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    906|    {
  763|    906|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    906|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     16|    {
 3679|     16|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     16|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     16|        return read_source_impl(range);
 3685|     16|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    906|    {
 3705|    906|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    906|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    906|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    906|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 906]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    906|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    906|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    906|        auto it = sign_result.first;
 3708|    906|        m_sign = sign_result.second;
 3709|       |
 3710|    906|        auto digits_begin = it;
 3711|    906|        auto r = ranges::subrange{it, range.end()};
 3712|    906|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    906|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    906|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 906]
  |  |  |  Branch (859:45): [True: 0, False: 906]
  |  |  |  Branch (859:45): [True: 0, False: 906]
  |  |  ------------------
  ------------------
 3715|    906|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    906|            else {
 3724|    906|                auto cb = [&](const auto& rr)
 3725|    906|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    906|                    auto res = read_all(rr);
 3727|    906|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    906|                        return unexpected_scan_error(
 3729|    906|                            scan_error::invalid_scanned_value,
 3730|    906|                            "Invalid float value");
 3731|    906|                    }
 3732|    906|                    return res;
 3733|    906|                };
 3734|    906|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|    906|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    906|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 30, False: 876]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     30|    }                                                  \
  |  | 3667|    906|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    876|            }
 3736|    906|        }
 3737|    876|        else {
 3738|    876|            SCN_TRY_ASSIGN(
 3739|    876|                it,
 3740|    876|                do_read_source_impl(
 3741|    876|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    876|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    876|        }
 3744|       |
 3745|    876|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    876|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    876|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    876|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 876, False: 0]
  |  Branch (3747:48): [True: 876, False: 0]
  ------------------
 3748|    876|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 876, False: 0]
  ------------------
 3749|    876|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 876, False: 0]
  ------------------
 3750|    876|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    876|        }
 3752|       |
 3753|    876|        handle_separators();
 3754|       |
 3755|    876|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 876]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    876|        return it;
 3768|    876|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    906|    {
 3811|    906|        auto it = range.begin();
 3812|    906|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 906, False: 0]
  ------------------
 3813|    906|            return unexpected(r.error());
 3814|    906|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    906|    {
 3834|    906|        auto it = range.begin();
 3835|    906|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 906, False: 0]
  ------------------
 3836|    906|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    906|                scan_error::invalid_scanned_value,
 3838|    906|                "Invalid floating-point NaN value"));
 3839|    906|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    876|    {
 3804|    876|        return read_matching_string_classic_nocase(range, "0x");
 3805|    876|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     30|{
 1996|     30|    auto it = read_while_code_unit(range, pred);
 1997|     30|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 30, False: 0]
  ------------------
 1998|     30|        return unexpected(parse_error::error);
 1999|     30|    }
 2000|      0|    return it;
 2001|     30|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     30|    {
 3944|     30|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     30|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 8, False: 22]
  |  Branch (3945:50): [True: 6, False: 2]
  ------------------
 3946|       |
 3947|     30|        auto it = ranges::begin(range);
 3948|     30|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     30|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     30|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30, False: 0]
  |  |  ------------------
  ------------------
 3952|     30|            return r.transform_error(
 3953|     30|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     30|                                              "Invalid floating-point value"));
 3955|     30|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     30|    {
 3774|     30|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 30]
  |  |  |  Branch (859:45): [True: 0, False: 30]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     30|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     30|        return read_while1_code_unit(
 3783|     30|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     30|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     30|    {
  684|     30|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     30|            return static_cast<T*>(s.m_cp);
  686|     30|        }
  687|     30|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     30|            return static_cast<T*>(s.m_p);
  689|     30|        }
  690|     30|        else {
  691|     30|            return reinterpret_cast<T*>(s.m_fp);
  692|     30|        }
  693|     30|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|     30|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    906|    {
 4000|    906|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    906|        const bool allowed_nonhex =
 4002|    906|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    906|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    906|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 906, False: 0]
  |  Branch (4005:45): [True: 0, False: 906]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    906|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 906]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    906|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 906, False: 0]
  |  Branch (4014:45): [True: 0, False: 906]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    906|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 906]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    906|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 876, False: 30]
  |  Branch (4021:28): [True: 12, False: 864]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     12|            auto it = range.begin();
 4025|       |
 4026|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 12]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     12|            else {
 4031|     12|                m_kind = float_kind::hex_without_prefix;
 4032|     12|            }
 4033|       |
 4034|     12|            return read_hex(ranges::subrange{it, range.end()});
 4035|     12|        }
 4036|    894|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 30, False: 864]
  |  Branch (4036:29): [True: 30, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     30|            m_kind = float_kind::generic;
 4040|     30|            return read_regular_float(range);
 4041|     30|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    864|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    864|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 864]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    864|        m_kind = float_kind::generic;
 4052|    864|        return read_regular(range);
 4053|    864|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    876|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    876|                    auto res = read_all(rr);
 3727|    876|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 876]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    876|                    return res;
 3733|    876|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    876|{
 1839|    876|    return ranges::next(range.begin(), range.end());
 1840|    876|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    876|    {
  313|    876|        ranges::advance(x, bound);
  314|    876|        return x;
  315|    876|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    876|    {
  275|    876|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    876|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    924|    {
  190|    924|        i = std::move(bound);
  191|    924|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|    876|    {
 1577|    876|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    876|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    876|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|    876|    {
 1621|    876|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    876|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    876|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    876|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    876|            m_storage.reset();
 1627|    876|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    876|        }
 1629|    876|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    876|                                          std::basic_string<CharT>>) {
 1631|    876|            m_storage.emplace(SCN_FWD(range));
 1632|    876|            m_view = string_view_type{*m_storage};
 1633|    876|        }
 1634|    876|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    876|                                          typename detail::basic_scan_buffer<
 1636|    876|                                              value_t>::forward_iterator> &&
 1637|    876|                           ranges::common_range<Range>) {
 1638|    876|            auto beg_seg = range.begin().contiguous_segment();
 1639|    876|            auto end_seg = range.end().contiguous_segment();
 1640|    876|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    876|                             detail::to_address(end_seg.end()))) {
 1642|    876|                auto& str = m_storage.emplace();
 1643|    876|                str.reserve(range.end().position() - range.begin().position());
 1644|    876|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    876|                m_view = string_view_type{str};
 1646|    876|                return;
 1647|    876|            }
 1648|       |
 1649|    876|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    876|                                                            end_seg.data());
 1651|    876|            m_storage.reset();
 1652|    876|        }
 1653|    876|        else {
 1654|    876|            auto& str = m_storage.emplace();
 1655|    876|            if constexpr (ranges::sized_range<Range>) {
 1656|    876|                str.reserve(range.size());
 1657|    876|            }
 1658|    876|            if constexpr (ranges::common_range<Range>) {
 1659|    876|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    876|                          std::back_inserter(str));
 1661|    876|            }
 1662|    876|            else {
 1663|    876|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    876|                     ++it) {
 1665|    876|                    str.push_back(*it);
 1666|    876|                }
 1667|    876|            }
 1668|    876|            m_view = string_view_type{str};
 1669|    876|        }
 1670|    876|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    890|    {
 3665|    890|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    890|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 890]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    890|        return read_source_impl(range);
 3671|    890|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    876|    {
 3691|    876|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    876|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    876|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    876|        const std::ptrdiff_t sign_len =
 3694|    876|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 876]
  ------------------
 3695|       |
 3696|    876|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|    876|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    876|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    876|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 876, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    876|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    876|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    876|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    876|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    876|    }                                                  \
  |  |  |  | 3667|    876|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    876|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    244|    {
 4170|    244|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    244|#if !SCN_DISABLE_LOCALE
 4173|    244|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 236]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    236|#endif
 4182|       |
 4183|    236|        return read_impl<Range>(
 4184|    236|            range, rd,
 4185|    236|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    236|                return r.read_source(SCN_FWD(args)...);
 4187|    236|            },
 4188|    236|            value);
 4189|    244|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    244|    {
 4206|    244|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    244|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 244, False: 0]
  |  |  ------------------
  ------------------
 4208|    244|            return unexpected(r.error());
 4209|    244|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    236|    {
  754|    236|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    236|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    236|              cvref<T> obj = *get<T>(fn);
  745|    236|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    236|                  obj(static_cast<decltype(args)>(args)...);
  747|    236|              }
  748|    236|              else {
  749|    236|                  return obj(static_cast<decltype(args)>(args)...);
  750|    236|              }
  751|    236|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    236|    {
  684|    236|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    236|            return static_cast<T*>(s.m_cp);
  686|    236|        }
  687|    236|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    236|            return static_cast<T*>(s.m_p);
  689|    236|        }
  690|    236|        else {
  691|    236|            return reinterpret_cast<T*>(s.m_fp);
  692|    236|        }
  693|    236|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    236|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    236|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    236|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  661|    236|        {
  662|    236|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    254|    {
 4170|    254|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    254|#if !SCN_DISABLE_LOCALE
 4173|    254|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 16, False: 238]
  ------------------
 4174|     16|            return read_impl<Range>(
 4175|     16|                range, rd,
 4176|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     16|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     16|                },
 4179|     16|                value, loc);
 4180|     16|        }
 4181|    238|#endif
 4182|       |
 4183|    238|        return read_impl<Range>(
 4184|    238|            range, rd,
 4185|    238|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    238|                return r.read_source(SCN_FWD(args)...);
 4187|    238|            },
 4188|    238|            value);
 4189|    254|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    906|    {
 4206|    906|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    906|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30, False: 876]
  |  |  ------------------
  ------------------
 4208|     30|            return unexpected(r.error());
 4209|     30|        }
 4210|       |
 4211|    876|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|    876|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    876|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    876|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 876, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    876|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    876|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    876|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    876|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    876|    }                                                  \
  |  |  |  | 3667|    876|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    876|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     16|    {
  754|     16|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     16|    {
  684|     16|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     16|            return static_cast<T*>(s.m_cp);
  686|     16|        }
  687|     16|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     16|            return static_cast<T*>(s.m_p);
  689|     16|        }
  690|     16|        else {
  691|     16|            return reinterpret_cast<T*>(s.m_fp);
  692|     16|        }
  693|     16|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     16|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     16|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|     16|        {
  662|     16|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    238|    {
  754|    238|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    238|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    238|              cvref<T> obj = *get<T>(fn);
  745|    238|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    238|                  obj(static_cast<decltype(args)>(args)...);
  747|    238|              }
  748|    238|              else {
  749|    238|                  return obj(static_cast<decltype(args)>(args)...);
  750|    238|              }
  751|    238|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    238|    {
  684|    238|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    238|            return static_cast<T*>(s.m_cp);
  686|    238|        }
  687|    238|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    238|            return static_cast<T*>(s.m_p);
  689|    238|        }
  690|    238|        else {
  691|    238|            return reinterpret_cast<T*>(s.m_fp);
  692|    238|        }
  693|    238|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    238|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    238|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    238|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    238|        {
  662|    238|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|  5.94k|{
 5809|  5.94k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  5.94k|        return reader_impl_for_bool<CharT>{};
 5811|  5.94k|    }
 5812|  5.94k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  5.94k|        return reader_impl_for_char<CharT>{};
 5814|  5.94k|    }
 5815|  5.94k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  5.94k|        return reader_impl_for_wchar<CharT>{};
 5817|  5.94k|    }
 5818|  5.94k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  5.94k|        return reader_impl_for_code_point<CharT>{};
 5820|  5.94k|    }
 5821|  5.94k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  5.94k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  5.94k|        return reader_impl_for_string<CharT>{};
 5824|  5.94k|    }
 5825|  5.94k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  5.94k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  5.94k|        return reader_impl_for_string<CharT>{};
 5828|  5.94k|    }
 5829|  5.94k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  5.94k|                       std::is_same_v<T, wregex_matches>) {
 5831|  5.94k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  5.94k|    }
 5833|  5.94k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  5.94k|        return reader_impl_for_voidptr<CharT>{};
 5835|  5.94k|    }
 5836|  5.94k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  5.94k|        return reader_impl_for_float<CharT>{};
 5838|  5.94k|    }
 5839|  5.94k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  5.94k|                       !std::is_same_v<T, wchar_t> &&
 5841|  5.94k|                       !std::is_same_v<T, char32_t> &&
 5842|  5.94k|                       !std::is_same_v<T, bool>) {
 5843|  5.94k|        return reader_impl_for_int<CharT>{};
 5844|  5.94k|    }
 5845|  5.94k|    else {
 5846|  5.94k|        return reader_impl_for_monostate<CharT>{};
 5847|  5.94k|    }
 5848|  5.94k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|  17.8k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  15.8k|    {
 3040|  15.8k|        reader_error_handler eh{};
 3041|  15.8k|        get_derived().check_specs_impl(specs, eh);
 3042|  15.8k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 348, False: 15.5k]
  |  |  ------------------
  ------------------
 3043|    348|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    348|        }
 3045|  15.5k|        return {};
 3046|  15.8k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  15.8k|    {
 3051|  15.8k|        return static_cast<Derived&>(*this);
 3052|  15.8k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  15.8k|    {
 5210|  15.8k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  15.8k|        SCN_GCC_PUSH
 5213|  15.8k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  15.8k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  15.8k|        SCN_CLANG_PUSH
 5217|  15.8k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  15.8k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  15.8k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 342, False: 15.5k]
  ------------------
 5221|  1.28k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.28k, False: 14.5k]
  ------------------
 5222|  1.28k|                m_type = reader_type::word;
 5223|  1.28k|                break;
 5224|       |
 5225|    498|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 498, False: 15.3k]
  ------------------
 5226|    498|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 78, False: 420]
  ------------------
 5227|    498|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 216, False: 204]
  ------------------
 5228|    294|                    m_type = reader_type::custom_word;
 5229|    294|                }
 5230|    204|                else {
 5231|    204|                    m_type = reader_type::word;
 5232|    204|                }
 5233|    498|                break;
 5234|      0|            }
 5235|       |
 5236|    132|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 132, False: 15.7k]
  ------------------
 5237|    132|                m_type = reader_type::character;
 5238|    132|                break;
 5239|       |
 5240|  3.61k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 3.61k, False: 12.2k]
  ------------------
 5241|  3.61k|                m_type = reader_type::character_set;
 5242|  3.61k|                break;
 5243|       |
 5244|  9.28k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 9.28k, False: 6.60k]
  ------------------
 5245|  9.28k|                m_type = reader_type::regex;
 5246|  9.28k|                break;
 5247|       |
 5248|    732|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 732, False: 15.1k]
  ------------------
 5249|    732|                m_type = reader_type::regex_escaped;
 5250|    732|                break;
 5251|  15.8k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  15.8k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|  21.4k|    {
 5259|  21.4k|        return m_type == reader_type::word;
 5260|  21.4k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  10.3k|{
 1132|  10.3k|    auto it = src.begin();
 1133|   885k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 877k, False: 8.31k]
  ------------------
 1134|   877k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   877k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.34k, False: 876k]
  ------------------
 1136|  1.34k|            return false;
 1137|  1.34k|        }
 1138|   876k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 246, False: 875k]
  ------------------
 1139|    246|            return false;
 1140|    246|        }
 1141|   875k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   875k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   875k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 420, False: 875k]
  ------------------
 1144|    420|            return false;
 1145|    420|        }
 1146|   875k|        it += len;
 1147|   875k|    }
 1148|  8.31k|    return true;
 1149|  10.3k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    304|{
 2993|    304|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    304|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 304, False: 0]
  ------------------
 2995|    304|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    304|    static_cast<    \
  |  |  929|    304|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    304|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    304|    }
 3001|    304|    else {
 3002|    304|        return transcode_impl(source.view(), dest);
 3003|    304|    }
 3004|       |
 3005|    304|    return {};
 3006|    304|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  3.61k|        {
 5103|  3.61k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 588, False: 3.02k]
  ------------------
 5104|    588|                return {};
 5105|    588|            }
 5106|       |
 5107|  3.02k|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|  3.02k|            auto it = detail::to_address(charset_string.begin());
 5109|  3.02k|            auto set = detail::parse_presentation_set(
 5110|  3.02k|                it, detail::to_address(charset_string.end()), nonascii);
 5111|  3.02k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.02k]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|  3.02k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  3.02k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|  3.02k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  3.02k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|  3.02k|            std::sort(nonascii.extra_ranges.begin(),
 5118|  3.02k|                      nonascii.extra_ranges.end());
 5119|  3.02k|            return {};
 5120|  3.02k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|   633k|        {
 5138|   633k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 69.2k, False: 564k]
  ------------------
 5139|  69.2k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  69.2k|            }
 5141|       |
 5142|   564k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|   633k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  69.2k|        {
 5086|       |            // TODO: binary search?
 5087|  69.2k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 69.2k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  69.2k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  69.2k|            return std::find_if(
 5093|  69.2k|                       nonascii.extra_ranges.begin(),
 5094|  69.2k|                       nonascii.extra_ranges.end(),
 5095|  69.2k|                       [cp_val](const auto& pair) noexcept {
 5096|  69.2k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  69.2k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  69.2k|                       }) != nonascii.extra_ranges.end();
 5099|  69.2k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  22.3M|                       [cp_val](const auto& pair) noexcept {
 5096|  22.3M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 22.3M, False: 4.10k]
  ------------------
 5097|  22.3M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 68.4k, False: 22.3M]
  ------------------
 5098|  22.3M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|   573k|        {
 5076|   573k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   573k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   573k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|   573k|            const auto val =
 5078|   573k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|   573k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|   573k|                    (val % 8)) &
 5081|   573k|                   1u;
 5082|   573k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  13.4k|        {
 5129|  13.4k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 4.10k, False: 9.36k]
  ------------------
 5130|  4.10k|                return false;
 5131|  4.10k|            }
 5132|       |
 5133|  9.36k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  13.4k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  3.61k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    600|    {
 5277|    600|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    600|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    600|        return read_impl(range, specs, value);
 5279|    600|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    600|    {
 5295|    600|        SCN_CLANG_PUSH
 5296|    600|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    600|        switch (m_type) {
 5299|    224|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 224, False: 376]
  ------------------
 5300|    224|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 52, False: 548]
  ------------------
 5303|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     52|                                                                   value);
 5305|       |
 5306|     42|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 42, False: 558]
  ------------------
 5307|     42|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    234|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 234, False: 366]
  ------------------
 5310|    234|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    234|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 598]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|     46|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 46, False: 554]
  ------------------
 5320|     46|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     46|                    range,
 5322|     46|                    get_unescaped_regex_pattern(
 5323|     46|                        specs.charset_string<SourceCharT>()),
 5324|     46|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 600]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    600|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    600|        }
 5331|       |
 5332|    600|        SCN_CLANG_POP
 5333|    600|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    224|    {
 4820|    224|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    224|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    318|{
 4752|    318|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    318|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    318|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 146, False: 172]
  ------------------
 4756|    146|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    146|                                     "Invalid encoding in scanned string");
 4758|    146|    }
 4759|    172|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    172|    static_cast<    \
  |  |  929|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    172|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    172|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 172]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    172|    return SCN_MOVE(result);
  ------------------
  |  |  928|    172|    static_cast<    \
  |  |  929|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    172|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    672|{
 2088|    672|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    672|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    672|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    672|        auto buf = make_contiguous_buffer(range);
 2092|    672|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    672|        return ranges::next(range.begin(),
 2094|    672|                            ranges::distance(buf.view().begin(), it));
 2095|    672|    }
 2096|    672|    else {
 2097|    672|        auto it = range.begin();
 2098|       |
 2099|    672|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    672|            auto seg = get_contiguous_beginning(range);
 2101|    672|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    672|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 672]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|    672|            ranges::advance(it, seg.size());
 2106|    672|        }
 2107|       |
 2108|    672|        return read_until_code_point(
 2109|    672|            ranges::subrange{it, range.end()},
 2110|    672|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    672|    }
 2112|    672|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    672|{
 2061|    672|    auto it = range.begin();
 2062|  17.8k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 17.4k, False: 444]
  ------------------
 2063|  17.4k|        const auto val =
 2064|  17.4k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  17.4k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  17.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.4k, False: 1.95k]
  |  |  ------------------
  ------------------
 2066|  15.4k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  15.4k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  15.4k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 228, False: 15.2k]
  ------------------
 2069|    228|                return it;
 2070|    228|            }
 2071|  15.4k|        }
 2072|  17.1k|        it = val.iterator;
 2073|  17.1k|    }
 2074|       |
 2075|    444|    return it;
 2076|    672|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    672|    {
  754|    672|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  15.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.4k|              cvref<T> obj = *get<T>(fn);
  745|  15.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.4k|              }
  748|  15.4k|              else {
  749|  15.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.4k|              }
  751|  15.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  15.4k|    {
  684|  15.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.4k|            return static_cast<T*>(s.m_cp);
  686|  15.4k|        }
  687|  15.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  15.4k|            return static_cast<T*>(s.m_p);
  689|  15.4k|        }
  690|  15.4k|        else {
  691|  15.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.4k|        }
  693|  15.4k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  15.4k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    672|        {
  662|    672|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     52|    {
 4841|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 36, False: 16]
  ------------------
 4842|     36|            return read_string_impl(
 4843|     36|                range,
 4844|     36|                read_until_code_unit(
 4845|     36|                    range,
 4846|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     36|                        SourceCharT ch) { return ch == until; }),
 4848|     36|                value);
 4849|     36|        }
 4850|     16|        return read_string_impl(
 4851|     16|            range,
 4852|     16|            read_until_code_units(
 4853|     16|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     16|            value);
 4855|     52|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|  1.55k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.55k|              cvref<T> obj = *get<T>(fn);
  745|  1.55k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.55k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.55k|              }
  748|  1.55k|              else {
  749|  1.55k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.55k|              }
  751|  1.55k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.55k|    {
  684|  1.55k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.55k|            return static_cast<T*>(s.m_cp);
  686|  1.55k|        }
  687|  1.55k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.55k|            return static_cast<T*>(s.m_p);
  689|  1.55k|        }
  690|  1.55k|        else {
  691|  1.55k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.55k|        }
  693|  1.55k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|  1.55k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2006|     48|{
 2007|     48|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     48|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     48|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     48|                           needle.end());
 2012|     48|    }
 2013|     48|    else {
 2014|     48|        auto first = range.begin();
 2015|    144|        while (true) {
  ------------------
  |  Branch (2015:16): [Folded - Ignored]
  ------------------
 2016|    144|            auto it = first;
 2017|    270|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|    270|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2018:21): [True: 36, False: 234]
  ------------------
 2019|     36|                    return first;
 2020|     36|                }
 2021|    234|                if (it == range.end()) {
  ------------------
  |  Branch (2021:21): [True: 12, False: 222]
  ------------------
 2022|     12|                    return it;
 2023|     12|                }
 2024|    222|                if (*it != *needle_it) {
  ------------------
  |  Branch (2024:21): [True: 96, False: 126]
  ------------------
 2025|     96|                    break;
 2026|     96|                }
 2027|    222|            }
 2028|     96|            ++first;
 2029|     96|        }
 2030|     48|    }
 2031|     48|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     42|    {
 4947|     42|        return read_impl(
 4948|     42|            range,
 4949|     42|            [&](const auto& rng) {
 4950|     42|                return read_string_impl(rng, read_all(rng), value);
 4951|     42|            },
 4952|     42|            detail::priority_tag<1>{});
 4953|     42|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     42|    {
 4974|     42|        return read_cb(range);
 4975|     42|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     42|            [&](const auto& rng) {
 4950|     42|                return read_string_impl(rng, read_all(rng), value);
 4951|     42|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|    126|{
 1839|    126|    return ranges::next(range.begin(), range.end());
 1840|    126|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    126|    {
  313|    126|        ranges::advance(x, bound);
  314|    126|        return x;
  315|    126|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    126|    {
  275|    126|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    126|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    126|    {
  203|  4.28k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 4.15k, False: 126]
  ------------------
  204|  4.15k|            ++i;
  205|  4.15k|        }
  206|    126|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    234|    {
 5048|    234|        auto it = read_source_impl(range, {specs});
 5049|    234|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 226]
  |  |  ------------------
  ------------------
 5050|      8|            return unexpected(it.error());
 5051|      8|        }
 5052|       |
 5053|    226|        return read_string_impl(range, *it, value);
 5054|    234|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5152|    702|    {
 5153|    702|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    702|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    702|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    702|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 702]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    702|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    702|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 456, False: 246]
  ------------------
 5163|    456|            const auto cb = [&](char32_t cp) {
 5164|    456|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    456|            };
 5166|       |
 5167|    456|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 96, False: 360]
  ------------------
 5168|     96|                auto it = read_until_code_point(range, cb);
 5169|     96|                return check_nonempty(it, range);
 5170|     96|            }
 5171|    360|            auto it = read_while_code_point(range, cb);
 5172|    360|            return check_nonempty(it, range);
 5173|    456|        }
 5174|       |
 5175|    246|        const auto cb = [&](SourceCharT ch) {
 5176|    246|            return cb_wrapper.on_ascii_only(ch);
 5177|    246|        };
 5178|       |
 5179|    246|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 186, False: 60]
  ------------------
 5180|    186|            auto it = read_until_code_unit(range, cb);
 5181|    186|            return check_nonempty(it, range);
 5182|    186|        }
 5183|     60|        auto it = read_while_code_unit(range, cb);
 5184|     60|        return check_nonempty(it, range);
 5185|    246|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|    456|    {
  754|    456|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  85.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  85.2k|              cvref<T> obj = *get<T>(fn);
  745|  85.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  85.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  85.2k|              }
  748|  85.2k|              else {
  749|  85.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  85.2k|              }
  751|  85.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  85.2k|    {
  684|  85.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  85.2k|            return static_cast<T*>(s.m_cp);
  686|  85.2k|        }
  687|  85.2k|        else if constexpr (std::is_object_v<T>) {
  688|  85.2k|            return static_cast<T*>(s.m_p);
  689|  85.2k|        }
  690|  85.2k|        else {
  691|  85.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  85.2k|        }
  693|  85.2k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  85.2k|            const auto cb = [&](char32_t cp) {
 5164|  85.2k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  85.2k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|    456|        {
  667|    456|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5190|    702|    {
 5191|    702|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 24, False: 678]
  ------------------
 5192|     24|            return unexpected_scan_error(
 5193|     24|                scan_error::invalid_scanned_value,
 5194|     24|                "No characters matched in [character set]");
 5195|     24|        }
 5196|       |
 5197|    678|        return it;
 5198|    702|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_:
  753|    246|    {
  754|    246|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  9.46k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.46k|              cvref<T> obj = *get<T>(fn);
  745|  9.46k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.46k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.46k|              }
  748|  9.46k|              else {
  749|  9.46k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.46k|              }
  751|  9.46k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  9.46k|    {
  684|  9.46k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.46k|            return static_cast<T*>(s.m_cp);
  686|  9.46k|        }
  687|  9.46k|        else if constexpr (std::is_object_v<T>) {
  688|  9.46k|            return static_cast<T*>(s.m_p);
  689|  9.46k|        }
  690|  9.46k|        else {
  691|  9.46k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.46k|        }
  693|  9.46k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5175|  9.46k|        const auto cb = [&](SourceCharT ch) {
 5176|  9.46k|            return cb_wrapper.on_ascii_only(ch);
 5177|  9.46k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_LPv0EEEPKSL_:
  666|    246|        {
  667|    246|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    226|{
 4752|    226|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    226|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    226|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 94, False: 132]
  ------------------
 4756|     94|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     94|                                     "Invalid encoding in scanned string");
 4758|     94|    }
 4759|    132|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    132|    static_cast<    \
  |  |  929|    132|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    132|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 132]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    132|    return SCN_MOVE(result);
  ------------------
  |  |  928|    132|    static_cast<    \
  |  |  929|    132|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    132|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     48|    {
 4891|     48|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|     48|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     48|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     48|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     48|    }                                                  \
  |  |  |  | 3667|     48|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     48|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|    144|    {
 4913|    144|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    288|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|    144|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|    144|            return unexpected_scan_error(
 4916|    144|                scan_error::invalid_scanned_value,
 4917|    144|                "Regex backend doesn't support wide strings as input");
 4918|    144|        }
 4919|    144|        else {
 4920|    144|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 144, False: 0]
  ------------------
 4921|    144|                return unexpected_scan_error(
 4922|    144|                    scan_error::invalid_scanned_value,
 4923|    144|                    "Cannot use regex with a non-contiguous source "
 4924|    144|                    "range");
 4925|    144|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|    144|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|    144|{
  959|    144|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|    144|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|    144|        return true;
  962|    144|    }
  963|    144|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|    144|                           ranges::const_iterator_t<Range>,
  965|    144|                           typename detail::basic_scan_buffer<
  966|    144|                               detail::char_t<Range>>::forward_iterator>) {
  967|    144|        auto beg = r.begin();
  968|    144|        if (!beg.stores_parent()) {
  969|    144|            return true;
  970|    144|        }
  971|    144|        return beg.parent()->is_contiguous();
  972|    144|    }
  973|    144|    else {
  974|    144|        return false;
  975|    144|    }
  976|    144|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  4.57k|    {
 5277|  4.57k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.57k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.57k|        return read_impl(range, specs, value);
 5279|  4.57k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  4.57k|    {
 5295|  4.57k|        SCN_CLANG_PUSH
 5296|  4.57k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.57k|        switch (m_type) {
 5299|    266|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 266, False: 4.30k]
  ------------------
 5300|    266|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 4.52k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.57k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    970|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 970, False: 3.60k]
  ------------------
 5310|    970|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    970|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.09k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.09k, False: 1.48k]
  ------------------
 5315|  3.09k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.09k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.09k|                    specs.regexp_flags, value);
 5318|       |
 5319|    198|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 198, False: 4.37k]
  ------------------
 5320|    198|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    198|                    range,
 5322|    198|                    get_unescaped_regex_pattern(
 5323|    198|                        specs.charset_string<SourceCharT>()),
 5324|    198|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.57k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.57k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.57k|        }
 5331|       |
 5332|  4.57k|        SCN_CLANG_POP
 5333|  4.57k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    918|    {
 4820|    918|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    918|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    964|{
 4752|    964|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    964|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    964|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 316, False: 648]
  ------------------
 4756|    316|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    316|                                     "Invalid encoding in scanned string");
 4758|    316|    }
 4759|    648|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    648|    static_cast<    \
  |  |  929|    648|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    648|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    648|    return SCN_MOVE(result);
  ------------------
  |  |  928|    648|    static_cast<    \
  |  |  929|    648|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    648|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.77k|{
 3012|  1.77k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.77k|        dest.assign(source.view());
 3014|  1.77k|    }
 3015|  1.77k|    else {
 3016|  1.77k|        return transcode_impl(source.view(), dest);
 3017|  1.77k|    }
 3018|       |
 3019|  1.77k|    return {};
 3020|  1.77k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.75k|{
 2088|  2.75k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.75k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.75k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.75k|        auto buf = make_contiguous_buffer(range);
 2092|  2.75k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.75k|        return ranges::next(range.begin(),
 2094|  2.75k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.75k|    }
 2096|  2.75k|    else {
 2097|  2.75k|        auto it = range.begin();
 2098|       |
 2099|  2.75k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.75k|            auto seg = get_contiguous_beginning(range);
 2101|  2.75k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.75k|                seg_it != seg.end()) {
 2103|  2.75k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.75k|            }
 2105|  2.75k|            ranges::advance(it, seg.size());
 2106|  2.75k|        }
 2107|       |
 2108|  2.75k|        return read_until_code_point(
 2109|  2.75k|            ranges::subrange{it, range.end()},
 2110|  2.75k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.75k|    }
 2112|  2.75k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 14]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    722|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    722|              cvref<T> obj = *get<T>(fn);
  745|    722|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    722|                  obj(static_cast<decltype(args)>(args)...);
  747|    722|              }
  748|    722|              else {
  749|    722|                  return obj(static_cast<decltype(args)>(args)...);
  750|    722|              }
  751|    722|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    722|    {
  684|    722|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    722|            return static_cast<T*>(s.m_cp);
  686|    722|        }
  687|    722|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    722|            return static_cast<T*>(s.m_p);
  689|    722|        }
  690|    722|        else {
  691|    722|            return reinterpret_cast<T*>(s.m_fp);
  692|    722|        }
  693|    722|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    722|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     42|{
 2007|     42|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     42|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     42|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     42|                           needle.end());
 2012|     42|    }
 2013|     42|    else {
 2014|     42|        auto first = range.begin();
 2015|     42|        while (true) {
 2016|     42|            auto it = first;
 2017|     42|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|     42|                if (needle_it == needle.end()) {
 2019|     42|                    return first;
 2020|     42|                }
 2021|     42|                if (it == range.end()) {
 2022|     42|                    return it;
 2023|     42|                }
 2024|     42|                if (*it != *needle_it) {
 2025|     42|                    break;
 2026|     42|                }
 2027|     42|            }
 2028|     42|            ++first;
 2029|     42|        }
 2030|     42|    }
 2031|     42|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    970|    {
 5048|    970|        auto it = read_source_impl(range, {specs});
 5049|    970|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    970|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 280, False: 690]
  |  |  ------------------
  ------------------
 5050|    280|            return unexpected(it.error());
 5051|    280|        }
 5052|       |
 5053|    690|        return read_string_impl(range, *it, value);
 5054|    970|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  2.91k|    {
 5153|  2.91k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  2.91k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  2.91k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.91k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  2.91k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  2.91k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 2.56k, False: 342]
  ------------------
 5163|  2.56k|            const auto cb = [&](char32_t cp) {
 5164|  2.56k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  2.56k|            };
 5166|       |
 5167|  2.56k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 276, False: 2.29k]
  ------------------
 5168|    276|                auto it = read_until_code_point(range, cb);
 5169|    276|                return check_nonempty(it, range);
 5170|    276|            }
 5171|  2.29k|            auto it = read_while_code_point(range, cb);
 5172|  2.29k|            return check_nonempty(it, range);
 5173|  2.56k|        }
 5174|       |
 5175|    342|        const auto cb = [&](SourceCharT ch) {
 5176|    342|            return cb_wrapper.on_ascii_only(ch);
 5177|    342|        };
 5178|       |
 5179|    342|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 150, False: 192]
  ------------------
 5180|    150|            auto it = read_until_code_unit(range, cb);
 5181|    150|            return check_nonempty(it, range);
 5182|    150|        }
 5183|    192|        auto it = read_while_code_unit(range, cb);
 5184|    192|        return check_nonempty(it, range);
 5185|    342|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  2.56k|{
 2061|  2.56k|    auto it = range.begin();
 2062|   550k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 550k, False: 228]
  ------------------
 2063|   550k|        const auto val =
 2064|   550k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   550k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   550k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 548k, False: 2.07k]
  |  |  ------------------
  ------------------
 2066|   548k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   548k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   548k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.34k, False: 546k]
  ------------------
 2069|  2.34k|                return it;
 2070|  2.34k|            }
 2071|   548k|        }
 2072|   548k|        it = val.iterator;
 2073|   548k|    }
 2074|       |
 2075|    228|    return it;
 2076|  2.56k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   550k|{
 1899|   550k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   550k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   550k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   550k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   550k|    auto it = range.begin();
 1903|   550k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   550k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   550k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 548k]
  |  |  ------------------
  ------------------
 1906|  2.07k|        ++it;
 1907|  2.07k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  2.07k|        return {it, {}};
 1909|  2.07k|    }
 1910|       |
 1911|   548k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 487k, False: 61.3k]
  ------------------
 1912|   487k|        ++it;
 1913|   487k|        return {it, string_type(1, *range.begin())};
 1914|   487k|    }
 1915|       |
 1916|  61.3k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  61.3k|    return {it, string_type{range.begin(), it}};
 1918|   548k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  2.07k|{
 1155|  2.07k|    auto it = input.begin();
 1156|  7.21k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 7.14k, False: 78]
  ------------------
 1157|  7.14k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.99k, False: 5.14k]
  ------------------
 1158|  1.99k|            break;
 1159|  1.99k|        }
 1160|  7.14k|    }
 1161|  2.07k|    return it;
 1162|  2.07k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  61.3k|    {
  283|  61.3k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  61.3k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  61.3k|    {
  212|  61.3k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 48, False: 61.3k]
  ------------------
  213|     48|            auto dist = bound - i;
  214|     48|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     48|            return dist;
  216|     48|        }
  217|  61.3k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  61.3k|        return n;
  219|  61.3k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   122k|    {
  132|   122k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 122k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   122k|        return t;
  136|   122k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|   550k|    {
 1890|   550k|        return !codepoint.empty();
 1891|   550k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  2.56k|    {
  754|  2.56k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|   548k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   548k|              cvref<T> obj = *get<T>(fn);
  745|   548k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   548k|                  obj(static_cast<decltype(args)>(args)...);
  747|   548k|              }
  748|   548k|              else {
  749|   548k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   548k|              }
  751|   548k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   548k|    {
  684|   548k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   548k|            return static_cast<T*>(s.m_cp);
  686|   548k|        }
  687|   548k|        else if constexpr (std::is_object_v<T>) {
  688|   548k|            return static_cast<T*>(s.m_p);
  689|   548k|        }
  690|   548k|        else {
  691|   548k|            return reinterpret_cast<T*>(s.m_fp);
  692|   548k|        }
  693|   548k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|   548k|            const auto cb = [&](char32_t cp) {
 5164|   548k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|   548k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  2.56k|        {
  667|  2.56k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  2.91k|    {
 5191|  2.91k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 840, False: 2.07k]
  ------------------
 5192|    840|            return unexpected_scan_error(
 5193|    840|                scan_error::invalid_scanned_value,
 5194|    840|                "No characters matched in [character set]");
 5195|    840|        }
 5196|       |
 5197|  2.07k|        return it;
 5198|  2.91k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  2.29k|{
 2082|  2.29k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.29k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    342|    {
  754|    342|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  3.99k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.99k|              cvref<T> obj = *get<T>(fn);
  745|  3.99k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.99k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.99k|              }
  748|  3.99k|              else {
  749|  3.99k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.99k|              }
  751|  3.99k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.99k|    {
  684|  3.99k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.99k|            return static_cast<T*>(s.m_cp);
  686|  3.99k|        }
  687|  3.99k|        else if constexpr (std::is_object_v<T>) {
  688|  3.99k|            return static_cast<T*>(s.m_p);
  689|  3.99k|        }
  690|  3.99k|        else {
  691|  3.99k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.99k|        }
  693|  3.99k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  3.99k|        const auto cb = [&](SourceCharT ch) {
 5176|  3.99k|            return cb_wrapper.on_ascii_only(ch);
 5177|  3.99k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    342|        {
  667|    342|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.24k|{
 4752|  1.24k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.24k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.24k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 114, False: 1.12k]
  ------------------
 4756|    114|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    114|                                     "Invalid encoding in scanned string");
 4758|    114|    }
 4759|  1.12k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.12k|    static_cast<    \
  |  |  929|  1.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.12k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.12k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.12k|    static_cast<    \
  |  |  929|  1.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.12k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.29k|    {
 4891|  3.29k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  3.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.74k, False: 550]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.74k|    }                                                  \
  |  |  |  | 3667|  3.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    550|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    550|        return read_string_impl(range, it, value);
 4893|  3.29k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  9.87k|    {
 4913|  9.87k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  19.7k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  9.87k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  9.87k|            return unexpected_scan_error(
 4916|  9.87k|                scan_error::invalid_scanned_value,
 4917|  9.87k|                "Regex backend doesn't support wide strings as input");
 4918|  9.87k|        }
 4919|  9.87k|        else {
 4920|  9.87k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 9.87k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  9.87k|            auto input = get_as_contiguous(range);
 4928|  9.87k|            SCN_TRY(it,
  ------------------
  |  | 3668|  9.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  9.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  9.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.22k, False: 1.65k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  8.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  8.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  8.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  8.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  8.22k|    }                                                  \
  |  |  |  | 3667|  9.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  1.65k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  1.65k|            return ranges::next(range.begin(),
 4931|  1.65k|                                ranges::distance(input.begin(), it));
 4932|  9.87k|        }
 4933|  9.87k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  9.87k|{
  959|  9.87k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  9.87k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  9.87k|        return true;
  962|  9.87k|    }
  963|  9.87k|    else if constexpr (std::is_same_v<
  964|  9.87k|                           ranges::const_iterator_t<Range>,
  965|  9.87k|                           typename detail::basic_scan_buffer<
  966|  9.87k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  9.87k|        auto beg = r.begin();
  968|  9.87k|        if (!beg.stores_parent()) {
  969|  9.87k|            return true;
  970|  9.87k|        }
  971|  9.87k|        return beg.parent()->is_contiguous();
  972|  9.87k|    }
  973|  9.87k|    else {
  974|  9.87k|        return false;
  975|  9.87k|    }
  976|  9.87k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  9.87k|{
 1065|  9.87k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  9.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  9.87k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  9.87k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  9.87k|        return r;
 1070|  9.87k|    }
 1071|  9.87k|    else if constexpr (std::is_same_v<
 1072|  9.87k|                           ranges::const_iterator_t<Range>,
 1073|  9.87k|                           typename detail::basic_scan_buffer<
 1074|  9.87k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  9.87k|        if constexpr (ranges::common_range<Range>) {
 1076|  9.87k|            return detail::make_string_view_from_pointers(
 1077|  9.87k|                r.begin().to_contiguous_segment_iterator(),
 1078|  9.87k|                r.end().to_contiguous_segment_iterator());
 1079|  9.87k|        }
 1080|  9.87k|        else {
 1081|  9.87k|            return r.begin().contiguous_segment();
 1082|  9.87k|        }
 1083|  9.87k|    }
 1084|  9.87k|    else {
 1085|  9.87k|        SCN_EXPECT(false);
 1086|  9.87k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  9.87k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  9.87k|    }
 1090|  9.87k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  9.87k|{
  981|  9.87k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  9.87k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  9.87k|        return true;
  984|  9.87k|    }
  985|  9.87k|    else if constexpr (std::is_same_v<
  986|  9.87k|                           ranges::const_iterator_t<Range>,
  987|  9.87k|                           typename detail::basic_scan_buffer<
  988|  9.87k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  9.87k|        auto beg = r.begin();
  990|  9.87k|        if (beg.contiguous_segment().empty()) {
  991|  9.87k|            return false;
  992|  9.87k|        }
  993|  9.87k|        if constexpr (ranges::common_range<Range>) {
  994|  9.87k|            return beg.contiguous_segment().end() ==
  995|  9.87k|                   ranges::end(r).contiguous_segment().end();
  996|  9.87k|        }
  997|  9.87k|        else {
  998|  9.87k|            if (beg.stores_parent()) {
  999|  9.87k|                return beg.contiguous_segment().end() ==
 1000|  9.87k|                       beg.parent()->current_view().end();
 1001|  9.87k|            }
 1002|  9.87k|            return true;
 1003|  9.87k|        }
 1004|  9.87k|    }
 1005|  9.87k|    else {
 1006|  9.87k|        return false;
 1007|  9.87k|    }
 1008|  9.87k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  9.87k|{
 4346|  9.87k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  9.87k|                  ranges::borrowed_range<Input> &&
 4348|  9.87k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  9.87k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  9.87k|    std::basic_regex<CharT> re{};
 4352|  9.87k|    try {
 4353|  9.87k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3668|  9.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  9.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  9.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.87k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  9.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  9.87k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  9.87k|                                     re_flags | std::regex_constants::nosubs};
 4356|  9.87k|    }
 4357|  9.87k|    catch (const std::regex_error& err) {
 4358|  5.41k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  5.41k|                                     "Invalid regex");
 4360|  5.41k|    }
 4361|       |
 4362|  4.45k|    std::match_results<const CharT*> matches{};
 4363|  4.45k|    try {
 4364|  4.45k|        bool found = std::regex_search(input.data(),
 4365|  4.45k|                                       input.data() + input.size(), matches, re,
 4366|  4.45k|                                       std::regex_constants::match_continuous);
 4367|  4.45k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 2.80k, False: 1.65k]
  |  Branch (4367:23): [True: 0, False: 1.65k]
  ------------------
 4368|  2.65k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  2.65k|                                         "Regular expression didn't match");
 4370|  2.65k|        }
 4371|  4.45k|    }
 4372|  4.45k|    catch (const std::regex_error& err) {
 4373|    150|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|    150|                                     "Regex matching failed with an error");
 4375|    150|    }
 4376|       |
 4377|  1.65k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  4.45k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5808|  5.94k|{
 5809|  5.94k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  5.94k|        return reader_impl_for_bool<CharT>{};
 5811|  5.94k|    }
 5812|  5.94k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  5.94k|        return reader_impl_for_char<CharT>{};
 5814|  5.94k|    }
 5815|  5.94k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  5.94k|        return reader_impl_for_wchar<CharT>{};
 5817|  5.94k|    }
 5818|  5.94k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  5.94k|        return reader_impl_for_code_point<CharT>{};
 5820|  5.94k|    }
 5821|  5.94k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  5.94k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  5.94k|        return reader_impl_for_string<CharT>{};
 5824|  5.94k|    }
 5825|  5.94k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  5.94k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  5.94k|        return reader_impl_for_string<CharT>{};
 5828|  5.94k|    }
 5829|  5.94k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  5.94k|                       std::is_same_v<T, wregex_matches>) {
 5831|  5.94k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  5.94k|    }
 5833|  5.94k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  5.94k|        return reader_impl_for_voidptr<CharT>{};
 5835|  5.94k|    }
 5836|  5.94k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  5.94k|        return reader_impl_for_float<CharT>{};
 5838|  5.94k|    }
 5839|  5.94k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  5.94k|                       !std::is_same_v<T, wchar_t> &&
 5841|  5.94k|                       !std::is_same_v<T, char32_t> &&
 5842|  5.94k|                       !std::is_same_v<T, bool>) {
 5843|  5.94k|        return reader_impl_for_int<CharT>{};
 5844|  5.94k|    }
 5845|  5.94k|    else {
 5846|  5.94k|        return reader_impl_for_monostate<CharT>{};
 5847|  5.94k|    }
 5848|  5.94k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    304|{
 2993|    304|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    304|        if (source.stores_allocated_string()) {
 2995|    304|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    304|        }
 2997|    304|        else {
 2998|    304|            dest.assign(source.view());
 2999|    304|        }
 3000|    304|    }
 3001|    304|    else {
 3002|    304|        return transcode_impl(source.view(), dest);
 3003|    304|    }
 3004|       |
 3005|      0|    return {};
 3006|    304|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  2.07k|{
 2968|  2.07k|    dst.clear();
 2969|  2.07k|    transcode_valid_to_string(src, dst);
 2970|  2.07k|    return {};
 2971|  2.07k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  2.07k|{
 1403|  2.07k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  2.07k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  2.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  2.07k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  2.07k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  2.07k|            std::u32string tmp;
 1410|  2.07k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  2.07k|            return transcode_to_string_impl_32to16<true>(
 1412|  2.07k|                std::u32string_view{tmp}, dest);
 1413|  2.07k|        }
 1414|  2.07k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  2.07k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  2.07k|        }
 1417|  2.07k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  2.07k|{
 1277|  2.07k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  2.07k|    auto it = src.begin();
 1280|   208k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 206k, False: 2.07k]
  ------------------
 1281|   206k|        auto res = get_next_code_point_valid(
 1282|   206k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   206k|                                                                 src.end()));
 1284|   206k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   206k|        dest.push_back(res.value);
 1286|   206k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   206k|    }
 1288|  2.07k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   206k|{
 1189|   206k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   206k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   206k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   206k|    return {input.begin() + len,
 1195|   206k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   206k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    600|    {
 5277|    600|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    600|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    600|        return read_impl(range, specs, value);
 5279|    600|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    600|    {
 5295|    600|        SCN_CLANG_PUSH
 5296|    600|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    600|        switch (m_type) {
 5299|    224|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 224, False: 376]
  ------------------
 5300|    224|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 52, False: 548]
  ------------------
 5303|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     52|                                                                   value);
 5305|       |
 5306|     42|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 42, False: 558]
  ------------------
 5307|     42|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    234|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 234, False: 366]
  ------------------
 5310|    234|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    234|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 598]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|     46|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 46, False: 554]
  ------------------
 5320|     46|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     46|                    range,
 5322|     46|                    get_unescaped_regex_pattern(
 5323|     46|                        specs.charset_string<SourceCharT>()),
 5324|     46|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 600]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    600|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    600|        }
 5331|       |
 5332|    600|        SCN_CLANG_POP
 5333|    600|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    224|    {
 4820|    224|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    224|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    318|{
 4752|    318|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    318|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    318|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 146, False: 172]
  ------------------
 4756|    146|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    146|                                     "Invalid encoding in scanned string");
 4758|    146|    }
 4759|    172|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    172|    static_cast<    \
  |  |  929|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    172|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    172|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 172]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    172|    return SCN_MOVE(result);
  ------------------
  |  |  928|    172|    static_cast<    \
  |  |  929|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    172|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     52|    {
 4841|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 36, False: 16]
  ------------------
 4842|     36|            return read_string_impl(
 4843|     36|                range,
 4844|     36|                read_until_code_unit(
 4845|     36|                    range,
 4846|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     36|                        SourceCharT ch) { return ch == until; }),
 4848|     36|                value);
 4849|     36|        }
 4850|     16|        return read_string_impl(
 4851|     16|            range,
 4852|     16|            read_until_code_units(
 4853|     16|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     16|            value);
 4855|     52|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|  1.55k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.55k|              cvref<T> obj = *get<T>(fn);
  745|  1.55k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.55k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.55k|              }
  748|  1.55k|              else {
  749|  1.55k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.55k|              }
  751|  1.55k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.55k|    {
  684|  1.55k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.55k|            return static_cast<T*>(s.m_cp);
  686|  1.55k|        }
  687|  1.55k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.55k|            return static_cast<T*>(s.m_p);
  689|  1.55k|        }
  690|  1.55k|        else {
  691|  1.55k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.55k|        }
  693|  1.55k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|  1.55k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     42|    {
 4947|     42|        return read_impl(
 4948|     42|            range,
 4949|     42|            [&](const auto& rng) {
 4950|     42|                return read_string_impl(rng, read_all(rng), value);
 4951|     42|            },
 4952|     42|            detail::priority_tag<1>{});
 4953|     42|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     42|    {
 4974|     42|        return read_cb(range);
 4975|     42|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     42|            [&](const auto& rng) {
 4950|     42|                return read_string_impl(rng, read_all(rng), value);
 4951|     42|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    234|    {
 5048|    234|        auto it = read_source_impl(range, {specs});
 5049|    234|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 226]
  |  |  ------------------
  ------------------
 5050|      8|            return unexpected(it.error());
 5051|      8|        }
 5052|       |
 5053|    226|        return read_string_impl(range, *it, value);
 5054|    234|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    226|{
 4752|    226|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    226|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    226|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 94, False: 132]
  ------------------
 4756|     94|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     94|                                     "Invalid encoding in scanned string");
 4758|     94|    }
 4759|    132|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    132|    static_cast<    \
  |  |  929|    132|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    132|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 132]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    132|    return SCN_MOVE(result);
  ------------------
  |  |  928|    132|    static_cast<    \
  |  |  929|    132|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    132|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     48|    {
 4891|     48|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|     48|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     48|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     48|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     48|    }                                                  \
  |  |  |  | 3667|     48|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     48|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  4.57k|    {
 5277|  4.57k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.57k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.57k|        return read_impl(range, specs, value);
 5279|  4.57k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  4.57k|    {
 5295|  4.57k|        SCN_CLANG_PUSH
 5296|  4.57k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.57k|        switch (m_type) {
 5299|    266|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 266, False: 4.30k]
  ------------------
 5300|    266|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 4.52k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.57k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    970|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 970, False: 3.60k]
  ------------------
 5310|    970|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    970|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.09k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.09k, False: 1.48k]
  ------------------
 5315|  3.09k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.09k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.09k|                    specs.regexp_flags, value);
 5318|       |
 5319|    198|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 198, False: 4.37k]
  ------------------
 5320|    198|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    198|                    range,
 5322|    198|                    get_unescaped_regex_pattern(
 5323|    198|                        specs.charset_string<SourceCharT>()),
 5324|    198|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.57k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.57k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.57k|        }
 5331|       |
 5332|  4.57k|        SCN_CLANG_POP
 5333|  4.57k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    918|    {
 4820|    918|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    918|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    964|{
 4752|    964|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    964|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    964|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 316, False: 648]
  ------------------
 4756|    316|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    316|                                     "Invalid encoding in scanned string");
 4758|    316|    }
 4759|    648|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    648|    static_cast<    \
  |  |  929|    648|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    648|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    648|    return SCN_MOVE(result);
  ------------------
  |  |  928|    648|    static_cast<    \
  |  |  929|    648|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    648|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.77k|{
 3012|  1.77k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.77k|        dest.assign(source.view());
 3014|  1.77k|    }
 3015|  1.77k|    else {
 3016|  1.77k|        return transcode_impl(source.view(), dest);
 3017|  1.77k|    }
 3018|       |
 3019|      0|    return {};
 3020|  1.77k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 14]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    722|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    722|              cvref<T> obj = *get<T>(fn);
  745|    722|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    722|                  obj(static_cast<decltype(args)>(args)...);
  747|    722|              }
  748|    722|              else {
  749|    722|                  return obj(static_cast<decltype(args)>(args)...);
  750|    722|              }
  751|    722|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    722|    {
  684|    722|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    722|            return static_cast<T*>(s.m_cp);
  686|    722|        }
  687|    722|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    722|            return static_cast<T*>(s.m_p);
  689|    722|        }
  690|    722|        else {
  691|    722|            return reinterpret_cast<T*>(s.m_fp);
  692|    722|        }
  693|    722|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    722|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    970|    {
 5048|    970|        auto it = read_source_impl(range, {specs});
 5049|    970|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    970|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 280, False: 690]
  |  |  ------------------
  ------------------
 5050|    280|            return unexpected(it.error());
 5051|    280|        }
 5052|       |
 5053|    690|        return read_string_impl(range, *it, value);
 5054|    970|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.24k|{
 4752|  1.24k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.24k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.24k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 114, False: 1.12k]
  ------------------
 4756|    114|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    114|                                     "Invalid encoding in scanned string");
 4758|    114|    }
 4759|  1.12k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.12k|    static_cast<    \
  |  |  929|  1.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.12k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.12k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.12k|    static_cast<    \
  |  |  929|  1.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.12k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.29k|    {
 4891|  3.29k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  3.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.74k, False: 550]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.74k|    }                                                  \
  |  |  |  | 3667|  3.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    550|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    550|        return read_string_impl(range, it, value);
 4893|  3.29k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|  5.94k|{
 5809|  5.94k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  5.94k|        return reader_impl_for_bool<CharT>{};
 5811|  5.94k|    }
 5812|  5.94k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  5.94k|        return reader_impl_for_char<CharT>{};
 5814|  5.94k|    }
 5815|  5.94k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  5.94k|        return reader_impl_for_wchar<CharT>{};
 5817|  5.94k|    }
 5818|  5.94k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  5.94k|        return reader_impl_for_code_point<CharT>{};
 5820|  5.94k|    }
 5821|  5.94k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  5.94k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  5.94k|        return reader_impl_for_string<CharT>{};
 5824|  5.94k|    }
 5825|  5.94k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  5.94k|                       std::is_same_v<T, std::wstring>) {
 5827|  5.94k|        return reader_impl_for_string<CharT>{};
 5828|  5.94k|    }
 5829|  5.94k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  5.94k|                       std::is_same_v<T, wregex_matches>) {
 5831|  5.94k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  5.94k|    }
 5833|  5.94k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  5.94k|        return reader_impl_for_voidptr<CharT>{};
 5835|  5.94k|    }
 5836|  5.94k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  5.94k|        return reader_impl_for_float<CharT>{};
 5838|  5.94k|    }
 5839|  5.94k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  5.94k|                       !std::is_same_v<T, wchar_t> &&
 5841|  5.94k|                       !std::is_same_v<T, char32_t> &&
 5842|  5.94k|                       !std::is_same_v<T, bool>) {
 5843|  5.94k|        return reader_impl_for_int<CharT>{};
 5844|  5.94k|    }
 5845|  5.94k|    else {
 5846|  5.94k|        return reader_impl_for_monostate<CharT>{};
 5847|  5.94k|    }
 5848|  5.94k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    600|    {
 5277|    600|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    600|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    600|        return read_impl(range, specs, value);
 5279|    600|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    600|    {
 5295|    600|        SCN_CLANG_PUSH
 5296|    600|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    600|        switch (m_type) {
 5299|    224|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 224, False: 376]
  ------------------
 5300|    224|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 52, False: 548]
  ------------------
 5303|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     52|                                                                   value);
 5305|       |
 5306|     42|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 42, False: 558]
  ------------------
 5307|     42|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    234|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 234, False: 366]
  ------------------
 5310|    234|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    234|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 598]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|     46|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 46, False: 554]
  ------------------
 5320|     46|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     46|                    range,
 5322|     46|                    get_unescaped_regex_pattern(
 5323|     46|                        specs.charset_string<SourceCharT>()),
 5324|     46|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 600]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    600|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    600|        }
 5331|       |
 5332|    600|        SCN_CLANG_POP
 5333|    600|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    224|    {
 4827|    224|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    224|                                     value);
 4829|    224|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    318|{
 4773|    318|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    318|    auto src = [&]() {
 4776|    318|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    318|            return make_contiguous_buffer(
 4778|    318|                ranges::subrange{range.begin().base(), result.base()});
 4779|    318|        }
 4780|    318|        else {
 4781|    318|            return make_contiguous_buffer(
 4782|    318|                ranges::subrange{range.begin(), result});
 4783|    318|        }
 4784|    318|    }();
 4785|    318|    using src_type = decltype(src);
 4786|       |
 4787|    318|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    318|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    318|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    318|                                     "Cannot read a string_view from "
 4796|    318|                                     "this source range (would require "
 4797|    318|                                     "transcoding)");
 4798|    318|    }
 4799|    318|    else {
 4800|    318|        const auto view = src.view();
 4801|    318|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    318|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 146, False: 172]
  ------------------
 4804|    146|            return unexpected_scan_error(
 4805|    146|                scan_error::invalid_scanned_value,
 4806|    146|                "Invalid encoding in scanned string_view");
 4807|    146|        }
 4808|       |
 4809|    172|        return SCN_MOVE(result);
  ------------------
  |  |  928|    172|    static_cast<    \
  |  |  929|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    318|    }
 4811|    318|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    318|    auto src = [&]() {
 4776|    318|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    318|            return make_contiguous_buffer(
 4778|    318|                ranges::subrange{range.begin().base(), result.base()});
 4779|    318|        }
 4780|    318|        else {
 4781|    318|            return make_contiguous_buffer(
 4782|    318|                ranges::subrange{range.begin(), result});
 4783|    318|        }
 4784|    318|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     52|    {
 4863|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 36, False: 16]
  ------------------
 4864|     36|            return read_string_view_impl(
 4865|     36|                range,
 4866|     36|                read_until_code_unit(
 4867|     36|                    range,
 4868|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     36|                        SourceCharT ch) { return ch == until; }),
 4870|     36|                value);
 4871|     36|        }
 4872|     16|        return read_string_view_impl(
 4873|     16|            range,
 4874|     16|            read_until_code_units(
 4875|     16|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     16|            value);
 4877|     52|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_:
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  1.55k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.55k|              cvref<T> obj = *get<T>(fn);
  745|  1.55k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.55k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.55k|              }
  748|  1.55k|              else {
  749|  1.55k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.55k|              }
  751|  1.55k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.55k|    {
  684|  1.55k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.55k|            return static_cast<T*>(s.m_cp);
  686|  1.55k|        }
  687|  1.55k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.55k|            return static_cast<T*>(s.m_p);
  689|  1.55k|        }
  690|  1.55k|        else {
  691|  1.55k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.55k|        }
  693|  1.55k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4869|  1.55k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     42|    {
 4959|     42|        return read_impl(
 4960|     42|            range,
 4961|     42|            [&](const auto& rng) {
 4962|     42|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     42|            },
 4964|     42|            detail::priority_tag<1>{});
 4965|     42|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     42|    {
 4974|     42|        return read_cb(range);
 4975|     42|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     42|            [&](const auto& rng) {
 4962|     42|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     42|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5061|    234|    {
 5062|    234|        auto it = read_source_impl(range, {specs});
 5063|    234|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 226]
  |  |  ------------------
  ------------------
 5064|      8|            return unexpected(it.error());
 5065|      8|        }
 5066|       |
 5067|    226|        return read_string_view_impl(range, *it, value);
 5068|    234|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4772|    226|{
 4773|    226|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    226|    auto src = [&]() {
 4776|    226|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    226|            return make_contiguous_buffer(
 4778|    226|                ranges::subrange{range.begin().base(), result.base()});
 4779|    226|        }
 4780|    226|        else {
 4781|    226|            return make_contiguous_buffer(
 4782|    226|                ranges::subrange{range.begin(), result});
 4783|    226|        }
 4784|    226|    }();
 4785|    226|    using src_type = decltype(src);
 4786|       |
 4787|    226|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    226|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    226|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    226|                                     "Cannot read a string_view from "
 4796|    226|                                     "this source range (would require "
 4797|    226|                                     "transcoding)");
 4798|    226|    }
 4799|    226|    else {
 4800|    226|        const auto view = src.view();
 4801|    226|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    226|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 94, False: 132]
  ------------------
 4804|     94|            return unexpected_scan_error(
 4805|     94|                scan_error::invalid_scanned_value,
 4806|     94|                "Invalid encoding in scanned string_view");
 4807|     94|        }
 4808|       |
 4809|    132|        return SCN_MOVE(result);
  ------------------
  |  |  928|    132|    static_cast<    \
  |  |  929|    132|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    226|    }
 4811|    226|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4775|    226|    auto src = [&]() {
 4776|    226|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    226|            return make_contiguous_buffer(
 4778|    226|                ranges::subrange{range.begin().base(), result.base()});
 4779|    226|        }
 4780|    226|        else {
 4781|    226|            return make_contiguous_buffer(
 4782|    226|                ranges::subrange{range.begin(), result});
 4783|    226|        }
 4784|    226|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|     48|    {
 4902|     48|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|     48|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     48|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     48|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     48|    }                                                  \
  |  |  |  | 3667|     48|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|     48|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  4.57k|    {
 5277|  4.57k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.57k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.57k|        return read_impl(range, specs, value);
 5279|  4.57k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  4.57k|    {
 5295|  4.57k|        SCN_CLANG_PUSH
 5296|  4.57k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.57k|        switch (m_type) {
 5299|    266|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 266, False: 4.30k]
  ------------------
 5300|    266|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 4.52k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.57k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    970|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 970, False: 3.60k]
  ------------------
 5310|    970|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    970|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.09k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.09k, False: 1.48k]
  ------------------
 5315|  3.09k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.09k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.09k|                    specs.regexp_flags, value);
 5318|       |
 5319|    198|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 198, False: 4.37k]
  ------------------
 5320|    198|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    198|                    range,
 5322|    198|                    get_unescaped_regex_pattern(
 5323|    198|                        specs.charset_string<SourceCharT>()),
 5324|    198|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.57k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.57k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.57k|        }
 5331|       |
 5332|  4.57k|        SCN_CLANG_POP
 5333|  4.57k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    918|    {
 4827|    918|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    918|                                     value);
 4829|    918|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|    964|{
 4773|    964|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    964|    auto src = [&]() {
 4776|    964|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    964|            return make_contiguous_buffer(
 4778|    964|                ranges::subrange{range.begin().base(), result.base()});
 4779|    964|        }
 4780|    964|        else {
 4781|    964|            return make_contiguous_buffer(
 4782|    964|                ranges::subrange{range.begin(), result});
 4783|    964|        }
 4784|    964|    }();
 4785|    964|    using src_type = decltype(src);
 4786|       |
 4787|    964|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    964|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    964|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    964|                                     "Cannot read a string_view from "
 4796|    964|                                     "this source range (would require "
 4797|    964|                                     "transcoding)");
 4798|    964|    }
 4799|    964|    else {
 4800|    964|        const auto view = src.view();
 4801|    964|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    964|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 316, False: 648]
  ------------------
 4804|    316|            return unexpected_scan_error(
 4805|    316|                scan_error::invalid_scanned_value,
 4806|    316|                "Invalid encoding in scanned string_view");
 4807|    316|        }
 4808|       |
 4809|    648|        return SCN_MOVE(result);
  ------------------
  |  |  928|    648|    static_cast<    \
  |  |  929|    648|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    964|    }
 4811|    964|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|    964|    auto src = [&]() {
 4776|    964|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    964|            return make_contiguous_buffer(
 4778|    964|                ranges::subrange{range.begin().base(), result.base()});
 4779|    964|        }
 4780|    964|        else {
 4781|    964|            return make_contiguous_buffer(
 4782|    964|                ranges::subrange{range.begin(), result});
 4783|    964|        }
 4784|    964|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     46|    {
 4863|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 32, False: 14]
  ------------------
 4864|     32|            return read_string_view_impl(
 4865|     32|                range,
 4866|     32|                read_until_code_unit(
 4867|     32|                    range,
 4868|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     32|                        SourceCharT ch) { return ch == until; }),
 4870|     32|                value);
 4871|     32|        }
 4872|     14|        return read_string_view_impl(
 4873|     14|            range,
 4874|     14|            read_until_code_units(
 4875|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     14|            value);
 4877|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES14_c:
  743|    722|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    722|              cvref<T> obj = *get<T>(fn);
  745|    722|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    722|                  obj(static_cast<decltype(args)>(args)...);
  747|    722|              }
  748|    722|              else {
  749|    722|                  return obj(static_cast<decltype(args)>(args)...);
  750|    722|              }
  751|    722|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    722|    {
  684|    722|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    722|            return static_cast<T*>(s.m_cp);
  686|    722|        }
  687|    722|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    722|            return static_cast<T*>(s.m_p);
  689|    722|        }
  690|    722|        else {
  691|    722|            return reinterpret_cast<T*>(s.m_fp);
  692|    722|        }
  693|    722|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4869|    722|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    970|    {
 5062|    970|        auto it = read_source_impl(range, {specs});
 5063|    970|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    970|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 280, False: 690]
  |  |  ------------------
  ------------------
 5064|    280|            return unexpected(it.error());
 5065|    280|        }
 5066|       |
 5067|    690|        return read_string_view_impl(range, *it, value);
 5068|    970|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  1.24k|{
 4773|  1.24k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.24k|    auto src = [&]() {
 4776|  1.24k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.24k|            return make_contiguous_buffer(
 4778|  1.24k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.24k|        }
 4780|  1.24k|        else {
 4781|  1.24k|            return make_contiguous_buffer(
 4782|  1.24k|                ranges::subrange{range.begin(), result});
 4783|  1.24k|        }
 4784|  1.24k|    }();
 4785|  1.24k|    using src_type = decltype(src);
 4786|       |
 4787|  1.24k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.24k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.24k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.24k|                                     "Cannot read a string_view from "
 4796|  1.24k|                                     "this source range (would require "
 4797|  1.24k|                                     "transcoding)");
 4798|  1.24k|    }
 4799|  1.24k|    else {
 4800|  1.24k|        const auto view = src.view();
 4801|  1.24k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.24k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 114, False: 1.12k]
  ------------------
 4804|    114|            return unexpected_scan_error(
 4805|    114|                scan_error::invalid_scanned_value,
 4806|    114|                "Invalid encoding in scanned string_view");
 4807|    114|        }
 4808|       |
 4809|  1.12k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.12k|    static_cast<    \
  |  |  929|  1.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.24k|    }
 4811|  1.24k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  1.24k|    auto src = [&]() {
 4776|  1.24k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.24k|            return make_contiguous_buffer(
 4778|  1.24k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.24k|        }
 4780|  1.24k|        else {
 4781|  1.24k|            return make_contiguous_buffer(
 4782|  1.24k|                ranges::subrange{range.begin(), result});
 4783|  1.24k|        }
 4784|  1.24k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  3.29k|    {
 4902|  3.29k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  3.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.74k, False: 550]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.74k|    }                                                  \
  |  |  |  | 3667|  3.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    550|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    550|        return read_string_view_impl(range, it, value);
 4904|  3.29k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5623|  1.32k|    {
 5624|  1.32k|        reader_error_handler eh{};
 5625|  1.32k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  1.32k|            detail::check_code_point_type_specs(specs, eh);
 5627|  1.32k|        }
 5628|  1.32k|        else {
 5629|  1.32k|            detail::check_char_type_specs(specs, eh);
 5630|  1.32k|        }
 5631|  1.32k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 810, False: 518]
  |  |  ------------------
  ------------------
 5632|    810|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|    810|        }
 5634|    518|        return {};
 5635|  1.32k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  6.80k|    {
  763|  6.80k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  6.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  6.80k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.45k|    {
  754|  1.45k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  1.62k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.62k|              cvref<T> obj = *get<T>(fn);
  745|  1.62k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.62k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.62k|              }
  748|  1.62k|              else {
  749|  1.62k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.62k|              }
  751|  1.62k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.62k|    {
  684|  1.62k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.62k|            return static_cast<T*>(s.m_cp);
  686|  1.62k|        }
  687|  1.62k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.62k|            return static_cast<T*>(s.m_p);
  689|  1.62k|        }
  690|  1.62k|        else {
  691|  1.62k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.62k|        }
  693|  1.62k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  1.45k|        {
  662|  1.45k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5618|  1.54k|    {
 5619|  1.54k|        return false;
 5620|  1.54k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|     32|    {
 1780|     32|        auto stdloc = loc.get<std::locale>();
 1781|     32|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     32|        grouping = numpunct.grouping();
 1783|     32|        thousands_sep =
 1784|     32|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 32]
  ------------------
 1785|     32|        decimal_point = numpunct.decimal_point();
 1786|     32|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|     42|{
 1717|     42|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 42, False: 0]
  ------------------
 1718|     42|        return std::use_facet<Facet>(stdloc);
 1719|     42|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     42|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  3.15k|{
 2349|  3.15k|    size_t count{0};
 2350|  3.15k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  3.15k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  3.15k|    });
 2353|  3.15k|    return count;
 2354|  3.15k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  3.15k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  3.15k|    auto it = input.begin();
 1448|  8.99k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 5.83k, False: 3.15k]
  ------------------
 1449|  5.83k|        auto res = get_next_code_point(
 1450|  5.83k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  5.83k|        cb(res.value);
 1452|  5.83k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  5.83k|    }
 1454|  3.15k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   158k|{
 1169|   158k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   158k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   158k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 158k]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   158k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 158k]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   158k|    return {input.begin() + len,
 1181|   158k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   158k|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  3.15k|    {
  754|  3.15k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  5.83k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.83k|              cvref<T> obj = *get<T>(fn);
  745|  5.83k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.83k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.83k|              }
  748|  5.83k|              else {
  749|  5.83k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.83k|              }
  751|  5.83k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  5.83k|    {
  684|  5.83k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.83k|            return static_cast<T*>(s.m_cp);
  686|  5.83k|        }
  687|  5.83k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.83k|            return static_cast<T*>(s.m_p);
  689|  5.83k|        }
  690|  5.83k|        else {
  691|  5.83k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.83k|        }
  693|  5.83k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  5.83k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  5.83k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  5.83k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  3.15k|        {
  662|  3.15k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  2.14k|    {
 1582|  2.14k|        return m_view;
 1583|  2.14k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  2.42k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2381|  8.98k|    {
 2382|  8.98k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2420|    232|    {
 2421|    232|        return m_multibyte_left;
 2422|    232|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2425|  47.5k|    {
 2426|  47.5k|        return *m_current;
 2427|  47.5k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2434|  30.8k|    {
 2435|  30.8k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  30.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  30.8k|        _increment_current();
 2437|  30.8k|        return *this;
 2438|  30.8k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2667|  30.8k|    {
 2668|  30.8k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 30.8k, False: 0]
  ------------------
 2669|  30.8k|            auto cplen = _get_cp_length_at_current();
 2670|  30.8k|            m_multibyte_left = cplen - 1;
 2671|  30.8k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  30.8k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  30.8k|        ++m_current;
 2678|  30.8k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2638|  30.8k|    {
 2639|  30.8k|        return static_cast<difference_type>(
 2640|  30.8k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  30.8k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2644|  30.8k|    {
 2645|  30.8k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 30.8k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  30.8k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 30.8k, False: 0]
  ------------------
 2650|  30.8k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  30.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  30.8k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  30.8k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  30.8k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  5.59k|{
 1857|  5.59k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  5.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  5.59k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  5.59k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  5.59k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 134, False: 5.46k]
  ------------------
 1862|    134|            return unexpected(eof_error::eof);
 1863|    134|        }
 1864|       |
 1865|  5.46k|        return ranges::next(range.begin(), count);
 1866|  5.59k|    }
 1867|  5.59k|    else {
 1868|  5.59k|        auto it = range.begin();
 1869|  5.59k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  5.59k|            return ranges::next(it, count);
 1871|  5.59k|        }
 1872|       |
 1873|  5.59k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  5.59k|            if (it == range.end()) {
 1875|  5.59k|                return unexpected(eof_error::eof);
 1876|  5.59k|            }
 1877|  5.59k|        }
 1878|       |
 1879|  5.59k|        return it;
 1880|  5.59k|    }
 1881|  5.59k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  11.1k|    {
 2531|  11.1k|        return !(a == b);
 2532|  11.1k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  11.7k|    {
 2523|  11.7k|        return a.m_current == b.m_current;
 2524|  11.7k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1889|  16.7k|    {
 1890|  16.7k|        return !codepoint.empty();
 1891|  16.7k|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  46.4k|{
 1899|  46.4k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  46.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  46.4k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  46.4k|    auto it = range.begin();
 1903|  46.4k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  46.4k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.4k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  46.4k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 46.4k, False: 0]
  ------------------
 1912|  46.4k|        ++it;
 1913|  46.4k|        return {it, string_type(1, *range.begin())};
 1914|  46.4k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  46.4k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  66.8k|{
  944|  66.8k|    return is_range_eof(r.begin(), r.end());
  945|  66.8k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   219k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   219k|    {
  937|   219k|        return begin == end;
  938|   219k|    }
  939|   219k|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    886|    {
  190|    886|        i = std::move(bound);
  191|    886|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  46.4k|    {
 1890|  46.4k|        return !codepoint.empty();
 1891|  46.4k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  20.4k|{
  950|  20.4k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  20.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.4k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  20.4k|    return eof_error::good;
  954|  20.4k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  2.91k|    {
 2832|  2.91k|        return take_width_view{r, n};
 2833|  2.91k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2800|  2.91k|    {
 2801|  2.91k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2713|  2.91k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5698|    162|    {
 5699|    162|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 158, False: 4]
  ------------------
 5700|    162|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 4]
  ------------------
 5701|    158|            return read_default(range, value, loc);
 5702|    158|        }
 5703|       |
 5704|      4|        reader_impl_for_int<CharT> reader{};
 5705|      4|        using integer_type =
 5706|      4|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|      4|        integer_type tmp_value{};
 5708|      4|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|      4|        value = static_cast<integer_type>(value);
 5710|      4|        return ret;
 5711|    162|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5682|    158|    {
 5683|    158|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    158|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    158|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    158|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    158|        }
 5687|    158|        else {
 5688|    158|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    158|        }
 5690|    158|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5563|    158|    {
 5564|    158|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 158]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    158|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    158|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    158|        ch = *range.begin();
 5566|    158|        return it;
 5567|    158|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.13k|{
 1846|  1.13k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.13k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.13k|    return ranges::next(range.begin());
 1851|  1.13k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|  1.13k|{
  950|  1.13k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.13k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.13k|    return eof_error::good;
  954|  1.13k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|  1.13k|{
  944|  1.13k|    return is_range_eof(r.begin(), r.end());
  945|  1.13k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  18.9k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  18.9k|    {
  937|  18.9k|        return begin == end;
  938|  18.9k|    }
  939|  18.9k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  40.3k|        {
 2770|  40.3k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 232, False: 40.1k]
  |  Branch (2770:39): [True: 232, False: 0]
  ------------------
 2771|  40.3k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 264, False: 39.8k]
  ------------------
 2772|  40.3k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2815|  8.47k|    {
 2816|  8.47k|        return sentinel<true>{m_base.get().end()};
 2817|  8.47k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2716|  26.4k|    {
 2717|  26.4k|        return view;
 2718|  26.4k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2750|  8.47k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.13k|    {
  296|  1.13k|        ++x;
  297|  1.13k|        return x;
  298|  1.13k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2809|  8.98k|    {
 2810|  8.98k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  8.98k|                                      m_count};
 2812|  8.98k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    166|    {
 3539|    166|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    166|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    166|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    166|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 166]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    166|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    166|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    166|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    166|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 166]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    166|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 166]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    166|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    166|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 166, False: 0]
  |  |  ------------------
  ------------------
 3565|    166|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    166|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    166|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    166|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 166, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    166|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    166|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    166|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    166|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    166|    }                                                  \
  |  |  |  | 3667|    166|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    486|{
 3326|    486|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|    486|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    486|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    486|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    486|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 486]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    486|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    486|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    486|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    486|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    486|        parse_integer_base_prefix(
 3331|    486|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    486|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 486]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    486|    else {
 3343|    486|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 486]
  |  Branch (3343:13): [True: 486, False: 0]
  ------------------
 3344|    486|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 486, False: 0]
  ------------------
 3345|    486|            digits_begin_it = base_prefix_begin_it;
 3346|    486|        }
 3347|    486|    }
 3348|       |
 3349|    486|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 486, False: 0]
  ------------------
 3350|    486|        sign = sign_type::plus_sign;
 3351|    486|    }
 3352|    486|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    486|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    486|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|    650|{
 3141|    650|    auto r = read_one_of_code_unit(range, "+-");
 3142|    650|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 650, False: 0]
  ------------------
 3143|    650|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 650, False: 0]
  ------------------
 3144|    650|            return std::pair{range.begin(), sign_type::default_sign};
 3145|    650|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|    650|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|    650|{
 2272|    650|    auto it = read_code_unit(range);
 2273|    650|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    650|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 650]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  1.30k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.30k, False: 650]
  ------------------
 2278|  1.30k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 1.30k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  1.30k|    }
 2282|       |
 2283|    650|    return unexpected(parse_error::error);
 2284|    650|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    486|{
 3293|    486|    switch (base) {
 3294|      0|        case 2:
  ------------------
  |  Branch (3294:9): [True: 0, False: 486]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      0|                    false};
 3298|       |
 3299|      0|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 0, False: 486]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|      0|            bool zero_parsed = false;
 3302|      0|            auto it = apply_opt(
 3303|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|      0|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    170|        case 16:
  ------------------
  |  Branch (3307:9): [True: 170, False: 316]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    170|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    170|                    false};
 3311|       |
 3312|      0|        case 0:
  ------------------
  |  Branch (3312:9): [True: 0, False: 486]
  ------------------
 3313|       |            // detect base
 3314|      0|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    316|        default:
  ------------------
  |  Branch (3316:9): [True: 316, False: 170]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    316|            return {range.begin(), base, false};
 3319|    486|    }
 3320|    486|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    170|{
 2291|    170|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 170, False: 0]
  ------------------
 2292|    170|        return range.begin();
 2293|    170|    }
 2294|      0|    return *result;
 2295|    170|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|    660|{
 2231|    660|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|    660|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|    660|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|    660|        if (range.size() < str.size()) {
 2236|    660|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|    660|        }
 2238|    660|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|    660|            return unexpected(parse_error::error);
 2240|    660|        }
 2241|    660|        return ranges::next(range.begin(), str.size());
 2242|    660|    }
 2243|    660|    else {
 2244|    660|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    660|            if (ch < 'A' || ch > 'Z') {
 2246|    660|                return ch;
 2247|    660|            }
 2248|    660|            return static_cast<char_type>(ch +
 2249|    660|                                          static_cast<char_type>('a' - 'A'));
 2250|    660|        };
 2251|       |
 2252|    660|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 74, False: 586]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     74|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     74|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     74|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     74|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     74|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    586|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    586|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    586|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    586|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    586|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 586, False: 0]
  |  |  ------------------
  ------------------
 2257|    586|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    586|                    return ascii_tolower(a) ==
 2259|    586|                           static_cast<detail::char_t<Range>>(b);
 2260|    586|                }))) {
 2261|    586|            return unexpected(parse_error::error);
 2262|    586|        }
 2263|       |
 2264|      0|        return it;
 2265|    586|    }
 2266|    660|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|    660|{
 1857|    660|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    660|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    660|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    660|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    660|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    660|        if (sz < count) {
 1862|    660|            return unexpected(eof_error::eof);
 1863|    660|        }
 1864|       |
 1865|    660|        return ranges::next(range.begin(), count);
 1866|    660|    }
 1867|    660|    else {
 1868|    660|        auto it = range.begin();
 1869|    660|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 660]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  2.20k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.61k, False: 586]
  ------------------
 1874|  1.61k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 74, False: 1.54k]
  ------------------
 1875|     74|                return unexpected(eof_error::eof);
 1876|     74|            }
 1877|  1.61k|        }
 1878|       |
 1879|    586|        return it;
 1880|    660|    }
 1881|    660|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|    660|{
 1095|    660|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    660|        return r.size();
 1097|    660|    }
 1098|    660|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    660|                           ranges::const_iterator_t<Range>,
 1100|    660|                           typename detail::basic_scan_buffer<
 1101|    660|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    660|        if constexpr (ranges::common_range<Range>) {
 1103|    660|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    660|        }
 1105|    660|        else {
 1106|    660|            if (r.begin().stores_parent()) {
 1107|    660|                return static_cast<size_t>(
 1108|    660|                    r.begin().parent()->chars_available() -
 1109|    660|                    r.begin().position());
 1110|    660|            }
 1111|    660|            return r.begin().contiguous_segment().size();
 1112|    660|        }
 1113|    660|    }
 1114|    660|    else {
 1115|    660|        return 0;
 1116|    660|    }
 1117|    660|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2244|    586|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    586|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 0, False: 586]
  |  Branch (2245:29): [True: 586, False: 0]
  ------------------
 2246|    586|                return ch;
 2247|    586|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    586|        };
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.15k|{
  950|  1.15k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.15k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.15k|    return eof_error::good;
  954|  1.15k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  17.8k|{
  944|  17.8k|    return is_range_eof(r.begin(), r.end());
  945|  17.8k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    170|{
 3251|    170|    return read_matching_string_classic_nocase(range, "0x");
 3252|    170|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    486|{
 3360|    486|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    486|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    486|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    486|            return unexpected_scan_error(
 3365|    486|                scan_error::invalid_scanned_value,
 3366|    486|                "Failed to parse integer: No digits found");
 3367|    486|        }
 3368|    486|        return range.end();
 3369|    486|    }
 3370|    486|    else {
 3371|    486|        return read_while1_code_unit(range,
 3372|    486|                                     [&](char_type ch) noexcept {
 3373|    486|                                         return char_to_int(ch) < base;
 3374|    486|                                     })
 3375|    486|            .transform_error(map_parse_error_to_scan_error(
 3376|    486|                scan_error::invalid_scanned_value,
 3377|    486|                "Failed to parse integer: No digits found"));
 3378|    486|    }
 3379|    486|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|    650|{
 1996|    650|    auto it = read_while_code_unit(range, pred);
 1997|    650|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 650, False: 0]
  ------------------
 1998|    650|        return unexpected(parse_error::error);
 1999|    650|    }
 2000|      0|    return it;
 2001|    650|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|    650|{
 1976|    650|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    650|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|    650|{
 1957|    650|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    650|        return std::find_if(range.begin(), range.end(), pred);
 1959|    650|    }
 1960|    650|    else {
 1961|    650|        auto first = range.begin();
 1962|    650|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 650, False: 0]
  ------------------
 1963|    650|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 650, False: 0]
  ------------------
 1964|    650|                return first;
 1965|    650|            }
 1966|    650|        }
 1967|      0|        return first;
 1968|    650|    }
 1969|    650|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  17.9k|        {
 2781|  17.9k|            return !(y == x);
 2782|  17.9k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_:
  753|    486|    {
  754|    486|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|    486|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    486|                  obj(static_cast<decltype(args)>(args)...);
  747|    486|              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|    486|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    486|            return static_cast<T*>(s.m_cp);
  686|    486|        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    486|            return static_cast<T*>(s.m_p);
  689|    486|        }
  690|    486|        else {
  691|    486|            return reinterpret_cast<T*>(s.m_fp);
  692|    486|        }
  693|    486|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3372|    486|                                     [&](char_type ch) noexcept {
 3373|    486|                                         return char_to_int(ch) < base;
 3374|    486|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_LPv0EEEPSP_:
  661|    486|        {
  662|    486|        }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1682|    316|{
 1683|    316|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|    316|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|    316|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|    316|        return string_view_wrapper{SCN_FWD(range)};
 1687|    316|    }
 1688|    316|    else {
 1689|    316|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|    316|    }
 1691|    316|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EELPv0EEEOT_:
 1536|    316|    {
 1537|    316|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|    316|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1620|    316|    {
 1621|    316|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    316|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    316|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    316|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    316|            m_storage.reset();
 1627|    316|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    316|        }
 1629|    316|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|    316|                                          std::basic_string<CharT>>) {
 1631|    316|            m_storage.emplace(SCN_FWD(range));
 1632|    316|            m_view = string_view_type{*m_storage};
 1633|    316|        }
 1634|    316|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|    316|                                          typename detail::basic_scan_buffer<
 1636|    316|                                              value_t>::forward_iterator> &&
 1637|    316|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|    316|            auto beg_seg = range.begin().contiguous_segment();
 1639|    316|            auto end_seg = range.end().contiguous_segment();
 1640|    316|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    316|                             detail::to_address(end_seg.end()))) {
 1642|    316|                auto& str = m_storage.emplace();
 1643|    316|                str.reserve(range.end().position() - range.begin().position());
 1644|    316|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    316|                m_view = string_view_type{str};
 1646|    316|                return;
 1647|    316|            }
 1648|       |
 1649|    316|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    316|                                                            end_seg.data());
 1651|    316|            m_storage.reset();
 1652|    316|        }
 1653|    316|        else {
 1654|    316|            auto& str = m_storage.emplace();
 1655|    316|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|    316|                str.reserve(range.size());
 1657|    316|            }
 1658|    316|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|    316|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    316|                          std::back_inserter(str));
 1661|    316|            }
 1662|    316|            else {
 1663|    316|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    316|                     ++it) {
 1665|    316|                    str.push_back(*it);
 1666|    316|                }
 1667|    316|            }
 1668|    316|            m_view = string_view_type{str};
 1669|    316|        }
 1670|    316|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2412|  42.2k|    {
 2413|  42.2k|        return m_current;
 2414|  42.2k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2416|  42.1k|    {
 2417|  42.1k|        return m_count;
 2418|  42.1k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5698|    356|    {
 5699|    356|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 340, False: 16]
  ------------------
 5700|    356|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 16]
  ------------------
 5701|    340|            return read_default(range, value, loc);
 5702|    340|        }
 5703|       |
 5704|     16|        reader_impl_for_int<CharT> reader{};
 5705|     16|        using integer_type =
 5706|     16|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     16|        integer_type tmp_value{};
 5708|     16|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     16|        value = static_cast<integer_type>(value);
 5710|     16|        return ret;
 5711|    356|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5682|    870|    {
 5683|    870|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    870|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    870|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    870|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    870|        }
 5687|    870|        else {
 5688|    870|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    870|        }
 5690|    870|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5563|    870|    {
 5564|    870|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    870|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    870|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    870|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    870|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 870]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    870|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    870|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    870|        ch = *range.begin();
 5566|    870|        return it;
 5567|    870|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.26k|{
 1846|  6.26k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.26k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.26k|    return ranges::next(range.begin());
 1851|  6.26k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  97.5k|    {
  296|  97.5k|        ++x;
  297|  97.5k|        return x;
  298|  97.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    384|    {
 3539|    384|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    384|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    384|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    384|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 384]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    384|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    384|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    384|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 384]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    384|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 384]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    384|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    384|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 372, False: 12]
  |  |  ------------------
  ------------------
 3565|    372|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    372|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    372|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    372|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 372]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    372|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    372|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    372|                    parse_integer_digits_without_thsep(
 3567|    372|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    372|                        prefix_result.parsed_base));
 3569|       |
 3570|    372|            auto buf = make_contiguous_buffer(
 3571|    372|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    372|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    372|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    372|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    372|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 372, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    372|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    372|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    372|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    372|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    372|    }                                                  \
  |  |  |  | 3667|    372|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    372|        }
 3580|       |
 3581|     12|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     12|            localized_number_formatting_options<CharT>{loc};
 3586|     12|#endif
 3587|       |
 3588|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.68k|{
 3326|  2.68k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|  2.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.68k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.68k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.68k|        parse_integer_base_prefix(
 3331|  2.68k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.68k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.68k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.68k|    else {
 3343|  2.68k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.68k]
  ------------------
 3344|  2.68k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.68k, False: 0]
  ------------------
 3345|  2.68k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.68k|        }
 3347|  2.68k|    }
 3348|       |
 3349|  2.68k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.68k, False: 0]
  ------------------
 3350|  2.68k|        sign = sign_type::plus_sign;
 3351|  2.68k|    }
 3352|  2.68k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.68k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.68k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.57k|{
 3141|  3.57k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.57k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.57k, False: 0]
  ------------------
 3143|  3.57k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.57k, False: 0]
  ------------------
 3144|  3.57k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.57k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.57k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.57k|{
 2272|  3.57k|    auto it = read_code_unit(range);
 2273|  3.57k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.57k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.15k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.15k, False: 3.57k]
  ------------------
 2278|  7.15k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.15k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.15k|    }
 2282|       |
 2283|  3.57k|    return unexpected(parse_error::error);
 2284|  3.57k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.68k|{
 3293|  2.68k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 2.67k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     14|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 14, False: 2.67k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     14|            bool zero_parsed = false;
 3302|     14|            auto it = apply_opt(
 3303|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     14|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    878|        case 16:
  ------------------
  |  Branch (3307:9): [True: 878, False: 1.80k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    878|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    878|                    false};
 3311|       |
 3312|      6|        case 0:
  ------------------
  |  Branch (3312:9): [True: 6, False: 2.67k]
  ------------------
 3313|       |            // detect base
 3314|      6|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.78k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.78k, False: 904]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.78k|            return {range.begin(), base, false};
 3319|  2.68k|    }
 3320|  2.68k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    898|{
 2291|    898|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 898, False: 0]
  ------------------
 2292|    898|        return range.begin();
 2293|    898|    }
 2294|      0|    return *result;
 2295|    898|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     12|{
 3244|     12|    return read_matching_string_classic_nocase(range, "0b");
 3245|     12|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.58k|{
 2231|  3.58k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.58k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.58k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.58k|        if (range.size() < str.size()) {
 2236|  3.58k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  3.58k|        }
 2238|  3.58k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  3.58k|            return unexpected(parse_error::error);
 2240|  3.58k|        }
 2241|  3.58k|        return ranges::next(range.begin(), str.size());
 2242|  3.58k|    }
 2243|  3.58k|    else {
 2244|  3.58k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.58k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.58k|                return ch;
 2247|  3.58k|            }
 2248|  3.58k|            return static_cast<char_type>(ch +
 2249|  3.58k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.58k|        };
 2251|       |
 2252|  3.58k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  3.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 3.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|  3.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  3.58k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.58k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.58k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.58k, False: 0]
  |  |  ------------------
  ------------------
 2257|  3.58k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.58k|                    return ascii_tolower(a) ==
 2259|  3.58k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.58k|                }))) {
 2261|  3.58k|            return unexpected(parse_error::error);
 2262|  3.58k|        }
 2263|       |
 2264|      0|        return it;
 2265|  3.58k|    }
 2266|  3.58k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  3.58k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.58k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 8, False: 3.57k]
  |  Branch (2245:29): [True: 3.57k, False: 0]
  ------------------
 2246|  3.58k|                return ch;
 2247|  3.58k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.58k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     20|{
 3258|     20|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 20]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     20|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 20]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     20|    return unexpected(parse_error::error);
 3268|     20|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.81k|{
 2146|  1.81k|    auto it = read_code_unit(range);
 2147|  1.81k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.81k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.81k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.81k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.81k|        return unexpected(parse_error::error);
 2154|  1.81k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.81k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    884|{
 3251|    884|    return read_matching_string_classic_nocase(range, "0x");
 3252|    884|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|      6|{
 3274|      6|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 6]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|      6|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 6]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|      6|    {
 3281|      6|        bool zero_parsed{false};
 3282|      6|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 6]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|      6|    }
 3286|      6|    return {range.begin(), 10, false};
 3287|      6|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.66k|{
 3360|  2.66k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.66k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.66k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.66k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.66k|        return range.end();
 3369|  2.66k|    }
 3370|  2.66k|    else {
 3371|  2.66k|        return read_while1_code_unit(range,
 3372|  2.66k|                                     [&](char_type ch) noexcept {
 3373|  2.66k|                                         return char_to_int(ch) < base;
 3374|  2.66k|                                     })
 3375|  2.66k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.66k|                scan_error::invalid_scanned_value,
 3377|  2.66k|                "Failed to parse integer: No digits found"));
 3378|  2.66k|    }
 3379|  2.66k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     24|{
 3390|     24|    std::basic_string<CharT> output;
 3391|     24|    std::string thsep_indices;
 3392|     24|    auto it = range.begin();
 3393|     24|    bool digit_matched = false;
 3394|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 24, False: 0]
  ------------------
 3395|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 24]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 24, False: 0]
  ------------------
 3400|     24|            break;
 3401|     24|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     24|    }
 3407|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3408|     24|        return unexpected_scan_error(
 3409|     24|            scan_error::invalid_scanned_value,
 3410|     24|            "Failed to parse integer: No digits found");
 3411|     24|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     24|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  8.98k|{
 1683|  8.98k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  8.98k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  8.98k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  8.98k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  8.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  8.98k|    }
 1688|  8.98k|    else {
 1689|  8.98k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  8.98k|    }
 1691|  8.98k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  8.98k|    {
 1490|  8.98k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  10.2k|    {
 1503|  10.2k|        return sv;
 1504|  10.2k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|    802|{
 5951|    802|    using char_type = detail::char_t<Range>;
 5952|    802|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    802|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 802, False: 0]
  ------------------
 5955|    802|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    802|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    802|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 626, False: 176]
  ------------------
 5959|    626|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|    626|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 194, False: 432]
  ------------------
 5962|    194|                auto prefix_width =
 5963|    194|                    static_cast<std::ptrdiff_t>(
 5964|    194|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    194|                    ranges::distance(range.begin(), it);
 5966|    194|                return result_type{it, prefix_width};
 5967|    194|            }
 5968|    432|            return result_type{it, 0};
 5969|    626|        }
 5970|       |
 5971|    176|        auto max_width_view = take_width(range, max_width);
 5972|    176|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    176|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 176, False: 0]
  ------------------
 5975|    176|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    176|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    176|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    632|{
 1976|    632|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    632|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|    890|{
 1957|    890|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    890|        return std::find_if(range.begin(), range.end(), pred);
 1959|    890|    }
 1960|    890|    else {
 1961|    890|        auto first = range.begin();
 1962|    890|        for (; first != range.end(); ++first) {
 1963|    890|            if (pred(*first)) {
 1964|    890|                return first;
 1965|    890|            }
 1966|    890|        }
 1967|    890|        return first;
 1968|    890|    }
 1969|    890|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_:
  753|    802|    {
  754|    802|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    968|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    968|              cvref<T> obj = *get<T>(fn);
  745|    968|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    968|                  obj(static_cast<decltype(args)>(args)...);
  747|    968|              }
  748|    968|              else {
  749|    968|                  return obj(static_cast<decltype(args)>(args)...);
  750|    968|              }
  751|    968|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    968|    {
  684|    968|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    968|            return static_cast<T*>(s.m_cp);
  686|    968|        }
  687|    968|        else if constexpr (std::is_object_v<T>) {
  688|    968|            return static_cast<T*>(s.m_p);
  689|    968|        }
  690|    968|        else {
  691|    968|            return reinterpret_cast<T*>(s.m_fp);
  692|    968|        }
  693|    968|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    968|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSH_:
  666|    802|        {
  667|    802|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    176|{
 1976|    176|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    176|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    176|{
 1957|    176|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    176|        return std::find_if(range.begin(), range.end(), pred);
 1959|    176|    }
 1960|    176|    else {
 1961|    176|        auto first = range.begin();
 1962|    176|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 176, False: 0]
  ------------------
 1963|    176|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 176, False: 0]
  ------------------
 1964|    176|                return first;
 1965|    176|            }
 1966|    176|        }
 1967|      0|        return first;
 1968|    176|    }
 1969|    176|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|  1.29k|{
 2951|  1.29k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.15k, False: 136]
  ------------------
 2952|  1.15k|        auto it = read_while_classic_space(range);
 2953|  1.15k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.15k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.15k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  1.15k|        return it;
 2959|  1.15k|    }
 2960|       |
 2961|    136|    return read_while_classic_space(range);
 2962|  1.29k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|  1.29k|{
 2117|  1.29k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.29k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.29k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.29k|        auto buf = make_contiguous_buffer(range);
 2121|  1.29k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.29k|        return ranges::next(range.begin(),
 2123|  1.29k|                            ranges::distance(buf.view().begin(), it));
 2124|  1.29k|    }
 2125|  1.29k|    else {
 2126|  1.29k|        auto it = range.begin();
 2127|       |
 2128|  1.29k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.29k|            auto seg = get_contiguous_beginning(range);
 2130|  1.29k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.29k|                seg_it != seg.end()) {
 2132|  1.29k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.29k|            }
 2134|  1.29k|            ranges::advance(it, seg.size());
 2135|  1.29k|        }
 2136|       |
 2137|  1.29k|        return read_while_code_point(
 2138|  1.29k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.29k|    }
 2140|  1.29k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|  1.29k|{
 2082|  1.29k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.29k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|  1.29k|{
 2061|  1.29k|    auto it = range.begin();
 2062|  1.29k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.29k, False: 0]
  ------------------
 2063|  1.29k|        const auto val =
 2064|  1.29k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.29k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.29k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.29k, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.29k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.29k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.29k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.29k, False: 0]
  ------------------
 2069|  1.29k|                return it;
 2070|  1.29k|            }
 2071|  1.29k|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|  1.29k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  16.7k|{
 1899|  16.7k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  16.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  16.7k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  16.7k|    auto it = range.begin();
 1903|  16.7k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  16.7k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.7k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  16.7k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 16.7k, False: 0]
  ------------------
 1912|  16.7k|        ++it;
 1913|  16.7k|        return {it, string_type(1, *range.begin())};
 1914|  16.7k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  16.7k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  1.29k|    {
  754|  1.29k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  1.29k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.29k|              cvref<T> obj = *get<T>(fn);
  745|  1.29k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.29k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.29k|              }
  748|  1.29k|              else {
  749|  1.29k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.29k|              }
  751|  1.29k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  1.29k|    {
  684|  1.29k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.29k|            return static_cast<T*>(s.m_cp);
  686|  1.29k|        }
  687|  1.29k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.29k|            return static_cast<T*>(s.m_p);
  689|  1.29k|        }
  690|  1.29k|        else {
  691|  1.29k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.29k|        }
  693|  1.29k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  1.29k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  1.29k|        {
  662|  1.29k|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  6.97k|{
 2951|  6.97k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 6.74k, False: 236]
  ------------------
 2952|  6.74k|        auto it = read_while_classic_space(range);
 2953|  6.74k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  6.74k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.74k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  6.74k|        return it;
 2959|  6.74k|    }
 2960|       |
 2961|    236|    return read_while_classic_space(range);
 2962|  6.97k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  8.77k|{
 2117|  8.77k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  8.77k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  8.77k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  8.77k|        auto buf = make_contiguous_buffer(range);
 2121|  8.77k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  8.77k|        return ranges::next(range.begin(),
 2123|  8.77k|                            ranges::distance(buf.view().begin(), it));
 2124|  8.77k|    }
 2125|  8.77k|    else {
 2126|  8.77k|        auto it = range.begin();
 2127|       |
 2128|  8.77k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  8.77k|            auto seg = get_contiguous_beginning(range);
 2130|  8.77k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  8.77k|                seg_it != seg.end()) {
 2132|  8.77k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  8.77k|            }
 2134|  8.77k|            ranges::advance(it, seg.size());
 2135|  8.77k|        }
 2136|       |
 2137|  8.77k|        return read_while_code_point(
 2138|  8.77k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  8.77k|    }
 2140|  8.77k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  8.77k|{
 2082|  8.77k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  8.77k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  11.5k|{
 2061|  11.5k|    auto it = range.begin();
 2062|  48.8k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 46.4k, False: 2.49k]
  ------------------
 2063|  46.4k|        const auto val =
 2064|  46.4k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  46.4k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  46.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 46.4k, False: 0]
  |  |  ------------------
  ------------------
 2066|  46.4k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  46.4k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  46.4k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 9.01k, False: 37.3k]
  ------------------
 2069|  9.01k|                return it;
 2070|  9.01k|            }
 2071|  46.4k|        }
 2072|  37.3k|        it = val.iterator;
 2073|  37.3k|    }
 2074|       |
 2075|  2.49k|    return it;
 2076|  11.5k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  8.77k|    {
  754|  8.77k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  10.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.1k|              cvref<T> obj = *get<T>(fn);
  745|  10.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  10.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.1k|              }
  748|  10.1k|              else {
  749|  10.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.1k|              }
  751|  10.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  10.1k|    {
  684|  10.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  10.1k|            return static_cast<T*>(s.m_cp);
  686|  10.1k|        }
  687|  10.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  10.1k|            return static_cast<T*>(s.m_p);
  689|  10.1k|        }
  690|  10.1k|        else {
  691|  10.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  10.1k|        }
  693|  10.1k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  10.1k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  8.77k|        {
  662|  8.77k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  2.69k|    {
 3040|  2.69k|        reader_error_handler eh{};
 3041|  2.69k|        get_derived().check_specs_impl(specs, eh);
 3042|  2.69k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.63k, False: 1.06k]
  |  |  ------------------
  ------------------
 3043|  1.63k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  1.63k|        }
 3045|  1.06k|        return {};
 3046|  2.69k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|  2.69k|    {
 3051|  2.69k|        return static_cast<Derived&>(*this);
 3052|  2.69k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  2.69k|    {
 3485|  2.69k|        detail::check_int_type_specs(specs, eh);
 3486|  2.69k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  2.12k|    {
 3035|  2.12k|        return true;
 3036|  2.12k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    162|    {
 3539|    162|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 162]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    162|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    162|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    162|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 162]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    162|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 162]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    162|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    162|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 162, False: 0]
  |  |  ------------------
  ------------------
 3565|    162|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 162, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    162|    }                                                  \
  |  |  |  | 3667|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    368|    {
 3539|    368|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    368|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    368|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    368|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    368|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    368|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    368|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 368]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    368|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 368]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    368|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    368|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 356, False: 12]
  |  |  ------------------
  ------------------
 3565|    356|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    356|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 356]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    356|                    parse_integer_digits_without_thsep(
 3567|    356|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    356|                        prefix_result.parsed_base));
 3569|       |
 3570|    356|            auto buf = make_contiguous_buffer(
 3571|    356|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    356|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    356|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 356, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    356|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    356|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    356|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    356|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    356|    }                                                  \
  |  |  |  | 3667|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    356|        }
 3580|       |
 3581|     12|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     12|            localized_number_formatting_options<CharT>{loc};
 3586|     12|#endif
 3587|       |
 3588|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    158|    {
 3539|    158|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 158]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    158|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    158|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    158|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    158|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 158]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    158|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 158]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    158|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    158|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 158, False: 0]
  |  |  ------------------
  ------------------
 3565|    158|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 158, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    158|    }                                                  \
  |  |  |  | 3667|    158|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    872|    {
 3539|    872|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    872|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    872|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 872]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    872|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 872]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    872|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    872|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 872, False: 0]
  |  |  ------------------
  ------------------
 3565|    872|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    872|                    parse_integer_digits_without_thsep(
 3567|    872|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    872|                        prefix_result.parsed_base));
 3569|       |
 3570|    872|            auto buf = make_contiguous_buffer(
 3571|    872|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    872|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 872, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    872|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    872|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    872|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    872|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    872|    }                                                  \
  |  |  |  | 3667|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    872|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  1.34k|    {
 3040|  1.34k|        reader_error_handler eh{};
 3041|  1.34k|        get_derived().check_specs_impl(specs, eh);
 3042|  1.34k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 820, False: 526]
  |  |  ------------------
  ------------------
 3043|    820|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    820|        }
 3045|    526|        return {};
 3046|  1.34k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|  1.34k|    {
 3051|  1.34k|        return static_cast<Derived&>(*this);
 3052|  1.34k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  1.34k|    {
 4145|  1.34k|        detail::check_float_type_specs(specs, eh);
 4146|  1.34k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.05k|    {
 3035|  1.05k|        return true;
 3036|  1.05k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|    526|    {
 4217|    526|        unsigned options{};
 4218|    526|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 8, False: 518]
  ------------------
 4219|      8|            options |= float_reader_base::allow_thsep;
 4220|      8|        }
 4221|       |
 4222|    526|        SCN_GCC_COMPAT_PUSH
 4223|    526|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    526|        switch (specs.type) {
 4226|      4|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 4, False: 522]
  ------------------
 4227|      4|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 4, False: 522]
  ------------------
 4230|      4|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     14|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 14, False: 512]
  ------------------
 4233|     14|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 0, False: 526]
  ------------------
 4236|      0|                return options | float_reader_base::allow_scientific |
 4237|      0|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    504|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 504, False: 22]
  ------------------
 4240|    504|                return options | float_reader_base::allow_scientific |
 4241|    504|                       float_reader_base::allow_fixed |
 4242|    504|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 526]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    526|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    526|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    526|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|    526|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  1.05k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  2.11k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|    886|    {
 4057|    886|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 886, False: 0]
  ------------------
 4058|    886|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 886, False: 0]
  ------------------
 4059|    886|            return;
 4060|    886|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|    108|    {
 1587|    108|        return m_storage.has_value();
 1588|    108|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|     54|    {
 1592|     54|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|     54|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     54|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|     54|        return *m_storage;
 1594|     54|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    164|    {
  763|    164|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    164|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    164|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    164|    {
 3705|    164|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    164|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    164|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    164|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    164|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 164]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    164|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    164|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    164|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    164|        auto it = sign_result.first;
 3708|    164|        m_sign = sign_result.second;
 3709|       |
 3710|    164|        auto digits_begin = it;
 3711|    164|        auto r = ranges::subrange{it, range.end()};
 3712|    164|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    164|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    164|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    164|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    164|                SCN_TRY_ASSIGN(
 3717|    164|                    it,
 3718|    164|                    do_read_source_impl(
 3719|    164|                        r,
 3720|    164|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    164|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    164|            }
 3723|    164|            else {
 3724|    164|                auto cb = [&](const auto& rr)
 3725|    164|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    164|                    auto res = read_all(rr);
 3727|    164|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    164|                        return unexpected_scan_error(
 3729|    164|                            scan_error::invalid_scanned_value,
 3730|    164|                            "Invalid float value");
 3731|    164|                    }
 3732|    164|                    return res;
 3733|    164|                };
 3734|    164|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    164|            }
 3736|    164|        }
 3737|    164|        else {
 3738|    164|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|    164|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    164|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    164|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 164, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    164|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    164|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    164|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    164|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    164|    }                                                  \
  |  | 3667|    164|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    164|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    164|    {
 4000|    164|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    164|        const bool allowed_nonhex =
 4002|    164|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    164|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    164|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 164, False: 0]
  |  Branch (4005:45): [True: 0, False: 164]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    164|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 164]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    164|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 164, False: 0]
  |  Branch (4014:45): [True: 0, False: 164]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    164|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 164]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    164|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 162, False: 2]
  |  Branch (4021:28): [True: 4, False: 158]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      4|            auto it = range.begin();
 4025|       |
 4026|      4|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 4]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      4|            else {
 4031|      4|                m_kind = float_kind::hex_without_prefix;
 4032|      4|            }
 4033|       |
 4034|      4|            return read_hex(ranges::subrange{it, range.end()});
 4035|      4|        }
 4036|    160|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 2, False: 158]
  |  Branch (4036:29): [True: 2, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      2|            m_kind = float_kind::generic;
 4040|      2|            return read_regular_float(range);
 4041|      2|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    158|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 158]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    158|        m_kind = float_kind::generic;
 4052|    158|        return read_regular(range);
 4053|    158|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    164|    {
 3811|    164|        auto it = range.begin();
 3812|    164|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 164, False: 0]
  ------------------
 3813|    164|            return unexpected(r.error());
 3814|    164|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    164|    {
 3834|    164|        auto it = range.begin();
 3835|    164|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 164, False: 0]
  ------------------
 3836|    164|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    164|                scan_error::invalid_scanned_value,
 3838|    164|                "Invalid floating-point NaN value"));
 3839|    164|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    162|    {
 3804|    162|        return read_matching_string_classic_nocase(range, "0x");
 3805|    162|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      4|    {
 3904|      4|        auto it = range.begin();
 3905|       |
 3906|      4|        std::ptrdiff_t digits_count = 0;
 3907|      4|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      4|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 3909|      4|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      4|                scan_error::invalid_scanned_value,
 3911|      4|                "Invalid hexadecimal floating-point value"));
 3912|      4|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      4|    {
 3789|      4|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      4|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      4|        return read_while1_code_unit(
 3798|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      4|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|      4|    {
  754|      4|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|      4|    {
  684|      4|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      4|            return static_cast<T*>(s.m_cp);
  686|      4|        }
  687|      4|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      4|            return static_cast<T*>(s.m_p);
  689|      4|        }
  690|      4|        else {
  691|      4|            return reinterpret_cast<T*>(s.m_fp);
  692|      4|        }
  693|      4|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3798|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|      4|        {
  662|      4|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    160|    {
 3944|    160|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    160|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 160, False: 0]
  |  Branch (3945:50): [True: 2, False: 158]
  ------------------
 3946|       |
 3947|    160|        auto it = ranges::begin(range);
 3948|    160|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    160|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    160|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 160, False: 0]
  |  |  ------------------
  ------------------
 3952|    160|            return r.transform_error(
 3953|    160|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    160|                                              "Invalid floating-point value"));
 3955|    160|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    160|    {
 3774|    160|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160]
  |  |  |  Branch (859:45): [True: 0, False: 160]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    160|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    160|        return read_while1_code_unit(
 3783|    160|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    160|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|    160|    {
  754|    160|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|    160|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    160|              cvref<T> obj = *get<T>(fn);
  745|    160|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    160|                  obj(static_cast<decltype(args)>(args)...);
  747|    160|              }
  748|    160|              else {
  749|    160|                  return obj(static_cast<decltype(args)>(args)...);
  750|    160|              }
  751|    160|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    160|    {
  684|    160|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    160|            return static_cast<T*>(s.m_cp);
  686|    160|        }
  687|    160|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    160|            return static_cast<T*>(s.m_p);
  689|    160|        }
  690|    160|        else {
  691|    160|            return reinterpret_cast<T*>(s.m_fp);
  692|    160|        }
  693|    160|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3783|    160|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|    160|        {
  662|    160|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    164|    {
 3665|    164|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    164|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    164|        return read_source_impl(range);
 3671|    164|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    892|    {
  763|    892|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    892|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    892|    {
 3705|    892|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 892]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    892|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    892|        auto it = sign_result.first;
 3708|    892|        m_sign = sign_result.second;
 3709|       |
 3710|    892|        auto digits_begin = it;
 3711|    892|        auto r = ranges::subrange{it, range.end()};
 3712|    892|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    892|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    892|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 892]
  |  |  |  Branch (859:45): [True: 0, False: 892]
  |  |  |  Branch (859:45): [True: 0, False: 892]
  |  |  ------------------
  ------------------
 3715|    892|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    892|            else {
 3724|    892|                auto cb = [&](const auto& rr)
 3725|    892|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    892|                    auto res = read_all(rr);
 3727|    892|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    892|                        return unexpected_scan_error(
 3729|    892|                            scan_error::invalid_scanned_value,
 3730|    892|                            "Invalid float value");
 3731|    892|                    }
 3732|    892|                    return res;
 3733|    892|                };
 3734|    892|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6, False: 886]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      6|    }                                                  \
  |  | 3667|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    886|            }
 3736|    892|        }
 3737|    886|        else {
 3738|    886|            SCN_TRY_ASSIGN(
 3739|    886|                it,
 3740|    886|                do_read_source_impl(
 3741|    886|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    886|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    886|        }
 3744|       |
 3745|    886|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    886|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    886|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    886|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 886, False: 0]
  |  Branch (3747:48): [True: 886, False: 0]
  ------------------
 3748|    886|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 886, False: 0]
  ------------------
 3749|    886|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 886, False: 0]
  ------------------
 3750|    886|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    886|        }
 3752|       |
 3753|    886|        handle_separators();
 3754|       |
 3755|    886|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 886]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    886|        return it;
 3768|    886|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    892|    {
 3811|    892|        auto it = range.begin();
 3812|    892|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 892, False: 0]
  ------------------
 3813|    892|            return unexpected(r.error());
 3814|    892|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    892|    {
 3834|    892|        auto it = range.begin();
 3835|    892|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 892, False: 0]
  ------------------
 3836|    892|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    892|                scan_error::invalid_scanned_value,
 3838|    892|                "Invalid floating-point NaN value"));
 3839|    892|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    886|    {
 3804|    886|        return read_matching_string_classic_nocase(range, "0x");
 3805|    886|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|      6|{
 1996|      6|    auto it = read_while_code_unit(range, pred);
 1997|      6|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 6, False: 0]
  ------------------
 1998|      6|        return unexpected(parse_error::error);
 1999|      6|    }
 2000|      0|    return it;
 2001|      6|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|      6|    {
 3944|      6|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|      6|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 2, False: 4]
  |  Branch (3945:50): [True: 2, False: 0]
  ------------------
 3946|       |
 3947|      6|        auto it = ranges::begin(range);
 3948|      6|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|      6|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3952|      6|            return r.transform_error(
 3953|      6|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|      6|                                              "Invalid floating-point value"));
 3955|      6|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|      6|    {
 3774|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|      6|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|      6|        return read_while1_code_unit(
 3783|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|      6|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    892|    {
 4000|    892|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    892|        const bool allowed_nonhex =
 4002|    892|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    892|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    892|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 892, False: 0]
  |  Branch (4005:45): [True: 0, False: 892]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    892|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 892]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    892|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 892, False: 0]
  |  Branch (4014:45): [True: 0, False: 892]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    892|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 892]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    892|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 886, False: 6]
  |  Branch (4021:28): [True: 10, False: 876]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     10|            auto it = range.begin();
 4025|       |
 4026|     10|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 10]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     10|            else {
 4031|     10|                m_kind = float_kind::hex_without_prefix;
 4032|     10|            }
 4033|       |
 4034|     10|            return read_hex(ranges::subrange{it, range.end()});
 4035|     10|        }
 4036|    882|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 6, False: 876]
  |  Branch (4036:29): [True: 6, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      6|            m_kind = float_kind::generic;
 4040|      6|            return read_regular_float(range);
 4041|      6|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    876|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 876]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    876|        m_kind = float_kind::generic;
 4052|    876|        return read_regular(range);
 4053|    876|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    886|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    886|                    auto res = read_all(rr);
 3727|    886|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    886|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 886]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    886|                    return res;
 3733|    886|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    886|{
 1839|    886|    return ranges::next(range.begin(), range.end());
 1840|    886|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    886|    {
  313|    886|        ranges::advance(x, bound);
  314|    886|        return x;
  315|    886|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    886|    {
  275|    886|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    886|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|    886|    {
 1577|    886|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    886|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    886|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|    886|    {
 1621|    886|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    886|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    886|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    886|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    886|            m_storage.reset();
 1627|    886|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    886|        }
 1629|    886|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    886|                                          std::basic_string<CharT>>) {
 1631|    886|            m_storage.emplace(SCN_FWD(range));
 1632|    886|            m_view = string_view_type{*m_storage};
 1633|    886|        }
 1634|    886|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    886|                                          typename detail::basic_scan_buffer<
 1636|    886|                                              value_t>::forward_iterator> &&
 1637|    886|                           ranges::common_range<Range>) {
 1638|    886|            auto beg_seg = range.begin().contiguous_segment();
 1639|    886|            auto end_seg = range.end().contiguous_segment();
 1640|    886|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    886|                             detail::to_address(end_seg.end()))) {
 1642|    886|                auto& str = m_storage.emplace();
 1643|    886|                str.reserve(range.end().position() - range.begin().position());
 1644|    886|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    886|                m_view = string_view_type{str};
 1646|    886|                return;
 1647|    886|            }
 1648|       |
 1649|    886|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    886|                                                            end_seg.data());
 1651|    886|            m_storage.reset();
 1652|    886|        }
 1653|    886|        else {
 1654|    886|            auto& str = m_storage.emplace();
 1655|    886|            if constexpr (ranges::sized_range<Range>) {
 1656|    886|                str.reserve(range.size());
 1657|    886|            }
 1658|    886|            if constexpr (ranges::common_range<Range>) {
 1659|    886|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    886|                          std::back_inserter(str));
 1661|    886|            }
 1662|    886|            else {
 1663|    886|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    886|                     ++it) {
 1665|    886|                    str.push_back(*it);
 1666|    886|                }
 1667|    886|            }
 1668|    886|            m_view = string_view_type{str};
 1669|    886|        }
 1670|    886|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    884|    {
 3665|    884|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 884]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    884|        return read_source_impl(range);
 3671|    884|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    886|    {
 3691|    886|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    886|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    886|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    886|        const std::ptrdiff_t sign_len =
 3694|    886|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 886]
  ------------------
 3695|       |
 3696|    886|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|    886|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    886|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    886|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    886|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 886, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    886|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    886|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    886|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    886|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    886|    }                                                  \
  |  |  |  | 3667|    886|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    886|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    164|    {
 4170|    164|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    164|#if !SCN_DISABLE_LOCALE
 4173|    164|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 0, False: 164]
  ------------------
 4174|      0|            return read_impl<Range>(
 4175|      0|                range, rd,
 4176|      0|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      0|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      0|                },
 4179|      0|                value, loc);
 4180|      0|        }
 4181|    164|#endif
 4182|       |
 4183|    164|        return read_impl<Range>(
 4184|    164|            range, rd,
 4185|    164|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    164|                return r.read_source(SCN_FWD(args)...);
 4187|    164|            },
 4188|    164|            value);
 4189|    164|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    164|    {
 4206|    164|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    164|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    164|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 164, False: 0]
  |  |  ------------------
  ------------------
 4208|    164|            return unexpected(r.error());
 4209|    164|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    164|    {
  754|    164|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    164|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    164|              cvref<T> obj = *get<T>(fn);
  745|    164|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    164|                  obj(static_cast<decltype(args)>(args)...);
  747|    164|              }
  748|    164|              else {
  749|    164|                  return obj(static_cast<decltype(args)>(args)...);
  750|    164|              }
  751|    164|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    164|    {
  684|    164|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    164|            return static_cast<T*>(s.m_cp);
  686|    164|        }
  687|    164|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    164|            return static_cast<T*>(s.m_p);
  689|    164|        }
  690|    164|        else {
  691|    164|            return reinterpret_cast<T*>(s.m_fp);
  692|    164|        }
  693|    164|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    164|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    164|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    164|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    164|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSL_:
  661|    164|        {
  662|    164|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    362|    {
 4170|    362|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    362|#if !SCN_DISABLE_LOCALE
 4173|    362|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 354]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    354|#endif
 4182|       |
 4183|    354|        return read_impl<Range>(
 4184|    354|            range, rd,
 4185|    354|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    354|                return r.read_source(SCN_FWD(args)...);
 4187|    354|            },
 4188|    354|            value);
 4189|    362|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    892|    {
 4206|    892|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    892|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 886]
  |  |  ------------------
  ------------------
 4208|      6|            return unexpected(r.error());
 4209|      6|        }
 4210|       |
 4211|    886|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|    886|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    886|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    886|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    886|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 886, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    886|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    886|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    886|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    886|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    886|    }                                                  \
  |  |  |  | 3667|    886|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    886|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    354|    {
  754|    354|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    354|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    354|              cvref<T> obj = *get<T>(fn);
  745|    354|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    354|                  obj(static_cast<decltype(args)>(args)...);
  747|    354|              }
  748|    354|              else {
  749|    354|                  return obj(static_cast<decltype(args)>(args)...);
  750|    354|              }
  751|    354|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    354|    {
  684|    354|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    354|            return static_cast<T*>(s.m_cp);
  686|    354|        }
  687|    354|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    354|            return static_cast<T*>(s.m_p);
  689|    354|        }
  690|    354|        else {
  691|    354|            return reinterpret_cast<T*>(s.m_fp);
  692|    354|        }
  693|    354|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    354|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    354|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    354|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    354|        {
  662|    354|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5808|  1.85k|{
 5809|  1.85k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  1.85k|        return reader_impl_for_bool<CharT>{};
 5811|  1.85k|    }
 5812|  1.85k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  1.85k|        return reader_impl_for_char<CharT>{};
 5814|  1.85k|    }
 5815|  1.85k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  1.85k|        return reader_impl_for_wchar<CharT>{};
 5817|  1.85k|    }
 5818|  1.85k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  1.85k|        return reader_impl_for_code_point<CharT>{};
 5820|  1.85k|    }
 5821|  1.85k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  1.85k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  1.85k|        return reader_impl_for_string<CharT>{};
 5824|  1.85k|    }
 5825|  1.85k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  1.85k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  1.85k|        return reader_impl_for_string<CharT>{};
 5828|  1.85k|    }
 5829|  1.85k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  1.85k|                       std::is_same_v<T, wregex_matches>) {
 5831|  1.85k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  1.85k|    }
 5833|  1.85k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  1.85k|        return reader_impl_for_voidptr<CharT>{};
 5835|  1.85k|    }
 5836|  1.85k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  1.85k|        return reader_impl_for_float<CharT>{};
 5838|  1.85k|    }
 5839|  1.85k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  1.85k|                       !std::is_same_v<T, wchar_t> &&
 5841|  1.85k|                       !std::is_same_v<T, char32_t> &&
 5842|  1.85k|                       !std::is_same_v<T, bool>) {
 5843|  1.85k|        return reader_impl_for_int<CharT>{};
 5844|  1.85k|    }
 5845|  1.85k|    else {
 5846|  1.85k|        return reader_impl_for_monostate<CharT>{};
 5847|  1.85k|    }
 5848|  1.85k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  5.57k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.98k|    {
 3040|  3.98k|        reader_error_handler eh{};
 3041|  3.98k|        get_derived().check_specs_impl(specs, eh);
 3042|  3.98k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 132, False: 3.85k]
  |  |  ------------------
  ------------------
 3043|    132|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    132|        }
 3045|  3.85k|        return {};
 3046|  3.98k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  3.98k|    {
 3051|  3.98k|        return static_cast<Derived&>(*this);
 3052|  3.98k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  3.98k|    {
 5210|  3.98k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  3.98k|        SCN_GCC_PUSH
 5213|  3.98k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  3.98k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  3.98k|        SCN_CLANG_PUSH
 5217|  3.98k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  3.98k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  3.98k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 126, False: 3.85k]
  ------------------
 5221|  1.49k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.49k, False: 2.49k]
  ------------------
 5222|  1.49k|                m_type = reader_type::word;
 5223|  1.49k|                break;
 5224|       |
 5225|    378|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 378, False: 3.60k]
  ------------------
 5226|    378|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 258, False: 120]
  ------------------
 5227|    378|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 120]
  ------------------
 5228|    258|                    m_type = reader_type::custom_word;
 5229|    258|                }
 5230|    120|                else {
 5231|    120|                    m_type = reader_type::word;
 5232|    120|                }
 5233|    378|                break;
 5234|      0|            }
 5235|       |
 5236|      6|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 6, False: 3.97k]
  ------------------
 5237|      6|                m_type = reader_type::character;
 5238|      6|                break;
 5239|       |
 5240|      0|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 0, False: 3.98k]
  ------------------
 5241|      0|                m_type = reader_type::character_set;
 5242|      0|                break;
 5243|       |
 5244|  1.98k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 1.98k, False: 2.00k]
  ------------------
 5245|  1.98k|                m_type = reader_type::regex;
 5246|  1.98k|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 3.98k]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|  3.98k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  3.98k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  6.00k|    {
 5259|  6.00k|        return m_type == reader_type::word;
 5260|  6.00k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  4.14k|{
 1132|  4.14k|    auto it = src.begin();
 1133|  36.2k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 33.5k, False: 2.72k]
  ------------------
 1134|  33.5k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  33.5k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 33.5k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  33.5k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 33.5k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  33.5k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  33.5k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  33.5k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.41k, False: 32.1k]
  ------------------
 1144|  1.41k|            return false;
 1145|  1.41k|        }
 1146|  32.1k|        it += len;
 1147|  32.1k|    }
 1148|  2.72k|    return true;
 1149|  4.14k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|     54|{
 2993|     54|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|     54|        if (source.stores_allocated_string()) {
 2995|     54|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|     54|        }
 2997|     54|        else {
 2998|     54|            dest.assign(source.view());
 2999|     54|        }
 3000|     54|    }
 3001|     54|    else {
 3002|     54|        return transcode_impl(source.view(), dest);
 3003|     54|    }
 3004|       |
 3005|      0|    return {};
 3006|     54|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|    682|{
 2968|    682|    dst.clear();
 2969|    682|    transcode_valid_to_string(src, dst);
 2970|    682|    return {};
 2971|    682|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|    682|{
 1403|    682|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|    682|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|    682|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    682|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|    682|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|    682|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|    682|            std::u32string tmp;
 1410|    682|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|    682|            return transcode_to_string_impl_32to16<true>(
 1412|    682|                std::u32string_view{tmp}, dest);
 1413|    682|        }
 1414|    682|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|    682|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|    682|        }
 1417|    682|    }
 1418|    682|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|    682|        if constexpr (sizeof(DestCharT) == 1) {
 1420|    682|            std::u32string tmp;
 1421|    682|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|    682|            return transcode_to_string_impl_32to8<true>(
 1423|    682|                std::u32string_view{tmp}, dest);
 1424|    682|        }
 1425|    682|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|    682|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|    682|        }
 1428|    682|    }
 1429|    682|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|    682|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|    682|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|    682|        }
 1433|    682|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|    682|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|    682|        }
 1436|    682|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|    682|{
 1294|    682|    static_assert(sizeof(SourceCharT) == 4);
 1295|    682|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  5.04k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 5.04k, False: 682]
  ------------------
 1298|  5.04k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  5.04k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  5.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  5.04k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 4.09k, False: 946]
  ------------------
 1306|  4.09k|            dest.push_back(static_cast<char>(cp));
 1307|  4.09k|        }
 1308|    946|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 56, False: 890]
  ------------------
 1309|     56|            dest.push_back(
 1310|     56|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|     56|            dest.push_back(
 1312|     56|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|     56|        }
 1314|    890|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 480, False: 410]
  ------------------
 1315|    480|            dest.push_back(
 1316|    480|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|    480|            dest.push_back(static_cast<char>(
 1318|    480|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|    480|            dest.push_back(
 1320|    480|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|    480|        }
 1322|    410|        else {
 1323|    410|            dest.push_back(
 1324|    410|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    410|            dest.push_back(static_cast<char>(
 1326|    410|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    410|            dest.push_back(static_cast<char>(
 1328|    410|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    410|            dest.push_back(
 1330|    410|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    410|        }
 1332|  5.04k|    }
 1333|    682|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    160|    {
 5277|    160|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    160|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    160|        return read_impl(range, specs, value);
 5279|    160|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    160|    {
 5295|    160|        SCN_CLANG_PUSH
 5296|    160|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    160|        switch (m_type) {
 5299|    158|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 158, False: 2]
  ------------------
 5300|    158|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 160]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 160]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 160]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 158]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 160]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 160]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    160|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    160|        }
 5331|       |
 5332|    160|        SCN_CLANG_POP
 5333|    160|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    158|    {
 4820|    158|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    158|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    158|{
 4752|    158|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    158|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    158|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 104, False: 54]
  ------------------
 4756|    104|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    104|                                     "Invalid encoding in scanned string");
 4758|    104|    }
 4759|     54|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     54|    static_cast<    \
  |  |  929|     54|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     54|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     54|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 54]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     54|    return SCN_MOVE(result);
  ------------------
  |  |  928|     54|    static_cast<    \
  |  |  929|     54|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     54|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    474|{
 2088|    474|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    474|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    474|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    474|        auto buf = make_contiguous_buffer(range);
 2092|    474|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    474|        return ranges::next(range.begin(),
 2094|    474|                            ranges::distance(buf.view().begin(), it));
 2095|    474|    }
 2096|    474|    else {
 2097|    474|        auto it = range.begin();
 2098|       |
 2099|    474|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    474|            auto seg = get_contiguous_beginning(range);
 2101|    474|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    474|                seg_it != seg.end()) {
 2103|    474|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|    474|            }
 2105|    474|            ranges::advance(it, seg.size());
 2106|    474|        }
 2107|       |
 2108|    474|        return read_until_code_point(
 2109|    474|            ranges::subrange{it, range.end()},
 2110|    474|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    474|    }
 2112|    474|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    474|{
 2061|    474|    auto it = range.begin();
 2062|  15.7k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 15.4k, False: 372]
  ------------------
 2063|  15.4k|        const auto val =
 2064|  15.4k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  15.4k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  15.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.4k, False: 0]
  |  |  ------------------
  ------------------
 2066|  15.4k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  15.4k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  15.4k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 102, False: 15.3k]
  ------------------
 2069|    102|                return it;
 2070|    102|            }
 2071|  15.4k|        }
 2072|  15.3k|        it = val.iterator;
 2073|  15.3k|    }
 2074|       |
 2075|    372|    return it;
 2076|    474|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    474|    {
  754|    474|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  15.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.4k|              cvref<T> obj = *get<T>(fn);
  745|  15.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.4k|              }
  748|  15.4k|              else {
  749|  15.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.4k|              }
  751|  15.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  15.4k|    {
  684|  15.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.4k|            return static_cast<T*>(s.m_cp);
  686|  15.4k|        }
  687|  15.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  15.4k|            return static_cast<T*>(s.m_p);
  689|  15.4k|        }
  690|  15.4k|        else {
  691|  15.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.4k|        }
  693|  15.4k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  15.4k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    474|        {
  662|    474|        }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|      2|    {
 4891|      2|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|      2|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|      6|    {
 4913|      6|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|     12|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|      6|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|      6|            return unexpected_scan_error(
 4916|      6|                scan_error::invalid_scanned_value,
 4917|      6|                "Regex backend doesn't support wide strings as input");
 4918|      6|        }
 4919|      6|        else {
 4920|      6|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 6, False: 0]
  ------------------
 4921|      6|                return unexpected_scan_error(
 4922|      6|                    scan_error::invalid_scanned_value,
 4923|      6|                    "Cannot use regex with a non-contiguous source "
 4924|      6|                    "range");
 4925|      6|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|      6|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|      6|{
  959|      6|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|      6|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|      6|        return true;
  962|      6|    }
  963|      6|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|      6|                           ranges::const_iterator_t<Range>,
  965|      6|                           typename detail::basic_scan_buffer<
  966|      6|                               detail::char_t<Range>>::forward_iterator>) {
  967|      6|        auto beg = r.begin();
  968|      6|        if (!beg.stores_parent()) {
  969|      6|            return true;
  970|      6|        }
  971|      6|        return beg.parent()->is_contiguous();
  972|      6|    }
  973|      6|    else {
  974|      6|        return false;
  975|      6|    }
  976|      6|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  1.12k|    {
 5277|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.12k|        return read_impl(range, specs, value);
 5279|  1.12k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  1.12k|    {
 5295|  1.12k|        SCN_CLANG_PUSH
 5296|  1.12k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.12k|        switch (m_type) {
 5299|    380|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 380, False: 744]
  ------------------
 5300|    380|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     86|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 86, False: 1.03k]
  ------------------
 5303|     86|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     86|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 1.12k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 1.12k]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|    658|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 658, False: 466]
  ------------------
 5315|    658|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|    658|                    range, specs.charset_string<SourceCharT>(),
 5317|    658|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 1.12k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.12k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.12k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.12k|        }
 5331|       |
 5332|  1.12k|        SCN_CLANG_POP
 5333|  1.12k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    910|    {
 4820|    910|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    910|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    996|{
 4752|    996|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    996|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    996|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 368, False: 628]
  ------------------
 4756|    368|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    368|                                     "Invalid encoding in scanned string");
 4758|    368|    }
 4759|    628|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    628|    static_cast<    \
  |  |  929|    628|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    628|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    628|    return SCN_MOVE(result);
  ------------------
  |  |  928|    628|    static_cast<    \
  |  |  929|    628|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    628|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    628|{
 3012|    628|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    628|        dest.assign(source.view());
 3014|    628|    }
 3015|    628|    else {
 3016|    628|        return transcode_impl(source.view(), dest);
 3017|    628|    }
 3018|       |
 3019|      0|    return {};
 3020|    628|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.73k|{
 2088|  2.73k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.73k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.73k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.73k|        auto buf = make_contiguous_buffer(range);
 2092|  2.73k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.73k|        return ranges::next(range.begin(),
 2094|  2.73k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.73k|    }
 2096|  2.73k|    else {
 2097|  2.73k|        auto it = range.begin();
 2098|       |
 2099|  2.73k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  2.73k|            auto seg = get_contiguous_beginning(range);
 2101|  2.73k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.73k|                seg_it != seg.end()) {
 2103|  2.73k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.73k|            }
 2105|  2.73k|            ranges::advance(it, seg.size());
 2106|  2.73k|        }
 2107|       |
 2108|  2.73k|        return read_until_code_point(
 2109|  2.73k|            ranges::subrange{it, range.end()},
 2110|  2.73k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.73k|    }
 2112|  2.73k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  2.73k|    {
  754|  2.73k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  36.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.2k|              cvref<T> obj = *get<T>(fn);
  745|  36.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  36.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  36.2k|              }
  748|  36.2k|              else {
  749|  36.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.2k|              }
  751|  36.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  36.2k|    {
  684|  36.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  36.2k|            return static_cast<T*>(s.m_cp);
  686|  36.2k|        }
  687|  36.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  36.2k|            return static_cast<T*>(s.m_p);
  689|  36.2k|        }
  690|  36.2k|        else {
  691|  36.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  36.2k|        }
  693|  36.2k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  36.2k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  2.73k|        {
  662|  2.73k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     86|    {
 4841|     86|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 86, False: 0]
  ------------------
 4842|     86|            return read_string_impl(
 4843|     86|                range,
 4844|     86|                read_until_code_unit(
 4845|     86|                    range,
 4846|     86|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     86|                        SourceCharT ch) { return ch == until; }),
 4848|     86|                value);
 4849|     86|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     86|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     86|    {
  754|     86|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  1.18k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.18k|              cvref<T> obj = *get<T>(fn);
  745|  1.18k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.18k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.18k|              }
  748|  1.18k|              else {
  749|  1.18k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.18k|              }
  751|  1.18k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|  1.18k|    {
  684|  1.18k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.18k|            return static_cast<T*>(s.m_cp);
  686|  1.18k|        }
  687|  1.18k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.18k|            return static_cast<T*>(s.m_p);
  689|  1.18k|        }
  690|  1.18k|        else {
  691|  1.18k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.18k|        }
  693|  1.18k|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|  1.18k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     86|        {
  662|     86|        }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|    658|    {
 4891|    658|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 658, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    658|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    658|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    658|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    658|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    658|    }                                                  \
  |  |  |  | 3667|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    658|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|  1.97k|    {
 4913|  1.97k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  3.94k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  1.97k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  1.97k|            return unexpected_scan_error(
 4916|  1.97k|                scan_error::invalid_scanned_value,
 4917|  1.97k|                "Regex backend doesn't support wide strings as input");
 4918|  1.97k|        }
 4919|  1.97k|        else {
 4920|  1.97k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 1.97k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  1.97k|            auto input = get_as_contiguous(range);
 4928|  1.97k|            SCN_TRY(it,
  ------------------
  |  | 3668|  1.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.97k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.97k|    }                                                  \
  |  |  |  | 3667|  1.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|  1.97k|        }
 4933|  1.97k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  1.97k|{
  959|  1.97k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  1.97k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  1.97k|        return true;
  962|  1.97k|    }
  963|  1.97k|    else if constexpr (std::is_same_v<
  964|  1.97k|                           ranges::const_iterator_t<Range>,
  965|  1.97k|                           typename detail::basic_scan_buffer<
  966|  1.97k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  1.97k|        auto beg = r.begin();
  968|  1.97k|        if (!beg.stores_parent()) {
  969|  1.97k|            return true;
  970|  1.97k|        }
  971|  1.97k|        return beg.parent()->is_contiguous();
  972|  1.97k|    }
  973|  1.97k|    else {
  974|  1.97k|        return false;
  975|  1.97k|    }
  976|  1.97k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  1.97k|{
 1065|  1.97k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  1.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  1.97k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  1.97k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  1.97k|        return r;
 1070|  1.97k|    }
 1071|  1.97k|    else if constexpr (std::is_same_v<
 1072|  1.97k|                           ranges::const_iterator_t<Range>,
 1073|  1.97k|                           typename detail::basic_scan_buffer<
 1074|  1.97k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  1.97k|        if constexpr (ranges::common_range<Range>) {
 1076|  1.97k|            return detail::make_string_view_from_pointers(
 1077|  1.97k|                r.begin().to_contiguous_segment_iterator(),
 1078|  1.97k|                r.end().to_contiguous_segment_iterator());
 1079|  1.97k|        }
 1080|  1.97k|        else {
 1081|  1.97k|            return r.begin().contiguous_segment();
 1082|  1.97k|        }
 1083|  1.97k|    }
 1084|  1.97k|    else {
 1085|  1.97k|        SCN_EXPECT(false);
 1086|  1.97k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  1.97k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  1.97k|    }
 1090|  1.97k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  1.97k|{
  981|  1.97k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  1.97k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  1.97k|        return true;
  984|  1.97k|    }
  985|  1.97k|    else if constexpr (std::is_same_v<
  986|  1.97k|                           ranges::const_iterator_t<Range>,
  987|  1.97k|                           typename detail::basic_scan_buffer<
  988|  1.97k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.97k|        auto beg = r.begin();
  990|  1.97k|        if (beg.contiguous_segment().empty()) {
  991|  1.97k|            return false;
  992|  1.97k|        }
  993|  1.97k|        if constexpr (ranges::common_range<Range>) {
  994|  1.97k|            return beg.contiguous_segment().end() ==
  995|  1.97k|                   ranges::end(r).contiguous_segment().end();
  996|  1.97k|        }
  997|  1.97k|        else {
  998|  1.97k|            if (beg.stores_parent()) {
  999|  1.97k|                return beg.contiguous_segment().end() ==
 1000|  1.97k|                       beg.parent()->current_view().end();
 1001|  1.97k|            }
 1002|  1.97k|            return true;
 1003|  1.97k|        }
 1004|  1.97k|    }
 1005|  1.97k|    else {
 1006|  1.97k|        return false;
 1007|  1.97k|    }
 1008|  1.97k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  1.97k|{
 4346|  1.97k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  1.97k|                  ranges::borrowed_range<Input> &&
 4348|  1.97k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  1.97k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  1.97k|    std::basic_regex<CharT> re{};
 4352|  1.97k|    try {
 4353|  1.97k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3668|  1.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  1.97k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  1.97k|                                     re_flags | std::regex_constants::nosubs};
 4356|  1.97k|    }
 4357|  1.97k|    catch (const std::regex_error& err) {
 4358|  1.37k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  1.37k|                                     "Invalid regex");
 4360|  1.37k|    }
 4361|       |
 4362|    600|    std::match_results<const CharT*> matches{};
 4363|    600|    try {
 4364|    600|        bool found = std::regex_search(input.data(),
 4365|    600|                                       input.data() + input.size(), matches, re,
 4366|    600|                                       std::regex_constants::match_continuous);
 4367|    600|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 600, False: 0]
  |  Branch (4367:23): [True: 0, False: 0]
  ------------------
 4368|    600|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|    600|                                         "Regular expression didn't match");
 4370|    600|        }
 4371|    600|    }
 4372|    600|    catch (const std::regex_error& err) {
 4373|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|      0|                                     "Regex matching failed with an error");
 4375|      0|    }
 4376|       |
 4377|      0|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|    600|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  1.85k|{
 5809|  1.85k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  1.85k|        return reader_impl_for_bool<CharT>{};
 5811|  1.85k|    }
 5812|  1.85k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  1.85k|        return reader_impl_for_char<CharT>{};
 5814|  1.85k|    }
 5815|  1.85k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  1.85k|        return reader_impl_for_wchar<CharT>{};
 5817|  1.85k|    }
 5818|  1.85k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  1.85k|        return reader_impl_for_code_point<CharT>{};
 5820|  1.85k|    }
 5821|  1.85k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  1.85k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  1.85k|        return reader_impl_for_string<CharT>{};
 5824|  1.85k|    }
 5825|  1.85k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  1.85k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  1.85k|        return reader_impl_for_string<CharT>{};
 5828|  1.85k|    }
 5829|  1.85k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  1.85k|                       std::is_same_v<T, wregex_matches>) {
 5831|  1.85k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  1.85k|    }
 5833|  1.85k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  1.85k|        return reader_impl_for_voidptr<CharT>{};
 5835|  1.85k|    }
 5836|  1.85k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  1.85k|        return reader_impl_for_float<CharT>{};
 5838|  1.85k|    }
 5839|  1.85k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  1.85k|                       !std::is_same_v<T, wchar_t> &&
 5841|  1.85k|                       !std::is_same_v<T, char32_t> &&
 5842|  1.85k|                       !std::is_same_v<T, bool>) {
 5843|  1.85k|        return reader_impl_for_int<CharT>{};
 5844|  1.85k|    }
 5845|  1.85k|    else {
 5846|  1.85k|        return reader_impl_for_monostate<CharT>{};
 5847|  1.85k|    }
 5848|  1.85k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|     54|{
 2993|     54|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|     54|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 54, False: 0]
  ------------------
 2995|     54|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|     54|    static_cast<    \
  |  |  929|     54|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|     54|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|     54|    }
 3001|     54|    else {
 3002|     54|        return transcode_impl(source.view(), dest);
 3003|     54|    }
 3004|       |
 3005|     54|    return {};
 3006|     54|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    160|    {
 5277|    160|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    160|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    160|        return read_impl(range, specs, value);
 5279|    160|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    160|    {
 5295|    160|        SCN_CLANG_PUSH
 5296|    160|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    160|        switch (m_type) {
 5299|    158|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 158, False: 2]
  ------------------
 5300|    158|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 160]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 160]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 160]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 158]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 160]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 160]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    160|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    160|        }
 5331|       |
 5332|    160|        SCN_CLANG_POP
 5333|    160|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    158|    {
 4820|    158|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    158|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    158|{
 4752|    158|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    158|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    158|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 104, False: 54]
  ------------------
 4756|    104|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    104|                                     "Invalid encoding in scanned string");
 4758|    104|    }
 4759|     54|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     54|    static_cast<    \
  |  |  929|     54|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     54|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     54|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 54]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     54|    return SCN_MOVE(result);
  ------------------
  |  |  928|     54|    static_cast<    \
  |  |  929|     54|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     54|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|      2|    {
 4891|      2|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|      2|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  1.12k|    {
 5277|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.12k|        return read_impl(range, specs, value);
 5279|  1.12k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  1.12k|    {
 5295|  1.12k|        SCN_CLANG_PUSH
 5296|  1.12k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.12k|        switch (m_type) {
 5299|    380|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 380, False: 744]
  ------------------
 5300|    380|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     86|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 86, False: 1.03k]
  ------------------
 5303|     86|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     86|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 1.12k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 1.12k]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|    658|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 658, False: 466]
  ------------------
 5315|    658|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|    658|                    range, specs.charset_string<SourceCharT>(),
 5317|    658|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 1.12k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.12k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.12k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.12k|        }
 5331|       |
 5332|  1.12k|        SCN_CLANG_POP
 5333|  1.12k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    910|    {
 4820|    910|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    910|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    996|{
 4752|    996|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    996|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    996|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 368, False: 628]
  ------------------
 4756|    368|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    368|                                     "Invalid encoding in scanned string");
 4758|    368|    }
 4759|    628|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    628|    static_cast<    \
  |  |  929|    628|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    628|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    628|    return SCN_MOVE(result);
  ------------------
  |  |  928|    628|    static_cast<    \
  |  |  929|    628|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    628|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    628|{
 3012|    628|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    628|        dest.assign(source.view());
 3014|    628|    }
 3015|    628|    else {
 3016|    628|        return transcode_impl(source.view(), dest);
 3017|    628|    }
 3018|       |
 3019|    628|    return {};
 3020|    628|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     86|    {
 4841|     86|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 86, False: 0]
  ------------------
 4842|     86|            return read_string_impl(
 4843|     86|                range,
 4844|     86|                read_until_code_unit(
 4845|     86|                    range,
 4846|     86|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     86|                        SourceCharT ch) { return ch == until; }),
 4848|     86|                value);
 4849|     86|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     86|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     86|    {
  754|     86|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  1.18k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.18k|              cvref<T> obj = *get<T>(fn);
  745|  1.18k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.18k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.18k|              }
  748|  1.18k|              else {
  749|  1.18k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.18k|              }
  751|  1.18k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|  1.18k|    {
  684|  1.18k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.18k|            return static_cast<T*>(s.m_cp);
  686|  1.18k|        }
  687|  1.18k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.18k|            return static_cast<T*>(s.m_p);
  689|  1.18k|        }
  690|  1.18k|        else {
  691|  1.18k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.18k|        }
  693|  1.18k|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|  1.18k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     86|        {
  662|     86|        }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|    658|    {
 4891|    658|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 658, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    658|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    658|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    658|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    658|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    658|    }                                                  \
  |  |  |  | 3667|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    658|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  1.85k|{
 5809|  1.85k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  1.85k|        return reader_impl_for_bool<CharT>{};
 5811|  1.85k|    }
 5812|  1.85k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  1.85k|        return reader_impl_for_char<CharT>{};
 5814|  1.85k|    }
 5815|  1.85k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  1.85k|        return reader_impl_for_wchar<CharT>{};
 5817|  1.85k|    }
 5818|  1.85k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  1.85k|        return reader_impl_for_code_point<CharT>{};
 5820|  1.85k|    }
 5821|  1.85k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  1.85k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  1.85k|        return reader_impl_for_string<CharT>{};
 5824|  1.85k|    }
 5825|  1.85k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  1.85k|                       std::is_same_v<T, std::wstring>) {
 5827|  1.85k|        return reader_impl_for_string<CharT>{};
 5828|  1.85k|    }
 5829|  1.85k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  1.85k|                       std::is_same_v<T, wregex_matches>) {
 5831|  1.85k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  1.85k|    }
 5833|  1.85k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  1.85k|        return reader_impl_for_voidptr<CharT>{};
 5835|  1.85k|    }
 5836|  1.85k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  1.85k|        return reader_impl_for_float<CharT>{};
 5838|  1.85k|    }
 5839|  1.85k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  1.85k|                       !std::is_same_v<T, wchar_t> &&
 5841|  1.85k|                       !std::is_same_v<T, char32_t> &&
 5842|  1.85k|                       !std::is_same_v<T, bool>) {
 5843|  1.85k|        return reader_impl_for_int<CharT>{};
 5844|  1.85k|    }
 5845|  1.85k|    else {
 5846|  1.85k|        return reader_impl_for_monostate<CharT>{};
 5847|  1.85k|    }
 5848|  1.85k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    160|    {
 5277|    160|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    160|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    160|        return read_impl(range, specs, value);
 5279|    160|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    160|    {
 5295|    160|        SCN_CLANG_PUSH
 5296|    160|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    160|        switch (m_type) {
 5299|    158|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 158, False: 2]
  ------------------
 5300|    158|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 160]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 160]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 160]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 158]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 160]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 160]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    160|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    160|        }
 5331|       |
 5332|    160|        SCN_CLANG_POP
 5333|    160|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    158|    {
 4827|    158|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    158|                                     value);
 4829|    158|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    158|{
 4773|    158|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    158|    auto src = [&]() {
 4776|    158|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    158|            return make_contiguous_buffer(
 4778|    158|                ranges::subrange{range.begin().base(), result.base()});
 4779|    158|        }
 4780|    158|        else {
 4781|    158|            return make_contiguous_buffer(
 4782|    158|                ranges::subrange{range.begin(), result});
 4783|    158|        }
 4784|    158|    }();
 4785|    158|    using src_type = decltype(src);
 4786|       |
 4787|    158|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    158|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    158|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    158|                                     "Cannot read a string_view from "
 4796|    158|                                     "this source range (would require "
 4797|    158|                                     "transcoding)");
 4798|    158|    }
 4799|    158|    else {
 4800|    158|        const auto view = src.view();
 4801|    158|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    158|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 104, False: 54]
  ------------------
 4804|    104|            return unexpected_scan_error(
 4805|    104|                scan_error::invalid_scanned_value,
 4806|    104|                "Invalid encoding in scanned string_view");
 4807|    104|        }
 4808|       |
 4809|     54|        return SCN_MOVE(result);
  ------------------
  |  |  928|     54|    static_cast<    \
  |  |  929|     54|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    158|    }
 4811|    158|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    158|    auto src = [&]() {
 4776|    158|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    158|            return make_contiguous_buffer(
 4778|    158|                ranges::subrange{range.begin().base(), result.base()});
 4779|    158|        }
 4780|    158|        else {
 4781|    158|            return make_contiguous_buffer(
 4782|    158|                ranges::subrange{range.begin(), result});
 4783|    158|        }
 4784|    158|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|      2|    {
 4902|      2|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|      2|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  1.12k|    {
 5277|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.12k|        return read_impl(range, specs, value);
 5279|  1.12k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  1.12k|    {
 5295|  1.12k|        SCN_CLANG_PUSH
 5296|  1.12k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.12k|        switch (m_type) {
 5299|    380|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 380, False: 744]
  ------------------
 5300|    380|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     86|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 86, False: 1.03k]
  ------------------
 5303|     86|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     86|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 1.12k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 1.12k]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|    658|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 658, False: 466]
  ------------------
 5315|    658|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|    658|                    range, specs.charset_string<SourceCharT>(),
 5317|    658|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 1.12k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.12k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.12k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.12k|        }
 5331|       |
 5332|  1.12k|        SCN_CLANG_POP
 5333|  1.12k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    910|    {
 4827|    910|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    910|                                     value);
 4829|    910|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|    996|{
 4773|    996|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    996|    auto src = [&]() {
 4776|    996|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    996|            return make_contiguous_buffer(
 4778|    996|                ranges::subrange{range.begin().base(), result.base()});
 4779|    996|        }
 4780|    996|        else {
 4781|    996|            return make_contiguous_buffer(
 4782|    996|                ranges::subrange{range.begin(), result});
 4783|    996|        }
 4784|    996|    }();
 4785|    996|    using src_type = decltype(src);
 4786|       |
 4787|    996|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    996|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    996|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    996|                                     "Cannot read a string_view from "
 4796|    996|                                     "this source range (would require "
 4797|    996|                                     "transcoding)");
 4798|    996|    }
 4799|    996|    else {
 4800|    996|        const auto view = src.view();
 4801|    996|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    996|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 368, False: 628]
  ------------------
 4804|    368|            return unexpected_scan_error(
 4805|    368|                scan_error::invalid_scanned_value,
 4806|    368|                "Invalid encoding in scanned string_view");
 4807|    368|        }
 4808|       |
 4809|    628|        return SCN_MOVE(result);
  ------------------
  |  |  928|    628|    static_cast<    \
  |  |  929|    628|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    996|    }
 4811|    996|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|    996|    auto src = [&]() {
 4776|    996|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    996|            return make_contiguous_buffer(
 4778|    996|                ranges::subrange{range.begin().base(), result.base()});
 4779|    996|        }
 4780|    996|        else {
 4781|    996|            return make_contiguous_buffer(
 4782|    996|                ranges::subrange{range.begin(), result});
 4783|    996|        }
 4784|    996|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     86|    {
 4863|     86|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 86, False: 0]
  ------------------
 4864|     86|            return read_string_view_impl(
 4865|     86|                range,
 4866|     86|                read_until_code_unit(
 4867|     86|                    range,
 4868|     86|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     86|                        SourceCharT ch) { return ch == until; }),
 4870|     86|                value);
 4871|     86|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     86|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_:
  753|     86|    {
  754|     86|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES14_w:
  743|  1.18k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.18k|              cvref<T> obj = *get<T>(fn);
  745|  1.18k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.18k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.18k|              }
  748|  1.18k|              else {
  749|  1.18k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.18k|              }
  751|  1.18k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|  1.18k|    {
  684|  1.18k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.18k|            return static_cast<T*>(s.m_cp);
  686|  1.18k|        }
  687|  1.18k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.18k|            return static_cast<T*>(s.m_p);
  689|  1.18k|        }
  690|  1.18k|        else {
  691|  1.18k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.18k|        }
  693|  1.18k|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4869|  1.18k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     86|        {
  662|     86|        }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|    658|    {
 4902|    658|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 658, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    658|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    658|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    658|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    658|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    658|    }                                                  \
  |  |  |  | 3667|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|    658|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|    876|    {
 4100|    876|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 876]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    876|        return std::copysign(value, T{1.0});
 4104|    876|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|    886|    {
 4100|    886|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 886]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    886|        return std::copysign(value, T{1.0});
 4104|    886|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  5.86k|{
 5795|  5.86k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.86k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  5.86k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 652, False: 5.21k]
  ------------------
 5800|    652|        return range.begin();
 5801|    652|    }
 5802|       |
 5803|  5.21k|    return skip_classic_whitespace(range);
 5804|  5.86k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    652|    {
 3528|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    652|        return read_default_with_base(range, value, 10);
 3530|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    652|    {
 3528|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    652|        return read_default_with_base(range, value, 10);
 3530|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5747|  1.08k|    {
 5748|  1.08k|        return true;
 5749|  1.08k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    858|    {
 5765|    858|        detail::format_specs specs{};
 5766|    858|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    858|        std::uintptr_t intvalue{};
 5769|    858|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    858|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    858|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    858|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    858|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 858, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    858|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    858|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    858|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    858|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    858|    }                                                  \
  |  |  |  | 3667|    858|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    858|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.32k|    {
 3035|  1.32k|        return true;
 3036|  1.32k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    652|    {
 5504|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    652|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    652|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5348|  1.18k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|    982|    {
 5355|    982|        scan_error err{scan_error::invalid_scanned_value,
 5356|    982|                       "Failed to read boolean"};
 5357|       |
 5358|    982|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 872, False: 110]
  ------------------
 5359|    872|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 872]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    872|            else {
 5363|    872|                err = r.error();
 5364|    872|            }
 5365|    872|        }
 5366|       |
 5367|    982|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 964, False: 18]
  ------------------
 5368|    964|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 964]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    964|            else {
 5372|    964|                err = r.error();
 5373|    964|            }
 5374|    964|        }
 5375|       |
 5376|    982|        return unexpected(err);
 5377|    982|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    890|    {
 5384|    890|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 890]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    890|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 890]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    890|        return unexpected_scan_error(
 5394|    890|            scan_error::invalid_scanned_value,
 5395|    890|            "Failed to read numeric boolean value: No match");
 5396|    890|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|    964|    {
 5402|    964|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 964]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    964|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 964]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    964|        return unexpected_scan_error(
 5412|    964|            scan_error::invalid_scanned_value,
 5413|    964|            "Failed to read textual boolean value: No match");
 5414|    964|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  1.92k|{
 2194|  1.92k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 102, False: 1.82k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    102|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    102|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    102|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    102|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    102|    }                                                  \
  |  |  |  | 3667|  1.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.82k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.82k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.82k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.82k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.82k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.82k, False: 0]
  |  |  ------------------
  ------------------
 2201|  1.82k|            return unexpected(parse_error::error);
 2202|  1.82k|        }
 2203|      0|        return it;
 2204|  1.82k|    }
 2205|  1.82k|    else {
 2206|  1.82k|        auto range_it = range.begin();
 2207|  1.82k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  1.82k|            if (SCN_UNLIKELY(*range_it !=
 2209|  1.82k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.82k|                return unexpected(parse_error::error);
 2211|  1.82k|            }
 2212|  1.82k|        }
 2213|  1.82k|        return it;
 2214|  1.82k|    }
 2215|  1.82k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|    652|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.18k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    652|    {
 4152|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    652|        float_reader<CharT> rd{};
 4155|    652|        return read_impl<Range>(
 4156|    652|            range, rd,
 4157|    652|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    652|                return r.read_source(SCN_FWD(args)...);
 4159|    652|            },
 4160|    652|            value);
 4161|    652|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    652|    {
  754|    652|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    652|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    652|              cvref<T> obj = *get<T>(fn);
  745|    652|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    652|                  obj(static_cast<decltype(args)>(args)...);
  747|    652|              }
  748|    652|              else {
  749|    652|                  return obj(static_cast<decltype(args)>(args)...);
  750|    652|              }
  751|    652|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    652|    {
  684|    652|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    652|            return static_cast<T*>(s.m_cp);
  686|    652|        }
  687|    652|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    652|            return static_cast<T*>(s.m_p);
  689|    652|        }
  690|    652|        else {
  691|    652|            return reinterpret_cast<T*>(s.m_fp);
  692|    652|        }
  693|    652|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    652|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    652|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    652|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|    652|        {
  662|    652|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    652|    {
 5266|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    652|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    652|    {
 5266|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    652|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    652|    {
 5266|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    652|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    652|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  78.2k|    {
 2879|  78.2k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   304k|    {
 2883|   304k|        return m_current;
 2884|   304k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   335k|    {
 2888|   335k|        return m_range.end();
 2889|   335k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   109k|{
 1221|       |    // TODO: optimize
 1222|   109k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   109k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   109k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   109k|    auto res = get_next_code_point(str);
 1224|   109k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   109k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   112k|    {
 2903|   112k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   112k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   112k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 112k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   112k|        }
 2909|   112k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   112k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   113k|    {
 2893|   113k|        return ranges::subrange{begin(), end()};
 2894|   113k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  18.6k|    {
 6037|  18.6k|        const bool need_skipped_width =
 6038|  18.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 1.57k, False: 17.0k]
  |  Branch (6038:33): [True: 3.41k, False: 13.6k]
  ------------------
 6039|  18.6k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  18.6k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 572, False: 18.0k]
  ------------------
 6043|  18.6k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 1.96k, False: 16.1k]
  ------------------
 6044|  2.53k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  2.53k|                             need_skipped_width);
 6046|  2.53k|        }
 6047|  16.1k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 15.5k, False: 550]
  |  Branch (6047:56): [True: 3.28k, False: 12.2k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  3.28k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 1.70k, False: 1.58k]
  ------------------
 6051|  1.70k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  1.70k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|  1.70k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.70k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.70k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 84, False: 1.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     84|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     84|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     84|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     84|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     84|    }                                                  \
  |  |  |  | 3667|  1.70k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  1.61k|                                  .transform_error(make_eof_scan_error));
 6054|  1.61k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  1.70k|            }
 6056|  3.16k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.16k|                            make_eof_scan_error));
 6058|       |
 6059|  3.16k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 986, False: 596]
  ------------------
 6060|    986|                return result_type{
 6061|    986|                    it,
 6062|    986|                    calculate_text_width(make_contiguous_buffer(
 6063|    986|                                             ranges::subrange{rng.begin(), it})
 6064|    986|                                             .view())};
 6065|    986|            }
 6066|    596|            return result_type{it, 0};
 6067|  3.16k|        }
 6068|       |
 6069|  12.8k|        return result_type{rng.begin(), 0};
 6070|  16.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  4.40k|    {
 6079|  4.40k|        const bool need_skipped_width =
 6080|  4.40k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 348, False: 4.05k]
  |  Branch (6080:33): [True: 976, False: 3.07k]
  ------------------
 6081|  4.40k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  4.40k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 176, False: 4.22k]
  ------------------
 6084|  4.40k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 342, False: 3.88k]
  ------------------
 6085|    518|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|    518|                             specs.fill, need_skipped_width);
 6087|    518|        }
 6088|  3.88k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 3.66k, False: 216]
  ------------------
 6089|  3.88k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 3.40k, False: 264]
  ------------------
 6090|  3.88k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 190, False: 3.21k]
  |  Branch (6090:35): [True: 174, False: 16]
  ------------------
 6091|  3.40k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 380, False: 2.84k]
  ------------------
 6092|  3.22k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 306, False: 74]
  ------------------
 6093|    480|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 306, False: 174]
  ------------------
 6094|    306|                const auto initial_width =
 6095|    306|                    specs.precision - prefix_width - value_width;
 6096|    306|                auto max_width_view = take_width(rng, initial_width);
 6097|    306|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 306]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|    306|                                  .transform_error(make_eof_scan_error));
 6099|    306|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|    306|            }
 6101|    348|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    348|                            make_eof_scan_error));
 6103|       |
 6104|    348|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 174, False: 0]
  ------------------
 6105|    174|                return result_type{
 6106|    174|                    it,
 6107|    174|                    calculate_text_width(make_contiguous_buffer(
 6108|    174|                                             ranges::subrange{rng.begin(), it})
 6109|    174|                                             .view())};
 6110|    174|            }
 6111|      0|            return result_type{it, 0};
 6112|    348|        }
 6113|  3.40k|        return result_type{rng.begin(), 0};
 6114|  3.88k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6177|  5.33k|    {
 6178|  5.33k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.33k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.33k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.33k|            auto rd = make_reader<T, char_type>();
 6183|  5.33k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.83k, False: 502]
  |  |  ------------------
  ------------------
 6184|  4.83k|                return unexpected(e);
 6185|  4.83k|            }
 6186|       |
 6187|    502|            return impl(rd, range, value);
 6188|  5.33k|        }
 6189|  5.33k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.33k|            auto rd = make_reader<T, char_type>();
 6191|  5.33k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.33k|                return unexpected(e);
 6193|  5.33k|            }
 6194|       |
 6195|  5.33k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.33k|                specs.width != 0) {
 6197|  5.33k|                return impl(rd, range, value);
 6198|  5.33k|            }
 6199|       |
 6200|  5.33k|            auto crange = get_as_contiguous(range);
 6201|  5.33k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.33k|            return ranges::next(range.begin(),
 6203|  5.33k|                                ranges::distance(crange.begin(), it));
 6204|  5.33k|        }
 6205|  5.33k|        else {
 6206|  5.33k|            SCN_EXPECT(false);
 6207|  5.33k|            SCN_UNREACHABLE;
 6208|  5.33k|        }
 6209|  5.33k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    502|    {
 6120|    502|        const bool need_skipped_width =
 6121|    502|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 156, False: 346]
  |  Branch (6121:33): [True: 266, False: 80]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    502|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    502|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    502|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    502|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    502|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 486]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|    502|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    486|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    486|        auto [it, prefix_width] = prefix_result;
 6126|    486|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    486|        std::ptrdiff_t value_width = 0;
 6130|    486|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 250, False: 236]
  ------------------
 6131|    250|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 2, False: 248]
  ------------------
 6132|      2|                return unexpected_scan_error(
 6133|      2|                    scan_error::invalid_scanned_value,
 6134|      2|                    "Too many spaces before value, precision exceeded before "
 6135|      2|                    "reading value");
 6136|      2|            }
 6137|       |
 6138|    248|            const auto initial_width = specs.precision - prefix_width;
 6139|    248|            auto max_width_view =
 6140|    248|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    248|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 248, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    248|    }                                                  \
  |  |  |  | 3667|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    236|        else {
 6146|    236|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    236|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    236|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 236, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    236|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    236|    }                                                  \
  |  | 3667|    236|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6177|  5.33k|    {
 6178|  5.33k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.33k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.33k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.33k|            auto rd = make_reader<T, char_type>();
 6183|  5.33k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.83k, False: 502]
  |  |  ------------------
  ------------------
 6184|  4.83k|                return unexpected(e);
 6185|  4.83k|            }
 6186|       |
 6187|    502|            return impl(rd, range, value);
 6188|  5.33k|        }
 6189|  5.33k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.33k|            auto rd = make_reader<T, char_type>();
 6191|  5.33k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.33k|                return unexpected(e);
 6193|  5.33k|            }
 6194|       |
 6195|  5.33k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.33k|                specs.width != 0) {
 6197|  5.33k|                return impl(rd, range, value);
 6198|  5.33k|            }
 6199|       |
 6200|  5.33k|            auto crange = get_as_contiguous(range);
 6201|  5.33k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.33k|            return ranges::next(range.begin(),
 6203|  5.33k|                                ranges::distance(crange.begin(), it));
 6204|  5.33k|        }
 6205|  5.33k|        else {
 6206|  5.33k|            SCN_EXPECT(false);
 6207|  5.33k|            SCN_UNREACHABLE;
 6208|  5.33k|        }
 6209|  5.33k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    502|    {
 6120|    502|        const bool need_skipped_width =
 6121|    502|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 156, False: 346]
  |  Branch (6121:33): [True: 266, False: 80]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    502|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    502|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    502|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    502|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    502|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 486]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|    502|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    486|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    486|        auto [it, prefix_width] = prefix_result;
 6126|    486|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    486|        std::ptrdiff_t value_width = 0;
 6130|    486|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 250, False: 236]
  ------------------
 6131|    250|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 2, False: 248]
  ------------------
 6132|      2|                return unexpected_scan_error(
 6133|      2|                    scan_error::invalid_scanned_value,
 6134|      2|                    "Too many spaces before value, precision exceeded before "
 6135|      2|                    "reading value");
 6136|      2|            }
 6137|       |
 6138|    248|            const auto initial_width = specs.precision - prefix_width;
 6139|    248|            auto max_width_view =
 6140|    248|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    248|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 248, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    248|    }                                                  \
  |  |  |  | 3667|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    236|        else {
 6146|    236|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    236|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    236|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 236, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    236|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    236|    }                                                  \
  |  | 3667|    236|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6177|  5.29k|    {
 6178|  5.29k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.29k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.29k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.29k|            auto rd = make_reader<T, char_type>();
 6183|  5.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.86k, False: 434]
  |  |  ------------------
  ------------------
 6184|  4.86k|                return unexpected(e);
 6185|  4.86k|            }
 6186|       |
 6187|    434|            return impl(rd, range, value);
 6188|  5.29k|        }
 6189|  5.29k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.29k|            auto rd = make_reader<T, char_type>();
 6191|  5.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.29k|                return unexpected(e);
 6193|  5.29k|            }
 6194|       |
 6195|  5.29k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.29k|                specs.width != 0) {
 6197|  5.29k|                return impl(rd, range, value);
 6198|  5.29k|            }
 6199|       |
 6200|  5.29k|            auto crange = get_as_contiguous(range);
 6201|  5.29k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.29k|            return ranges::next(range.begin(),
 6203|  5.29k|                                ranges::distance(crange.begin(), it));
 6204|  5.29k|        }
 6205|  5.29k|        else {
 6206|  5.29k|            SCN_EXPECT(false);
 6207|  5.29k|            SCN_UNREACHABLE;
 6208|  5.29k|        }
 6209|  5.29k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5752|  5.29k|    {
 5753|  5.29k|        reader_error_handler eh{};
 5754|  5.29k|        detail::check_pointer_type_specs(specs, eh);
 5755|  5.29k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.86k, False: 434]
  |  |  ------------------
  ------------------
 5756|  4.86k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  4.86k|        }
 5758|    434|        return {};
 5759|  5.29k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6119|    434|    {
 6120|    434|        const bool need_skipped_width =
 6121|    434|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 152, False: 282]
  |  Branch (6121:33): [True: 228, False: 54]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    434|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    434|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    434|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    434|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    434|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 430]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|    434|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    430|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    430|        auto [it, prefix_width] = prefix_result;
 6126|    430|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    430|        std::ptrdiff_t value_width = 0;
 6130|    430|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 224, False: 206]
  ------------------
 6131|    224|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 224]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    224|            const auto initial_width = specs.precision - prefix_width;
 6139|    224|            auto max_width_view =
 6140|    224|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    224|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    224|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    224|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    224|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 224, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    224|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    224|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    224|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    224|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    224|    }                                                  \
  |  |  |  | 3667|    224|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    206|        else {
 6146|    206|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    206|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    206|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    206|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 206, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    206|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    206|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    206|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    206|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    206|    }                                                  \
  |  | 3667|    206|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    206|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    224|    {
 5782|    224|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    224|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    224|        return read_default(range, value, loc);
 5784|    224|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    224|    {
 5765|    224|        detail::format_specs specs{};
 5766|    224|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    224|        std::uintptr_t intvalue{};
 5769|    224|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    224|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    224|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    224|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 224, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    224|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    224|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    224|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    224|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    224|    }                                                  \
  |  |  |  | 3667|    224|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    224|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    206|    {
 5782|    206|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    206|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    206|        return read_default(range, value, loc);
 5784|    206|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6177|  5.33k|    {
 6178|  5.33k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.33k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.33k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.33k|            auto rd = make_reader<T, char_type>();
 6183|  5.33k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.65k, False: 676]
  |  |  ------------------
  ------------------
 6184|  4.65k|                return unexpected(e);
 6185|  4.65k|            }
 6186|       |
 6187|    676|            return impl(rd, range, value);
 6188|  5.33k|        }
 6189|  5.33k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.33k|            auto rd = make_reader<T, char_type>();
 6191|  5.33k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.33k|                return unexpected(e);
 6193|  5.33k|            }
 6194|       |
 6195|  5.33k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.33k|                specs.width != 0) {
 6197|  5.33k|                return impl(rd, range, value);
 6198|  5.33k|            }
 6199|       |
 6200|  5.33k|            auto crange = get_as_contiguous(range);
 6201|  5.33k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.33k|            return ranges::next(range.begin(),
 6203|  5.33k|                                ranges::distance(crange.begin(), it));
 6204|  5.33k|        }
 6205|  5.33k|        else {
 6206|  5.33k|            SCN_EXPECT(false);
 6207|  5.33k|            SCN_UNREACHABLE;
 6208|  5.33k|        }
 6209|  5.33k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.33k|    {
 3040|  5.33k|        reader_error_handler eh{};
 3041|  5.33k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.33k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.65k, False: 676]
  |  |  ------------------
  ------------------
 3043|  4.65k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.65k|        }
 3045|    676|        return {};
 3046|  5.33k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  5.33k|    {
 3051|  5.33k|        return static_cast<Derived&>(*this);
 3052|  5.33k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  5.33k|    {
 5497|  5.33k|        detail::check_bool_type_specs(specs, eh);
 5498|  5.33k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    676|    {
 6120|    676|        const bool need_skipped_width =
 6121|    676|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 164, False: 512]
  |  Branch (6121:33): [True: 326, False: 186]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    676|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 658]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    658|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    658|        auto [it, prefix_width] = prefix_result;
 6126|    658|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    658|        std::ptrdiff_t value_width = 0;
 6130|    658|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 308, False: 350]
  ------------------
 6131|    308|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 2, False: 306]
  ------------------
 6132|      2|                return unexpected_scan_error(
 6133|      2|                    scan_error::invalid_scanned_value,
 6134|      2|                    "Too many spaces before value, precision exceeded before "
 6135|      2|                    "reading value");
 6136|      2|            }
 6137|       |
 6138|    306|            const auto initial_width = specs.precision - prefix_width;
 6139|    306|            auto max_width_view =
 6140|    306|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    306|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 306, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    306|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    306|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    306|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    306|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    306|    }                                                  \
  |  |  |  | 3667|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    350|        else {
 6146|    350|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    350|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    350|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    350|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 350, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    350|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    350|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    350|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    350|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    350|    }                                                  \
  |  | 3667|    350|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    306|    {
 5516|    306|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    306|#if !SCN_DISABLE_LOCALE
 5519|    306|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 12, False: 294]
  ------------------
 5520|     12|            return rd.read_localized(range, loc, value);
 5521|     12|        }
 5522|    294|#endif
 5523|       |
 5524|    294|        return rd.read_classic(range, value);
 5525|    306|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5528|    656|    {
 5529|    656|        SCN_GCC_COMPAT_PUSH
 5530|    656|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    656|        switch (specs.type) {
 5533|    168|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 168, False: 488]
  ------------------
 5534|    168|                return bool_reader_base::allow_text;
 5535|       |
 5536|     12|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 12, False: 644]
  ------------------
 5537|     20|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 8, False: 648]
  ------------------
 5538|     26|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 650]
  ------------------
 5539|     32|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 6, False: 650]
  ------------------
 5540|     42|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 10, False: 646]
  ------------------
 5541|     46|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 652]
  ------------------
 5542|     46|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    442|            default:
  ------------------
  |  Branch (5544:13): [True: 442, False: 214]
  ------------------
 5545|    442|                return bool_reader_base::allow_text |
 5546|    442|                       bool_reader_base::allow_numeric;
 5547|    656|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    656|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     12|    {
 5428|     12|        scan_error err{scan_error::invalid_scanned_value,
 5429|     12|                       "Failed to read boolean"};
 5430|       |
 5431|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 10, False: 2]
  ------------------
 5432|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 10]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     10|            else {
 5436|     10|                err = r.error();
 5437|     10|            }
 5438|     10|        }
 5439|       |
 5440|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 10, False: 2]
  ------------------
 5441|     10|            auto stdloc = loc.get<std::locale>();
 5442|     10|            const auto& numpunct =
 5443|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     10|            const auto truename = numpunct.truename();
 5445|     10|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     10|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 10]
  ------------------
 5448|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     10|            else {
 5452|     10|                err = r.error();
 5453|     10|            }
 5454|     10|        }
 5455|       |
 5456|     12|        return unexpected(err);
 5457|     12|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    250|    {
 5384|    250|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 250]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    250|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 250]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    250|        return unexpected_scan_error(
 5394|    250|            scan_error::invalid_scanned_value,
 5395|    250|            "Failed to read numeric boolean value: No match");
 5396|    250|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    500|{
 2146|    500|    auto it = read_code_unit(range);
 2147|    500|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 500]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    500|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 500, False: 0]
  |  |  ------------------
  ------------------
 2152|    500|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    500|        return unexpected(parse_error::error);
 2154|    500|    }
 2155|       |
 2156|      0|    return *it;
 2157|    500|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5467|     10|    {
 5468|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     10|        const auto shorter = std::pair{
 5470|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 10, False: 0]
  ------------------
 5471|     10|        const auto longer = std::pair{
 5472|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 10]
  ------------------
 5473|       |
 5474|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 10]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 10]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     10|                                     "read_textual: No match");
 5485|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      8|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      8|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      8|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      8|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 2185|      8|        return unexpected(parse_error::error);
 2186|      8|    }
 2187|      0|    return it;
 2188|      8|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    572|{
 1857|    572|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    572|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    572|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    572|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    572|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    572|        if (sz < count) {
 1862|    572|            return unexpected(eof_error::eof);
 1863|    572|        }
 1864|       |
 1865|    572|        return ranges::next(range.begin(), count);
 1866|    572|    }
 1867|    572|    else {
 1868|    572|        auto it = range.begin();
 1869|    572|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 572]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  2.92k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.43k, False: 490]
  ------------------
 1874|  2.43k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 82, False: 2.35k]
  ------------------
 1875|     82|                return unexpected(eof_error::eof);
 1876|     82|            }
 1877|  2.43k|        }
 1878|       |
 1879|    490|        return it;
 1880|    572|    }
 1881|    572|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    572|{
 1095|    572|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    572|        return r.size();
 1097|    572|    }
 1098|    572|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    572|                           ranges::const_iterator_t<Range>,
 1100|    572|                           typename detail::basic_scan_buffer<
 1101|    572|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    572|        if constexpr (ranges::common_range<Range>) {
 1103|    572|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    572|        }
 1105|    572|        else {
 1106|    572|            if (r.begin().stores_parent()) {
 1107|    572|                return static_cast<size_t>(
 1108|    572|                    r.begin().parent()->chars_available() -
 1109|    572|                    r.begin().position());
 1110|    572|            }
 1111|    572|            return r.begin().contiguous_segment().size();
 1112|    572|        }
 1113|    572|    }
 1114|    572|    else {
 1115|    572|        return 0;
 1116|    572|    }
 1117|    572|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    294|    {
 5355|    294|        scan_error err{scan_error::invalid_scanned_value,
 5356|    294|                       "Failed to read boolean"};
 5357|       |
 5358|    294|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 240, False: 54]
  ------------------
 5359|    240|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 240]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    240|            else {
 5363|    240|                err = r.error();
 5364|    240|            }
 5365|    240|        }
 5366|       |
 5367|    294|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 276, False: 18]
  ------------------
 5368|    276|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 276]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    276|            else {
 5372|    276|                err = r.error();
 5373|    276|            }
 5374|    276|        }
 5375|       |
 5376|    294|        return unexpected(err);
 5377|    294|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    276|    {
 5402|    276|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 276]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    276|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 276]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    276|        return unexpected_scan_error(
 5412|    276|            scan_error::invalid_scanned_value,
 5413|    276|            "Failed to read textual boolean value: No match");
 5414|    276|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    552|{
 2194|    552|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    552|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    552|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    552|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 70, False: 482]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     70|    }                                                  \
  |  |  |  | 3667|    552|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    482|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    482|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    482|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    482|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    482|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    482|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    482|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 482, False: 0]
  |  |  ------------------
  ------------------
 2201|    482|            return unexpected(parse_error::error);
 2202|    482|        }
 2203|      0|        return it;
 2204|    482|    }
 2205|    482|    else {
 2206|    482|        auto range_it = range.begin();
 2207|    482|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|    482|            if (SCN_UNLIKELY(*range_it !=
 2209|    482|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    482|                return unexpected(parse_error::error);
 2211|    482|            }
 2212|    482|        }
 2213|    482|        return it;
 2214|    482|    }
 2215|    482|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    350|    {
 5516|    350|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    350|#if !SCN_DISABLE_LOCALE
 5519|    350|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 20, False: 330]
  ------------------
 5520|     20|            return rd.read_localized(range, loc, value);
 5521|     20|        }
 5522|    330|#endif
 5523|       |
 5524|    330|        return rd.read_classic(range, value);
 5525|    350|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     20|    {
 5428|     20|        scan_error err{scan_error::invalid_scanned_value,
 5429|     20|                       "Failed to read boolean"};
 5430|       |
 5431|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 18, False: 2]
  ------------------
 5432|     18|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 18]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     18|            else {
 5436|     18|                err = r.error();
 5437|     18|            }
 5438|     18|        }
 5439|       |
 5440|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 12, False: 8]
  ------------------
 5441|     12|            auto stdloc = loc.get<std::locale>();
 5442|     12|            const auto& numpunct =
 5443|     12|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     12|            const auto truename = numpunct.truename();
 5445|     12|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     12|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 12]
  ------------------
 5448|     12|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     12|            else {
 5452|     12|                err = r.error();
 5453|     12|            }
 5454|     12|        }
 5455|       |
 5456|     20|        return unexpected(err);
 5457|     20|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5467|     12|    {
 5468|     12|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     12|        const auto shorter = std::pair{
 5470|     12|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 12, False: 0]
  ------------------
 5471|     12|        const auto longer = std::pair{
 5472|     12|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 12]
  ------------------
 5473|       |
 5474|     12|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 12]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     12|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 12]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     12|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     12|                                     "read_textual: No match");
 5485|     12|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     24|{
 2179|     24|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     22|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     22|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     22|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     22|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 2185|     22|        return unexpected(parse_error::error);
 2186|     22|    }
 2187|      0|    return it;
 2188|     22|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6177|  5.29k|    {
 6178|  5.29k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.29k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.29k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.29k|            auto rd = make_reader<T, char_type>();
 6183|  5.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.81k, False: 478]
  |  |  ------------------
  ------------------
 6184|  4.81k|                return unexpected(e);
 6185|  4.81k|            }
 6186|       |
 6187|    478|            return impl(rd, range, value);
 6188|  5.29k|        }
 6189|  5.29k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.29k|            auto rd = make_reader<T, char_type>();
 6191|  5.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.29k|                return unexpected(e);
 6193|  5.29k|            }
 6194|       |
 6195|  5.29k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.29k|                specs.width != 0) {
 6197|  5.29k|                return impl(rd, range, value);
 6198|  5.29k|            }
 6199|       |
 6200|  5.29k|            auto crange = get_as_contiguous(range);
 6201|  5.29k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.29k|            return ranges::next(range.begin(),
 6203|  5.29k|                                ranges::distance(crange.begin(), it));
 6204|  5.29k|        }
 6205|  5.29k|        else {
 6206|  5.29k|            SCN_EXPECT(false);
 6207|  5.29k|            SCN_UNREACHABLE;
 6208|  5.29k|        }
 6209|  5.29k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    478|    {
 6120|    478|        const bool need_skipped_width =
 6121|    478|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 154, False: 324]
  |  Branch (6121:33): [True: 258, False: 66]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    478|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    478|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    478|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    478|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 478]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    478|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    478|        auto [it, prefix_width] = prefix_result;
 6126|    478|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    478|        std::ptrdiff_t value_width = 0;
 6130|    478|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 258, False: 220]
  ------------------
 6131|    258|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 2, False: 256]
  ------------------
 6132|      2|                return unexpected_scan_error(
 6133|      2|                    scan_error::invalid_scanned_value,
 6134|      2|                    "Too many spaces before value, precision exceeded before "
 6135|      2|                    "reading value");
 6136|      2|            }
 6137|       |
 6138|    256|            const auto initial_width = specs.precision - prefix_width;
 6139|    256|            auto max_width_view =
 6140|    256|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    256|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    256|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 226]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|    226|            it = w_it.base();
 6143|    226|            value_width = initial_width - w_it.count();
 6144|    226|        }
 6145|    220|        else {
 6146|    220|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18, False: 202]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     18|    }                                                  \
  |  | 3667|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    220|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    202|                                             specs, value, loc));
 6148|       |
 6149|    202|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 150, False: 52]
  ------------------
 6150|    150|                value_width = calculate_text_width(
 6151|    150|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    150|                        .view());
 6153|    150|            }
 6154|    202|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    428|        std::ptrdiff_t postfix_width = 0;
 6158|    428|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 428, False: 0]
  ------------------
 6159|    428|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    428|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    428|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    428|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 428]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    428|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    428|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    428|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    428|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    428|                                 value_width));
 6163|    428|            std::tie(it, postfix_width) = postfix_result;
 6164|    428|        }
 6165|       |
 6166|    428|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    428|                                                 value_width, postfix_width);
 6168|    428|            !e) {
  ------------------
  |  Branch (6168:13): [True: 138, False: 290]
  ------------------
 6169|    138|            return unexpected(e);
 6170|    138|        }
 6171|       |
 6172|    290|        return it;
 6173|    428|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6177|  5.33k|    {
 6178|  5.33k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.33k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.33k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.33k|            auto rd = make_reader<T, char_type>();
 6183|  5.33k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.82k, False: 510]
  |  |  ------------------
  ------------------
 6184|  4.82k|                return unexpected(e);
 6185|  4.82k|            }
 6186|       |
 6187|    510|            return impl(rd, range, value);
 6188|  5.33k|        }
 6189|  5.33k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.33k|            auto rd = make_reader<T, char_type>();
 6191|  5.33k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.33k|                return unexpected(e);
 6193|  5.33k|            }
 6194|       |
 6195|  5.33k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.33k|                specs.width != 0) {
 6197|  5.33k|                return impl(rd, range, value);
 6198|  5.33k|            }
 6199|       |
 6200|  5.33k|            auto crange = get_as_contiguous(range);
 6201|  5.33k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.33k|            return ranges::next(range.begin(),
 6203|  5.33k|                                ranges::distance(crange.begin(), it));
 6204|  5.33k|        }
 6205|  5.33k|        else {
 6206|  5.33k|            SCN_EXPECT(false);
 6207|  5.33k|            SCN_UNREACHABLE;
 6208|  5.33k|        }
 6209|  5.33k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    510|    {
 6120|    510|        const bool need_skipped_width =
 6121|    510|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 160, False: 350]
  |  Branch (6121:33): [True: 256, False: 94]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    510|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    510|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    510|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    510|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    510|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 498]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|    510|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    498|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    498|        auto [it, prefix_width] = prefix_result;
 6126|    498|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    498|        std::ptrdiff_t value_width = 0;
 6130|    498|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 244, False: 254]
  ------------------
 6131|    244|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 244]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    244|            const auto initial_width = specs.precision - prefix_width;
 6139|    244|            auto max_width_view =
 6140|    244|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    244|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 244, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    244|    }                                                  \
  |  |  |  | 3667|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    254|        else {
 6146|    254|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 254, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    254|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    254|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    254|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    254|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    254|    }                                                  \
  |  | 3667|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6177|  5.29k|    {
 6178|  5.29k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.29k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.29k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.29k|            auto rd = make_reader<T, char_type>();
 6183|  5.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 5.17k]
  |  |  ------------------
  ------------------
 6184|    116|                return unexpected(e);
 6185|    116|            }
 6186|       |
 6187|  5.17k|            return impl(rd, range, value);
 6188|  5.29k|        }
 6189|  5.29k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.29k|            auto rd = make_reader<T, char_type>();
 6191|  5.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.29k|                return unexpected(e);
 6193|  5.29k|            }
 6194|       |
 6195|  5.29k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.29k|                specs.width != 0) {
 6197|  5.29k|                return impl(rd, range, value);
 6198|  5.29k|            }
 6199|       |
 6200|  5.29k|            auto crange = get_as_contiguous(range);
 6201|  5.29k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.29k|            return ranges::next(range.begin(),
 6203|  5.29k|                                ranges::distance(crange.begin(), it));
 6204|  5.29k|        }
 6205|  5.29k|        else {
 6206|  5.29k|            SCN_EXPECT(false);
 6207|  5.29k|            SCN_UNREACHABLE;
 6208|  5.29k|        }
 6209|  5.29k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6119|  5.17k|    {
 6120|  5.17k|        const bool need_skipped_width =
 6121|  5.17k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 212, False: 4.96k]
  |  Branch (6121:33): [True: 606, False: 4.36k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  5.17k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  5.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 5.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      6|    }                                                  \
  |  |  |  | 3667|  5.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  5.17k|        auto [it, prefix_width] = prefix_result;
 6126|  5.17k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  5.17k|        std::ptrdiff_t value_width = 0;
 6130|  5.17k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 600, False: 4.57k]
  ------------------
 6131|    600|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 600]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    600|            const auto initial_width = specs.precision - prefix_width;
 6139|    600|            auto max_width_view =
 6140|    600|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    600|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    600|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    600|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    600|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    600|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 296, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    296|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    296|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    296|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    296|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    296|    }                                                  \
  |  |  |  | 3667|    600|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|    304|            it = w_it.base();
 6143|    304|            value_width = initial_width - w_it.count();
 6144|    304|        }
 6145|  4.57k|        else {
 6146|  4.57k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  4.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  4.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.19k, False: 1.37k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.19k|    }                                                  \
  |  | 3667|  4.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  1.37k|                                             specs, value, loc));
 6148|       |
 6149|  1.37k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 180, False: 1.19k]
  ------------------
 6150|    180|                value_width = calculate_text_width(
 6151|    180|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    180|                        .view());
 6153|    180|            }
 6154|  1.37k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  1.67k|        std::ptrdiff_t postfix_width = 0;
 6158|  1.67k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 1.32k, False: 354]
  ------------------
 6159|  1.32k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  1.32k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  1.32k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  1.32k|                                 value_width));
 6163|  1.32k|            std::tie(it, postfix_width) = postfix_result;
 6164|  1.32k|        }
 6165|       |
 6166|  1.67k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  1.67k|                                                 value_width, postfix_width);
 6168|  1.67k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 92, False: 1.58k]
  ------------------
 6169|     92|            return unexpected(e);
 6170|     92|        }
 6171|       |
 6172|  1.58k|        return it;
 6173|  1.67k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6177|  5.29k|    {
 6178|  5.29k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.29k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.29k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.29k|            auto rd = make_reader<T, char_type>();
 6183|  5.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 5.17k]
  |  |  ------------------
  ------------------
 6184|    116|                return unexpected(e);
 6185|    116|            }
 6186|       |
 6187|  5.17k|            return impl(rd, range, value);
 6188|  5.29k|        }
 6189|  5.29k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.29k|            auto rd = make_reader<T, char_type>();
 6191|  5.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.29k|                return unexpected(e);
 6193|  5.29k|            }
 6194|       |
 6195|  5.29k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.29k|                specs.width != 0) {
 6197|  5.29k|                return impl(rd, range, value);
 6198|  5.29k|            }
 6199|       |
 6200|  5.29k|            auto crange = get_as_contiguous(range);
 6201|  5.29k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.29k|            return ranges::next(range.begin(),
 6203|  5.29k|                                ranges::distance(crange.begin(), it));
 6204|  5.29k|        }
 6205|  5.29k|        else {
 6206|  5.29k|            SCN_EXPECT(false);
 6207|  5.29k|            SCN_UNREACHABLE;
 6208|  5.29k|        }
 6209|  5.29k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6119|  5.17k|    {
 6120|  5.17k|        const bool need_skipped_width =
 6121|  5.17k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 212, False: 4.96k]
  |  Branch (6121:33): [True: 606, False: 4.36k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  5.17k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  5.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 5.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      6|    }                                                  \
  |  |  |  | 3667|  5.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  5.17k|        auto [it, prefix_width] = prefix_result;
 6126|  5.17k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  5.17k|        std::ptrdiff_t value_width = 0;
 6130|  5.17k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 600, False: 4.57k]
  ------------------
 6131|    600|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 600]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    600|            const auto initial_width = specs.precision - prefix_width;
 6139|    600|            auto max_width_view =
 6140|    600|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    600|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    600|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    600|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    600|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    600|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 296, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    296|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    296|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    296|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    296|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    296|    }                                                  \
  |  |  |  | 3667|    600|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|    304|            it = w_it.base();
 6143|    304|            value_width = initial_width - w_it.count();
 6144|    304|        }
 6145|  4.57k|        else {
 6146|  4.57k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  4.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  4.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.19k, False: 1.37k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.19k|    }                                                  \
  |  | 3667|  4.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  1.37k|                                             specs, value, loc));
 6148|       |
 6149|  1.37k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 180, False: 1.19k]
  ------------------
 6150|    180|                value_width = calculate_text_width(
 6151|    180|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    180|                        .view());
 6153|    180|            }
 6154|  1.37k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  1.67k|        std::ptrdiff_t postfix_width = 0;
 6158|  1.67k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 1.32k, False: 354]
  ------------------
 6159|  1.32k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  1.32k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  1.32k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  1.32k|                                 value_width));
 6163|  1.32k|            std::tie(it, postfix_width) = postfix_result;
 6164|  1.32k|        }
 6165|       |
 6166|  1.67k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  1.67k|                                                 value_width, postfix_width);
 6168|  1.67k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 92, False: 1.58k]
  ------------------
 6169|     92|            return unexpected(e);
 6170|     92|        }
 6171|       |
 6172|  1.58k|        return it;
 6173|  1.67k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6177|  5.29k|    {
 6178|  5.29k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.29k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.29k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.29k|            auto rd = make_reader<T, char_type>();
 6183|  5.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 5.17k]
  |  |  ------------------
  ------------------
 6184|    116|                return unexpected(e);
 6185|    116|            }
 6186|       |
 6187|  5.17k|            return impl(rd, range, value);
 6188|  5.29k|        }
 6189|  5.29k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.29k|            auto rd = make_reader<T, char_type>();
 6191|  5.29k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.29k|                return unexpected(e);
 6193|  5.29k|            }
 6194|       |
 6195|  5.29k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.29k|                specs.width != 0) {
 6197|  5.29k|                return impl(rd, range, value);
 6198|  5.29k|            }
 6199|       |
 6200|  5.29k|            auto crange = get_as_contiguous(range);
 6201|  5.29k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.29k|            return ranges::next(range.begin(),
 6203|  5.29k|                                ranges::distance(crange.begin(), it));
 6204|  5.29k|        }
 6205|  5.29k|        else {
 6206|  5.29k|            SCN_EXPECT(false);
 6207|  5.29k|            SCN_UNREACHABLE;
 6208|  5.29k|        }
 6209|  5.29k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6119|  5.17k|    {
 6120|  5.17k|        const bool need_skipped_width =
 6121|  5.17k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 212, False: 4.96k]
  |  Branch (6121:33): [True: 606, False: 4.36k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  5.17k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  5.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 5.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      6|    }                                                  \
  |  |  |  | 3667|  5.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  5.17k|        auto [it, prefix_width] = prefix_result;
 6126|  5.17k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  5.17k|        std::ptrdiff_t value_width = 0;
 6130|  5.17k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 600, False: 4.57k]
  ------------------
 6131|    600|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 600]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    600|            const auto initial_width = specs.precision - prefix_width;
 6139|    600|            auto max_width_view =
 6140|    600|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    600|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    600|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    600|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    600|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    600|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 296, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    296|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    296|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    296|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    296|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    296|    }                                                  \
  |  |  |  | 3667|    600|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|    304|            it = w_it.base();
 6143|    304|            value_width = initial_width - w_it.count();
 6144|    304|        }
 6145|  4.57k|        else {
 6146|  4.57k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  4.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  4.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.19k, False: 1.37k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.19k|    }                                                  \
  |  | 3667|  4.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  1.37k|                                             specs, value, loc));
 6148|       |
 6149|  1.37k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 180, False: 1.19k]
  ------------------
 6150|    180|                value_width = calculate_text_width(
 6151|    180|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    180|                        .view());
 6153|    180|            }
 6154|  1.37k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  1.67k|        std::ptrdiff_t postfix_width = 0;
 6158|  1.67k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 1.32k, False: 354]
  ------------------
 6159|  1.32k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  1.32k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  1.32k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  1.32k|                                 value_width));
 6163|  1.32k|            std::tie(it, postfix_width) = postfix_result;
 6164|  1.32k|        }
 6165|       |
 6166|  1.67k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  1.67k|                                                 value_width, postfix_width);
 6168|  1.67k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 92, False: 1.58k]
  ------------------
 6169|     92|            return unexpected(e);
 6170|     92|        }
 6171|       |
 6172|  1.58k|        return it;
 6173|  1.67k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  4.77k|{
 5795|  4.77k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.77k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  4.77k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 530, False: 4.24k]
  ------------------
 5800|    530|        return range.begin();
 5801|    530|    }
 5802|       |
 5803|  4.24k|    return skip_classic_whitespace(range);
 5804|  4.77k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5870|    530|    {
 5871|    530|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    530|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    530|                          basic_contiguous_scan_context<char_type>>) {
 5875|    530|            auto rd = make_reader<T, char_type>();
 5876|    530|            return impl(rd, range, value);
 5877|    530|        }
 5878|    530|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    530|            auto rd = make_reader<T, char_type>();
 5880|    530|            if (!is_segment_contiguous(range)) {
 5881|    530|                return impl(rd, range, value);
 5882|    530|            }
 5883|    530|            auto crange = get_as_contiguous(range);
 5884|    530|            SCN_TRY(it, impl(rd, crange, value));
 5885|    530|            return ranges::next(range.begin(),
 5886|    530|                                ranges::distance(crange.begin(), it));
 5887|    530|        }
 5888|    530|        else {
 5889|    530|            SCN_EXPECT(false);
 5890|    530|            SCN_UNREACHABLE;
 5891|    530|        }
 5892|    530|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    530|    {
 5863|    530|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    530|                        .transform_error(make_eof_scan_error));
 5865|    530|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    530|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    530|    {
 3528|    530|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    530|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    530|        return read_default_with_base(range, value, 10);
 3530|    530|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    530|    {
 3492|    530|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    530|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    530|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    530|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    530|                return unexpected_scan_error(
 3498|    530|                    scan_error::invalid_scanned_value,
 3499|    530|                    "Unexpected '-' sign when parsing an "
 3500|    530|                    "unsigned value");
 3501|    530|            }
 3502|    530|        }
 3503|       |
 3504|    530|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 530]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.06k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.06k|                parse_integer_digits_without_thsep(
 3511|  1.06k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.06k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.06k|        auto buf = make_contiguous_buffer(
 3515|  1.06k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.06k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 530, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    530|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    530|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    530|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    530|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    530|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.06k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5870|    530|    {
 5871|    530|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    530|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    530|                          basic_contiguous_scan_context<char_type>>) {
 5875|    530|            auto rd = make_reader<T, char_type>();
 5876|    530|            return impl(rd, range, value);
 5877|    530|        }
 5878|    530|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    530|            auto rd = make_reader<T, char_type>();
 5880|    530|            if (!is_segment_contiguous(range)) {
 5881|    530|                return impl(rd, range, value);
 5882|    530|            }
 5883|    530|            auto crange = get_as_contiguous(range);
 5884|    530|            SCN_TRY(it, impl(rd, crange, value));
 5885|    530|            return ranges::next(range.begin(),
 5886|    530|                                ranges::distance(crange.begin(), it));
 5887|    530|        }
 5888|    530|        else {
 5889|    530|            SCN_EXPECT(false);
 5890|    530|            SCN_UNREACHABLE;
 5891|    530|        }
 5892|    530|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    530|    {
 5863|    530|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    530|                        .transform_error(make_eof_scan_error));
 5865|    530|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    530|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    530|    {
 3528|    530|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    530|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    530|        return read_default_with_base(range, value, 10);
 3530|    530|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    530|    {
 3492|    530|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    530|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    530|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    530|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 530]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    530|        }
 3503|       |
 3504|    530|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 530]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.06k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.06k|                parse_integer_digits_without_thsep(
 3511|  1.06k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.06k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.06k|        auto buf = make_contiguous_buffer(
 3515|  1.06k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.06k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 530, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    530|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    530|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    530|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    530|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    530|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.06k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5870|    530|    {
 5871|    530|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    530|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    530|                          basic_contiguous_scan_context<char_type>>) {
 5875|    530|            auto rd = make_reader<T, char_type>();
 5876|    530|            return impl(rd, range, value);
 5877|    530|        }
 5878|    530|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    530|            auto rd = make_reader<T, char_type>();
 5880|    530|            if (!is_segment_contiguous(range)) {
 5881|    530|                return impl(rd, range, value);
 5882|    530|            }
 5883|    530|            auto crange = get_as_contiguous(range);
 5884|    530|            SCN_TRY(it, impl(rd, crange, value));
 5885|    530|            return ranges::next(range.begin(),
 5886|    530|                                ranges::distance(crange.begin(), it));
 5887|    530|        }
 5888|    530|        else {
 5889|    530|            SCN_EXPECT(false);
 5890|    530|            SCN_UNREACHABLE;
 5891|    530|        }
 5892|    530|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    530|    {
 5863|    530|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    530|                        .transform_error(make_eof_scan_error));
 5865|    530|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    530|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5747|  1.03k|    {
 5748|  1.03k|        return true;
 5749|  1.03k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    872|    {
 5765|    872|        detail::format_specs specs{};
 5766|    872|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    872|        std::uintptr_t intvalue{};
 5769|    872|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 872, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    872|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    872|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    872|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    872|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    872|    }                                                  \
  |  |  |  | 3667|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    872|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5870|    530|    {
 5871|    530|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    530|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    530|                          basic_contiguous_scan_context<char_type>>) {
 5875|    530|            auto rd = make_reader<T, char_type>();
 5876|    530|            return impl(rd, range, value);
 5877|    530|        }
 5878|    530|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    530|            auto rd = make_reader<T, char_type>();
 5880|    530|            if (!is_segment_contiguous(range)) {
 5881|    530|                return impl(rd, range, value);
 5882|    530|            }
 5883|    530|            auto crange = get_as_contiguous(range);
 5884|    530|            SCN_TRY(it, impl(rd, crange, value));
 5885|    530|            return ranges::next(range.begin(),
 5886|    530|                                ranges::distance(crange.begin(), it));
 5887|    530|        }
 5888|    530|        else {
 5889|    530|            SCN_EXPECT(false);
 5890|    530|            SCN_UNREACHABLE;
 5891|    530|        }
 5892|    530|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    530|    {
 5863|    530|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    530|                        .transform_error(make_eof_scan_error));
 5865|    530|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    530|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|  1.19k|    {
 3035|  1.19k|        return true;
 3036|  1.19k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    530|    {
 5504|    530|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    530|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    530|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    530|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|  1.01k|    {
 5355|  1.01k|        scan_error err{scan_error::invalid_scanned_value,
 5356|  1.01k|                       "Failed to read boolean"};
 5357|       |
 5358|  1.01k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 886, False: 126]
  ------------------
 5359|    886|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 886]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    886|            else {
 5363|    886|                err = r.error();
 5364|    886|            }
 5365|    886|        }
 5366|       |
 5367|  1.01k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 996, False: 16]
  ------------------
 5368|    996|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 996]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    996|            else {
 5372|    996|                err = r.error();
 5373|    996|            }
 5374|    996|        }
 5375|       |
 5376|  1.01k|        return unexpected(err);
 5377|  1.01k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    898|    {
 5384|    898|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 898]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    898|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 898]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    898|        return unexpected_scan_error(
 5394|    898|            scan_error::invalid_scanned_value,
 5395|    898|            "Failed to read numeric boolean value: No match");
 5396|    898|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|    996|    {
 5402|    996|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 996]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    996|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 996]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    996|        return unexpected_scan_error(
 5412|    996|            scan_error::invalid_scanned_value,
 5413|    996|            "Failed to read textual boolean value: No match");
 5414|    996|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  1.99k|{
 2194|  1.99k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.99k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.99k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.99k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 128, False: 1.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    128|    }                                                  \
  |  |  |  | 3667|  1.99k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.86k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.86k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.86k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.86k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.86k|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|  1.86k|            return unexpected(parse_error::error);
 2202|  1.86k|        }
 2203|  1.86k|        return it;
 2204|  1.86k|    }
 2205|  1.86k|    else {
 2206|  1.86k|        auto range_it = range.begin();
 2207|  1.86k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 1.86k, False: 0]
  ------------------
 2208|  1.86k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.86k, False: 0]
  |  |  ------------------
  ------------------
 2209|  1.86k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.86k|                return unexpected(parse_error::error);
 2211|  1.86k|            }
 2212|  1.86k|        }
 2213|      0|        return it;
 2214|  1.86k|    }
 2215|  1.86k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5870|    530|    {
 5871|    530|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    530|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    530|                          basic_contiguous_scan_context<char_type>>) {
 5875|    530|            auto rd = make_reader<T, char_type>();
 5876|    530|            return impl(rd, range, value);
 5877|    530|        }
 5878|    530|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    530|            auto rd = make_reader<T, char_type>();
 5880|    530|            if (!is_segment_contiguous(range)) {
 5881|    530|                return impl(rd, range, value);
 5882|    530|            }
 5883|    530|            auto crange = get_as_contiguous(range);
 5884|    530|            SCN_TRY(it, impl(rd, crange, value));
 5885|    530|            return ranges::next(range.begin(),
 5886|    530|                                ranges::distance(crange.begin(), it));
 5887|    530|        }
 5888|    530|        else {
 5889|    530|            SCN_EXPECT(false);
 5890|    530|            SCN_UNREACHABLE;
 5891|    530|        }
 5892|    530|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    530|    {
 5863|    530|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    530|                        .transform_error(make_eof_scan_error));
 5865|    530|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    530|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|    530|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|    530|    {
 5871|    530|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    530|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    530|                          basic_contiguous_scan_context<char_type>>) {
 5875|    530|            auto rd = make_reader<T, char_type>();
 5876|    530|            return impl(rd, range, value);
 5877|    530|        }
 5878|    530|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    530|            auto rd = make_reader<T, char_type>();
 5880|    530|            if (!is_segment_contiguous(range)) {
 5881|    530|                return impl(rd, range, value);
 5882|    530|            }
 5883|    530|            auto crange = get_as_contiguous(range);
 5884|    530|            SCN_TRY(it, impl(rd, crange, value));
 5885|    530|            return ranges::next(range.begin(),
 5886|    530|                                ranges::distance(crange.begin(), it));
 5887|    530|        }
 5888|    530|        else {
 5889|    530|            SCN_EXPECT(false);
 5890|    530|            SCN_UNREACHABLE;
 5891|    530|        }
 5892|    530|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    530|    {
 5863|    530|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    530|                        .transform_error(make_eof_scan_error));
 5865|    530|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    530|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    530|    {
 4152|    530|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    530|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    530|        float_reader<CharT> rd{};
 4155|    530|        return read_impl<Range>(
 4156|    530|            range, rd,
 4157|    530|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    530|                return r.read_source(SCN_FWD(args)...);
 4159|    530|            },
 4160|    530|            value);
 4161|    530|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    530|    {
  754|    530|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    530|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    530|              cvref<T> obj = *get<T>(fn);
  745|    530|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    530|                  obj(static_cast<decltype(args)>(args)...);
  747|    530|              }
  748|    530|              else {
  749|    530|                  return obj(static_cast<decltype(args)>(args)...);
  750|    530|              }
  751|    530|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    530|    {
  684|    530|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    530|            return static_cast<T*>(s.m_cp);
  686|    530|        }
  687|    530|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    530|            return static_cast<T*>(s.m_p);
  689|    530|        }
  690|    530|        else {
  691|    530|            return reinterpret_cast<T*>(s.m_fp);
  692|    530|        }
  693|    530|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    530|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    530|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    530|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    530|        {
  662|    530|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    530|    {
 5871|    530|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    530|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    530|                          basic_contiguous_scan_context<char_type>>) {
 5875|    530|            auto rd = make_reader<T, char_type>();
 5876|    530|            return impl(rd, range, value);
 5877|    530|        }
 5878|    530|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    530|            auto rd = make_reader<T, char_type>();
 5880|    530|            if (!is_segment_contiguous(range)) {
 5881|    530|                return impl(rd, range, value);
 5882|    530|            }
 5883|    530|            auto crange = get_as_contiguous(range);
 5884|    530|            SCN_TRY(it, impl(rd, crange, value));
 5885|    530|            return ranges::next(range.begin(),
 5886|    530|                                ranges::distance(crange.begin(), it));
 5887|    530|        }
 5888|    530|        else {
 5889|    530|            SCN_EXPECT(false);
 5890|    530|            SCN_UNREACHABLE;
 5891|    530|        }
 5892|    530|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    530|    {
 5863|    530|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    530|                        .transform_error(make_eof_scan_error));
 5865|    530|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    530|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    530|    {
 5266|    530|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    530|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    530|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    530|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    530|    {
 5871|    530|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    530|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    530|                          basic_contiguous_scan_context<char_type>>) {
 5875|    530|            auto rd = make_reader<T, char_type>();
 5876|    530|            return impl(rd, range, value);
 5877|    530|        }
 5878|    530|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    530|            auto rd = make_reader<T, char_type>();
 5880|    530|            if (!is_segment_contiguous(range)) {
 5881|    530|                return impl(rd, range, value);
 5882|    530|            }
 5883|    530|            auto crange = get_as_contiguous(range);
 5884|    530|            SCN_TRY(it, impl(rd, crange, value));
 5885|    530|            return ranges::next(range.begin(),
 5886|    530|                                ranges::distance(crange.begin(), it));
 5887|    530|        }
 5888|    530|        else {
 5889|    530|            SCN_EXPECT(false);
 5890|    530|            SCN_UNREACHABLE;
 5891|    530|        }
 5892|    530|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    530|    {
 5863|    530|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    530|                        .transform_error(make_eof_scan_error));
 5865|    530|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    530|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    530|    {
 5266|    530|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    530|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    530|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    530|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    530|    {
 5871|    530|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    530|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    530|                          basic_contiguous_scan_context<char_type>>) {
 5875|    530|            auto rd = make_reader<T, char_type>();
 5876|    530|            return impl(rd, range, value);
 5877|    530|        }
 5878|    530|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    530|            auto rd = make_reader<T, char_type>();
 5880|    530|            if (!is_segment_contiguous(range)) {
 5881|    530|                return impl(rd, range, value);
 5882|    530|            }
 5883|    530|            auto crange = get_as_contiguous(range);
 5884|    530|            SCN_TRY(it, impl(rd, crange, value));
 5885|    530|            return ranges::next(range.begin(),
 5886|    530|                                ranges::distance(crange.begin(), it));
 5887|    530|        }
 5888|    530|        else {
 5889|    530|            SCN_EXPECT(false);
 5890|    530|            SCN_UNREACHABLE;
 5891|    530|        }
 5892|    530|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    530|    {
 5863|    530|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    530|                        .transform_error(make_eof_scan_error));
 5865|    530|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    530|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    530|    {
 5266|    530|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    530|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    530|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    530|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   156k|    {
 2879|   156k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   328k|    {
 2883|   328k|        return m_current;
 2884|   328k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   267k|    {
 2888|   267k|        return m_range.end();
 2889|   267k|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   152k|{
 1221|       |    // TODO: optimize
 1222|   152k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   152k|    auto res = get_next_code_point(str);
 1224|   152k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   152k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  95.8k|    {
 2903|  95.8k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  95.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  95.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  95.8k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  95.8k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 95.8k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  95.8k|        }
 2909|  95.8k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  95.8k|    static_cast<    \
  |  |  929|  95.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  95.8k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  18.9k|    {
 2893|  18.9k|        return ranges::subrange{begin(), end()};
 2894|  18.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  7.11k|    {
 6037|  7.11k|        const bool need_skipped_width =
 6038|  7.11k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 4.29k, False: 2.82k]
  |  Branch (6038:33): [True: 1.45k, False: 1.37k]
  ------------------
 6039|  7.11k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  7.11k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 124, False: 6.99k]
  ------------------
 6043|  7.11k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 432, False: 6.56k]
  ------------------
 6044|    556|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    556|                             need_skipped_width);
 6046|    556|        }
 6047|  6.56k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 6.08k, False: 480]
  |  Branch (6047:56): [True: 3.65k, False: 2.42k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  3.65k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 1.15k, False: 2.50k]
  ------------------
 6051|  1.15k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  1.15k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|  1.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  1.15k|                                  .transform_error(make_eof_scan_error));
 6054|  1.15k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  1.15k|            }
 6056|  5.00k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  2.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.50k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  5.00k|                            make_eof_scan_error));
 6058|       |
 6059|  5.00k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.95k, False: 550]
  ------------------
 6060|  1.95k|                return result_type{
 6061|  1.95k|                    it,
 6062|  1.95k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.95k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.95k|                                             .view())};
 6065|  1.95k|            }
 6066|    550|            return result_type{it, 0};
 6067|  5.00k|        }
 6068|       |
 6069|  2.90k|        return result_type{rng.begin(), 0};
 6070|  6.56k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  1.05k|    {
 6079|  1.05k|        const bool need_skipped_width =
 6080|  1.05k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 448, False: 608]
  |  Branch (6080:33): [True: 296, False: 312]
  ------------------
 6081|  1.05k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.05k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 140, False: 916]
  ------------------
 6084|  1.05k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 106, False: 810]
  ------------------
 6085|    246|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|    246|                             specs.fill, need_skipped_width);
 6087|    246|        }
 6088|    810|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 752, False: 58]
  ------------------
 6089|    810|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 434, False: 318]
  ------------------
 6090|    810|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 238, False: 196]
  |  Branch (6090:35): [True: 236, False: 2]
  ------------------
 6091|    434|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 142, False: 56]
  ------------------
 6092|    372|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 136, False: 6]
  ------------------
 6093|    372|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 136, False: 236]
  ------------------
 6094|    136|                const auto initial_width =
 6095|    136|                    specs.precision - prefix_width - value_width;
 6096|    136|                auto max_width_view = take_width(rng, initial_width);
 6097|    136|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|    136|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    136|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    136|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 136]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    136|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    136|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|    136|                                  .transform_error(make_eof_scan_error));
 6099|    136|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|    136|            }
 6101|    472|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|    236|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    236|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    236|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    236|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    472|                            make_eof_scan_error));
 6103|       |
 6104|    472|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 236, False: 0]
  ------------------
 6105|    236|                return result_type{
 6106|    236|                    it,
 6107|    236|                    calculate_text_width(make_contiguous_buffer(
 6108|    236|                                             ranges::subrange{rng.begin(), it})
 6109|    236|                                             .view())};
 6110|    236|            }
 6111|      0|            return result_type{it, 0};
 6112|    472|        }
 6113|    438|        return result_type{rng.begin(), 0};
 6114|    810|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6177|  1.34k|    {
 6178|  1.34k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.34k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.34k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.34k|            auto rd = make_reader<T, char_type>();
 6183|  1.34k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 816, False: 530]
  |  |  ------------------
  ------------------
 6184|    816|                return unexpected(e);
 6185|    816|            }
 6186|       |
 6187|    530|            return impl(rd, range, value);
 6188|  1.34k|        }
 6189|  1.34k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.34k|            auto rd = make_reader<T, char_type>();
 6191|  1.34k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.34k|                return unexpected(e);
 6193|  1.34k|            }
 6194|       |
 6195|  1.34k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.34k|                specs.width != 0) {
 6197|  1.34k|                return impl(rd, range, value);
 6198|  1.34k|            }
 6199|       |
 6200|  1.34k|            auto crange = get_as_contiguous(range);
 6201|  1.34k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.34k|            return ranges::next(range.begin(),
 6203|  1.34k|                                ranges::distance(crange.begin(), it));
 6204|  1.34k|        }
 6205|  1.34k|        else {
 6206|  1.34k|            SCN_EXPECT(false);
 6207|  1.34k|            SCN_UNREACHABLE;
 6208|  1.34k|        }
 6209|  1.34k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    530|    {
 6120|    530|        const bool need_skipped_width =
 6121|    530|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 258, False: 272]
  |  Branch (6121:33): [True: 162, False: 110]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    530|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    530|        auto [it, prefix_width] = prefix_result;
 6126|    530|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    530|        std::ptrdiff_t value_width = 0;
 6130|    530|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 162, False: 368]
  ------------------
 6131|    162|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 162]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    162|            const auto initial_width = specs.precision - prefix_width;
 6139|    162|            auto max_width_view =
 6140|    162|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    162|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 162, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    162|    }                                                  \
  |  |  |  | 3667|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    368|        else {
 6146|    368|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    368|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    368|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 368, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    368|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    368|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    368|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    368|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    368|    }                                                  \
  |  | 3667|    368|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6177|  1.34k|    {
 6178|  1.34k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.34k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.34k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.34k|            auto rd = make_reader<T, char_type>();
 6183|  1.34k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 816, False: 530]
  |  |  ------------------
  ------------------
 6184|    816|                return unexpected(e);
 6185|    816|            }
 6186|       |
 6187|    530|            return impl(rd, range, value);
 6188|  1.34k|        }
 6189|  1.34k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.34k|            auto rd = make_reader<T, char_type>();
 6191|  1.34k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.34k|                return unexpected(e);
 6193|  1.34k|            }
 6194|       |
 6195|  1.34k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.34k|                specs.width != 0) {
 6197|  1.34k|                return impl(rd, range, value);
 6198|  1.34k|            }
 6199|       |
 6200|  1.34k|            auto crange = get_as_contiguous(range);
 6201|  1.34k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.34k|            return ranges::next(range.begin(),
 6203|  1.34k|                                ranges::distance(crange.begin(), it));
 6204|  1.34k|        }
 6205|  1.34k|        else {
 6206|  1.34k|            SCN_EXPECT(false);
 6207|  1.34k|            SCN_UNREACHABLE;
 6208|  1.34k|        }
 6209|  1.34k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    530|    {
 6120|    530|        const bool need_skipped_width =
 6121|    530|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 258, False: 272]
  |  Branch (6121:33): [True: 162, False: 110]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    530|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    530|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    530|        auto [it, prefix_width] = prefix_result;
 6126|    530|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    530|        std::ptrdiff_t value_width = 0;
 6130|    530|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 162, False: 368]
  ------------------
 6131|    162|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 162]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    162|            const auto initial_width = specs.precision - prefix_width;
 6139|    162|            auto max_width_view =
 6140|    162|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    162|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 162, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    162|    }                                                  \
  |  |  |  | 3667|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    368|        else {
 6146|    368|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    368|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    368|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 368, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    368|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    368|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    368|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    368|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    368|    }                                                  \
  |  | 3667|    368|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6177|  1.32k|    {
 6178|  1.32k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.32k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.32k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.32k|            auto rd = make_reader<T, char_type>();
 6183|  1.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 828, False: 500]
  |  |  ------------------
  ------------------
 6184|    828|                return unexpected(e);
 6185|    828|            }
 6186|       |
 6187|    500|            return impl(rd, range, value);
 6188|  1.32k|        }
 6189|  1.32k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.32k|            auto rd = make_reader<T, char_type>();
 6191|  1.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.32k|                return unexpected(e);
 6193|  1.32k|            }
 6194|       |
 6195|  1.32k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.32k|                specs.width != 0) {
 6197|  1.32k|                return impl(rd, range, value);
 6198|  1.32k|            }
 6199|       |
 6200|  1.32k|            auto crange = get_as_contiguous(range);
 6201|  1.32k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.32k|            return ranges::next(range.begin(),
 6203|  1.32k|                                ranges::distance(crange.begin(), it));
 6204|  1.32k|        }
 6205|  1.32k|        else {
 6206|  1.32k|            SCN_EXPECT(false);
 6207|  1.32k|            SCN_UNREACHABLE;
 6208|  1.32k|        }
 6209|  1.32k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5752|  1.32k|    {
 5753|  1.32k|        reader_error_handler eh{};
 5754|  1.32k|        detail::check_pointer_type_specs(specs, eh);
 5755|  1.32k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 828, False: 500]
  |  |  ------------------
  ------------------
 5756|    828|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|    828|        }
 5758|    500|        return {};
 5759|  1.32k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6119|    500|    {
 6120|    500|        const bool need_skipped_width =
 6121|    500|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 256, False: 244]
  |  Branch (6121:33): [True: 158, False: 86]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    500|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    500|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    500|        auto [it, prefix_width] = prefix_result;
 6126|    500|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    500|        std::ptrdiff_t value_width = 0;
 6130|    500|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 158, False: 342]
  ------------------
 6131|    158|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 158]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    158|            const auto initial_width = specs.precision - prefix_width;
 6139|    158|            auto max_width_view =
 6140|    158|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    158|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 158, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    158|    }                                                  \
  |  |  |  | 3667|    158|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    342|        else {
 6146|    342|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 342, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    342|    }                                                  \
  |  | 3667|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    158|    {
 5782|    158|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    158|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    158|        return read_default(range, value, loc);
 5784|    158|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    158|    {
 5765|    158|        detail::format_specs specs{};
 5766|    158|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    158|        std::uintptr_t intvalue{};
 5769|    158|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 158, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    158|    }                                                  \
  |  |  |  | 3667|    158|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    158|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    342|    {
 5782|    342|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    342|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    342|        return read_default(range, value, loc);
 5784|    342|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6177|  1.34k|    {
 6178|  1.34k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.34k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.34k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.34k|            auto rd = make_reader<T, char_type>();
 6183|  1.34k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 686, False: 660]
  |  |  ------------------
  ------------------
 6184|    686|                return unexpected(e);
 6185|    686|            }
 6186|       |
 6187|    660|            return impl(rd, range, value);
 6188|  1.34k|        }
 6189|  1.34k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.34k|            auto rd = make_reader<T, char_type>();
 6191|  1.34k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.34k|                return unexpected(e);
 6193|  1.34k|            }
 6194|       |
 6195|  1.34k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.34k|                specs.width != 0) {
 6197|  1.34k|                return impl(rd, range, value);
 6198|  1.34k|            }
 6199|       |
 6200|  1.34k|            auto crange = get_as_contiguous(range);
 6201|  1.34k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.34k|            return ranges::next(range.begin(),
 6203|  1.34k|                                ranges::distance(crange.begin(), it));
 6204|  1.34k|        }
 6205|  1.34k|        else {
 6206|  1.34k|            SCN_EXPECT(false);
 6207|  1.34k|            SCN_UNREACHABLE;
 6208|  1.34k|        }
 6209|  1.34k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  1.34k|    {
 3040|  1.34k|        reader_error_handler eh{};
 3041|  1.34k|        get_derived().check_specs_impl(specs, eh);
 3042|  1.34k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 686, False: 660]
  |  |  ------------------
  ------------------
 3043|    686|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    686|        }
 3045|    660|        return {};
 3046|  1.34k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|  1.34k|    {
 3051|  1.34k|        return static_cast<Derived&>(*this);
 3052|  1.34k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  1.34k|    {
 5497|  1.34k|        detail::check_bool_type_specs(specs, eh);
 5498|  1.34k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    660|    {
 6120|    660|        const bool need_skipped_width =
 6121|    660|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 268, False: 392]
  |  Branch (6121:33): [True: 162, False: 230]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    660|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    660|        auto [it, prefix_width] = prefix_result;
 6126|    660|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    660|        std::ptrdiff_t value_width = 0;
 6130|    660|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 162, False: 498]
  ------------------
 6131|    162|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 162]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    162|            const auto initial_width = specs.precision - prefix_width;
 6139|    162|            auto max_width_view =
 6140|    162|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    162|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 162, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    162|    }                                                  \
  |  |  |  | 3667|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    498|        else {
 6146|    498|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    498|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    498|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    498|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 498, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    498|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    498|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    498|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    498|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    498|    }                                                  \
  |  | 3667|    498|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    498|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    162|    {
 5516|    162|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    162|#if !SCN_DISABLE_LOCALE
 5519|    162|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 0, False: 162]
  ------------------
 5520|      0|            return rd.read_localized(range, loc, value);
 5521|      0|        }
 5522|    162|#endif
 5523|       |
 5524|    162|        return rd.read_classic(range, value);
 5525|    162|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5528|    660|    {
 5529|    660|        SCN_GCC_COMPAT_PUSH
 5530|    660|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    660|        switch (specs.type) {
 5533|    130|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 130, False: 530]
  ------------------
 5534|    130|                return bool_reader_base::allow_text;
 5535|       |
 5536|      2|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 2, False: 658]
  ------------------
 5537|      4|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 2, False: 658]
  ------------------
 5538|     10|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 654]
  ------------------
 5539|     16|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 6, False: 654]
  ------------------
 5540|     22|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 6, False: 654]
  ------------------
 5541|     26|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 656]
  ------------------
 5542|     26|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    504|            default:
  ------------------
  |  Branch (5544:13): [True: 504, False: 156]
  ------------------
 5545|    504|                return bool_reader_base::allow_text |
 5546|    504|                       bool_reader_base::allow_numeric;
 5547|    660|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    660|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    162|    {
 5384|    162|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 162]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    162|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 162]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    162|        return unexpected_scan_error(
 5394|    162|            scan_error::invalid_scanned_value,
 5395|    162|            "Failed to read numeric boolean value: No match");
 5396|    162|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    324|{
 2146|    324|    auto it = read_code_unit(range);
 2147|    324|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 324]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    324|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 324, False: 0]
  |  |  ------------------
  ------------------
 2152|    324|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    324|        return unexpected(parse_error::error);
 2154|    324|    }
 2155|       |
 2156|      0|    return *it;
 2157|    324|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    316|{
 1857|    316|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    316|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    316|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    316|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    316|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    316|        if (sz < count) {
 1862|    316|            return unexpected(eof_error::eof);
 1863|    316|        }
 1864|       |
 1865|    316|        return ranges::next(range.begin(), count);
 1866|    316|    }
 1867|    316|    else {
 1868|    316|        auto it = range.begin();
 1869|    316|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 316]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  1.60k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.33k, False: 266]
  ------------------
 1874|  1.33k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 50, False: 1.28k]
  ------------------
 1875|     50|                return unexpected(eof_error::eof);
 1876|     50|            }
 1877|  1.33k|        }
 1878|       |
 1879|    266|        return it;
 1880|    316|    }
 1881|    316|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    316|{
 1095|    316|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    316|        return r.size();
 1097|    316|    }
 1098|    316|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    316|                           ranges::const_iterator_t<Range>,
 1100|    316|                           typename detail::basic_scan_buffer<
 1101|    316|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    316|        if constexpr (ranges::common_range<Range>) {
 1103|    316|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    316|        }
 1105|    316|        else {
 1106|    316|            if (r.begin().stores_parent()) {
 1107|    316|                return static_cast<size_t>(
 1108|    316|                    r.begin().parent()->chars_available() -
 1109|    316|                    r.begin().position());
 1110|    316|            }
 1111|    316|            return r.begin().contiguous_segment().size();
 1112|    316|        }
 1113|    316|    }
 1114|    316|    else {
 1115|    316|        return 0;
 1116|    316|    }
 1117|    316|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    162|    {
 5355|    162|        scan_error err{scan_error::invalid_scanned_value,
 5356|    162|                       "Failed to read boolean"};
 5357|       |
 5358|    162|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 162, False: 0]
  ------------------
 5359|    162|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 162]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    162|            else {
 5363|    162|                err = r.error();
 5364|    162|            }
 5365|    162|        }
 5366|       |
 5367|    162|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 158, False: 4]
  ------------------
 5368|    158|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 158]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    158|            else {
 5372|    158|                err = r.error();
 5373|    158|            }
 5374|    158|        }
 5375|       |
 5376|    162|        return unexpected(err);
 5377|    162|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    158|    {
 5402|    158|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 158]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    158|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 158]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    158|        return unexpected_scan_error(
 5412|    158|            scan_error::invalid_scanned_value,
 5413|    158|            "Failed to read textual boolean value: No match");
 5414|    158|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    316|{
 2194|    316|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 50, False: 266]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     50|    }                                                  \
  |  |  |  | 3667|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    266|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    266|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    266|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    266|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    266|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    266|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|    266|            return unexpected(parse_error::error);
 2202|    266|        }
 2203|    266|        return it;
 2204|    266|    }
 2205|    266|    else {
 2206|    266|        auto range_it = range.begin();
 2207|    266|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 266, False: 0]
  ------------------
 2208|    266|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    266|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 266, False: 0]
  |  |  ------------------
  ------------------
 2209|    266|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    266|                return unexpected(parse_error::error);
 2211|    266|            }
 2212|    266|        }
 2213|      0|        return it;
 2214|    266|    }
 2215|    266|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    498|    {
 5516|    498|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    498|#if !SCN_DISABLE_LOCALE
 5519|    498|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 16, False: 482]
  ------------------
 5520|     16|            return rd.read_localized(range, loc, value);
 5521|     16|        }
 5522|    482|#endif
 5523|       |
 5524|    482|        return rd.read_classic(range, value);
 5525|    498|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     16|    {
 5428|     16|        scan_error err{scan_error::invalid_scanned_value,
 5429|     16|                       "Failed to read boolean"};
 5430|       |
 5431|     16|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 12, False: 4]
  ------------------
 5432|     12|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 12]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     12|            else {
 5436|     12|                err = r.error();
 5437|     12|            }
 5438|     12|        }
 5439|       |
 5440|     16|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 10, False: 6]
  ------------------
 5441|     10|            auto stdloc = loc.get<std::locale>();
 5442|     10|            const auto& numpunct =
 5443|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     10|            const auto truename = numpunct.truename();
 5445|     10|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     10|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 10]
  ------------------
 5448|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     10|            else {
 5452|     10|                err = r.error();
 5453|     10|            }
 5454|     10|        }
 5455|       |
 5456|     16|        return unexpected(err);
 5457|     16|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5467|     10|    {
 5468|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     10|        const auto shorter = std::pair{
 5470|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 10, False: 0]
  ------------------
 5471|     10|        const auto longer = std::pair{
 5472|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 10]
  ------------------
 5473|       |
 5474|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 10]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 10]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     10|                                     "read_textual: No match");
 5485|     10|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     18|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     18|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     18|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     18|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 2185|     18|        return unexpected(parse_error::error);
 2186|     18|    }
 2187|      0|    return it;
 2188|     18|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6177|  1.32k|    {
 6178|  1.32k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.32k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.32k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.32k|            auto rd = make_reader<T, char_type>();
 6183|  1.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 810, False: 518]
  |  |  ------------------
  ------------------
 6184|    810|                return unexpected(e);
 6185|    810|            }
 6186|       |
 6187|    518|            return impl(rd, range, value);
 6188|  1.32k|        }
 6189|  1.32k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.32k|            auto rd = make_reader<T, char_type>();
 6191|  1.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.32k|                return unexpected(e);
 6193|  1.32k|            }
 6194|       |
 6195|  1.32k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.32k|                specs.width != 0) {
 6197|  1.32k|                return impl(rd, range, value);
 6198|  1.32k|            }
 6199|       |
 6200|  1.32k|            auto crange = get_as_contiguous(range);
 6201|  1.32k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.32k|            return ranges::next(range.begin(),
 6203|  1.32k|                                ranges::distance(crange.begin(), it));
 6204|  1.32k|        }
 6205|  1.32k|        else {
 6206|  1.32k|            SCN_EXPECT(false);
 6207|  1.32k|            SCN_UNREACHABLE;
 6208|  1.32k|        }
 6209|  1.32k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    518|    {
 6120|    518|        const bool need_skipped_width =
 6121|    518|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 258, False: 260]
  |  Branch (6121:33): [True: 162, False: 98]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    518|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    518|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    518|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    518|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    518|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 518]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    518|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    518|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    518|        auto [it, prefix_width] = prefix_result;
 6126|    518|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    518|        std::ptrdiff_t value_width = 0;
 6130|    518|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 162, False: 356]
  ------------------
 6131|    162|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 162]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    162|            const auto initial_width = specs.precision - prefix_width;
 6139|    162|            auto max_width_view =
 6140|    162|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    162|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 158]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    158|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|    158|            it = w_it.base();
 6143|    158|            value_width = initial_width - w_it.count();
 6144|    158|        }
 6145|    356|        else {
 6146|    356|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16, False: 340]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     16|    }                                                  \
  |  | 3667|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    340|                                             specs, value, loc));
 6148|       |
 6149|    340|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 256, False: 84]
  ------------------
 6150|    256|                value_width = calculate_text_width(
 6151|    256|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    256|                        .view());
 6153|    256|            }
 6154|    340|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    498|        std::ptrdiff_t postfix_width = 0;
 6158|    498|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 498, False: 0]
  ------------------
 6159|    498|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    498|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    498|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    498|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    498|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 498]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    498|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    498|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    498|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    498|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    498|                                 value_width));
 6163|    498|            std::tie(it, postfix_width) = postfix_result;
 6164|    498|        }
 6165|       |
 6166|    498|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    498|                                                 value_width, postfix_width);
 6168|    498|            !e) {
  ------------------
  |  Branch (6168:13): [True: 254, False: 244]
  ------------------
 6169|    254|            return unexpected(e);
 6170|    254|        }
 6171|       |
 6172|    244|        return it;
 6173|    498|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6177|  1.34k|    {
 6178|  1.34k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.34k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.34k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.34k|            auto rd = make_reader<T, char_type>();
 6183|  1.34k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 820, False: 526]
  |  |  ------------------
  ------------------
 6184|    820|                return unexpected(e);
 6185|    820|            }
 6186|       |
 6187|    526|            return impl(rd, range, value);
 6188|  1.34k|        }
 6189|  1.34k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.34k|            auto rd = make_reader<T, char_type>();
 6191|  1.34k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.34k|                return unexpected(e);
 6193|  1.34k|            }
 6194|       |
 6195|  1.34k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.34k|                specs.width != 0) {
 6197|  1.34k|                return impl(rd, range, value);
 6198|  1.34k|            }
 6199|       |
 6200|  1.34k|            auto crange = get_as_contiguous(range);
 6201|  1.34k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.34k|            return ranges::next(range.begin(),
 6203|  1.34k|                                ranges::distance(crange.begin(), it));
 6204|  1.34k|        }
 6205|  1.34k|        else {
 6206|  1.34k|            SCN_EXPECT(false);
 6207|  1.34k|            SCN_UNREACHABLE;
 6208|  1.34k|        }
 6209|  1.34k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    526|    {
 6120|    526|        const bool need_skipped_width =
 6121|    526|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 258, False: 268]
  |  Branch (6121:33): [True: 164, False: 104]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    526|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 526]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    526|        auto [it, prefix_width] = prefix_result;
 6126|    526|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    526|        std::ptrdiff_t value_width = 0;
 6130|    526|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 164, False: 362]
  ------------------
 6131|    164|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 164]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    164|            const auto initial_width = specs.precision - prefix_width;
 6139|    164|            auto max_width_view =
 6140|    164|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    164|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    164|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    164|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    164|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    164|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 164, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    164|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    164|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    164|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    164|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    164|    }                                                  \
  |  |  |  | 3667|    164|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    362|        else {
 6146|    362|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 362, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    362|    }                                                  \
  |  | 3667|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6177|  1.32k|    {
 6178|  1.32k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.32k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.32k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.32k|            auto rd = make_reader<T, char_type>();
 6183|  1.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 1.28k]
  |  |  ------------------
  ------------------
 6184|     44|                return unexpected(e);
 6185|     44|            }
 6186|       |
 6187|  1.28k|            return impl(rd, range, value);
 6188|  1.32k|        }
 6189|  1.32k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.32k|            auto rd = make_reader<T, char_type>();
 6191|  1.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.32k|                return unexpected(e);
 6193|  1.32k|            }
 6194|       |
 6195|  1.32k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.32k|                specs.width != 0) {
 6197|  1.32k|                return impl(rd, range, value);
 6198|  1.32k|            }
 6199|       |
 6200|  1.32k|            auto crange = get_as_contiguous(range);
 6201|  1.32k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.32k|            return ranges::next(range.begin(),
 6203|  1.32k|                                ranges::distance(crange.begin(), it));
 6204|  1.32k|        }
 6205|  1.32k|        else {
 6206|  1.32k|            SCN_EXPECT(false);
 6207|  1.32k|            SCN_UNREACHABLE;
 6208|  1.32k|        }
 6209|  1.32k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6119|  1.28k|    {
 6120|  1.28k|        const bool need_skipped_width =
 6121|  1.28k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 912, False: 372]
  |  Branch (6121:33): [True: 160, False: 212]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  1.28k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  1.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  1.28k|        auto [it, prefix_width] = prefix_result;
 6126|  1.28k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  1.28k|        std::ptrdiff_t value_width = 0;
 6130|  1.28k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 160, False: 1.12k]
  ------------------
 6131|    160|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 160]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    160|            const auto initial_width = specs.precision - prefix_width;
 6139|    160|            auto max_width_view =
 6140|    160|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    160|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    160|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    160|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    160|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 106, False: 54]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    106|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    106|    }                                                  \
  |  |  |  | 3667|    160|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     54|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|     54|            it = w_it.base();
 6143|     54|            value_width = initial_width - w_it.count();
 6144|     54|        }
 6145|  1.12k|        else {
 6146|  1.12k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 766, False: 358]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    766|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    766|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    766|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    766|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    766|    }                                                  \
  |  | 3667|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    358|                                             specs, value, loc));
 6148|       |
 6149|    358|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 238, False: 120]
  ------------------
 6150|    238|                value_width = calculate_text_width(
 6151|    238|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    238|                        .view());
 6153|    238|            }
 6154|    358|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    412|        std::ptrdiff_t postfix_width = 0;
 6158|    412|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 186, False: 226]
  ------------------
 6159|    186|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    186|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    186|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    186|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 186]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    186|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    186|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    186|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    186|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    186|                                 value_width));
 6163|    186|            std::tie(it, postfix_width) = postfix_result;
 6164|    186|        }
 6165|       |
 6166|    412|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    412|                                                 value_width, postfix_width);
 6168|    412|            !e) {
  ------------------
  |  Branch (6168:13): [True: 22, False: 390]
  ------------------
 6169|     22|            return unexpected(e);
 6170|     22|        }
 6171|       |
 6172|    390|        return it;
 6173|    412|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6177|  1.32k|    {
 6178|  1.32k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.32k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.32k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.32k|            auto rd = make_reader<T, char_type>();
 6183|  1.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 1.28k]
  |  |  ------------------
  ------------------
 6184|     44|                return unexpected(e);
 6185|     44|            }
 6186|       |
 6187|  1.28k|            return impl(rd, range, value);
 6188|  1.32k|        }
 6189|  1.32k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.32k|            auto rd = make_reader<T, char_type>();
 6191|  1.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.32k|                return unexpected(e);
 6193|  1.32k|            }
 6194|       |
 6195|  1.32k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.32k|                specs.width != 0) {
 6197|  1.32k|                return impl(rd, range, value);
 6198|  1.32k|            }
 6199|       |
 6200|  1.32k|            auto crange = get_as_contiguous(range);
 6201|  1.32k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.32k|            return ranges::next(range.begin(),
 6203|  1.32k|                                ranges::distance(crange.begin(), it));
 6204|  1.32k|        }
 6205|  1.32k|        else {
 6206|  1.32k|            SCN_EXPECT(false);
 6207|  1.32k|            SCN_UNREACHABLE;
 6208|  1.32k|        }
 6209|  1.32k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6119|  1.28k|    {
 6120|  1.28k|        const bool need_skipped_width =
 6121|  1.28k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 912, False: 372]
  |  Branch (6121:33): [True: 160, False: 212]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  1.28k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  1.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  1.28k|        auto [it, prefix_width] = prefix_result;
 6126|  1.28k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  1.28k|        std::ptrdiff_t value_width = 0;
 6130|  1.28k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 160, False: 1.12k]
  ------------------
 6131|    160|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 160]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    160|            const auto initial_width = specs.precision - prefix_width;
 6139|    160|            auto max_width_view =
 6140|    160|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    160|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    160|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    160|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    160|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 106, False: 54]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    106|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    106|    }                                                  \
  |  |  |  | 3667|    160|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     54|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|     54|            it = w_it.base();
 6143|     54|            value_width = initial_width - w_it.count();
 6144|     54|        }
 6145|  1.12k|        else {
 6146|  1.12k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 766, False: 358]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    766|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    766|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    766|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    766|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    766|    }                                                  \
  |  | 3667|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    358|                                             specs, value, loc));
 6148|       |
 6149|    358|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 238, False: 120]
  ------------------
 6150|    238|                value_width = calculate_text_width(
 6151|    238|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    238|                        .view());
 6153|    238|            }
 6154|    358|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    412|        std::ptrdiff_t postfix_width = 0;
 6158|    412|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 186, False: 226]
  ------------------
 6159|    186|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    186|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    186|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    186|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 186]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    186|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    186|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    186|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    186|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    186|                                 value_width));
 6163|    186|            std::tie(it, postfix_width) = postfix_result;
 6164|    186|        }
 6165|       |
 6166|    412|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    412|                                                 value_width, postfix_width);
 6168|    412|            !e) {
  ------------------
  |  Branch (6168:13): [True: 22, False: 390]
  ------------------
 6169|     22|            return unexpected(e);
 6170|     22|        }
 6171|       |
 6172|    390|        return it;
 6173|    412|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6177|  1.32k|    {
 6178|  1.32k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  1.32k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  1.32k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  1.32k|            auto rd = make_reader<T, char_type>();
 6183|  1.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 1.28k]
  |  |  ------------------
  ------------------
 6184|     44|                return unexpected(e);
 6185|     44|            }
 6186|       |
 6187|  1.28k|            return impl(rd, range, value);
 6188|  1.32k|        }
 6189|  1.32k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  1.32k|            auto rd = make_reader<T, char_type>();
 6191|  1.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  1.32k|                return unexpected(e);
 6193|  1.32k|            }
 6194|       |
 6195|  1.32k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  1.32k|                specs.width != 0) {
 6197|  1.32k|                return impl(rd, range, value);
 6198|  1.32k|            }
 6199|       |
 6200|  1.32k|            auto crange = get_as_contiguous(range);
 6201|  1.32k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  1.32k|            return ranges::next(range.begin(),
 6203|  1.32k|                                ranges::distance(crange.begin(), it));
 6204|  1.32k|        }
 6205|  1.32k|        else {
 6206|  1.32k|            SCN_EXPECT(false);
 6207|  1.32k|            SCN_UNREACHABLE;
 6208|  1.32k|        }
 6209|  1.32k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6119|  1.28k|    {
 6120|  1.28k|        const bool need_skipped_width =
 6121|  1.28k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 912, False: 372]
  |  Branch (6121:33): [True: 160, False: 212]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  1.28k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  1.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  1.28k|        auto [it, prefix_width] = prefix_result;
 6126|  1.28k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  1.28k|        std::ptrdiff_t value_width = 0;
 6130|  1.28k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 160, False: 1.12k]
  ------------------
 6131|    160|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 160]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    160|            const auto initial_width = specs.precision - prefix_width;
 6139|    160|            auto max_width_view =
 6140|    160|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    160|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    160|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    160|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    160|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 106, False: 54]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    106|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    106|    }                                                  \
  |  |  |  | 3667|    160|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     54|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|     54|            it = w_it.base();
 6143|     54|            value_width = initial_width - w_it.count();
 6144|     54|        }
 6145|  1.12k|        else {
 6146|  1.12k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 766, False: 358]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    766|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    766|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    766|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    766|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    766|    }                                                  \
  |  | 3667|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    358|                                             specs, value, loc));
 6148|       |
 6149|    358|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 238, False: 120]
  ------------------
 6150|    238|                value_width = calculate_text_width(
 6151|    238|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    238|                        .view());
 6153|    238|            }
 6154|    358|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    412|        std::ptrdiff_t postfix_width = 0;
 6158|    412|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 186, False: 226]
  ------------------
 6159|    186|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    186|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    186|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    186|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 186]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    186|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    186|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    186|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    186|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    186|                                 value_width));
 6163|    186|            std::tie(it, postfix_width) = postfix_result;
 6164|    186|        }
 6165|       |
 6166|    412|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    412|                                                 value_width, postfix_width);
 6168|    412|            !e) {
  ------------------
  |  Branch (6168:13): [True: 22, False: 390]
  ------------------
 6169|     22|            return unexpected(e);
 6170|     22|        }
 6171|       |
 6172|    390|        return it;
 6173|    412|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    652|    {
 3492|    652|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    652|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    652|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    652|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    652|                return unexpected_scan_error(
 3498|    652|                    scan_error::invalid_scanned_value,
 3499|    652|                    "Unexpected '-' sign when parsing an "
 3500|    652|                    "unsigned value");
 3501|    652|            }
 3502|    652|        }
 3503|       |
 3504|    652|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 652]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.30k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.30k|                parse_integer_digits_without_thsep(
 3511|  1.30k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.30k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.30k|        auto buf = make_contiguous_buffer(
 3515|  1.30k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.30k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 652, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    652|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    652|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    652|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    652|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    652|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.30k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    652|    {
 3492|    652|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    652|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    652|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    652|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 652]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    652|        }
 3503|       |
 3504|    652|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 652]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.30k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.30k|                parse_integer_digits_without_thsep(
 3511|  1.30k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.30k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.30k|        auto buf = make_contiguous_buffer(
 3515|  1.30k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.30k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 652, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    652|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    652|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    652|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    652|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    652|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.30k|    }

LLVMFuzzerTestOneInput:
   68|  4.34k|{
   69|  4.34k|    scn::fuzz::run(data, size);
   70|  4.34k|    return 0;
   71|  4.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  4.34k|{
   52|  4.34k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 4.34k]
  |  Branch (52:35): [True: 0, False: 4.34k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  4.34k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  4.34k|    run_for_source(sv);
   59|  4.34k|    run_for_source(wsv_reinterpret);
   60|  4.34k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 4.34k, False: 0]
  ------------------
   61|  4.34k|        run_for_source(wsv_transcode);
   62|  4.34k|    }
   63|  4.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  4.34k|{
   37|  4.34k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  4.34k|    run_for_type<char_type>(source);
   40|  4.34k|    run_for_type<int>(source);
   41|  4.34k|    run_for_type<unsigned>(source);
   42|  4.34k|    run_for_type<double>(source);
   43|  4.34k|    run_for_type<bool>(source);
   44|  4.34k|    run_for_type<void*>(source);
   45|  4.34k|    run_for_type<std::string>(source);
   46|  4.34k|    run_for_type<std::wstring>(source);
   47|  4.34k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  4.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.34k|{
   25|  4.34k|    {
   26|  4.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.34k|    }
   28|  4.34k|    {
   29|  4.34k|        auto _ =
   30|  4.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.34k|    }
   32|  4.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.34k|{
   25|  4.34k|    {
   26|  4.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.34k|    }
   28|  4.34k|    {
   29|  4.34k|        auto _ =
   30|  4.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.34k|    }
   32|  4.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.34k|{
   25|  4.34k|    {
   26|  4.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.34k|    }
   28|  4.34k|    {
   29|  4.34k|        auto _ =
   30|  4.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.34k|    }
   32|  4.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.34k|{
   25|  4.34k|    {
   26|  4.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.34k|    }
   28|  4.34k|    {
   29|  4.34k|        auto _ =
   30|  4.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.34k|    }
   32|  4.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.34k|{
   25|  4.34k|    {
   26|  4.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.34k|    }
   28|  4.34k|    {
   29|  4.34k|        auto _ =
   30|  4.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.34k|    }
   32|  4.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  4.34k|{
   25|  4.34k|    {
   26|  4.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.34k|    }
   28|  4.34k|    {
   29|  4.34k|        auto _ =
   30|  4.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.34k|    }
   32|  4.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  4.34k|{
   25|  4.34k|    {
   26|  4.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.34k|    }
   28|  4.34k|    {
   29|  4.34k|        auto _ =
   30|  4.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.34k|    }
   32|  4.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  4.34k|{
   25|  4.34k|    {
   26|  4.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.34k|    }
   28|  4.34k|    {
   29|  4.34k|        auto _ =
   30|  4.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.34k|    }
   32|  4.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  4.34k|{
   25|  4.34k|    {
   26|  4.34k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.34k|    }
   28|  4.34k|    {
   29|  4.34k|        auto _ =
   30|  4.34k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.34k|    }
   32|  4.34k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  8.69k|{
   37|  8.69k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  8.69k|    run_for_type<char_type>(source);
   40|  8.69k|    run_for_type<int>(source);
   41|  8.69k|    run_for_type<unsigned>(source);
   42|  8.69k|    run_for_type<double>(source);
   43|  8.69k|    run_for_type<bool>(source);
   44|  8.69k|    run_for_type<void*>(source);
   45|  8.69k|    run_for_type<std::string>(source);
   46|  8.69k|    run_for_type<std::wstring>(source);
   47|  8.69k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  8.69k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.69k|{
   25|  8.69k|    {
   26|  8.69k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.69k|    }
   28|  8.69k|    {
   29|  8.69k|        auto _ =
   30|  8.69k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.69k|    }
   32|  8.69k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.69k|{
   25|  8.69k|    {
   26|  8.69k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.69k|    }
   28|  8.69k|    {
   29|  8.69k|        auto _ =
   30|  8.69k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.69k|    }
   32|  8.69k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.69k|{
   25|  8.69k|    {
   26|  8.69k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.69k|    }
   28|  8.69k|    {
   29|  8.69k|        auto _ =
   30|  8.69k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.69k|    }
   32|  8.69k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.69k|{
   25|  8.69k|    {
   26|  8.69k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.69k|    }
   28|  8.69k|    {
   29|  8.69k|        auto _ =
   30|  8.69k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.69k|    }
   32|  8.69k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.69k|{
   25|  8.69k|    {
   26|  8.69k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.69k|    }
   28|  8.69k|    {
   29|  8.69k|        auto _ =
   30|  8.69k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.69k|    }
   32|  8.69k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  8.69k|{
   25|  8.69k|    {
   26|  8.69k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.69k|    }
   28|  8.69k|    {
   29|  8.69k|        auto _ =
   30|  8.69k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.69k|    }
   32|  8.69k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  8.69k|{
   25|  8.69k|    {
   26|  8.69k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.69k|    }
   28|  8.69k|    {
   29|  8.69k|        auto _ =
   30|  8.69k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.69k|    }
   32|  8.69k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  8.69k|{
   25|  8.69k|    {
   26|  8.69k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.69k|    }
   28|  8.69k|    {
   29|  8.69k|        auto _ =
   30|  8.69k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.69k|    }
   32|  8.69k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  8.69k|{
   25|  8.69k|    {
   26|  8.69k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.69k|    }
   28|  8.69k|    {
   29|  8.69k|        auto _ =
   30|  8.69k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.69k|    }
   32|  8.69k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  4.34k|{
   52|  4.34k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  4.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  4.34k|    string_buffer.resize(size);
   56|  4.34k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  4.34k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  4.34k|    const auto wsv_reinterpret_size =
   61|  4.34k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 87, False: 4.26k]
  ------------------
   62|  4.34k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  4.34k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  4.34k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  4.34k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  4.34k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  4.34k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  4.34k|}

