_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  865|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  865|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  2.56M|{
 4068|  2.56M|    if constexpr (sizeof(U) == 1) {
 4069|  2.56M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  2.56M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  2.56M|{
 4032|  2.56M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  2.56M|    SCN_GCC_COMPAT_PUSH
 4035|  2.56M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  2.56M|    constexpr char lengths[] =
 4037|  2.56M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  2.56M|        "\1\1\1\1\1\1\1\1"
 4039|  2.56M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  2.56M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  2.56M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  2.56M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  2.56M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  2.56M|    SCN_GCC_COMPAT_POP
 4046|  2.56M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  2.43M|{
 4274|  2.43M|    if constexpr (sizeof(CharT) == 1) {
 4275|  2.43M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  2.43M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  2.43M|{
 4087|  2.43M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  2.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  2.43M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  2.43M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  2.43M|    };
 4092|       |
 4093|  2.43M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 2.17M, False: 266k]
  ------------------
 4094|  2.17M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 0, False: 2.17M]
  ------------------
 4095|      0|            SCN_UNLIKELY_ATTR
 4096|      0|            return invalid_code_point;
 4097|      0|        }
 4098|  2.17M|        return static_cast<char32_t>(input[0]);
 4099|  2.17M|    }
 4100|       |
 4101|   266k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 258k, False: 7.67k]
  ------------------
 4102|   258k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 0, False: 258k]
  ------------------
 4103|      0|            SCN_UNLIKELY_ATTR
 4104|      0|            return invalid_code_point;
 4105|      0|        }
 4106|   258k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 1.61k, False: 257k]
  ------------------
 4107|  1.61k|            SCN_UNLIKELY_ATTR
 4108|  1.61k|            return invalid_code_point;
 4109|  1.61k|        }
 4110|       |
 4111|   257k|        char32_t cp{};
 4112|   257k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|   257k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|   257k|        return cp;
 4115|   258k|    }
 4116|       |
 4117|  7.67k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 7.08k, False: 583]
  ------------------
 4118|  7.08k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 0, False: 7.08k]
  ------------------
 4119|      0|            SCN_UNLIKELY_ATTR
 4120|      0|            return invalid_code_point;
 4121|      0|        }
 4122|  7.08k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 2.05k, False: 5.03k]
  ------------------
 4123|  7.08k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 63, False: 4.97k]
  ------------------
 4124|  2.11k|            SCN_UNLIKELY_ATTR
 4125|  2.11k|            return invalid_code_point;
 4126|  2.11k|        }
 4127|       |
 4128|  4.97k|        char32_t cp{};
 4129|  4.97k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|  4.97k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|  4.97k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|  4.97k|        return cp;
 4133|  7.08k|    }
 4134|       |
 4135|    583|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 583, False: 0]
  ------------------
 4136|    583|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 583]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|    583|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 198, False: 385]
  ------------------
 4141|    198|            SCN_UNLIKELY_ATTR
 4142|    198|            return invalid_code_point;
 4143|    198|        }
 4144|    385|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 160, False: 225]
  ------------------
 4145|    385|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 21, False: 204]
  ------------------
 4146|    385|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 43, False: 161]
  ------------------
 4147|    224|            SCN_UNLIKELY_ATTR
 4148|    224|            return invalid_code_point;
 4149|    224|        }
 4150|       |
 4151|    161|        char32_t cp{};
 4152|    161|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    161|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    161|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    161|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    161|        return cp;
 4157|    385|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|   271k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   271k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   271k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|   923k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|   923k|    else {
 3966|   923k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|   923k|                                       to_address(first), to_address(last)))};
 3968|   923k|    }
 3969|   923k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  2.78M|{
  316|  2.78M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  2.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  2.78M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  2.81M|{
  294|  2.81M|    return p;
  295|  2.81M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|   575k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|   575k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|   575k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|   575k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|   575k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|   575k|}
_ZN3scn2v44scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|    796|{
 9681|    796|    auto result = make_scan_result<Source, Args...>();
 9682|    796|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|    796|                                   make_scan_args(result->values())));
 9684|    796|    return result;
 9685|    796|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEEDav:
 9636|  1.59k|{
 9637|  1.59k|    return scan_result_type<Source, Args...>();
 9638|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2Ev:
 1551|  1.59k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2Ev:
  426|  1.59k|        : m_value(T{}), m_has_value(true)
  427|  1.59k|    {
  428|  1.59k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2Ev:
 6570|  1.59k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6413|  14.3k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|  14.3k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJcEEC2Ev:
 6344|  1.59k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  1.59k|{
 9622|  1.59k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.59k, False: 0]
  |  |  ------------------
  ------------------
 9623|  1.59k|        out = unexpected(in.error());
 9624|  1.59k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  1.59k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|  14.3k|    {
 1740|  14.3k|        return has_value();
 1741|  14.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  28.6k|    {
  490|  28.6k|        return m_has_value;
  491|  28.6k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  14.2k|    {
 1746|  14.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  14.2k|        return this->get_unexpected().error();
 1748|  14.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.2k|    {
  473|  14.2k|        return m_unexpected;
  474|  14.2k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|   464k|    {
  365|   464k|        return m_unexpected;
  366|   464k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|   224k|        : m_unexpected(std::forward<Err>(e))
  350|   224k|    {
  351|   224k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   224k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   224k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  1.59k|        : base(unexpect, std::move(e.error())),
 1616|  1.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.59k|    {
 1618|  1.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  1.59k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.59k|          m_has_value(false)
  451|  1.59k|    {
  452|  1.59k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|   265k|        : m_unexpected(std::forward<Args>(args)...)
  359|   265k|    {
  360|   265k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   265k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   265k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.59k|    {
 1316|  1.59k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEaSEOSC_:
 1556|  1.59k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvEaSEOSD_:
  902|  1.59k|    {
  903|  1.59k|        assign_common(std::move(other));
  904|  1.59k|        return *this;
  905|  1.59k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  1.59k|    {
  950|  1.59k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 1.59k, False: 0]
  ------------------
  951|  1.59k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 1.59k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  1.59k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  1.59k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.77k|    {
  490|  4.77k|        return m_has_value;
  491|  4.77k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.59k|    {
  456|  1.59k|        return m_value;
  457|  1.59k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  1.59k|    {
 1046|  1.59k|        this->destroy_value();
 1047|  1.59k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  1.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  1.59k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  1.59k|    {
  504|  1.59k|        scn::detail::construct_at(&get_unexpected(),
  505|  1.59k|                                  std::forward<Args>(args)...);
  506|  1.59k|        m_has_value = false;
  507|  1.59k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|  42.8k|{
  396|  42.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  42.8k|        T(std::forward<Args>(args)...);
  398|  42.8k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.59k|    {
  473|  1.59k|        return m_unexpected;
  474|  1.59k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  1.59k|    {
  481|  1.59k|        return std::move(m_unexpected);
  482|  1.59k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6444|    108|    {
 6445|    108|        m_range = std::forward<Other>(r);
 6446|    108|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|    108|    {
 1795|    108|        return value();
 1796|    108|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|    108|    {
 1769|    108|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    108|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    108|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    108|        return this->get_value();
 1771|    108|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|    108|    {
  456|    108|        return m_value;
  457|    108|    }
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEcEEEE:
 9460|  7.16k|{
 9461|  7.16k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  7.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|  7.16k|}
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9397|  7.16k|{
 9398|  7.16k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  7.16k|    auto result = vscan_impl(buffer, format, args);
 9401|  7.16k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  7.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.11k, False: 54]
  |  |  ------------------
  ------------------
 9402|  7.11k|        return unexpected(result.error());
 9403|  7.11k|    }
 9404|     54|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|     54|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  7.16k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 5380|  14.3k|{
 5381|  14.3k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  14.3k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  14.3k|                  "\n"
 5385|  14.3k|                  "Unsupported range type given as input to a scanning "
 5386|  14.3k|                  "function.\n"
 5387|  14.3k|                  "A range needs to have a character type (value type) "
 5388|  14.3k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  14.3k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  14.3k|                  "to be included.\n"
 5391|  14.3k|                  "See the scnlib documentation for more details.");
 5392|  14.3k|    static_assert(
 5393|  14.3k|        !std::is_same_v<T, custom_char_traits>,
 5394|  14.3k|        "\n"
 5395|  14.3k|        "Unsupported range type given as input to a scanning "
 5396|  14.3k|        "function.\n"
 5397|  14.3k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  14.3k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  14.3k|        "not supported.");
 5400|  14.3k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  14.3k|                  "\n"
 5402|  14.3k|                  "Unsupported range type given as input to a scanning "
 5403|  14.3k|                  "function.\n"
 5404|  14.3k|                  "file_marker_found cannot be used as an "
 5405|  14.3k|                  "source range type to scn::scan.\n"
 5406|  14.3k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  14.3k|                  "and do not provide an explicit source range, "
 5408|  14.3k|                  "or use scn::scan with a FILE* directly.");
 5409|  14.3k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  14.3k|                  "\n"
 5411|  14.3k|                  "Unsupported range type given as input to a scanning "
 5412|  14.3k|                  "function.\n"
 5413|  14.3k|                  "In order to be scannable, a range needs to satisfy "
 5414|  14.3k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  14.3k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  14.3k|                  "\n"
 5417|  14.3k|                  "Unsupported range type given as input to a scanning "
 5418|  14.3k|                  "function.\n"
 5419|  14.3k|                  "A range needs to model forward_range and have a valid "
 5420|  14.3k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  14.3k|                  "Examples of scannable ranges are std::string, "
 5422|  14.3k|                  "std::string_view, "
 5423|  14.3k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  14.3k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  14.3k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  14.3k|}
_ZN3scn2v46detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5272|  14.3k|{
 5273|  14.3k|    if constexpr (is_valid_char_type<CharT>) {
 5274|  14.3k|        return r;
 5275|       |        // return make_string_scan_buffer(r);
 5276|       |    }
 5277|       |    else {
 5278|       |        return invalid_char_type{};
 5279|       |    }
 5280|  14.3k|}
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  43.1k|    {
 1740|  43.1k|        return has_value();
 1741|  43.1k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  86.3k|    {
  490|  86.3k|        return m_has_value;
  491|  86.3k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|  43.0k|    {
 1746|  43.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  43.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  43.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  43.0k|        return this->get_unexpected().error();
 1748|  43.0k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.0k|    {
  473|  43.0k|        return m_unexpected;
  474|  43.0k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  14.2k|        : base(unexpect, std::move(e.error())),
 1616|  14.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.2k|    {
 1618|  14.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  14.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.2k|          m_has_value(false)
  451|  14.2k|    {
  452|  14.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.3k|    {
 1316|  14.3k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6674|    108|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|    108|                      ranges::iterator_t<SourceRange>>) {
 6677|    108|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|    108|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|    108|    {
 2869|    108|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|    108|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|    108|    {
 2850|    108|        return decay_copy(t.begin());
 2851|    108|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  31.2k|{
 2094|  31.2k|    return SCN_FWD(t);
  ------------------
  |  |  936|  31.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  31.2k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 6661|    108|{
 6662|    108|    return ranges::end(source);
 6663|    108|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|    108|    {
 2926|    108|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|    108|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|    108|    {
 2908|    108|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|    108|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   293k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   293k|    static_cast<    \
  |  |  935|   293k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   293k|    static_cast<    \
  |  |  935|   293k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   293k|    {
 3466|   293k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|    174|    {
 1795|    174|        return value();
 1796|    174|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|    174|    {
 1769|    174|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    174|        return this->get_value();
 1771|    174|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|    174|    {
  456|    174|        return m_value;
  457|    174|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|    108|        : base(std::in_place, std::forward<U>(val)),
 1570|    108|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    108|    {
 1572|    108|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|    108|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    108|    {
  442|    108|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 8767|  1.59k|    {
 8768|  1.59k|        return m_str;
 8769|  1.59k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJcEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  1.59k|{
 6110|  1.59k|    detail::check_scan_arg_types<Args...>();
 6111|  1.59k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  1.59k|}
_ZN3scn2v46detail20check_scan_arg_typesIJcEEEbv:
 5824|  1.59k|{
 5825|  1.59k|    constexpr bool default_constructible_constraint =
 5826|  1.59k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  1.59k|    static_assert(default_constructible_constraint,
 5828|  1.59k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  1.59k|    constexpr bool destructible_constraint =
 5831|  1.59k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  1.59k|    static_assert(destructible_constraint,
 5833|  1.59k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  1.59k|    constexpr bool non_reference_constraint =
 5836|  1.59k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  1.59k|    static_assert(non_reference_constraint,
 5838|  1.59k|                  "Scan argument types must not be references");
 5839|       |
 5840|  1.59k|    constexpr bool movable_constraint =
 5841|  1.59k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  1.59k|    static_assert(movable_constraint,
 5843|  1.59k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  1.59k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  1.59k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  1.59k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEEC2ERNSt3__15tupleIJcEEE:
 6085|  1.59k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  1.59k|    {
 6087|  1.59k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  1.59k|    {
 6095|  1.59k|        return {detail::make_arg<
 6096|  1.59k|            kind, Context,
 6097|  1.59k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  1.59k|                                 typename Context::char_type>::value>(args)...};
 6099|  1.59k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5874|  1.59k|{
 5875|  1.59k|    return make_value<Context>(value).ref_value;
 5876|  1.59k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEcEEDaRT0_:
 5809|  1.59k|{
 5810|  1.59k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  1.59k|                                  needs_context_tag>) {
 5814|  1.59k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  1.59k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERc:
 5678|  1.59k|    {
 5679|       |        if constexpr (std::is_same_v<char_type, char> &&
 5680|  1.59k|                      !is_type_disabled<char_type>) {
 5681|  1.59k|            return val;
 5682|       |        }
 5683|       |        else if constexpr (is_type_disabled<char_type>) {
 5684|       |            return unscannable_disabled{val};
 5685|       |        }
 5686|       |        else {
 5687|       |            SCN_UNUSED(val);
 5688|       |            return unscannable_char{};
 5689|       |        }
 5690|  1.59k|    }
_ZN3scn2v46detail15make_value_implIcRcEEDaOT0_:
 5778|  1.59k|{
 5779|  1.59k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  1.59k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  1.59k|    constexpr bool scannable_char =
 5783|  1.59k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  1.59k|    static_assert(scannable_char,
 5785|  1.59k|                  "Cannot scan an argument of an unsupported character "
 5786|  1.59k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  1.59k|    constexpr bool scannable_const =
 5789|  1.59k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  1.59k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  1.59k|    constexpr bool scannable_disabled =
 5793|  1.59k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  1.59k|    static_assert(scannable_disabled,
 5795|  1.59k|                  "Cannot scan an argument that has been disabled by "
 5796|  1.59k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  1.59k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  1.59k|    static_assert(
 5800|  1.59k|        scannable,
 5801|  1.59k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  1.59k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  1.59k|    return arg_value{arg};
 5805|  1.59k|}
_ZN3scn2v46detail9arg_valueC2IcEERT_:
 5562|  1.59k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  1.59k|    {
 5564|  1.59k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEptEv:
 1814|  1.59k|    {
 1815|  1.59k|        return &value();
 1816|  1.59k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.59k|    {
 1769|  1.59k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.59k|        return this->get_value();
 1771|  1.59k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJcEE6valuesEv:
 6353|  1.59k|    {
 6354|  1.59k|        return m_values;
 6355|  1.59k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJcEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  1.59k|        : basic_scan_args(store.desc, store.args.data())
 6136|  1.59k|    {
 6137|  1.59k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6187|  14.3k|        : m_desc(desc), m_builtin_values(data)
 6188|  14.3k|    {
 6189|  14.3k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8440|  14.3k|{
 8441|  14.3k|    return s;
 8442|  14.3k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8417|  14.3k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  1.59k|        : m_str(r.str)
 8763|  1.59k|    {
 8764|  1.59k|    }
_ZN3scn2v44scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|    796|{
 9750|    796|    auto result = make_scan_result<Source, Args...>();
 9751|    796|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|    796|                                   make_scan_args(result->values())));
 9753|    796|    return result;
 9754|    796|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSG_16buffer_range_tagEcEEEE:
 9478|  7.16k|{
 9479|  7.16k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  7.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|  7.16k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9413|  7.16k|{
 9414|  7.16k|#if !SCN_DISABLE_LOCALE
 9415|  7.16k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  7.16k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  7.16k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  7.16k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  7.16k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  7.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.11k, False: 54]
  |  |  ------------------
  ------------------
 9422|  7.11k|        return unexpected(result.error());
 9423|  7.11k|    }
 9424|     54|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|     54|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  7.16k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|    796|{
 9681|    796|    auto result = make_scan_result<Source, Args...>();
 9682|    796|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|    796|                                   make_scan_args(result->values())));
 9684|    796|    return result;
 9685|    796|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEEDav:
 9636|  1.59k|{
 9637|  1.59k|    return scan_result_type<Source, Args...>();
 9638|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  1.59k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  1.59k|        : m_value(T{}), m_has_value(true)
  427|  1.59k|    {
  428|  1.59k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6570|  1.59k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6344|  4.77k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  1.59k|{
 9622|  1.59k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.59k, False: 0]
  |  |  ------------------
  ------------------
 9623|  1.59k|        out = unexpected(in.error());
 9624|  1.59k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  1.59k|        : base(unexpect, std::move(e.error())),
 1616|  1.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.59k|    {
 1618|  1.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  1.59k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.59k|          m_has_value(false)
  451|  1.59k|    {
  452|  1.59k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.59k|    {
 1316|  1.59k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  1.59k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  1.59k|    {
  903|  1.59k|        assign_common(std::move(other));
  904|  1.59k|        return *this;
  905|  1.59k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  1.59k|    {
  950|  1.59k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 1.59k, False: 0]
  ------------------
  951|  1.59k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 1.59k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  1.59k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  1.59k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.77k|    {
  490|  4.77k|        return m_has_value;
  491|  4.77k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.59k|    {
  456|  1.59k|        return m_value;
  457|  1.59k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  1.59k|    {
 1046|  1.59k|        this->destroy_value();
 1047|  1.59k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  1.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  1.59k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  1.59k|    {
  504|  1.59k|        scn::detail::construct_at(&get_unexpected(),
  505|  1.59k|                                  std::forward<Args>(args)...);
  506|  1.59k|        m_has_value = false;
  507|  1.59k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.59k|    {
  473|  1.59k|        return m_unexpected;
  474|  1.59k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  1.59k|    {
  481|  1.59k|        return std::move(m_unexpected);
  482|  1.59k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 8767|  1.59k|    {
 8768|  1.59k|        return m_str;
 8769|  1.59k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  1.59k|{
 6110|  1.59k|    detail::check_scan_arg_types<Args...>();
 6111|  1.59k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  1.59k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5824|  4.77k|{
 5825|  4.77k|    constexpr bool default_constructible_constraint =
 5826|  4.77k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  4.77k|    static_assert(default_constructible_constraint,
 5828|  4.77k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  4.77k|    constexpr bool destructible_constraint =
 5831|  4.77k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  4.77k|    static_assert(destructible_constraint,
 5833|  4.77k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  4.77k|    constexpr bool non_reference_constraint =
 5836|  4.77k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  4.77k|    static_assert(non_reference_constraint,
 5838|  4.77k|                  "Scan argument types must not be references");
 5839|       |
 5840|  4.77k|    constexpr bool movable_constraint =
 5841|  4.77k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  4.77k|    static_assert(movable_constraint,
 5843|  4.77k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  4.77k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  4.77k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  4.77k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 6085|  1.59k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  1.59k|    {
 6087|  1.59k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  1.59k|    {
 6095|  1.59k|        return {detail::make_arg<
 6096|  1.59k|            kind, Context,
 6097|  1.59k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  1.59k|                                 typename Context::char_type>::value>(args)...};
 6099|  1.59k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 5874|  1.59k|{
 5875|  1.59k|    return make_value<Context>(value).ref_value;
 5876|  1.59k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5809|  1.59k|{
 5810|  1.59k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  1.59k|                                  needs_context_tag>) {
 5814|  1.59k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  1.59k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5648|  1.59k|    {                                                                        \
 5649|  1.59k|        return val;                                                          \
 5650|  1.59k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5778|  4.77k|{
 5779|  4.77k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  4.77k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  4.77k|    constexpr bool scannable_char =
 5783|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  4.77k|    static_assert(scannable_char,
 5785|  4.77k|                  "Cannot scan an argument of an unsupported character "
 5786|  4.77k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  4.77k|    constexpr bool scannable_const =
 5789|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  4.77k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  4.77k|    constexpr bool scannable_disabled =
 5793|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  4.77k|    static_assert(scannable_disabled,
 5795|  4.77k|                  "Cannot scan an argument that has been disabled by "
 5796|  4.77k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  4.77k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  4.77k|    static_assert(
 5800|  4.77k|        scannable,
 5801|  4.77k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  4.77k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  4.77k|    return arg_value{arg};
 5805|  4.77k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5562|  4.77k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  4.77k|    {
 5564|  4.77k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  1.59k|    {
 1815|  1.59k|        return &value();
 1816|  1.59k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.59k|    {
 1769|  1.59k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.59k|        return this->get_value();
 1771|  1.59k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6353|  4.77k|    {
 6354|  4.77k|        return m_values;
 6355|  4.77k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  1.59k|        : basic_scan_args(store.desc, store.args.data())
 6136|  1.59k|    {
 6137|  1.59k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  1.59k|        : m_str(r.str)
 8763|  1.59k|    {
 8764|  1.59k|    }
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|    796|{
 9750|    796|    auto result = make_scan_result<Source, Args...>();
 9751|    796|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|    796|                                   make_scan_args(result->values())));
 9753|    796|    return result;
 9754|    796|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|    796|{
 9681|    796|    auto result = make_scan_result<Source, Args...>();
 9682|    796|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|    796|                                   make_scan_args(result->values())));
 9684|    796|    return result;
 9685|    796|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEEDav:
 9636|  1.59k|{
 9637|  1.59k|    return scan_result_type<Source, Args...>();
 9638|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  1.59k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  1.59k|        : m_value(T{}), m_has_value(true)
  427|  1.59k|    {
  428|  1.59k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6570|  1.59k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6344|  4.77k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  1.59k|{
 9622|  1.59k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.59k, False: 0]
  |  |  ------------------
  ------------------
 9623|  1.59k|        out = unexpected(in.error());
 9624|  1.59k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  1.59k|        : base(unexpect, std::move(e.error())),
 1616|  1.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.59k|    {
 1618|  1.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  1.59k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.59k|          m_has_value(false)
  451|  1.59k|    {
  452|  1.59k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.59k|    {
 1316|  1.59k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  1.59k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  1.59k|    {
  903|  1.59k|        assign_common(std::move(other));
  904|  1.59k|        return *this;
  905|  1.59k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  1.59k|    {
  950|  1.59k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 1.59k, False: 0]
  ------------------
  951|  1.59k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 1.59k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  1.59k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  1.59k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.77k|    {
  490|  4.77k|        return m_has_value;
  491|  4.77k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.59k|    {
  456|  1.59k|        return m_value;
  457|  1.59k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  1.59k|    {
 1046|  1.59k|        this->destroy_value();
 1047|  1.59k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  1.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  1.59k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  1.59k|    {
  504|  1.59k|        scn::detail::construct_at(&get_unexpected(),
  505|  1.59k|                                  std::forward<Args>(args)...);
  506|  1.59k|        m_has_value = false;
  507|  1.59k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.59k|    {
  473|  1.59k|        return m_unexpected;
  474|  1.59k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  1.59k|    {
  481|  1.59k|        return std::move(m_unexpected);
  482|  1.59k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 8767|  1.59k|    {
 8768|  1.59k|        return m_str;
 8769|  1.59k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  1.59k|{
 6110|  1.59k|    detail::check_scan_arg_types<Args...>();
 6111|  1.59k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  1.59k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5824|  4.77k|{
 5825|  4.77k|    constexpr bool default_constructible_constraint =
 5826|  4.77k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  4.77k|    static_assert(default_constructible_constraint,
 5828|  4.77k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  4.77k|    constexpr bool destructible_constraint =
 5831|  4.77k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  4.77k|    static_assert(destructible_constraint,
 5833|  4.77k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  4.77k|    constexpr bool non_reference_constraint =
 5836|  4.77k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  4.77k|    static_assert(non_reference_constraint,
 5838|  4.77k|                  "Scan argument types must not be references");
 5839|       |
 5840|  4.77k|    constexpr bool movable_constraint =
 5841|  4.77k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  4.77k|    static_assert(movable_constraint,
 5843|  4.77k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  4.77k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  4.77k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  4.77k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 6085|  1.59k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  1.59k|    {
 6087|  1.59k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  1.59k|    {
 6095|  1.59k|        return {detail::make_arg<
 6096|  1.59k|            kind, Context,
 6097|  1.59k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  1.59k|                                 typename Context::char_type>::value>(args)...};
 6099|  1.59k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5874|  1.59k|{
 5875|  1.59k|    return make_value<Context>(value).ref_value;
 5876|  1.59k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5809|  1.59k|{
 5810|  1.59k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  1.59k|                                  needs_context_tag>) {
 5814|  1.59k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  1.59k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5648|  1.59k|    {                                                                        \
 5649|  1.59k|        return val;                                                          \
 5650|  1.59k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5778|  4.77k|{
 5779|  4.77k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  4.77k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  4.77k|    constexpr bool scannable_char =
 5783|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  4.77k|    static_assert(scannable_char,
 5785|  4.77k|                  "Cannot scan an argument of an unsupported character "
 5786|  4.77k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  4.77k|    constexpr bool scannable_const =
 5789|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  4.77k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  4.77k|    constexpr bool scannable_disabled =
 5793|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  4.77k|    static_assert(scannable_disabled,
 5795|  4.77k|                  "Cannot scan an argument that has been disabled by "
 5796|  4.77k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  4.77k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  4.77k|    static_assert(
 5800|  4.77k|        scannable,
 5801|  4.77k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  4.77k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  4.77k|    return arg_value{arg};
 5805|  4.77k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5562|  4.77k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  4.77k|    {
 5564|  4.77k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  1.59k|    {
 1815|  1.59k|        return &value();
 1816|  1.59k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.59k|    {
 1769|  1.59k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.59k|        return this->get_value();
 1771|  1.59k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6353|  4.77k|    {
 6354|  4.77k|        return m_values;
 6355|  4.77k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  1.59k|        : basic_scan_args(store.desc, store.args.data())
 6136|  1.59k|    {
 6137|  1.59k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  1.59k|        : m_str(r.str)
 8763|  1.59k|    {
 8764|  1.59k|    }
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|    796|{
 9750|    796|    auto result = make_scan_result<Source, Args...>();
 9751|    796|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|    796|                                   make_scan_args(result->values())));
 9753|    796|    return result;
 9754|    796|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|    796|{
 9681|    796|    auto result = make_scan_result<Source, Args...>();
 9682|    796|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|    796|                                   make_scan_args(result->values())));
 9684|    796|    return result;
 9685|    796|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEEDav:
 9636|  1.59k|{
 9637|  1.59k|    return scan_result_type<Source, Args...>();
 9638|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|  1.59k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|  1.59k|        : m_value(T{}), m_has_value(true)
  427|  1.59k|    {
  428|  1.59k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6570|  1.59k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6344|  4.77k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  1.59k|{
 9622|  1.59k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.59k, False: 0]
  |  |  ------------------
  ------------------
 9623|  1.59k|        out = unexpected(in.error());
 9624|  1.59k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  1.59k|        : base(unexpect, std::move(e.error())),
 1616|  1.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.59k|    {
 1618|  1.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  1.59k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.59k|          m_has_value(false)
  451|  1.59k|    {
  452|  1.59k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.59k|    {
 1316|  1.59k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  1.59k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  1.59k|    {
  903|  1.59k|        assign_common(std::move(other));
  904|  1.59k|        return *this;
  905|  1.59k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  1.59k|    {
  950|  1.59k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 1.59k, False: 0]
  ------------------
  951|  1.59k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 1.59k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  1.59k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  1.59k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.77k|    {
  490|  4.77k|        return m_has_value;
  491|  4.77k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.59k|    {
  456|  1.59k|        return m_value;
  457|  1.59k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  1.59k|    {
 1046|  1.59k|        this->destroy_value();
 1047|  1.59k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  1.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  1.59k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  1.59k|    {
  504|  1.59k|        scn::detail::construct_at(&get_unexpected(),
  505|  1.59k|                                  std::forward<Args>(args)...);
  506|  1.59k|        m_has_value = false;
  507|  1.59k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.59k|    {
  473|  1.59k|        return m_unexpected;
  474|  1.59k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  1.59k|    {
  481|  1.59k|        return std::move(m_unexpected);
  482|  1.59k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 8767|  1.59k|    {
 8768|  1.59k|        return m_str;
 8769|  1.59k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  1.59k|{
 6110|  1.59k|    detail::check_scan_arg_types<Args...>();
 6111|  1.59k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  1.59k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5824|  4.77k|{
 5825|  4.77k|    constexpr bool default_constructible_constraint =
 5826|  4.77k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  4.77k|    static_assert(default_constructible_constraint,
 5828|  4.77k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  4.77k|    constexpr bool destructible_constraint =
 5831|  4.77k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  4.77k|    static_assert(destructible_constraint,
 5833|  4.77k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  4.77k|    constexpr bool non_reference_constraint =
 5836|  4.77k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  4.77k|    static_assert(non_reference_constraint,
 5838|  4.77k|                  "Scan argument types must not be references");
 5839|       |
 5840|  4.77k|    constexpr bool movable_constraint =
 5841|  4.77k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  4.77k|    static_assert(movable_constraint,
 5843|  4.77k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  4.77k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  4.77k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  4.77k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6085|  1.59k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  1.59k|    {
 6087|  1.59k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  1.59k|    {
 6095|  1.59k|        return {detail::make_arg<
 6096|  1.59k|            kind, Context,
 6097|  1.59k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  1.59k|                                 typename Context::char_type>::value>(args)...};
 6099|  1.59k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5874|  1.59k|{
 5875|  1.59k|    return make_value<Context>(value).ref_value;
 5876|  1.59k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5809|  1.59k|{
 5810|  1.59k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  1.59k|                                  needs_context_tag>) {
 5814|  1.59k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  1.59k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5648|  1.59k|    {                                                                        \
 5649|  1.59k|        return val;                                                          \
 5650|  1.59k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5778|  4.77k|{
 5779|  4.77k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  4.77k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  4.77k|    constexpr bool scannable_char =
 5783|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  4.77k|    static_assert(scannable_char,
 5785|  4.77k|                  "Cannot scan an argument of an unsupported character "
 5786|  4.77k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  4.77k|    constexpr bool scannable_const =
 5789|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  4.77k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  4.77k|    constexpr bool scannable_disabled =
 5793|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  4.77k|    static_assert(scannable_disabled,
 5795|  4.77k|                  "Cannot scan an argument that has been disabled by "
 5796|  4.77k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  4.77k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  4.77k|    static_assert(
 5800|  4.77k|        scannable,
 5801|  4.77k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  4.77k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  4.77k|    return arg_value{arg};
 5805|  4.77k|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5562|  4.77k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  4.77k|    {
 5564|  4.77k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|  1.59k|    {
 1815|  1.59k|        return &value();
 1816|  1.59k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.59k|    {
 1769|  1.59k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.59k|        return this->get_value();
 1771|  1.59k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6353|  4.77k|    {
 6354|  4.77k|        return m_values;
 6355|  4.77k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  1.59k|        : basic_scan_args(store.desc, store.args.data())
 6136|  1.59k|    {
 6137|  1.59k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  1.59k|        : m_str(r.str)
 8763|  1.59k|    {
 8764|  1.59k|    }
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|    796|{
 9750|    796|    auto result = make_scan_result<Source, Args...>();
 9751|    796|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|    796|                                   make_scan_args(result->values())));
 9753|    796|    return result;
 9754|    796|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|    796|{
 9681|    796|    auto result = make_scan_result<Source, Args...>();
 9682|    796|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|    796|                                   make_scan_args(result->values())));
 9684|    796|    return result;
 9685|    796|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEEDav:
 9636|  1.59k|{
 9637|  1.59k|    return scan_result_type<Source, Args...>();
 9638|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1551|  1.59k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  426|  1.59k|        : m_value(T{}), m_has_value(true)
  427|  1.59k|    {
  428|  1.59k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEC2Ev:
 6570|  1.59k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJbEEC2Ev:
 6344|  4.77k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  1.59k|{
 9622|  1.59k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.59k, False: 0]
  |  |  ------------------
  ------------------
 9623|  1.59k|        out = unexpected(in.error());
 9624|  1.59k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  1.59k|        : base(unexpect, std::move(e.error())),
 1616|  1.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.59k|    {
 1618|  1.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  1.59k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.59k|          m_has_value(false)
  451|  1.59k|    {
  452|  1.59k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.59k|    {
 1316|  1.59k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1556|  1.59k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  902|  1.59k|    {
  903|  1.59k|        assign_common(std::move(other));
  904|  1.59k|        return *this;
  905|  1.59k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  1.59k|    {
  950|  1.59k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 1.59k, False: 0]
  ------------------
  951|  1.59k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 1.59k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  1.59k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  1.59k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.77k|    {
  490|  4.77k|        return m_has_value;
  491|  4.77k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.59k|    {
  456|  1.59k|        return m_value;
  457|  1.59k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  1.59k|    {
 1046|  1.59k|        this->destroy_value();
 1047|  1.59k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  1.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  1.59k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  1.59k|    {
  504|  1.59k|        scn::detail::construct_at(&get_unexpected(),
  505|  1.59k|                                  std::forward<Args>(args)...);
  506|  1.59k|        m_has_value = false;
  507|  1.59k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.59k|    {
  473|  1.59k|        return m_unexpected;
  474|  1.59k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  1.59k|    {
  481|  1.59k|        return std::move(m_unexpected);
  482|  1.59k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 8767|  1.59k|    {
 8768|  1.59k|        return m_str;
 8769|  1.59k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  1.59k|{
 6110|  1.59k|    detail::check_scan_arg_types<Args...>();
 6111|  1.59k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  1.59k|}
_ZN3scn2v46detail20check_scan_arg_typesIJbEEEbv:
 5824|  4.77k|{
 5825|  4.77k|    constexpr bool default_constructible_constraint =
 5826|  4.77k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  4.77k|    static_assert(default_constructible_constraint,
 5828|  4.77k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  4.77k|    constexpr bool destructible_constraint =
 5831|  4.77k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  4.77k|    static_assert(destructible_constraint,
 5833|  4.77k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  4.77k|    constexpr bool non_reference_constraint =
 5836|  4.77k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  4.77k|    static_assert(non_reference_constraint,
 5838|  4.77k|                  "Scan argument types must not be references");
 5839|       |
 5840|  4.77k|    constexpr bool movable_constraint =
 5841|  4.77k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  4.77k|    static_assert(movable_constraint,
 5843|  4.77k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  4.77k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  4.77k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  4.77k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEEC2ERNSt3__15tupleIJbEEE:
 6085|  1.59k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  1.59k|    {
 6087|  1.59k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  1.59k|    {
 6095|  1.59k|        return {detail::make_arg<
 6096|  1.59k|            kind, Context,
 6097|  1.59k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  1.59k|                                 typename Context::char_type>::value>(args)...};
 6099|  1.59k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5874|  1.59k|{
 5875|  1.59k|    return make_value<Context>(value).ref_value;
 5876|  1.59k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEbEEDaRT0_:
 5809|  1.59k|{
 5810|  1.59k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  1.59k|                                  needs_context_tag>) {
 5814|  1.59k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  1.59k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERb:
 5648|  1.59k|    {                                                                        \
 5649|  1.59k|        return val;                                                          \
 5650|  1.59k|    }
_ZN3scn2v46detail15make_value_implIbRbEEDaOT0_:
 5778|  4.77k|{
 5779|  4.77k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  4.77k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  4.77k|    constexpr bool scannable_char =
 5783|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  4.77k|    static_assert(scannable_char,
 5785|  4.77k|                  "Cannot scan an argument of an unsupported character "
 5786|  4.77k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  4.77k|    constexpr bool scannable_const =
 5789|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  4.77k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  4.77k|    constexpr bool scannable_disabled =
 5793|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  4.77k|    static_assert(scannable_disabled,
 5795|  4.77k|                  "Cannot scan an argument that has been disabled by "
 5796|  4.77k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  4.77k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  4.77k|    static_assert(
 5800|  4.77k|        scannable,
 5801|  4.77k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  4.77k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  4.77k|    return arg_value{arg};
 5805|  4.77k|}
_ZN3scn2v46detail9arg_valueC2IbEERT_:
 5562|  4.77k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  4.77k|    {
 5564|  4.77k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEptEv:
 1814|  1.59k|    {
 1815|  1.59k|        return &value();
 1816|  1.59k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.59k|    {
 1769|  1.59k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.59k|        return this->get_value();
 1771|  1.59k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJbEE6valuesEv:
 6353|  4.77k|    {
 6354|  4.77k|        return m_values;
 6355|  4.77k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  1.59k|        : basic_scan_args(store.desc, store.args.data())
 6136|  1.59k|    {
 6137|  1.59k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  1.59k|        : m_str(r.str)
 8763|  1.59k|    {
 8764|  1.59k|    }
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|    796|{
 9750|    796|    auto result = make_scan_result<Source, Args...>();
 9751|    796|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|    796|                                   make_scan_args(result->values())));
 9753|    796|    return result;
 9754|    796|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 9680|    796|{
 9681|    796|    auto result = make_scan_result<Source, Args...>();
 9682|    796|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|    796|                                   make_scan_args(result->values())));
 9684|    796|    return result;
 9685|    796|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEEDav:
 9636|  1.59k|{
 9637|  1.59k|    return scan_result_type<Source, Args...>();
 9638|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1551|  1.59k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  426|  1.59k|        : m_value(T{}), m_has_value(true)
  427|  1.59k|    {
  428|  1.59k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEC2Ev:
 6570|  1.59k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJPvEEC2Ev:
 6344|  4.77k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9621|  1.59k|{
 9622|  1.59k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.59k, False: 0]
  |  |  ------------------
  ------------------
 9623|  1.59k|        out = unexpected(in.error());
 9624|  1.59k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1615|  1.59k|        : base(unexpect, std::move(e.error())),
 1616|  1.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.59k|    {
 1618|  1.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  1.59k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.59k|          m_has_value(false)
  451|  1.59k|    {
  452|  1.59k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.59k|    {
 1316|  1.59k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1556|  1.59k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  902|  1.59k|    {
  903|  1.59k|        assign_common(std::move(other));
  904|  1.59k|        return *this;
  905|  1.59k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  1.59k|    {
  950|  1.59k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 1.59k, False: 0]
  ------------------
  951|  1.59k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 1.59k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  1.59k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  1.59k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.77k|    {
  490|  4.77k|        return m_has_value;
  491|  4.77k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.59k|    {
  456|  1.59k|        return m_value;
  457|  1.59k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  1.59k|    {
 1046|  1.59k|        this->destroy_value();
 1047|  1.59k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  1.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  1.59k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  1.59k|    {
  504|  1.59k|        scn::detail::construct_at(&get_unexpected(),
  505|  1.59k|                                  std::forward<Args>(args)...);
  506|  1.59k|        m_has_value = false;
  507|  1.59k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.59k|    {
  473|  1.59k|        return m_unexpected;
  474|  1.59k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  1.59k|    {
  481|  1.59k|        return std::move(m_unexpected);
  482|  1.59k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 8767|  1.59k|    {
 8768|  1.59k|        return m_str;
 8769|  1.59k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  1.59k|{
 6110|  1.59k|    detail::check_scan_arg_types<Args...>();
 6111|  1.59k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  1.59k|}
_ZN3scn2v46detail20check_scan_arg_typesIJPvEEEbv:
 5824|  4.77k|{
 5825|  4.77k|    constexpr bool default_constructible_constraint =
 5826|  4.77k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  4.77k|    static_assert(default_constructible_constraint,
 5828|  4.77k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  4.77k|    constexpr bool destructible_constraint =
 5831|  4.77k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  4.77k|    static_assert(destructible_constraint,
 5833|  4.77k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  4.77k|    constexpr bool non_reference_constraint =
 5836|  4.77k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  4.77k|    static_assert(non_reference_constraint,
 5838|  4.77k|                  "Scan argument types must not be references");
 5839|       |
 5840|  4.77k|    constexpr bool movable_constraint =
 5841|  4.77k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  4.77k|    static_assert(movable_constraint,
 5843|  4.77k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  4.77k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  4.77k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  4.77k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  1.59k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  1.59k|    {
 6087|  1.59k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6094|  1.59k|    {
 6095|  1.59k|        return {detail::make_arg<
 6096|  1.59k|            kind, Context,
 6097|  1.59k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  1.59k|                                 typename Context::char_type>::value>(args)...};
 6099|  1.59k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE15EPvvEES8_RT2_:
 5874|  1.59k|{
 5875|  1.59k|    return make_value<Context>(value).ref_value;
 5876|  1.59k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEPvEEDaRT0_:
 5809|  1.59k|{
 5810|  1.59k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  1.59k|                                  needs_context_tag>) {
 5814|  1.59k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  1.59k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERPv:
 5648|  1.59k|    {                                                                        \
 5649|  1.59k|        return val;                                                          \
 5650|  1.59k|    }
_ZN3scn2v46detail15make_value_implIPvRS3_EEDaOT0_:
 5778|  4.77k|{
 5779|  4.77k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  4.77k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  4.77k|    constexpr bool scannable_char =
 5783|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  4.77k|    static_assert(scannable_char,
 5785|  4.77k|                  "Cannot scan an argument of an unsupported character "
 5786|  4.77k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  4.77k|    constexpr bool scannable_const =
 5789|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  4.77k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  4.77k|    constexpr bool scannable_disabled =
 5793|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  4.77k|    static_assert(scannable_disabled,
 5795|  4.77k|                  "Cannot scan an argument that has been disabled by "
 5796|  4.77k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  4.77k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  4.77k|    static_assert(
 5800|  4.77k|        scannable,
 5801|  4.77k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  4.77k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  4.77k|    return arg_value{arg};
 5805|  4.77k|}
_ZN3scn2v46detail9arg_valueC2IPvEERT_:
 5562|  4.77k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  4.77k|    {
 5564|  4.77k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEptEv:
 1814|  1.59k|    {
 1815|  1.59k|        return &value();
 1816|  1.59k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1768|  1.59k|    {
 1769|  1.59k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.59k|        return this->get_value();
 1771|  1.59k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJPvEE6valuesEv:
 6353|  4.77k|    {
 6354|  4.77k|        return m_values;
 6355|  4.77k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  1.59k|        : basic_scan_args(store.desc, store.args.data())
 6136|  1.59k|    {
 6137|  1.59k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  1.59k|        : m_str(r.str)
 8763|  1.59k|    {
 8764|  1.59k|    }
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 9749|    796|{
 9750|    796|    auto result = make_scan_result<Source, Args...>();
 9751|    796|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|    796|                                   make_scan_args(result->values())));
 9753|    796|    return result;
 9754|    796|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 9680|    796|{
 9681|    796|    auto result = make_scan_result<Source, Args...>();
 9682|    796|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|    796|                                   make_scan_args(result->values())));
 9684|    796|    return result;
 9685|    796|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEEDav:
 9636|  1.59k|{
 9637|  1.59k|    return scan_result_type<Source, Args...>();
 9638|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  1.59k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  1.59k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  1.59k|    {
  613|  1.59k|        construct();
  614|  1.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  1.59k|    {
  694|  1.59k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  1.59k|        m_has_value = true;
  696|  1.59k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|  1.59k|{
  396|  1.59k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  1.59k|        T(std::forward<Args>(args)...);
  398|  1.59k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6570|  1.59k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6344|  4.77k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  4.81k|    {
  718|  4.81k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  4.81k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  4.81k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  1.59k|{
 9622|  1.59k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.55k, False: 36]
  |  |  ------------------
  ------------------
 9623|  1.55k|        out = unexpected(in.error());
 9624|  1.55k|    }
 9625|     36|    else {
 9626|     36|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|     36|    static_cast<    \
  |  |  935|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|     36|    }
 9628|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  1.55k|        : base(unexpect, std::move(e.error())),
 1616|  1.55k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.55k|    {
 1618|  1.55k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  1.55k|        : m_has_value(false)
  637|  1.55k|    {
  638|  1.55k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  1.55k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  1.55k|    {
  701|  1.55k|        scn::detail::construct_at(unexpected_ptr(),
  702|  1.55k|                                  std::forward<Args>(args)...);
  703|  1.55k|        m_has_value = false;
  704|  1.55k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  9.43k|{
  396|  9.43k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  9.43k|        T(std::forward<Args>(args)...);
  398|  9.43k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  7.78k|    {
  730|  7.78k|        return reinterpret_cast<unexpected<E>*>(
  731|  7.78k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  7.78k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  7.78k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.55k|    {
 1316|  1.55k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  1.55k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  1.55k|    {
  903|  1.55k|        assign_common(std::move(other));
  904|  1.55k|        return *this;
  905|  1.55k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  1.55k|    {
  950|  1.55k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 1.55k, False: 0]
  ------------------
  951|  1.55k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 1.55k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  1.55k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  1.55k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  7.88k|    {
  687|  7.88k|        return m_has_value;
  688|  7.88k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  1.62k|    {
  653|  1.62k|        return *value_ptr();
  654|  1.62k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  1.55k|    {
 1046|  1.55k|        this->destroy_value();
 1047|  1.55k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  1.55k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  1.59k|    {
  708|  1.59k|        scn::detail::destroy_at(value_ptr());
  709|  1.59k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|  1.59k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  1.59k|    else {
  408|  1.59k|        p->~T();
  409|  1.59k|    }
  410|  1.59k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6577|  1.59k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  1.55k|    {
  701|  1.55k|        scn::detail::construct_at(unexpected_ptr(),
  702|  1.55k|                                  std::forward<Args>(args)...);
  703|  1.55k|        m_has_value = false;
  704|  1.55k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  1.55k|    {
  678|  1.55k|        return std::move(*unexpected_ptr());
  679|  1.55k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  3.11k|    {
  712|  3.11k|        scn::detail::destroy_at(unexpected_ptr());
  713|  3.11k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|  18.8k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  18.8k|    else {
  408|  18.8k|        p->~T();
  409|  18.8k|    }
  410|  18.8k|}
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 8767|  1.59k|    {
 8768|  1.59k|        return m_str;
 8769|  1.59k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  1.59k|{
 6110|  1.59k|    detail::check_scan_arg_types<Args...>();
 6111|  1.59k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  1.59k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5824|  4.77k|{
 5825|  4.77k|    constexpr bool default_constructible_constraint =
 5826|  4.77k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  4.77k|    static_assert(default_constructible_constraint,
 5828|  4.77k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  4.77k|    constexpr bool destructible_constraint =
 5831|  4.77k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  4.77k|    static_assert(destructible_constraint,
 5833|  4.77k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  4.77k|    constexpr bool non_reference_constraint =
 5836|  4.77k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  4.77k|    static_assert(non_reference_constraint,
 5838|  4.77k|                  "Scan argument types must not be references");
 5839|       |
 5840|  4.77k|    constexpr bool movable_constraint =
 5841|  4.77k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  4.77k|    static_assert(movable_constraint,
 5843|  4.77k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  4.77k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  4.77k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  4.77k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  1.59k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  1.59k|    {
 6087|  1.59k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  1.59k|    {
 6095|  1.59k|        return {detail::make_arg<
 6096|  1.59k|            kind, Context,
 6097|  1.59k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  1.59k|                                 typename Context::char_type>::value>(args)...};
 6099|  1.59k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5874|  1.59k|{
 5875|  1.59k|    return make_value<Context>(value).ref_value;
 5876|  1.59k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5809|  1.59k|{
 5810|  1.59k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  1.59k|                                  needs_context_tag>) {
 5814|  1.59k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  1.59k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5648|  1.59k|    {                                                                        \
 5649|  1.59k|        return val;                                                          \
 5650|  1.59k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5778|  4.77k|{
 5779|  4.77k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  4.77k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  4.77k|    constexpr bool scannable_char =
 5783|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  4.77k|    static_assert(scannable_char,
 5785|  4.77k|                  "Cannot scan an argument of an unsupported character "
 5786|  4.77k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  4.77k|    constexpr bool scannable_const =
 5789|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  4.77k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  4.77k|    constexpr bool scannable_disabled =
 5793|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  4.77k|    static_assert(scannable_disabled,
 5795|  4.77k|                  "Cannot scan an argument that has been disabled by "
 5796|  4.77k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  4.77k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  4.77k|    static_assert(
 5800|  4.77k|        scannable,
 5801|  4.77k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  4.77k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  4.77k|    return arg_value{arg};
 5805|  4.77k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5562|  4.77k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  4.77k|    {
 5564|  4.77k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  1.62k|    {
 1815|  1.62k|        return &value();
 1816|  1.62k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  1.62k|    {
 1769|  1.62k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.62k|        return this->get_value();
 1771|  1.62k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6353|  4.77k|    {
 6354|  4.77k|        return m_values;
 6355|  4.77k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  1.59k|        : basic_scan_args(store.desc, store.args.data())
 6136|  1.59k|    {
 6137|  1.59k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  1.59k|        : m_str(r.str)
 8763|  1.59k|    {
 8764|  1.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  3.14k|    {
  643|  3.14k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 36, False: 3.11k]
  ------------------
  644|     36|            destroy_value();
  645|     36|        }
  646|  3.11k|        else {
  647|  3.11k|            destroy_unexpected();
  648|  3.11k|        }
  649|  3.14k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 9749|    796|{
 9750|    796|    auto result = make_scan_result<Source, Args...>();
 9751|    796|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|    796|                                   make_scan_args(result->values())));
 9753|    796|    return result;
 9754|    796|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 9680|    796|{
 9681|    796|    auto result = make_scan_result<Source, Args...>();
 9682|    796|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|    796|                                   make_scan_args(result->values())));
 9684|    796|    return result;
 9685|    796|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEEDav:
 9636|  1.59k|{
 9637|  1.59k|    return scan_result_type<Source, Args...>();
 9638|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  1.59k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  1.59k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  1.59k|    {
  613|  1.59k|        construct();
  614|  1.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  1.59k|    {
  694|  1.59k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  1.59k|        m_has_value = true;
  696|  1.59k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|  1.59k|{
  396|  1.59k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  1.59k|        T(std::forward<Args>(args)...);
  398|  1.59k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6570|  1.59k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6344|  4.77k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  4.81k|    {
  718|  4.81k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  4.81k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  4.81k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  1.59k|{
 9622|  1.59k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.55k, False: 36]
  |  |  ------------------
  ------------------
 9623|  1.55k|        out = unexpected(in.error());
 9624|  1.55k|    }
 9625|     36|    else {
 9626|     36|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|     36|    static_cast<    \
  |  |  935|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|     36|    }
 9628|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  1.55k|        : base(unexpect, std::move(e.error())),
 1616|  1.55k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.55k|    {
 1618|  1.55k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  1.55k|        : m_has_value(false)
  637|  1.55k|    {
  638|  1.55k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  1.55k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  1.55k|    {
  701|  1.55k|        scn::detail::construct_at(unexpected_ptr(),
  702|  1.55k|                                  std::forward<Args>(args)...);
  703|  1.55k|        m_has_value = false;
  704|  1.55k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  7.78k|    {
  730|  7.78k|        return reinterpret_cast<unexpected<E>*>(
  731|  7.78k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  7.78k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  7.78k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.55k|    {
 1316|  1.55k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  1.55k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  1.55k|    {
  903|  1.55k|        assign_common(std::move(other));
  904|  1.55k|        return *this;
  905|  1.55k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  1.55k|    {
  950|  1.55k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 1.55k, False: 0]
  ------------------
  951|  1.55k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 1.55k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  1.55k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  1.55k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  7.88k|    {
  687|  7.88k|        return m_has_value;
  688|  7.88k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  1.62k|    {
  653|  1.62k|        return *value_ptr();
  654|  1.62k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  1.55k|    {
 1046|  1.55k|        this->destroy_value();
 1047|  1.55k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  1.55k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  1.59k|    {
  708|  1.59k|        scn::detail::destroy_at(value_ptr());
  709|  1.59k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|  1.59k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  1.59k|    else {
  408|  1.59k|        p->~T();
  409|  1.59k|    }
  410|  1.59k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6577|  1.59k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  1.55k|    {
  701|  1.55k|        scn::detail::construct_at(unexpected_ptr(),
  702|  1.55k|                                  std::forward<Args>(args)...);
  703|  1.55k|        m_has_value = false;
  704|  1.55k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  1.55k|    {
  678|  1.55k|        return std::move(*unexpected_ptr());
  679|  1.55k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  3.11k|    {
  712|  3.11k|        scn::detail::destroy_at(unexpected_ptr());
  713|  3.11k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 8767|  1.59k|    {
 8768|  1.59k|        return m_str;
 8769|  1.59k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  1.59k|{
 6110|  1.59k|    detail::check_scan_arg_types<Args...>();
 6111|  1.59k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  1.59k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5824|  4.77k|{
 5825|  4.77k|    constexpr bool default_constructible_constraint =
 5826|  4.77k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  4.77k|    static_assert(default_constructible_constraint,
 5828|  4.77k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  4.77k|    constexpr bool destructible_constraint =
 5831|  4.77k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  4.77k|    static_assert(destructible_constraint,
 5833|  4.77k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  4.77k|    constexpr bool non_reference_constraint =
 5836|  4.77k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  4.77k|    static_assert(non_reference_constraint,
 5838|  4.77k|                  "Scan argument types must not be references");
 5839|       |
 5840|  4.77k|    constexpr bool movable_constraint =
 5841|  4.77k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  4.77k|    static_assert(movable_constraint,
 5843|  4.77k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  4.77k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  4.77k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  4.77k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  1.59k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  1.59k|    {
 6087|  1.59k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  1.59k|    {
 6095|  1.59k|        return {detail::make_arg<
 6096|  1.59k|            kind, Context,
 6097|  1.59k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  1.59k|                                 typename Context::char_type>::value>(args)...};
 6099|  1.59k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5874|  1.59k|{
 5875|  1.59k|    return make_value<Context>(value).ref_value;
 5876|  1.59k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5809|  1.59k|{
 5810|  1.59k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  1.59k|                                  needs_context_tag>) {
 5814|  1.59k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  1.59k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5648|  1.59k|    {                                                                        \
 5649|  1.59k|        return val;                                                          \
 5650|  1.59k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5778|  4.77k|{
 5779|  4.77k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  4.77k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  4.77k|    constexpr bool scannable_char =
 5783|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  4.77k|    static_assert(scannable_char,
 5785|  4.77k|                  "Cannot scan an argument of an unsupported character "
 5786|  4.77k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  4.77k|    constexpr bool scannable_const =
 5789|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  4.77k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  4.77k|    constexpr bool scannable_disabled =
 5793|  4.77k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  4.77k|    static_assert(scannable_disabled,
 5795|  4.77k|                  "Cannot scan an argument that has been disabled by "
 5796|  4.77k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  4.77k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  4.77k|    static_assert(
 5800|  4.77k|        scannable,
 5801|  4.77k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  4.77k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  4.77k|    return arg_value{arg};
 5805|  4.77k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5562|  4.77k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  4.77k|    {
 5564|  4.77k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  1.62k|    {
 1815|  1.62k|        return &value();
 1816|  1.62k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  1.62k|    {
 1769|  1.62k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.62k|        return this->get_value();
 1771|  1.62k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6353|  4.77k|    {
 6354|  4.77k|        return m_values;
 6355|  4.77k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  1.59k|        : basic_scan_args(store.desc, store.args.data())
 6136|  1.59k|    {
 6137|  1.59k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  1.59k|        : m_str(r.str)
 8763|  1.59k|    {
 8764|  1.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  3.14k|    {
  643|  3.14k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 36, False: 3.11k]
  ------------------
  644|     36|            destroy_value();
  645|     36|        }
  646|  3.11k|        else {
  647|  3.11k|            destroy_unexpected();
  648|  3.11k|        }
  649|  3.14k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 9749|    796|{
 9750|    796|    auto result = make_scan_result<Source, Args...>();
 9751|    796|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|    796|                                   make_scan_args(result->values())));
 9753|    796|    return result;
 9754|    796|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|    796|{
 9681|    796|    auto result = make_scan_result<Source, Args...>();
 9682|    796|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|    796|                                   make_scan_args(result->values())));
 9684|    796|    return result;
 9685|    796|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEEDav:
 9636|  1.59k|{
 9637|  1.59k|    return scan_result_type<Source, Args...>();
 9638|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  1.59k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|  1.59k|        : m_value(T{}), m_has_value(true)
  427|  1.59k|    {
  428|  1.59k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6570|  1.59k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6344|  1.59k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9621|  1.59k|{
 9622|  1.59k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.55k, False: 36]
  |  |  ------------------
  ------------------
 9623|  1.55k|        out = unexpected(in.error());
 9624|  1.55k|    }
 9625|     36|    else {
 9626|     36|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|     36|    static_cast<    \
  |  |  935|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|     36|    }
 9628|  1.59k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  1.55k|        : base(unexpect, std::move(e.error())),
 1616|  1.55k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.55k|    {
 1618|  1.55k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  1.55k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.55k|          m_has_value(false)
  451|  1.55k|    {
  452|  1.55k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.55k|    {
 1316|  1.55k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  1.55k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  1.55k|    {
  903|  1.55k|        assign_common(std::move(other));
  904|  1.55k|        return *this;
  905|  1.55k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  1.55k|    {
  950|  1.55k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 1.55k, False: 0]
  ------------------
  951|  1.55k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 1.55k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  1.55k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  1.55k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.74k|    {
  490|  4.74k|        return m_has_value;
  491|  4.74k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.62k|    {
  456|  1.62k|        return m_value;
  457|  1.62k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  1.55k|    {
 1046|  1.55k|        this->destroy_value();
 1047|  1.55k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  1.55k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  1.55k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  1.55k|    {
  504|  1.55k|        scn::detail::construct_at(&get_unexpected(),
  505|  1.55k|                                  std::forward<Args>(args)...);
  506|  1.55k|        m_has_value = false;
  507|  1.55k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.55k|    {
  473|  1.55k|        return m_unexpected;
  474|  1.55k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  1.55k|    {
  481|  1.55k|        return std::move(m_unexpected);
  482|  1.55k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 8767|  1.59k|    {
 8768|  1.59k|        return m_str;
 8769|  1.59k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  1.59k|{
 6110|  1.59k|    detail::check_scan_arg_types<Args...>();
 6111|  1.59k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  1.59k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5824|  1.59k|{
 5825|  1.59k|    constexpr bool default_constructible_constraint =
 5826|  1.59k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  1.59k|    static_assert(default_constructible_constraint,
 5828|  1.59k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  1.59k|    constexpr bool destructible_constraint =
 5831|  1.59k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  1.59k|    static_assert(destructible_constraint,
 5833|  1.59k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  1.59k|    constexpr bool non_reference_constraint =
 5836|  1.59k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  1.59k|    static_assert(non_reference_constraint,
 5838|  1.59k|                  "Scan argument types must not be references");
 5839|       |
 5840|  1.59k|    constexpr bool movable_constraint =
 5841|  1.59k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  1.59k|    static_assert(movable_constraint,
 5843|  1.59k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  1.59k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  1.59k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  1.59k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6085|  1.59k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  1.59k|    {
 6087|  1.59k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  1.59k|    {
 6095|  1.59k|        return {detail::make_arg<
 6096|  1.59k|            kind, Context,
 6097|  1.59k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  1.59k|                                 typename Context::char_type>::value>(args)...};
 6099|  1.59k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5874|  1.59k|{
 5875|  1.59k|    return make_value<Context>(value).ref_value;
 5876|  1.59k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5809|  1.59k|{
 5810|  1.59k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  1.59k|                                  needs_context_tag>) {
 5814|  1.59k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  1.59k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5648|  1.59k|    {                                                                        \
 5649|  1.59k|        return val;                                                          \
 5650|  1.59k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5778|  1.59k|{
 5779|  1.59k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  1.59k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  1.59k|    constexpr bool scannable_char =
 5783|  1.59k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  1.59k|    static_assert(scannable_char,
 5785|  1.59k|                  "Cannot scan an argument of an unsupported character "
 5786|  1.59k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  1.59k|    constexpr bool scannable_const =
 5789|  1.59k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  1.59k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  1.59k|    constexpr bool scannable_disabled =
 5793|  1.59k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  1.59k|    static_assert(scannable_disabled,
 5795|  1.59k|                  "Cannot scan an argument that has been disabled by "
 5796|  1.59k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  1.59k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  1.59k|    static_assert(
 5800|  1.59k|        scannable,
 5801|  1.59k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  1.59k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  1.59k|    return arg_value{arg};
 5805|  1.59k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5562|  1.59k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  1.59k|    {
 5564|  1.59k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  1.62k|    {
 1815|  1.62k|        return &value();
 1816|  1.62k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  1.62k|    {
 1769|  1.62k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.62k|        return this->get_value();
 1771|  1.62k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6353|  1.59k|    {
 6354|  1.59k|        return m_values;
 6355|  1.59k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  1.59k|        : basic_scan_args(store.desc, store.args.data())
 6136|  1.59k|    {
 6137|  1.59k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  1.59k|        : m_str(r.str)
 8763|  1.59k|    {
 8764|  1.59k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|    796|{
 9750|    796|    auto result = make_scan_result<Source, Args...>();
 9751|    796|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|    796|                                   make_scan_args(result->values())));
 9753|    796|    return result;
 9754|    796|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEEDav:
 9636|  3.18k|{
 9637|  3.18k|    return scan_result_type<Source, Args...>();
 9638|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2Ev:
 1551|  3.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2Ev:
  426|  3.18k|        : m_value(T{}), m_has_value(true)
  427|  3.18k|    {
  428|  3.18k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2Ev:
 6570|  3.18k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6413|  28.6k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|  28.6k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJwEEC2Ev:
 6344|  3.18k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  3.18k|{
 9622|  3.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  3.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.18k, False: 0]
  |  |  ------------------
  ------------------
 9623|  3.18k|        out = unexpected(in.error());
 9624|  3.18k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  3.18k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|  28.6k|    {
 1740|  28.6k|        return has_value();
 1741|  28.6k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  57.3k|    {
  490|  57.3k|        return m_has_value;
  491|  57.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|  28.5k|    {
 1746|  28.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  28.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  28.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  28.5k|        return this->get_unexpected().error();
 1748|  28.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.5k|    {
  473|  28.5k|        return m_unexpected;
  474|  28.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  3.18k|        : base(unexpect, std::move(e.error())),
 1616|  3.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.18k|    {
 1618|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  3.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.18k|          m_has_value(false)
  451|  3.18k|    {
  452|  3.18k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.18k|    {
 1316|  3.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEaSEOSC_:
 1556|  3.18k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvEaSEOSD_:
  902|  3.18k|    {
  903|  3.18k|        assign_common(std::move(other));
  904|  3.18k|        return *this;
  905|  3.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  3.18k|    {
  950|  3.18k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 3.18k, False: 0]
  ------------------
  951|  3.18k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 3.18k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  3.18k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  3.18k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  9.55k|    {
  490|  9.55k|        return m_has_value;
  491|  9.55k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.18k|    {
  456|  3.18k|        return m_value;
  457|  3.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  3.18k|    {
 1046|  3.18k|        this->destroy_value();
 1047|  3.18k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  3.18k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  3.18k|    {
  504|  3.18k|        scn::detail::construct_at(&get_unexpected(),
  505|  3.18k|                                  std::forward<Args>(args)...);
  506|  3.18k|        m_has_value = false;
  507|  3.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.18k|    {
  473|  3.18k|        return m_unexpected;
  474|  3.18k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  3.18k|    {
  481|  3.18k|        return std::move(m_unexpected);
  482|  3.18k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6444|     66|    {
 6445|     66|        m_range = std::forward<Other>(r);
 6446|     66|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|     66|    {
 1795|     66|        return value();
 1796|     66|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|     66|    {
 1769|     66|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     66|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     66|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     66|        return this->get_value();
 1771|     66|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|     66|    {
  456|     66|        return m_value;
  457|     66|    }
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9397|  14.3k|{
 9398|  14.3k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  14.3k|    auto result = vscan_impl(buffer, format, args);
 9401|  14.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.2k, False: 33]
  |  |  ------------------
  ------------------
 9402|  14.2k|        return unexpected(result.error());
 9403|  14.2k|    }
 9404|     33|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|     33|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  14.3k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 5380|  28.6k|{
 5381|  28.6k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  28.6k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  28.6k|                  "\n"
 5385|  28.6k|                  "Unsupported range type given as input to a scanning "
 5386|  28.6k|                  "function.\n"
 5387|  28.6k|                  "A range needs to have a character type (value type) "
 5388|  28.6k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  28.6k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  28.6k|                  "to be included.\n"
 5391|  28.6k|                  "See the scnlib documentation for more details.");
 5392|  28.6k|    static_assert(
 5393|  28.6k|        !std::is_same_v<T, custom_char_traits>,
 5394|  28.6k|        "\n"
 5395|  28.6k|        "Unsupported range type given as input to a scanning "
 5396|  28.6k|        "function.\n"
 5397|  28.6k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  28.6k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  28.6k|        "not supported.");
 5400|  28.6k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  28.6k|                  "\n"
 5402|  28.6k|                  "Unsupported range type given as input to a scanning "
 5403|  28.6k|                  "function.\n"
 5404|  28.6k|                  "file_marker_found cannot be used as an "
 5405|  28.6k|                  "source range type to scn::scan.\n"
 5406|  28.6k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  28.6k|                  "and do not provide an explicit source range, "
 5408|  28.6k|                  "or use scn::scan with a FILE* directly.");
 5409|  28.6k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  28.6k|                  "\n"
 5411|  28.6k|                  "Unsupported range type given as input to a scanning "
 5412|  28.6k|                  "function.\n"
 5413|  28.6k|                  "In order to be scannable, a range needs to satisfy "
 5414|  28.6k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  28.6k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  28.6k|                  "\n"
 5417|  28.6k|                  "Unsupported range type given as input to a scanning "
 5418|  28.6k|                  "function.\n"
 5419|  28.6k|                  "A range needs to model forward_range and have a valid "
 5420|  28.6k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  28.6k|                  "Examples of scannable ranges are std::string, "
 5422|  28.6k|                  "std::string_view, "
 5423|  28.6k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  28.6k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  28.6k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  28.6k|}
_ZN3scn2v46detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5272|  28.6k|{
 5273|  28.6k|    if constexpr (is_valid_char_type<CharT>) {
 5274|  28.6k|        return r;
 5275|       |        // return make_string_scan_buffer(r);
 5276|       |    }
 5277|       |    else {
 5278|       |        return invalid_char_type{};
 5279|       |    }
 5280|  28.6k|}
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  28.5k|        : base(unexpect, std::move(e.error())),
 1616|  28.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.5k|    {
 1618|  28.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  28.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.5k|          m_has_value(false)
  451|  28.5k|    {
  452|  28.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.6k|    {
 1316|  28.6k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6674|     66|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|     66|                      ranges::iterator_t<SourceRange>>) {
 6677|     66|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|     66|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|     66|    {
 2869|     66|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|     66|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|     66|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|     66|    {
 2850|     66|        return decay_copy(t.begin());
 2851|     66|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  60.5k|{
 2094|  60.5k|    return SCN_FWD(t);
  ------------------
  |  |  936|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  60.5k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 6661|     66|{
 6662|     66|    return ranges::end(source);
 6663|     66|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|     66|    {
 2926|     66|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|     66|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|     66|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|     66|    {
 2908|     66|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|     66|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|     66|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   100k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   100k|    static_cast<    \
  |  |  935|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   100k|    static_cast<    \
  |  |  935|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   100k|    {
 3466|   100k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|     66|        : base(std::in_place, std::forward<U>(val)),
 1570|     66|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     66|    {
 1572|     66|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|     66|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     66|    {
  442|     66|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 8767|  3.18k|    {
 8768|  3.18k|        return m_str;
 8769|  3.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJwEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  3.18k|{
 6110|  3.18k|    detail::check_scan_arg_types<Args...>();
 6111|  3.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  3.18k|}
_ZN3scn2v46detail20check_scan_arg_typesIJwEEEbv:
 5824|  3.18k|{
 5825|  3.18k|    constexpr bool default_constructible_constraint =
 5826|  3.18k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  3.18k|    static_assert(default_constructible_constraint,
 5828|  3.18k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  3.18k|    constexpr bool destructible_constraint =
 5831|  3.18k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  3.18k|    static_assert(destructible_constraint,
 5833|  3.18k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  3.18k|    constexpr bool non_reference_constraint =
 5836|  3.18k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  3.18k|    static_assert(non_reference_constraint,
 5838|  3.18k|                  "Scan argument types must not be references");
 5839|       |
 5840|  3.18k|    constexpr bool movable_constraint =
 5841|  3.18k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  3.18k|    static_assert(movable_constraint,
 5843|  3.18k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  3.18k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  3.18k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  3.18k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEEC2ERNSt3__15tupleIJwEEE:
 6085|  3.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  3.18k|    {
 6087|  3.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  3.18k|    {
 6095|  3.18k|        return {detail::make_arg<
 6096|  3.18k|            kind, Context,
 6097|  3.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  3.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  3.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5874|  3.18k|{
 5875|  3.18k|    return make_value<Context>(value).ref_value;
 5876|  3.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEwEEDaRT0_:
 5809|  3.18k|{
 5810|  3.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  3.18k|                                  needs_context_tag>) {
 5814|  3.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  3.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  3.18k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERw:
 5648|  3.18k|    {                                                                        \
 5649|  3.18k|        return val;                                                          \
 5650|  3.18k|    }
_ZN3scn2v46detail15make_value_implIwRwEEDaOT0_:
 5778|  3.18k|{
 5779|  3.18k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  3.18k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  3.18k|    constexpr bool scannable_char =
 5783|  3.18k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  3.18k|    static_assert(scannable_char,
 5785|  3.18k|                  "Cannot scan an argument of an unsupported character "
 5786|  3.18k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  3.18k|    constexpr bool scannable_const =
 5789|  3.18k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  3.18k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  3.18k|    constexpr bool scannable_disabled =
 5793|  3.18k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  3.18k|    static_assert(scannable_disabled,
 5795|  3.18k|                  "Cannot scan an argument that has been disabled by "
 5796|  3.18k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  3.18k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  3.18k|    static_assert(
 5800|  3.18k|        scannable,
 5801|  3.18k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  3.18k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  3.18k|    return arg_value{arg};
 5805|  3.18k|}
_ZN3scn2v46detail9arg_valueC2IwEERT_:
 5562|  3.18k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  3.18k|    {
 5564|  3.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEptEv:
 1814|  3.18k|    {
 1815|  3.18k|        return &value();
 1816|  3.18k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  3.18k|    {
 1769|  3.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.18k|        return this->get_value();
 1771|  3.18k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJwEE6valuesEv:
 6353|  3.18k|    {
 6354|  3.18k|        return m_values;
 6355|  3.18k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJwEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  3.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  3.18k|    {
 6137|  3.18k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6187|  28.6k|        : m_desc(desc), m_builtin_values(data)
 6188|  28.6k|    {
 6189|  28.6k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8445|  28.6k|{
 8446|  28.6k|    return s;
 8447|  28.6k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8417|  28.6k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  3.18k|        : m_str(r.str)
 8763|  3.18k|    {
 8764|  3.18k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9413|  14.3k|{
 9414|  14.3k|#if !SCN_DISABLE_LOCALE
 9415|  14.3k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  14.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  14.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  14.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  14.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.2k, False: 33]
  |  |  ------------------
  ------------------
 9422|  14.2k|        return unexpected(result.error());
 9423|  14.2k|    }
 9424|     33|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|     33|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  14.3k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEEDav:
 9636|  3.18k|{
 9637|  3.18k|    return scan_result_type<Source, Args...>();
 9638|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  3.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  3.18k|        : m_value(T{}), m_has_value(true)
  427|  3.18k|    {
  428|  3.18k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6570|  3.18k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  3.18k|{
 9622|  3.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  3.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.18k, False: 0]
  |  |  ------------------
  ------------------
 9623|  3.18k|        out = unexpected(in.error());
 9624|  3.18k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  3.18k|        : base(unexpect, std::move(e.error())),
 1616|  3.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.18k|    {
 1618|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  3.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.18k|          m_has_value(false)
  451|  3.18k|    {
  452|  3.18k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.18k|    {
 1316|  3.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  3.18k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  3.18k|    {
  903|  3.18k|        assign_common(std::move(other));
  904|  3.18k|        return *this;
  905|  3.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  3.18k|    {
  950|  3.18k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 3.18k, False: 0]
  ------------------
  951|  3.18k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 3.18k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  3.18k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  3.18k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  9.55k|    {
  490|  9.55k|        return m_has_value;
  491|  9.55k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.18k|    {
  456|  3.18k|        return m_value;
  457|  3.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  3.18k|    {
 1046|  3.18k|        this->destroy_value();
 1047|  3.18k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  3.18k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  3.18k|    {
  504|  3.18k|        scn::detail::construct_at(&get_unexpected(),
  505|  3.18k|                                  std::forward<Args>(args)...);
  506|  3.18k|        m_has_value = false;
  507|  3.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.18k|    {
  473|  3.18k|        return m_unexpected;
  474|  3.18k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  3.18k|    {
  481|  3.18k|        return std::move(m_unexpected);
  482|  3.18k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 8767|  3.18k|    {
 8768|  3.18k|        return m_str;
 8769|  3.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  3.18k|{
 6110|  3.18k|    detail::check_scan_arg_types<Args...>();
 6111|  3.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  3.18k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 6085|  3.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  3.18k|    {
 6087|  3.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  3.18k|    {
 6095|  3.18k|        return {detail::make_arg<
 6096|  3.18k|            kind, Context,
 6097|  3.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  3.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  3.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 5874|  3.18k|{
 5875|  3.18k|    return make_value<Context>(value).ref_value;
 5876|  3.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5809|  3.18k|{
 5810|  3.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  3.18k|                                  needs_context_tag>) {
 5814|  3.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  3.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  3.18k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5648|  3.18k|    {                                                                        \
 5649|  3.18k|        return val;                                                          \
 5650|  3.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  3.18k|    {
 1815|  3.18k|        return &value();
 1816|  3.18k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  3.18k|    {
 1769|  3.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.18k|        return this->get_value();
 1771|  3.18k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  3.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  3.18k|    {
 6137|  3.18k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  3.18k|        : m_str(r.str)
 8763|  3.18k|    {
 8764|  3.18k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEEDav:
 9636|  3.18k|{
 9637|  3.18k|    return scan_result_type<Source, Args...>();
 9638|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  3.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  3.18k|        : m_value(T{}), m_has_value(true)
  427|  3.18k|    {
  428|  3.18k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6570|  3.18k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  3.18k|{
 9622|  3.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  3.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.18k, False: 0]
  |  |  ------------------
  ------------------
 9623|  3.18k|        out = unexpected(in.error());
 9624|  3.18k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  3.18k|        : base(unexpect, std::move(e.error())),
 1616|  3.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.18k|    {
 1618|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  3.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.18k|          m_has_value(false)
  451|  3.18k|    {
  452|  3.18k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.18k|    {
 1316|  3.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  3.18k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  3.18k|    {
  903|  3.18k|        assign_common(std::move(other));
  904|  3.18k|        return *this;
  905|  3.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  3.18k|    {
  950|  3.18k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 3.18k, False: 0]
  ------------------
  951|  3.18k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 3.18k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  3.18k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  3.18k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  9.55k|    {
  490|  9.55k|        return m_has_value;
  491|  9.55k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.18k|    {
  456|  3.18k|        return m_value;
  457|  3.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  3.18k|    {
 1046|  3.18k|        this->destroy_value();
 1047|  3.18k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  3.18k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  3.18k|    {
  504|  3.18k|        scn::detail::construct_at(&get_unexpected(),
  505|  3.18k|                                  std::forward<Args>(args)...);
  506|  3.18k|        m_has_value = false;
  507|  3.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.18k|    {
  473|  3.18k|        return m_unexpected;
  474|  3.18k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  3.18k|    {
  481|  3.18k|        return std::move(m_unexpected);
  482|  3.18k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 8767|  3.18k|    {
 8768|  3.18k|        return m_str;
 8769|  3.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  3.18k|{
 6110|  3.18k|    detail::check_scan_arg_types<Args...>();
 6111|  3.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  3.18k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 6085|  3.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  3.18k|    {
 6087|  3.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  3.18k|    {
 6095|  3.18k|        return {detail::make_arg<
 6096|  3.18k|            kind, Context,
 6097|  3.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  3.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  3.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5874|  3.18k|{
 5875|  3.18k|    return make_value<Context>(value).ref_value;
 5876|  3.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5809|  3.18k|{
 5810|  3.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  3.18k|                                  needs_context_tag>) {
 5814|  3.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  3.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  3.18k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5648|  3.18k|    {                                                                        \
 5649|  3.18k|        return val;                                                          \
 5650|  3.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  3.18k|    {
 1815|  3.18k|        return &value();
 1816|  3.18k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  3.18k|    {
 1769|  3.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.18k|        return this->get_value();
 1771|  3.18k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  3.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  3.18k|    {
 6137|  3.18k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  3.18k|        : m_str(r.str)
 8763|  3.18k|    {
 8764|  3.18k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEEDav:
 9636|  3.18k|{
 9637|  3.18k|    return scan_result_type<Source, Args...>();
 9638|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|  3.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|  3.18k|        : m_value(T{}), m_has_value(true)
  427|  3.18k|    {
  428|  3.18k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6570|  3.18k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  3.18k|{
 9622|  3.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  3.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.18k, False: 0]
  |  |  ------------------
  ------------------
 9623|  3.18k|        out = unexpected(in.error());
 9624|  3.18k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  3.18k|        : base(unexpect, std::move(e.error())),
 1616|  3.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.18k|    {
 1618|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  3.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.18k|          m_has_value(false)
  451|  3.18k|    {
  452|  3.18k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.18k|    {
 1316|  3.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  3.18k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  3.18k|    {
  903|  3.18k|        assign_common(std::move(other));
  904|  3.18k|        return *this;
  905|  3.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  3.18k|    {
  950|  3.18k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 3.18k, False: 0]
  ------------------
  951|  3.18k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 3.18k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  3.18k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  3.18k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  9.55k|    {
  490|  9.55k|        return m_has_value;
  491|  9.55k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.18k|    {
  456|  3.18k|        return m_value;
  457|  3.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  3.18k|    {
 1046|  3.18k|        this->destroy_value();
 1047|  3.18k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  3.18k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  3.18k|    {
  504|  3.18k|        scn::detail::construct_at(&get_unexpected(),
  505|  3.18k|                                  std::forward<Args>(args)...);
  506|  3.18k|        m_has_value = false;
  507|  3.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.18k|    {
  473|  3.18k|        return m_unexpected;
  474|  3.18k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  3.18k|    {
  481|  3.18k|        return std::move(m_unexpected);
  482|  3.18k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 8767|  3.18k|    {
 8768|  3.18k|        return m_str;
 8769|  3.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  3.18k|{
 6110|  3.18k|    detail::check_scan_arg_types<Args...>();
 6111|  3.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  3.18k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6085|  3.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  3.18k|    {
 6087|  3.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  3.18k|    {
 6095|  3.18k|        return {detail::make_arg<
 6096|  3.18k|            kind, Context,
 6097|  3.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  3.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  3.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5874|  3.18k|{
 5875|  3.18k|    return make_value<Context>(value).ref_value;
 5876|  3.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5809|  3.18k|{
 5810|  3.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  3.18k|                                  needs_context_tag>) {
 5814|  3.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  3.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  3.18k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5648|  3.18k|    {                                                                        \
 5649|  3.18k|        return val;                                                          \
 5650|  3.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|  3.18k|    {
 1815|  3.18k|        return &value();
 1816|  3.18k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  3.18k|    {
 1769|  3.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.18k|        return this->get_value();
 1771|  3.18k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  3.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  3.18k|    {
 6137|  3.18k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  3.18k|        : m_str(r.str)
 8763|  3.18k|    {
 8764|  3.18k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEEDav:
 9636|  3.18k|{
 9637|  3.18k|    return scan_result_type<Source, Args...>();
 9638|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1551|  3.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  426|  3.18k|        : m_value(T{}), m_has_value(true)
  427|  3.18k|    {
  428|  3.18k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEC2Ev:
 6570|  3.18k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  3.18k|{
 9622|  3.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  3.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.18k, False: 0]
  |  |  ------------------
  ------------------
 9623|  3.18k|        out = unexpected(in.error());
 9624|  3.18k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  3.18k|        : base(unexpect, std::move(e.error())),
 1616|  3.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.18k|    {
 1618|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  3.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.18k|          m_has_value(false)
  451|  3.18k|    {
  452|  3.18k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.18k|    {
 1316|  3.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1556|  3.18k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  902|  3.18k|    {
  903|  3.18k|        assign_common(std::move(other));
  904|  3.18k|        return *this;
  905|  3.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  3.18k|    {
  950|  3.18k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 3.18k, False: 0]
  ------------------
  951|  3.18k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 3.18k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  3.18k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  3.18k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  9.55k|    {
  490|  9.55k|        return m_has_value;
  491|  9.55k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.18k|    {
  456|  3.18k|        return m_value;
  457|  3.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  3.18k|    {
 1046|  3.18k|        this->destroy_value();
 1047|  3.18k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  3.18k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  3.18k|    {
  504|  3.18k|        scn::detail::construct_at(&get_unexpected(),
  505|  3.18k|                                  std::forward<Args>(args)...);
  506|  3.18k|        m_has_value = false;
  507|  3.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.18k|    {
  473|  3.18k|        return m_unexpected;
  474|  3.18k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  3.18k|    {
  481|  3.18k|        return std::move(m_unexpected);
  482|  3.18k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 8767|  3.18k|    {
 8768|  3.18k|        return m_str;
 8769|  3.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  3.18k|{
 6110|  3.18k|    detail::check_scan_arg_types<Args...>();
 6111|  3.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  3.18k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEEC2ERNSt3__15tupleIJbEEE:
 6085|  3.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  3.18k|    {
 6087|  3.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  3.18k|    {
 6095|  3.18k|        return {detail::make_arg<
 6096|  3.18k|            kind, Context,
 6097|  3.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  3.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  3.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5874|  3.18k|{
 5875|  3.18k|    return make_value<Context>(value).ref_value;
 5876|  3.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEbEEDaRT0_:
 5809|  3.18k|{
 5810|  3.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  3.18k|                                  needs_context_tag>) {
 5814|  3.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  3.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  3.18k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERb:
 5648|  3.18k|    {                                                                        \
 5649|  3.18k|        return val;                                                          \
 5650|  3.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEptEv:
 1814|  3.18k|    {
 1815|  3.18k|        return &value();
 1816|  3.18k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  3.18k|    {
 1769|  3.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.18k|        return this->get_value();
 1771|  3.18k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  3.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  3.18k|    {
 6137|  3.18k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  3.18k|        : m_str(r.str)
 8763|  3.18k|    {
 8764|  3.18k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEEDav:
 9636|  3.18k|{
 9637|  3.18k|    return scan_result_type<Source, Args...>();
 9638|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1551|  3.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  426|  3.18k|        : m_value(T{}), m_has_value(true)
  427|  3.18k|    {
  428|  3.18k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEC2Ev:
 6570|  3.18k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9621|  3.18k|{
 9622|  3.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  3.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.18k, False: 0]
  |  |  ------------------
  ------------------
 9623|  3.18k|        out = unexpected(in.error());
 9624|  3.18k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1615|  3.18k|        : base(unexpect, std::move(e.error())),
 1616|  3.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.18k|    {
 1618|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  3.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.18k|          m_has_value(false)
  451|  3.18k|    {
  452|  3.18k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.18k|    {
 1316|  3.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1556|  3.18k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  902|  3.18k|    {
  903|  3.18k|        assign_common(std::move(other));
  904|  3.18k|        return *this;
  905|  3.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  3.18k|    {
  950|  3.18k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 3.18k, False: 0]
  ------------------
  951|  3.18k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 3.18k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  3.18k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  3.18k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  9.55k|    {
  490|  9.55k|        return m_has_value;
  491|  9.55k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.18k|    {
  456|  3.18k|        return m_value;
  457|  3.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  3.18k|    {
 1046|  3.18k|        this->destroy_value();
 1047|  3.18k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  3.18k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  3.18k|    {
  504|  3.18k|        scn::detail::construct_at(&get_unexpected(),
  505|  3.18k|                                  std::forward<Args>(args)...);
  506|  3.18k|        m_has_value = false;
  507|  3.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.18k|    {
  473|  3.18k|        return m_unexpected;
  474|  3.18k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  3.18k|    {
  481|  3.18k|        return std::move(m_unexpected);
  482|  3.18k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 8767|  3.18k|    {
 8768|  3.18k|        return m_str;
 8769|  3.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  3.18k|{
 6110|  3.18k|    detail::check_scan_arg_types<Args...>();
 6111|  3.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  3.18k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  3.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  3.18k|    {
 6087|  3.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6094|  3.18k|    {
 6095|  3.18k|        return {detail::make_arg<
 6096|  3.18k|            kind, Context,
 6097|  3.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  3.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  3.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE15EPvvEES8_RT2_:
 5874|  3.18k|{
 5875|  3.18k|    return make_value<Context>(value).ref_value;
 5876|  3.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEPvEEDaRT0_:
 5809|  3.18k|{
 5810|  3.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  3.18k|                                  needs_context_tag>) {
 5814|  3.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  3.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  3.18k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERPv:
 5648|  3.18k|    {                                                                        \
 5649|  3.18k|        return val;                                                          \
 5650|  3.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEptEv:
 1814|  3.18k|    {
 1815|  3.18k|        return &value();
 1816|  3.18k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1768|  3.18k|    {
 1769|  3.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.18k|        return this->get_value();
 1771|  3.18k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  3.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  3.18k|    {
 6137|  3.18k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  3.18k|        : m_str(r.str)
 8763|  3.18k|    {
 8764|  3.18k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEEDav:
 9636|  3.18k|{
 9637|  3.18k|    return scan_result_type<Source, Args...>();
 9638|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  3.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  3.18k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  3.18k|    {
  613|  3.18k|        construct();
  614|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  3.18k|    {
  694|  3.18k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  3.18k|        m_has_value = true;
  696|  3.18k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|  3.18k|{
  396|  3.18k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  3.18k|        T(std::forward<Args>(args)...);
  398|  3.18k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6570|  3.18k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  9.57k|    {
  718|  9.57k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  9.57k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  9.57k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  3.18k|{
 9622|  3.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  3.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.16k, False: 22]
  |  |  ------------------
  ------------------
 9623|  3.16k|        out = unexpected(in.error());
 9624|  3.16k|    }
 9625|     22|    else {
 9626|     22|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|     22|    static_cast<    \
  |  |  935|     22|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|     22|    }
 9628|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  3.16k|        : base(unexpect, std::move(e.error())),
 1616|  3.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.16k|    {
 1618|  3.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  3.16k|        : m_has_value(false)
  637|  3.16k|    {
  638|  3.16k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  3.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  3.16k|    {
  701|  3.16k|        scn::detail::construct_at(unexpected_ptr(),
  702|  3.16k|                                  std::forward<Args>(args)...);
  703|  3.16k|        m_has_value = false;
  704|  3.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  15.8k|    {
  730|  15.8k|        return reinterpret_cast<unexpected<E>*>(
  731|  15.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  15.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  15.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.16k|    {
 1316|  3.16k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  3.16k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  3.16k|    {
  903|  3.16k|        assign_common(std::move(other));
  904|  3.16k|        return *this;
  905|  3.16k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  3.16k|    {
  950|  3.16k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 3.16k, False: 0]
  ------------------
  951|  3.16k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 3.16k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  3.16k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  3.16k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  15.8k|    {
  687|  15.8k|        return m_has_value;
  688|  15.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  3.20k|    {
  653|  3.20k|        return *value_ptr();
  654|  3.20k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  3.16k|    {
 1046|  3.16k|        this->destroy_value();
 1047|  3.16k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  3.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  3.18k|    {
  708|  3.18k|        scn::detail::destroy_at(value_ptr());
  709|  3.18k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|  3.18k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  3.18k|    else {
  408|  3.18k|        p->~T();
  409|  3.18k|    }
  410|  3.18k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6577|  3.18k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  3.16k|    {
  701|  3.16k|        scn::detail::construct_at(unexpected_ptr(),
  702|  3.16k|                                  std::forward<Args>(args)...);
  703|  3.16k|        m_has_value = false;
  704|  3.16k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  3.16k|    {
  678|  3.16k|        return std::move(*unexpected_ptr());
  679|  3.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  6.32k|    {
  712|  6.32k|        scn::detail::destroy_at(unexpected_ptr());
  713|  6.32k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 8767|  3.18k|    {
 8768|  3.18k|        return m_str;
 8769|  3.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  3.18k|{
 6110|  3.18k|    detail::check_scan_arg_types<Args...>();
 6111|  3.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  3.18k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  3.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  3.18k|    {
 6087|  3.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  3.18k|    {
 6095|  3.18k|        return {detail::make_arg<
 6096|  3.18k|            kind, Context,
 6097|  3.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  3.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  3.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5874|  3.18k|{
 5875|  3.18k|    return make_value<Context>(value).ref_value;
 5876|  3.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5809|  3.18k|{
 5810|  3.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  3.18k|                                  needs_context_tag>) {
 5814|  3.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  3.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  3.18k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5648|  3.18k|    {                                                                        \
 5649|  3.18k|        return val;                                                          \
 5650|  3.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  3.20k|    {
 1815|  3.20k|        return &value();
 1816|  3.20k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  3.20k|    {
 1769|  3.20k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.20k|        return this->get_value();
 1771|  3.20k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  3.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  3.18k|    {
 6137|  3.18k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  3.18k|        : m_str(r.str)
 8763|  3.18k|    {
 8764|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  6.34k|    {
  643|  6.34k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 22, False: 6.32k]
  ------------------
  644|     22|            destroy_value();
  645|     22|        }
  646|  6.32k|        else {
  647|  6.32k|            destroy_unexpected();
  648|  6.32k|        }
  649|  6.34k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEEDav:
 9636|  3.18k|{
 9637|  3.18k|    return scan_result_type<Source, Args...>();
 9638|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  3.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  3.18k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  3.18k|    {
  613|  3.18k|        construct();
  614|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  3.18k|    {
  694|  3.18k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  3.18k|        m_has_value = true;
  696|  3.18k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|  3.18k|{
  396|  3.18k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  3.18k|        T(std::forward<Args>(args)...);
  398|  3.18k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6570|  3.18k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  9.57k|    {
  718|  9.57k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  9.57k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  9.57k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  3.18k|{
 9622|  3.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  3.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.16k, False: 22]
  |  |  ------------------
  ------------------
 9623|  3.16k|        out = unexpected(in.error());
 9624|  3.16k|    }
 9625|     22|    else {
 9626|     22|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|     22|    static_cast<    \
  |  |  935|     22|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|     22|    }
 9628|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  3.16k|        : base(unexpect, std::move(e.error())),
 1616|  3.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.16k|    {
 1618|  3.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  3.16k|        : m_has_value(false)
  637|  3.16k|    {
  638|  3.16k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  3.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  3.16k|    {
  701|  3.16k|        scn::detail::construct_at(unexpected_ptr(),
  702|  3.16k|                                  std::forward<Args>(args)...);
  703|  3.16k|        m_has_value = false;
  704|  3.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  15.8k|    {
  730|  15.8k|        return reinterpret_cast<unexpected<E>*>(
  731|  15.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  15.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  15.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.16k|    {
 1316|  3.16k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  3.16k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  3.16k|    {
  903|  3.16k|        assign_common(std::move(other));
  904|  3.16k|        return *this;
  905|  3.16k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  3.16k|    {
  950|  3.16k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 3.16k, False: 0]
  ------------------
  951|  3.16k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 3.16k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  3.16k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  3.16k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  15.8k|    {
  687|  15.8k|        return m_has_value;
  688|  15.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  3.20k|    {
  653|  3.20k|        return *value_ptr();
  654|  3.20k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  3.16k|    {
 1046|  3.16k|        this->destroy_value();
 1047|  3.16k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  3.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  3.18k|    {
  708|  3.18k|        scn::detail::destroy_at(value_ptr());
  709|  3.18k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|  3.18k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  3.18k|    else {
  408|  3.18k|        p->~T();
  409|  3.18k|    }
  410|  3.18k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6577|  3.18k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  3.16k|    {
  701|  3.16k|        scn::detail::construct_at(unexpected_ptr(),
  702|  3.16k|                                  std::forward<Args>(args)...);
  703|  3.16k|        m_has_value = false;
  704|  3.16k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  3.16k|    {
  678|  3.16k|        return std::move(*unexpected_ptr());
  679|  3.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  6.32k|    {
  712|  6.32k|        scn::detail::destroy_at(unexpected_ptr());
  713|  6.32k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 8767|  3.18k|    {
 8768|  3.18k|        return m_str;
 8769|  3.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  3.18k|{
 6110|  3.18k|    detail::check_scan_arg_types<Args...>();
 6111|  3.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  3.18k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  3.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  3.18k|    {
 6087|  3.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  3.18k|    {
 6095|  3.18k|        return {detail::make_arg<
 6096|  3.18k|            kind, Context,
 6097|  3.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  3.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  3.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5874|  3.18k|{
 5875|  3.18k|    return make_value<Context>(value).ref_value;
 5876|  3.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5809|  3.18k|{
 5810|  3.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  3.18k|                                  needs_context_tag>) {
 5814|  3.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  3.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  3.18k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5648|  3.18k|    {                                                                        \
 5649|  3.18k|        return val;                                                          \
 5650|  3.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  3.20k|    {
 1815|  3.20k|        return &value();
 1816|  3.20k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  3.20k|    {
 1769|  3.20k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.20k|        return this->get_value();
 1771|  3.20k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  3.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  3.18k|    {
 6137|  3.18k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  3.18k|        : m_str(r.str)
 8763|  3.18k|    {
 8764|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  6.34k|    {
  643|  6.34k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 22, False: 6.32k]
  ------------------
  644|     22|            destroy_value();
  645|     22|        }
  646|  6.32k|        else {
  647|  6.32k|            destroy_unexpected();
  648|  6.32k|        }
  649|  6.34k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEEDav:
 9636|  3.18k|{
 9637|  3.18k|    return scan_result_type<Source, Args...>();
 9638|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  3.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|  3.18k|        : m_value(T{}), m_has_value(true)
  427|  3.18k|    {
  428|  3.18k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6570|  3.18k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6344|  3.18k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9621|  3.18k|{
 9622|  3.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  3.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.16k, False: 22]
  |  |  ------------------
  ------------------
 9623|  3.16k|        out = unexpected(in.error());
 9624|  3.16k|    }
 9625|     22|    else {
 9626|     22|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|     22|    static_cast<    \
  |  |  935|     22|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|     22|    }
 9628|  3.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  3.16k|        : base(unexpect, std::move(e.error())),
 1616|  3.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.16k|    {
 1618|  3.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  3.16k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.16k|          m_has_value(false)
  451|  3.16k|    {
  452|  3.16k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.16k|    {
 1316|  3.16k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  3.16k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  3.16k|    {
  903|  3.16k|        assign_common(std::move(other));
  904|  3.16k|        return *this;
  905|  3.16k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  3.16k|    {
  950|  3.16k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 3.16k, False: 0]
  ------------------
  951|  3.16k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 3.16k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  3.16k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  3.16k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  9.53k|    {
  490|  9.53k|        return m_has_value;
  491|  9.53k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.20k|    {
  456|  3.20k|        return m_value;
  457|  3.20k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  3.16k|    {
 1046|  3.16k|        this->destroy_value();
 1047|  3.16k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  3.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  3.16k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  3.16k|    {
  504|  3.16k|        scn::detail::construct_at(&get_unexpected(),
  505|  3.16k|                                  std::forward<Args>(args)...);
  506|  3.16k|        m_has_value = false;
  507|  3.16k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.16k|    {
  473|  3.16k|        return m_unexpected;
  474|  3.16k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  3.16k|    {
  481|  3.16k|        return std::move(m_unexpected);
  482|  3.16k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 8767|  3.18k|    {
 8768|  3.18k|        return m_str;
 8769|  3.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  3.18k|{
 6110|  3.18k|    detail::check_scan_arg_types<Args...>();
 6111|  3.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  3.18k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5824|  3.18k|{
 5825|  3.18k|    constexpr bool default_constructible_constraint =
 5826|  3.18k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  3.18k|    static_assert(default_constructible_constraint,
 5828|  3.18k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  3.18k|    constexpr bool destructible_constraint =
 5831|  3.18k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  3.18k|    static_assert(destructible_constraint,
 5833|  3.18k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  3.18k|    constexpr bool non_reference_constraint =
 5836|  3.18k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  3.18k|    static_assert(non_reference_constraint,
 5838|  3.18k|                  "Scan argument types must not be references");
 5839|       |
 5840|  3.18k|    constexpr bool movable_constraint =
 5841|  3.18k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  3.18k|    static_assert(movable_constraint,
 5843|  3.18k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  3.18k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  3.18k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  3.18k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6085|  3.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  3.18k|    {
 6087|  3.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  3.18k|    {
 6095|  3.18k|        return {detail::make_arg<
 6096|  3.18k|            kind, Context,
 6097|  3.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  3.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  3.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5874|  3.18k|{
 5875|  3.18k|    return make_value<Context>(value).ref_value;
 5876|  3.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5809|  3.18k|{
 5810|  3.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  3.18k|                                  needs_context_tag>) {
 5814|  3.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  3.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  3.18k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5648|  3.18k|    {                                                                        \
 5649|  3.18k|        return val;                                                          \
 5650|  3.18k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5778|  3.18k|{
 5779|  3.18k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  3.18k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  3.18k|    constexpr bool scannable_char =
 5783|  3.18k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  3.18k|    static_assert(scannable_char,
 5785|  3.18k|                  "Cannot scan an argument of an unsupported character "
 5786|  3.18k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  3.18k|    constexpr bool scannable_const =
 5789|  3.18k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  3.18k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  3.18k|    constexpr bool scannable_disabled =
 5793|  3.18k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  3.18k|    static_assert(scannable_disabled,
 5795|  3.18k|                  "Cannot scan an argument that has been disabled by "
 5796|  3.18k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  3.18k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  3.18k|    static_assert(
 5800|  3.18k|        scannable,
 5801|  3.18k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  3.18k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  3.18k|    return arg_value{arg};
 5805|  3.18k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5562|  3.18k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  3.18k|    {
 5564|  3.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  3.20k|    {
 1815|  3.20k|        return &value();
 1816|  3.20k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  3.20k|    {
 1769|  3.20k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.20k|        return this->get_value();
 1771|  3.20k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6353|  3.18k|    {
 6354|  3.18k|        return m_values;
 6355|  3.18k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  3.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  3.18k|    {
 6137|  3.18k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  3.18k|        : m_str(r.str)
 8763|  3.18k|    {
 8764|  3.18k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|  66.3k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|  66.3k|    {
 3742|  66.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  66.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|  66.3k|    }
_ZNK3scn2v410scan_error4codeEv:
 3752|     96|    {
 3753|     96|        return m_code;
 3754|     96|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  59.5k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  59.5k|    else {
 3981|  59.5k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  59.5k|    }
 3983|  59.5k|}
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  1.53M|    {
  572|  1.53M|        return m_has_value;
  573|  1.53M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|  61.5k|    {
  555|  61.5k|        return m_unexpected;
  556|  61.5k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|  61.2k|    {
 1746|  61.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  61.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  61.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  61.2k|        return this->get_unexpected().error();
 1748|  61.2k|    }
_ZNK3scn2v46detail9fill_type4sizeEv:
 6932|  5.51k|    {
 6933|  5.51k|        return m_size;
 6934|  5.51k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 6973|    212|    {
 6974|    212|        SCN_GCC_COMPAT_PUSH
 6975|    212|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6976|    212|        switch (type) {
 6977|    124|            case presentation_type::none:
  ------------------
  |  Branch (6977:13): [True: 124, False: 88]
  ------------------
 6978|    124|                return 10;
 6979|      0|            case presentation_type::int_generic:
  ------------------
  |  Branch (6979:13): [True: 0, False: 212]
  ------------------
 6980|      0|                return 0;
 6981|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6981:13): [True: 0, False: 212]
  ------------------
 6982|      0|                return arbitrary_base;
 6983|       |
 6984|      0|            case presentation_type::int_binary:
  ------------------
  |  Branch (6984:13): [True: 0, False: 212]
  ------------------
 6985|      0|                return 2;
 6986|      0|            case presentation_type::int_octal:
  ------------------
  |  Branch (6986:13): [True: 0, False: 212]
  ------------------
 6987|      0|                return 8;
 6988|      0|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6988:13): [True: 0, False: 212]
  ------------------
 6989|      0|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6989:13): [True: 0, False: 212]
  ------------------
 6990|      0|                return 10;
 6991|     88|            case presentation_type::int_hex:
  ------------------
  |  Branch (6991:13): [True: 88, False: 124]
  ------------------
 6992|     88|                return 16;
 6993|       |
 6994|      0|            default:
  ------------------
  |  Branch (6994:13): [True: 0, False: 212]
  ------------------
 6995|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6996|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6997|    212|        }
 6998|    212|        SCN_GCC_COMPAT_POP
 6999|    212|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7011|  28.3k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_alignENS1_10align_typeE:
 7014|  16.6k|    {
 7015|  16.6k|        m_specs.align = align;
 7016|  16.6k|    }
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7034|  4.15k|    {
 7035|  4.15k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7035:13): [True: 0, False: 4.15k]
  |  Branch (7035:39): [True: 0, False: 0]
  ------------------
 7036|       |            // clang-format off
 7037|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7038|       |            // clang-format on
 7039|      0|        }
 7040|       |
 7041|  4.15k|        m_specs.width = width;
 7042|  4.15k|    }
_ZN3scn2v46detail12specs_setter12on_precisionEi:
 7044|    738|    {
 7045|    738|        if (m_specs.width > prec) {
  ------------------
  |  Branch (7045:13): [True: 0, False: 738]
  ------------------
 7046|       |            // clang-format off
 7047|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7048|       |            // clang-format on
 7049|      0|        }
 7050|       |
 7051|    738|        m_specs.precision = prec;
 7052|    738|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7055|  38.9k|    {
 7056|  38.9k|        m_specs.type = type;
 7057|  38.9k|    }
_ZN3scn2v46detail12specs_setter17on_charset_singleEDi:
 7060|   978k|    {
 7061|   978k|        const auto cp_value = static_cast<unsigned>(cp);
 7062|   978k|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  864|   978k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 850k, False: 128k]
  |  |  ------------------
  ------------------
 7063|   850k|            m_specs.charset_literals[cp_value / 8] |=
 7064|   850k|                static_cast<unsigned char>(1ul << (cp_value % 8));
 7065|   850k|        }
 7066|   128k|        else {
 7067|   128k|            m_specs.charset_has_nonascii = true;
 7068|   128k|        }
 7069|   978k|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7072|  2.75k|    {
 7073|  2.75k|        const auto begin_value = static_cast<unsigned>(begin);
 7074|  2.75k|        const auto end_value = static_cast<unsigned>(end);
 7075|  2.75k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  930|  2.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7076|       |
 7077|  2.75k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  864|  2.75k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.85k, False: 900]
  |  |  ------------------
  ------------------
 7078|       |            // No need to bit-twiddle with a mask, because with the
 7079|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7080|  1.85k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  884|  1.85k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7081|  96.8k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7081:40): [True: 94.9k, False: 1.85k]
  ------------------
 7082|  94.9k|                m_specs.charset_literals[v / 8] |=
 7083|  94.9k|                    static_cast<unsigned char>(1ul << (v % 8));
 7084|  94.9k|            }
 7085|  1.85k|        }
 7086|    900|        else {
 7087|    900|            m_specs.charset_has_nonascii = true;
 7088|    900|        }
 7089|  2.75k|    }
_ZN3scn2v46detail12specs_setter19on_charset_invertedEv:
 7092|    108|    {
 7093|    108|        m_specs.charset_is_inverted = true;
 7094|    108|    }
_ZN3scn2v46detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 7111|  24.5k|    {
 7112|  24.5k|        m_specs.regexp_flags = flags;
 7113|  24.5k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7117|    484|    {
 7118|    484|        SCN_UNLIKELY_ATTR
 7119|    484|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7120|    484|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7128|  1.01M|    {
 7129|  1.01M|        return m_error;
 7130|  1.01M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|  41.2k|{
 3918|  41.2k|    return unexpected(scan_error{c, m});
 3919|  41.2k|}
_ZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4168|  86.2k|{
 4169|  86.2k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  86.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  86.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4170|       |
 4171|  86.2k|    const auto is_trailing_code_unit = [](char ch) {
 4172|  86.2k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4173|  86.2k|    };
 4174|       |
 4175|  86.2k|    if (input.size() == 1) {
  ------------------
  |  Branch (4175:9): [True: 74.5k, False: 11.6k]
  ------------------
 4176|  74.5k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  930|  74.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  74.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|  74.5k|        return static_cast<char32_t>(input[0]);
 4178|  74.5k|    }
 4179|       |
 4180|  11.6k|    if (input.size() == 2) {
  ------------------
  |  Branch (4180:9): [True: 11.3k, False: 300]
  ------------------
 4181|  11.3k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4182|  11.3k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4183|       |
 4184|  11.3k|        char32_t cp{};
 4185|  11.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4186|  11.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4187|  11.3k|        return cp;
 4188|  11.3k|    }
 4189|       |
 4190|    300|    if (input.size() == 3) {
  ------------------
  |  Branch (4190:9): [True: 292, False: 8]
  ------------------
 4191|    292|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  930|    292|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    292|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4192|    292|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|    292|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    292|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4193|    292|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  930|    292|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    292|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4194|       |
 4195|    292|        char32_t cp{};
 4196|    292|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4197|    292|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4198|    292|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4199|    292|        return cp;
 4200|    292|    }
 4201|       |
 4202|      8|    if (input.size() == 4) {
  ------------------
  |  Branch (4202:9): [True: 8, False: 0]
  ------------------
 4203|      8|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  930|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4204|      8|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  930|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4205|      8|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|      8|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  930|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4207|      8|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  930|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4208|       |
 4209|      8|        char32_t cp{};
 4210|      8|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4211|      8|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4212|      8|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4213|      8|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4214|      8|        return cp;
 4215|      8|    }
 4216|       |
 4217|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4218|       |    // gcc 7 thinks we'll get here, even when we won't
 4219|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|      0|#endif
 4221|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4222|      0|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  58.7M|{
 4308|       |    // Pattern_White_Space property
 4309|  58.7M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 37.6k, False: 58.7M]
  |  Branch (4309:27): [True: 2.84k, False: 34.7k]
  ------------------
 4310|  58.7M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 108, False: 58.7M]
  ------------------
 4311|  58.7M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 990, False: 58.7M]
  ------------------
 4312|  58.7M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 12, False: 58.7M]
  ------------------
 4313|  58.7M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 92, False: 58.7M]
  ------------------
 4314|  58.7M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 0, False: 58.7M]
  ------------------
 4315|  58.7M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 58.7M]
  ------------------
 4316|  58.7M|}
_ZN3scn2v46detailanENS1_11regex_flagsES2_:
 6862|  33.9k|{
 6863|  33.9k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6864|  33.9k|                                    static_cast<unsigned>(b));
 6865|  33.9k|}
_ZN3scn2v46detailorENS1_11regex_flagsES2_:
 6867|  1.37k|{
 6868|  1.37k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6869|  1.37k|                                    static_cast<unsigned>(b));
 6870|  1.37k|}
_ZN3scn2v46detailoRERNS1_11regex_flagsES2_:
 6882|  1.37k|{
 6883|  1.37k|    return a = a | b;
 6884|  1.37k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|    248|    {
 1756|    248|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    248|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    248|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    248|        return std::move(this->get_unexpected().error());
 1758|    248|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7897|  6.21k|{
 7898|  6.21k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  865|  6.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.08k, False: 124]
  |  |  ------------------
  ------------------
 7899|  6.08k|        return handler.on_error("Invalid type specifier for integer type");
 7900|  6.08k|    }
 7901|    124|    if (specs.localized) {
  ------------------
  |  Branch (7901:9): [True: 0, False: 124]
  ------------------
 7902|      0|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7903|       |            // clang-format off
 7904|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7905|       |            // clang-format on
 7906|      0|            return;
 7907|      0|        }
 7908|      0|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7909|       |            // clang-format off
 7910|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7911|       |            // clang-format on
 7912|      0|        }
 7913|      0|    }
 7914|    124|}
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  42.9k|{
 2094|  42.9k|    return SCN_FWD(t);
  ------------------
  |  |  936|  42.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  42.9k|}
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7941|  3.10k|{
 7942|  3.10k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7942:9): [True: 3.04k, False: 62]
  ------------------
 7943|  3.10k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7943:10): [True: 0, False: 3.04k]
  ------------------
 7944|  3.04k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7944:10): [True: 3.04k, False: 0]
  ------------------
 7945|  3.04k|        SCN_UNLIKELY_ATTR
 7946|  3.04k|        return handler.on_error("Invalid type specifier for float type");
 7947|  3.04k|    }
 7948|  3.10k|}
_ZNK3scn2v46detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  489|  16.2k|    {
  490|  16.2k|        return m_has_value;
  491|  16.2k|    }
_ZNK3scn2v48expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1739|  8.13k|    {
 1740|  8.13k|        return has_value();
 1741|  8.13k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  455|  8.13k|    {
  456|  8.13k|        return m_value;
  457|  8.13k|    }
_ZNR3scn2v48expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  8.13k|    {
 1769|  8.13k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.13k|        return this->get_value();
 1771|  8.13k|    }
_ZNO3scn2v48expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  8.13k|    {
 1805|  8.13k|        return std::move(value());
 1806|  8.13k|    }
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  1.47M|    {
 1740|  1.47M|        return has_value();
 1741|  1.47M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7953|  9.31k|{
 7954|  9.31k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7954:9): [True: 186, False: 9.13k]
  ------------------
 7955|  9.31k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7955:9): [True: 36, False: 9.09k]
  ------------------
 7956|  9.31k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7956:9): [True: 924, False: 8.17k]
  ------------------
 7957|  9.31k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7957:9): [True: 7.78k, False: 390]
  ------------------
 7958|  9.31k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7958:9): [True: 384, False: 6]
  ------------------
 7959|  9.31k|        return;
 7960|  9.31k|    }
 7961|      6|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7961:9): [True: 6, False: 0]
  ------------------
 7962|      6|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 7963|       |            // clang-format off
 7964|      0|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7965|       |            // clang-format on
 7966|      0|        }
 7967|      6|        return;
 7968|      6|    }
 7969|      0|    SCN_UNLIKELY_ATTR
 7970|      0|    handler.on_error("Invalid type specifier for string");
 7971|      0|}
_ZN3scn2v46detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7987|  3.10k|{
 7988|  3.10k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7988:9): [True: 3.04k, False: 62]
  ------------------
 7989|  3.10k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7989:9): [True: 3.03k, False: 12]
  ------------------
 7990|  3.10k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7990:9): [True: 3.03k, False: 0]
  ------------------
 7991|  3.10k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7991:9): [True: 3.03k, False: 0]
  ------------------
 7992|  3.10k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7992:9): [True: 3.03k, False: 0]
  ------------------
 7993|  3.10k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7993:9): [True: 3.03k, False: 0]
  ------------------
 7994|  3.10k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7994:9): [True: 3.03k, False: 0]
  ------------------
 7995|  3.10k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7995:9): [True: 3.03k, False: 0]
  ------------------
 7996|  3.03k|        SCN_UNLIKELY_ATTR
 7997|  3.03k|        return handler.on_error("Invalid type specifier for boolean");
 7998|  3.03k|    }
 7999|  3.10k|}
_ZN3scn2v46detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7919|  3.10k|{
 7920|  3.10k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7920:9): [True: 3.04k, False: 62]
  ------------------
 7921|  3.10k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7921:9): [True: 0, False: 62]
  ------------------
 7922|  3.04k|        SCN_UNLIKELY_ATTR
 7923|  3.04k|        return handler.on_error("Invalid type specifier for character type");
 7924|  3.04k|    }
 7925|  3.10k|}
_ZN3scn2v46detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7976|  3.10k|{
 7977|  3.10k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7977:9): [True: 3.04k, False: 62]
  ------------------
 7978|  3.10k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7978:9): [True: 3.04k, False: 0]
  ------------------
 7979|  3.04k|        SCN_UNLIKELY_ATTR
 7980|  3.04k|        return handler.on_error("Invalid type specifier for pointer");
 7981|  3.04k|    }
 7982|  3.10k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  58.7M|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  58.7M|    else {
 3981|  58.7M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  58.7M|    }
 3983|  58.7M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|   809k|    {
 3480|   809k|        return m_iterator;
 3481|   809k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|   924k|    {
 3484|   924k|        return m_sentinel;
 3485|   924k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|   149k|    {
 3480|   149k|        return m_iterator;
 3481|   149k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|   117M|    {
 3484|   117M|        return m_sentinel;
 3485|   117M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8783|  22.5k|    constexpr locale_ref() = default;
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  41.3k|        : m_unexpected(std::forward<Err>(e))
  350|  41.3k|    {
  351|  41.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  41.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  41.3k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|  42.9k|        : base(unexpect, std::move(e.error())),
 1616|  42.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  42.9k|    {
 1618|  42.9k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|  42.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  42.9k|          m_has_value(false)
  451|  42.9k|    {
  452|  42.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.0k|    {
 1316|  43.0k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  12.4k|        : base(unexpect, std::move(e.error())),
 1616|  12.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.4k|    {
 1618|  12.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  12.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.4k|          m_has_value(false)
  451|  12.4k|    {
  452|  12.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  15.1k|    {
 1316|  15.1k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  1.95k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.95k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.95k|    {
 1572|  1.95k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.95k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.95k|    {
  442|  1.95k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  15.1k|    {
 1740|  15.1k|        return has_value();
 1741|  15.1k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  30.3k|    {
  490|  30.3k|        return m_has_value;
  491|  30.3k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  12.4k|    {
 1746|  12.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  12.4k|        return this->get_unexpected().error();
 1748|  12.4k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.4k|    {
  473|  12.4k|        return m_unexpected;
  474|  12.4k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  1.16k|    {
 1805|  1.16k|        return std::move(value());
 1806|  1.16k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  2.68k|    {
 1769|  2.68k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.68k|        return this->get_value();
 1771|  2.68k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  2.68k|    {
  456|  2.68k|        return m_value;
  457|  2.68k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  38.9k|        : base(unexpect, std::move(e.error())),
 1616|  38.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  38.9k|    {
 1618|  38.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  39.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  39.0k|          m_has_value(false)
  451|  39.0k|    {
  452|  39.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  40.6k|    {
 1316|  40.6k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  1.58k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.58k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.58k|    {
 1572|  1.58k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.58k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.58k|    {
  442|  1.58k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  40.6k|    {
 1740|  40.6k|        return has_value();
 1741|  40.6k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  81.2k|    {
  490|  81.2k|        return m_has_value;
  491|  81.2k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  38.9k|    {
 1746|  38.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  38.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  38.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  38.9k|        return this->get_unexpected().error();
 1748|  38.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  38.9k|    {
  473|  38.9k|        return m_unexpected;
  474|  38.9k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  1.36k|    {
 1805|  1.36k|        return std::move(value());
 1806|  1.36k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  1.60k|    {
 1769|  1.60k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.60k|        return this->get_value();
 1771|  1.60k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  1.60k|    {
  456|  1.60k|        return m_value;
  457|  1.60k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|    214|    {
 1979|    214|        return detail::transform_error_impl(std::move(*this),
 1980|    214|                                            std::forward<F>(f));
 1981|    214|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|    214|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    214|    else {
 1472|    214|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    214|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    214|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 214, False: 0]
  |  |  ------------------
  ------------------
 1474|    214|                   ? result(*std::forward<Exp>(exp))
 1475|    214|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    214|    }
 1479|    214|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  2.72k|    {
  490|  2.72k|        return m_has_value;
  491|  2.72k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|    246|    {
 1805|    246|        return std::move(value());
 1806|    246|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.31k|    {
 1769|  1.31k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.31k|        return this->get_value();
 1771|  1.31k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  1.31k|    {
  456|  1.31k|        return m_value;
  457|  1.31k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|     16|        : base(unexpect, std::forward<Args>(args)...),
 1626|     16|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|     16|    {
 1628|     16|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8836|     96|    {
 8837|     96|        return m_args;
 8838|     96|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8841|  7.94k|    {
 8842|  7.94k|        return m_locale;
 8843|  7.94k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8847|  14.3k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  14.3k|    static_cast<    \
  |  |  935|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  14.3k|    static_cast<    \
  |  |  935|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|  14.3k|    {
 8849|  14.3k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|    360|    {
 3000|    360|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|    360|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|    360|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|    360|    {
 2981|    360|        return t.data();
 2982|    360|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8836|    144|    {
 8837|    144|        return m_args;
 8838|    144|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8841|  20.2k|    {
 8842|  20.2k|        return m_locale;
 8843|  20.2k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8847|  28.6k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  28.6k|    static_cast<    \
  |  |  935|  28.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  28.6k|    static_cast<    \
  |  |  935|  28.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|  28.6k|    {
 8849|  28.6k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|  84.8k|        : base(unexpect, std::move(e.error())),
 1616|  84.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  84.8k|    {
 1618|  84.8k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|  84.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|  84.8k|          m_has_value(false)
  550|  84.8k|    {
  551|  84.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  84.8k|    {
 1316|  84.8k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|   127k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|   127k|        : m_deferred_init(), m_has_value(true)
  529|   127k|    {
  530|   127k|    }
_ZNK3scn2v46detail9fill_type13get_code_unitIcEET_v:
 6938|    678|    {
 6939|    678|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  930|    678|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    678|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6940|    678|        CharT r{};
 6941|    678|        std::memcpy(&r, m_data, m_size);
 6942|    678|        return r;
 6943|    678|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|    776|    {
  365|    776|        return m_unexpected;
  366|    776|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|     88|        : m_unexpected(std::forward<Args>(args)...)
  359|     88|    {
  360|     88|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|     88|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|     88|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  1.24k|        : m_unexpected(std::forward<Err>(e))
  350|  1.24k|    {
  351|  1.24k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.24k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.24k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  1.24k|    {
  365|  1.24k|        return m_unexpected;
  366|  1.24k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  1.24k|        : m_unexpected(std::forward<Args>(args)...)
  359|  1.24k|    {
  360|  1.24k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.24k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  1.24k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|     88|        : m_unexpected(std::forward<Err>(e))
  350|     88|    {
  351|     88|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|     88|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|     88|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1349|    120|{
 1350|    120|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|    120|}
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  33.6k|{
  316|  33.6k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  33.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  33.6k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  17.5k|    {
 3496|  17.5k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  17.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.41k|    {
 1316|  1.41k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  1.41k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.41k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.41k|    {
 1572|  1.41k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.41k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.41k|    {
  442|  1.41k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|  1.16k|    {
 1740|  1.16k|        return has_value();
 1741|  1.16k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  1.07k|    {
 1795|  1.07k|        return value();
 1796|  1.07k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1569|     34|        : base(std::in_place, std::forward<U>(val)),
 1570|     34|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     34|    {
 1572|     34|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|     34|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     34|    {
  442|     34|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     34|    {
 1316|     34|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1739|     12|    {
 1740|     12|        return has_value();
 1741|     12|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  489|     56|    {
  490|     56|        return m_has_value;
  491|     56|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|     22|    {
 1769|     22|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     22|        return this->get_value();
 1771|     22|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  455|     22|    {
  456|     22|        return m_value;
  457|     22|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     78|    {
 1316|     78|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|     78|        : base(std::in_place, std::forward<U>(val)),
 1570|     78|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     78|    {
 1572|     78|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  440|     78|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     78|    {
  442|     78|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|     10|    {
 1979|     10|        return detail::transform_error_impl(std::move(*this),
 1980|     10|                                            std::forward<F>(f));
 1981|     10|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|     10|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     10|    else {
 1472|     10|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     10|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 1474|     10|                   ? result(*std::forward<Exp>(exp))
 1475|     10|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     10|    }
 1479|     10|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|     22|    {
 1805|     22|        return std::move(value());
 1806|     22|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1569|     18|        : base(std::in_place, std::forward<U>(val)),
 1570|     18|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     18|    {
 1572|     18|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|     18|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     18|    {
  442|     18|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    166|    {
 1316|    166|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|     10|        : base(unexpect, std::forward<Args>(args)...),
 1626|     10|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|     10|    {
 1628|     10|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    106|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    106|          m_has_value(false)
  451|    106|    {
  452|    106|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|     36|    {
 2869|     36|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|     36|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|     36|    {
 2850|     36|        return decay_copy(t.begin());
 2851|     36|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 2093|     74|{
 2094|     74|    return SCN_FWD(t);
  ------------------
  |  |  936|     74|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|     74|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3479|     36|    {
 3480|     36|        return m_iterator;
 3481|     36|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|     36|    {
 2926|     36|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|     36|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|     36|    {
 2908|     36|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|     36|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3483|     36|    {
 3484|     36|        return m_sentinel;
 3485|     36|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3464|     36|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|     36|    static_cast<    \
  |  |  935|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|     36|    static_cast<    \
  |  |  935|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|     36|    {
 3466|     36|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1739|     78|    {
 1740|     78|        return has_value();
 1741|     78|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  489|    156|    {
  490|    156|        return m_has_value;
  491|    156|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|     78|    {
 1805|     78|        return std::move(value());
 1806|     78|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|     78|    {
 1769|     78|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     78|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     78|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     78|        return this->get_value();
 1771|     78|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  455|     78|    {
  456|     78|        return m_value;
  457|     78|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.38k|    {
 1316|  3.38k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  3.38k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.38k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.38k|    {
 1572|  3.38k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  3.38k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.38k|    {
  442|  3.38k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|  3.38k|    {
 1740|  3.38k|        return has_value();
 1741|  3.38k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  6.76k|    {
  490|  6.76k|        return m_has_value;
  491|  6.76k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  3.38k|    {
 1805|  3.38k|        return std::move(value());
 1806|  3.38k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  3.38k|    {
 1769|  3.38k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.38k|        return this->get_value();
 1771|  3.38k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.38k|    {
  456|  3.38k|        return m_value;
  457|  3.38k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|     96|        : base(unexpect, std::move(e.error())),
 1616|     96|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     96|    {
 1618|     96|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|      2|        : base(unexpect, std::move(e.error())),
 1616|      2|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|      2|    {
 1618|      2|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|      2|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|      2|          m_has_value(false)
  451|      2|    {
  452|      2|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     46|    {
 1316|     46|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|     32|        : base(unexpect, std::move(e.error())),
 1616|     32|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     32|    {
 1618|     32|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|     32|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     32|          m_has_value(false)
  451|     32|    {
  452|     32|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1739|     42|    {
 1740|     42|        return has_value();
 1741|     42|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  489|     84|    {
  490|     84|        return m_has_value;
  491|     84|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1745|     14|    {
 1746|     14|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     14|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     14|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     14|        return this->get_unexpected().error();
 1748|     14|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  472|     20|    {
  473|     20|        return m_unexpected;
  474|     20|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1569|      8|        : base(std::in_place, std::forward<U>(val)),
 1570|      8|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|      8|    {
 1572|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|      8|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|      8|    {
  442|      8|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|      8|    {
 1316|      8|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|     12|    {
 1769|     12|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     12|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     12|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     12|        return this->get_value();
 1771|     12|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  455|     12|    {
  456|     12|        return m_value;
  457|     12|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1739|      6|    {
 1740|      6|        return has_value();
 1741|      6|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  489|     16|    {
  490|     16|        return m_has_value;
  491|     16|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|      6|    {
 1316|      6|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|      8|    {
 1805|      8|        return std::move(value());
 1806|      8|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|      8|    {
 1769|      8|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|      8|        return this->get_value();
 1771|      8|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  455|      8|    {
  456|      8|        return m_value;
  457|      8|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3483|  13.8k|    {
 3484|  13.8k|        return m_sentinel;
 3485|  13.8k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|     12|    {
 1979|     12|        return detail::transform_error_impl(std::move(*this),
 1980|     12|                                            std::forward<F>(f));
 1981|     12|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|     12|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     12|    else {
 1472|     12|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     12|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     12|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 1474|     12|                   ? result(*std::forward<Exp>(exp))
 1475|     12|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     12|    }
 1479|     12|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1569|     12|        : base(std::in_place, std::forward<U>(val)),
 1570|     12|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     12|    {
 1572|     12|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|     12|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     12|    {
  442|     12|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|     12|    {
 1805|     12|        return std::move(value());
 1806|     12|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3479|  26.5k|    {
 3480|  26.5k|        return m_iterator;
 3481|  26.5k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1569|      6|        : base(std::in_place, std::forward<U>(val)),
 1570|      6|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|      6|    {
 1572|      6|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|      6|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|      6|    {
  442|      6|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|      6|    {
 1979|      6|        return detail::transform_error_impl(std::move(*this),
 1980|      6|                                            std::forward<F>(f));
 1981|      6|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1461|      6|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|      6|    else {
 1472|      6|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|      6|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 1474|      6|                   ? result(*std::forward<Exp>(exp))
 1475|      6|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|      6|    }
 1479|      6|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  489|     12|    {
  490|     12|        return m_has_value;
  491|     12|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|      6|    {
 1805|      6|        return std::move(value());
 1806|      6|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|      6|    {
 1769|      6|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|      6|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      6|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|      6|        return this->get_value();
 1771|      6|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  455|      6|    {
  456|      6|        return m_value;
  457|      6|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1569|      6|        : base(std::in_place, std::forward<U>(val)),
 1570|      6|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|      6|    {
 1572|      6|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|      6|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|      6|    {
  442|      6|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|      6|    {
 1316|      6|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1739|      6|    {
 1740|      6|        return has_value();
 1741|      6|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  489|     12|    {
  490|     12|        return m_has_value;
  491|     12|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|      6|    {
 1805|      6|        return std::move(value());
 1806|      6|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|      6|    {
 1769|      6|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|      6|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      6|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|      6|        return this->get_value();
 1771|      6|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  455|      6|    {
  456|      6|        return m_value;
  457|      6|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|      6|    {
 1979|      6|        return detail::transform_error_impl(std::move(*this),
 1980|      6|                                            std::forward<F>(f));
 1981|      6|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|      6|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|      6|    else {
 1472|      6|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|      6|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 1474|      6|                   ? result(*std::forward<Exp>(exp))
 1475|      6|                   : result(unexpect,
 1476|      6|                            trivial_invoke(std::forward<F>(f),
 1477|      6|                                           std::forward<Exp>(exp).error()));
 1478|      6|    }
 1479|      6|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1755|      6|    {
 1756|      6|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|      6|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      6|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|      6|        return std::move(this->get_unexpected().error());
 1758|      6|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3910|     10|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|     10|    static_cast<    \
  |  |  935|     10|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|     10|    {
 3912|     10|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3464|  10.2k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  10.2k|    static_cast<    \
  |  |  935|  10.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  10.2k|    static_cast<    \
  |  |  935|  10.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  10.2k|    {
 3466|  10.2k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1739|    168|    {
 1740|    168|        return has_value();
 1741|    168|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  489|    332|    {
  490|    332|        return m_has_value;
  491|    332|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1745|    104|    {
 1746|    104|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    104|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    104|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    104|        return this->get_unexpected().error();
 1748|    104|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    104|    {
  473|    104|        return m_unexpected;
  474|    104|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|     18|    {
 1805|     18|        return std::move(value());
 1806|     18|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|     60|    {
 1769|     60|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     60|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     60|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     60|        return this->get_value();
 1771|     60|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  455|     60|    {
  456|     60|        return m_value;
  457|     60|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|     16|        : base(unexpect, std::move(e.error())),
 1616|     16|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     16|    {
 1618|     16|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|     16|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     16|          m_has_value(false)
  451|     16|    {
  452|     16|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    240|    {
 1316|    240|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|    192|        : base(unexpect, std::move(e.error())),
 1616|    192|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    192|    {
 1618|    192|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|    192|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    192|          m_has_value(false)
  451|    192|    {
  452|    192|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|    256|    {
 1740|    256|        return has_value();
 1741|    256|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|    400|    {
  490|    400|        return m_has_value;
  491|    400|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|     96|    {
 1746|     96|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     96|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     96|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     96|        return this->get_unexpected().error();
 1748|     96|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|     96|    {
  473|     96|        return m_unexpected;
  474|     96|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|     64|        : base(std::in_place, std::forward<U>(val)),
 1570|     64|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     64|    {
 1572|     64|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|     64|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     64|    {
  442|     64|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     64|    {
 1316|     64|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|     32|    {
 1769|     32|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     32|        return this->get_value();
 1771|     32|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|     32|    {
  456|     32|        return m_value;
  457|     32|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|     48|    {
 1740|     48|        return has_value();
 1741|     48|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|    128|    {
  490|    128|        return m_has_value;
  491|    128|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     48|    {
 1316|     48|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|     64|    {
 1805|     64|        return std::move(value());
 1806|     64|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|     64|    {
 1769|     64|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     64|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     64|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     64|        return this->get_value();
 1771|     64|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|     64|    {
  456|     64|        return m_value;
  457|     64|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|  31.0k|    {
 3375|  31.0k|        return detail::to_address(ranges::begin(derived()));
 3376|  31.0k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  31.0k|    {
 2869|  31.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  31.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  31.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  31.0k|    {
 2850|  31.0k|        return decay_copy(t.begin());
 2851|  31.0k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|  31.0k|    {
 3334|  31.0k|        return static_cast<D&>(*this);
 3335|  31.0k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|     32|        : base(std::in_place, std::forward<U>(val)),
 1570|     32|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     32|    {
 1572|     32|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|     32|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     32|    {
  442|     32|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|     48|        : base(std::in_place, std::forward<U>(val)),
 1570|     48|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     48|    {
 1572|     48|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|     48|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     48|    {
  442|     48|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|     48|    {
 1979|     48|        return detail::transform_error_impl(std::move(*this),
 1980|     48|                                            std::forward<F>(f));
 1981|     48|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|     48|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     48|    else {
 1472|     48|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     48|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     48|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 48, False: 0]
  |  |  ------------------
  ------------------
 1474|     48|                   ? result(*std::forward<Exp>(exp))
 1475|     48|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     48|    }
 1479|     48|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  489|     96|    {
  490|     96|        return m_has_value;
  491|     96|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|     48|    {
 1805|     48|        return std::move(value());
 1806|     48|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|     48|    {
 1769|     48|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     48|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     48|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     48|        return this->get_value();
 1771|     48|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  455|     48|    {
  456|     48|        return m_value;
  457|     48|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|     48|        : base(std::in_place, std::forward<U>(val)),
 1570|     48|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     48|    {
 1572|     48|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|     48|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     48|    {
  442|     48|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     48|    {
 1316|     48|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1739|     48|    {
 1740|     48|        return has_value();
 1741|     48|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  489|     96|    {
  490|     96|        return m_has_value;
  491|     96|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|     48|    {
 1805|     48|        return std::move(value());
 1806|     48|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|     48|    {
 1769|     48|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     48|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     48|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     48|        return this->get_value();
 1771|     48|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  455|     48|    {
  456|     48|        return m_value;
  457|     48|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  30.4k|    {
 3000|  30.4k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  30.4k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  30.4k|    {
 2981|  30.4k|        return t.data();
 2982|  30.4k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|    174|        : base(std::in_place, std::forward<U>(val)),
 1570|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    174|    {
 1572|    174|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|    174|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    174|    {
  442|    174|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1349|    128|{
 1350|    128|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|    128|}
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1978|      2|    {
 1979|      2|        return detail::transform_error_impl(std::move(*this),
 1980|      2|                                            std::forward<F>(f));
 1981|      2|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1461|      2|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|      2|    else {
 1472|      2|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|      2|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|      2|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 1474|      2|                   ? result(*std::forward<Exp>(exp))
 1475|      2|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|      2|    }
 1479|      2|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1569|      2|        : base(std::in_place, std::forward<U>(val)),
 1570|      2|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|      2|    {
 1572|      2|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|      2|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|      2|    {
  442|      2|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|      2|    {
 1316|      2|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|      2|    {
 1740|      2|        return has_value();
 1741|      2|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|      4|    {
  490|      4|        return m_has_value;
  491|      4|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|      2|    {
 1805|      2|        return std::move(value());
 1806|      2|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|      2|    {
 1769|      2|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|      2|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      2|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|      2|        return this->get_value();
 1771|      2|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|      2|    {
  456|      2|        return m_value;
  457|      2|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1964|      4|    {
 1965|      4|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|      4|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSI_OT0_:
 1461|      4|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|      4|    else {
 1472|      4|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|      4|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|      4|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 4]
  |  |  ------------------
  ------------------
 1474|      4|                   ? result(*std::forward<Exp>(exp))
 1475|      4|                   : result(unexpect,
 1476|      4|                            trivial_invoke(std::forward<F>(f),
 1477|      4|                                           std::forward<Exp>(exp).error()));
 1478|      4|    }
 1479|      4|}
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1794|     42|    {
 1795|     42|        return value();
 1796|     42|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|      2|    {
 2869|      2|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|      2|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|      2|    {
 2850|      2|        return decay_copy(t.begin());
 2851|      2|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|     16|    {
 1979|     16|        return detail::transform_error_impl(std::move(*this),
 1980|     16|                                            std::forward<F>(f));
 1981|     16|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|     16|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     16|    else {
 1472|     16|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     16|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 1474|     16|                   ? result(*std::forward<Exp>(exp))
 1475|     16|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     16|    }
 1479|     16|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|     16|        : base(std::in_place, std::forward<U>(val)),
 1570|     16|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     16|    {
 1572|     16|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|     16|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     16|    {
  442|     16|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     16|    {
 1316|     16|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|     16|    {
 1740|     16|        return has_value();
 1741|     16|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|     32|    {
  490|     32|        return m_has_value;
  491|     32|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|     16|    {
 1805|     16|        return std::move(value());
 1806|     16|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|     16|    {
 1769|     16|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     16|        return this->get_value();
 1771|     16|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|     16|    {
  456|     16|        return m_value;
  457|     16|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1964|     16|    {
 1965|     16|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|     16|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|     16|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     16|    else {
 1472|     16|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     16|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 1474|     16|                   ? result(*std::forward<Exp>(exp))
 1475|     16|                   : result(unexpect,
 1476|     16|                            trivial_invoke(std::forward<F>(f),
 1477|     16|                                           std::forward<Exp>(exp).error()));
 1478|     16|    }
 1479|     16|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|     16|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|     16|    static_cast<    \
  |  |  935|     16|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|     16|    {
 3912|     16|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  1.51k|    {
 1795|  1.51k|        return value();
 1796|  1.51k|    }
_ZN3scn2v46detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7444|    864|{
 7445|    864|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|    864|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    864|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|    864|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|    864|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    864|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|    864|    auto start = begin;
 7449|    864|    ++begin;
 7450|       |
 7451|    864|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    864|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 864]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|    864|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 36, False: 828]
  ------------------
 7458|     36|        handler.on_charset_inverted();
 7459|     36|        ++begin;
 7460|     36|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|     36|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 0, False: 36]
  ------------------
 7467|      0|            handler.on_charset_single(char32_t{']'});
 7468|      0|            ++begin;
 7469|      0|        }
 7470|     36|    }
 7471|    828|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 828]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|   325k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 325k, False: 0]
  ------------------
 7476|   325k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 325k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|   325k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 864, False: 324k]
  ------------------
 7481|    864|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|    864|        }
 7483|       |
 7484|   324k|        parse_presentation_set_literal(begin, end, handler);
 7485|   324k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|    864|}
_ZN3scn2v46detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7408|   324k|{
 7409|   324k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|   324k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|   324k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 324k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|   324k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 324k, False: 0]
  |  Branch (7416:25): [True: 846, False: 323k]
  |  Branch (7416:49): [True: 846, False: 0]
  ------------------
 7417|   324k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 786, False: 60]
  ------------------
 7418|    786|        ++begin;
 7419|       |
 7420|    786|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|    786|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|    786|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 786]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|    786|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|    786|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 786]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|    786|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|    786|        return;
 7434|    786|    }
 7435|       |
 7436|   323k|    handler.on_charset_single(cp_first);
 7437|   323k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7384|   325k|{
 7385|   325k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   325k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   325k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|   325k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|   325k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|   650k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 325k]
  |  |  |  Branch (865:45): [True: 0, False: 325k]
  |  |  |  Branch (865:45): [True: 0, False: 325k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|   325k|    const auto cp =
 7394|   325k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|   325k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 325k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|   325k|    begin += len;
 7401|   325k|    return cp;
 7402|   325k|}
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.13k|    {
 1316|  8.13k|    }
_ZN3scn2v48expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1569|  8.13k|        : base(std::in_place, std::forward<U>(val)),
 1570|  8.13k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  8.13k|    {
 1572|  8.13k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  440|  8.13k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  8.13k|    {
  442|  8.13k|    }
_ZNK3scn2v46detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7003|  2.59k|    {
 7004|  2.59k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7005|  2.59k|                charset_string_size};
 7006|  2.59k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1569|     42|        : base(std::in_place, std::forward<U>(val)),
 1570|     42|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     42|    {
 1572|     42|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  440|     42|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     42|    {
  442|     42|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|    750|        : base(std::in_place, std::forward<U>(val)),
 1570|    750|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    750|    {
 1572|    750|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|    750|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    750|    {
  442|    750|    }
_ZN3scn2v46detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4293|  86.2k|{
 4294|  86.2k|    if constexpr (sizeof(CharT) == 1) {
 4295|  86.2k|        return decode_utf8_code_point_exhaustive_valid(input);
 4296|       |    }
 4297|       |    else if constexpr (sizeof(CharT) == 2) {
 4298|       |        return decode_utf16_code_point_exhaustive_valid(input);
 4299|       |    }
 4300|       |    else {
 4301|       |        SCN_EXPECT(input.size() == 1);
 4302|       |        return static_cast<char32_t>(input.front());
 4303|       |    }
 4304|  86.2k|}
_ZZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4171|  12.0k|    const auto is_trailing_code_unit = [](char ch) {
 4172|  12.0k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4173|  12.0k|    };
_ZNK3scn2v46detail9fill_type13get_code_unitIwEET_v:
 6938|  4.83k|    {
 6939|  4.83k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  930|  4.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6940|  4.83k|        CharT r{};
 6941|  4.83k|        std::memcpy(&r, m_data, m_size);
 6942|  4.83k|        return r;
 6943|  4.83k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|  58.7M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|  58.7M|    else {
 4075|       |        // utf-32
 4076|  58.7M|        static_assert(sizeof(U) == 4);
 4077|  58.7M|        SCN_UNUSED(ch);
  ------------------
  |  |  915|  58.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|  58.7M|        return 1;
 4079|  58.7M|    }
 4080|  58.7M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  58.7M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|  58.7M|    else {
 4281|  58.7M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|  58.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|  58.7M|        auto cp = static_cast<char32_t>(input.front());
 4283|  58.7M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  58.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.8k, False: 58.7M]
  |  |  ------------------
  ------------------
 4284|  14.8k|            return invalid_code_point;
 4285|  14.8k|        }
 4286|  58.7M|        return cp;
 4287|  58.7M|    }
 4288|  58.7M|}
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  15.0k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  15.0k|    else {
 3966|  15.0k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  15.0k|                                       to_address(first), to_address(last)))};
 3968|  15.0k|    }
 3969|  15.0k|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  45.8k|{
  316|  45.8k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  45.8k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   106k|{
  294|   106k|    return p;
  295|   106k|}
_ZN3scn2v46detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  1.38k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  1.38k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  1.38k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  1.38k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  1.38k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  1.38k|}
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  60.5k|{
  316|  60.5k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  60.5k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  30.7k|    {
 3496|  30.7k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  30.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    844|    {
 1316|    844|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|    844|        : base(std::in_place, std::forward<U>(val)),
 1570|    844|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    844|    {
 1572|    844|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|    844|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    844|    {
  442|    844|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|    192|    {
 1740|    192|        return has_value();
 1741|    192|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  1.49k|    {
  490|  1.49k|        return m_has_value;
  491|  1.49k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|    652|    {
 1769|    652|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    652|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    652|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    652|        return this->get_value();
 1771|    652|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|    652|    {
  456|    652|        return m_value;
  457|    652|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1569|    540|        : base(std::in_place, std::forward<U>(val)),
 1570|    540|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    540|    {
 1572|    540|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|    540|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    540|    {
  442|    540|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    540|    {
 1316|    540|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1739|    228|    {
 1740|    228|        return has_value();
 1741|    228|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  489|    852|    {
  490|    852|        return m_has_value;
  491|    852|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    312|    {
 1769|    312|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    312|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    312|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    312|        return this->get_value();
 1771|    312|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  455|    312|    {
  456|    312|        return m_value;
  457|    312|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    376|    {
 1316|    376|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|    376|        : base(std::in_place, std::forward<U>(val)),
 1570|    376|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    376|    {
 1572|    376|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  440|    376|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    376|    {
  442|    376|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|     76|    {
 1979|     76|        return detail::transform_error_impl(std::move(*this),
 1980|     76|                                            std::forward<F>(f));
 1981|     76|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|     76|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     76|    else {
 1472|     76|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     76|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     76|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 76, False: 0]
  |  |  ------------------
  ------------------
 1474|     76|                   ? result(*std::forward<Exp>(exp))
 1475|     76|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     76|    }
 1479|     76|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    312|    {
 1805|    312|        return std::move(value());
 1806|    312|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1569|    120|        : base(std::in_place, std::forward<U>(val)),
 1570|    120|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    120|    {
 1572|    120|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|    120|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    120|    {
  442|    120|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    810|    {
 1316|    810|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|    190|        : base(unexpect, std::forward<Args>(args)...),
 1626|    190|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    190|    {
 1628|    190|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    690|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    690|          m_has_value(false)
  451|    690|    {
  452|    690|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|     88|    {
 2869|     88|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|     88|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|     88|    {
 2850|     88|        return decay_copy(t.begin());
 2851|     88|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 2093|    214|{
 2094|    214|    return SCN_FWD(t);
  ------------------
  |  |  936|    214|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|    214|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3479|     88|    {
 3480|     88|        return m_iterator;
 3481|     88|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|     88|    {
 2926|     88|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|     88|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|     88|    {
 2908|     88|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|     88|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3483|     88|    {
 3484|     88|        return m_sentinel;
 3485|     88|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3464|     88|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|     88|    static_cast<    \
  |  |  935|     88|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|     88|    static_cast<    \
  |  |  935|     88|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|     88|    {
 3466|     88|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1739|    376|    {
 1740|    376|        return has_value();
 1741|    376|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  489|    752|    {
  490|    752|        return m_has_value;
  491|    752|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    376|    {
 1805|    376|        return std::move(value());
 1806|    376|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    376|    {
 1769|    376|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    376|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    376|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    376|        return this->get_value();
 1771|    376|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  455|    376|    {
  456|    376|        return m_value;
  457|    376|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.92k|    {
 1316|  6.92k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  6.92k|        : base(std::in_place, std::forward<U>(val)),
 1570|  6.92k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  6.92k|    {
 1572|  6.92k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  6.92k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  6.92k|    {
  442|  6.92k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|    444|    {
 1979|    444|        return detail::transform_error_impl(std::move(*this),
 1980|    444|                                            std::forward<F>(f));
 1981|    444|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|    444|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    444|    else {
 1472|    444|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    444|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    444|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 444, False: 0]
  |  |  ------------------
  ------------------
 1474|    444|                   ? result(*std::forward<Exp>(exp))
 1475|    444|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    444|    }
 1479|    444|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|    652|    {
 1805|    652|        return std::move(value());
 1806|    652|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|     32|        : base(unexpect, std::forward<Args>(args)...),
 1626|     32|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|     32|    {
 1628|     32|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|  6.92k|    {
 1740|  6.92k|        return has_value();
 1741|  6.92k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  13.8k|    {
  490|  13.8k|        return m_has_value;
  491|  13.8k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  6.92k|    {
 1805|  6.92k|        return std::move(value());
 1806|  6.92k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  6.92k|    {
 1769|  6.92k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.92k|        return this->get_value();
 1771|  6.92k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.92k|    {
  456|  6.92k|        return m_value;
  457|  6.92k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    500|        : base(unexpect, std::move(e.error())),
 1616|    500|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    500|    {
 1618|    500|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|     38|        : base(unexpect, std::move(e.error())),
 1616|     38|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     38|    {
 1618|     38|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|     38|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     38|          m_has_value(false)
  451|     38|    {
  452|     38|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    890|    {
 1316|    890|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|    616|        : base(unexpect, std::move(e.error())),
 1616|    616|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    616|    {
 1618|    616|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|    616|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    616|          m_has_value(false)
  451|    616|    {
  452|    616|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1739|    814|    {
 1740|    814|        return has_value();
 1741|    814|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  489|  1.62k|    {
  490|  1.62k|        return m_has_value;
  491|  1.62k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1745|    266|    {
 1746|    266|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    266|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    266|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    266|        return this->get_unexpected().error();
 1748|    266|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  472|    380|    {
  473|    380|        return m_unexpected;
  474|    380|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1569|    152|        : base(std::in_place, std::forward<U>(val)),
 1570|    152|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    152|    {
 1572|    152|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|    152|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    152|    {
  442|    152|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    152|    {
 1316|    152|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    236|    {
 1769|    236|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    236|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    236|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    236|        return this->get_value();
 1771|    236|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  455|    236|    {
  456|    236|        return m_value;
  457|    236|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1739|    114|    {
 1740|    114|        return has_value();
 1741|    114|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  489|    304|    {
  490|    304|        return m_has_value;
  491|    304|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    114|    {
 1316|    114|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|    152|    {
 1805|    152|        return std::move(value());
 1806|    152|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|    152|    {
 1769|    152|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    152|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    152|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    152|        return this->get_value();
 1771|    152|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  455|    152|    {
  456|    152|        return m_value;
  457|    152|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3483|  18.6k|    {
 3484|  18.6k|        return m_sentinel;
 3485|  18.6k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    236|    {
 1979|    236|        return detail::transform_error_impl(std::move(*this),
 1980|    236|                                            std::forward<F>(f));
 1981|    236|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|    236|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    236|    else {
 1472|    236|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    236|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    236|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 236, False: 0]
  |  |  ------------------
  ------------------
 1474|    236|                   ? result(*std::forward<Exp>(exp))
 1475|    236|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    236|    }
 1479|    236|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1569|    236|        : base(std::in_place, std::forward<U>(val)),
 1570|    236|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    236|    {
 1572|    236|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|    236|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    236|    {
  442|    236|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    236|    {
 1805|    236|        return std::move(value());
 1806|    236|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3479|  18.9k|    {
 3480|  18.9k|        return m_iterator;
 3481|  18.9k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1569|    114|        : base(std::in_place, std::forward<U>(val)),
 1570|    114|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    114|    {
 1572|    114|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|    114|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    114|    {
  442|    114|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|    114|    {
 1979|    114|        return detail::transform_error_impl(std::move(*this),
 1980|    114|                                            std::forward<F>(f));
 1981|    114|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1461|    114|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    114|    else {
 1472|    114|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    114|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    114|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 114, False: 0]
  |  |  ------------------
  ------------------
 1474|    114|                   ? result(*std::forward<Exp>(exp))
 1475|    114|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    114|    }
 1479|    114|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  489|    228|    {
  490|    228|        return m_has_value;
  491|    228|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    114|    {
 1805|    114|        return std::move(value());
 1806|    114|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    114|    {
 1769|    114|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    114|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    114|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    114|        return this->get_value();
 1771|    114|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  455|    114|    {
  456|    114|        return m_value;
  457|    114|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1569|    114|        : base(std::in_place, std::forward<U>(val)),
 1570|    114|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    114|    {
 1572|    114|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|    114|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    114|    {
  442|    114|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    114|    {
 1316|    114|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1739|    114|    {
 1740|    114|        return has_value();
 1741|    114|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    228|    {
  490|    228|        return m_has_value;
  491|    228|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    114|    {
 1805|    114|        return std::move(value());
 1806|    114|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    114|    {
 1769|    114|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    114|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    114|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    114|        return this->get_value();
 1771|    114|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    114|    {
  456|    114|        return m_value;
  457|    114|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|    114|    {
 1979|    114|        return detail::transform_error_impl(std::move(*this),
 1980|    114|                                            std::forward<F>(f));
 1981|    114|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSJ_OT0_:
 1461|    114|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    114|    else {
 1472|    114|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    114|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    114|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 114]
  |  |  ------------------
  ------------------
 1474|    114|                   ? result(*std::forward<Exp>(exp))
 1475|    114|                   : result(unexpect,
 1476|    114|                            trivial_invoke(std::forward<F>(f),
 1477|    114|                                           std::forward<Exp>(exp).error()));
 1478|    114|    }
 1479|    114|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1755|    114|    {
 1756|    114|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    114|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    114|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    114|        return std::move(this->get_unexpected().error());
 1758|    114|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3910|    190|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|    190|    static_cast<    \
  |  |  935|    190|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|    190|    {
 3912|    190|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3464|  6.43k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  6.43k|    static_cast<    \
  |  |  935|  6.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  6.43k|    static_cast<    \
  |  |  935|  6.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  6.43k|    {
 3466|  6.43k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1739|    848|    {
 1740|    848|        return has_value();
 1741|    848|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.62k|    {
  490|  1.62k|        return m_has_value;
  491|  1.62k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1745|    652|    {
 1746|    652|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    652|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    652|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    652|        return this->get_unexpected().error();
 1748|    652|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    652|    {
  473|    652|        return m_unexpected;
  474|    652|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    120|    {
 1805|    120|        return std::move(value());
 1806|    120|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    120|    {
 1769|    120|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    120|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    120|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    120|        return this->get_value();
 1771|    120|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  455|    120|    {
  456|    120|        return m_value;
  457|    120|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|     32|        : base(unexpect, std::move(e.error())),
 1616|     32|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     32|    {
 1618|     32|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|     32|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     32|          m_has_value(false)
  451|     32|    {
  452|     32|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    640|    {
 1316|    640|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|    400|        : base(unexpect, std::move(e.error())),
 1616|    400|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    400|    {
 1618|    400|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|    400|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    400|          m_has_value(false)
  451|    400|    {
  452|    400|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|    672|    {
 1740|    672|        return has_value();
 1741|    672|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  1.10k|    {
  490|  1.10k|        return m_has_value;
  491|  1.10k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|    192|    {
 1746|    192|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    192|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    192|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    192|        return this->get_unexpected().error();
 1748|    192|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|    192|    {
  473|    192|        return m_unexpected;
  474|    192|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|    128|        : base(std::in_place, std::forward<U>(val)),
 1570|    128|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    128|    {
 1572|    128|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|    128|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    128|    {
  442|    128|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    128|    {
 1316|    128|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|    208|    {
 1769|    208|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    208|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    208|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    208|        return this->get_value();
 1771|    208|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|    208|    {
  456|    208|        return m_value;
  457|    208|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|     96|    {
 1740|     96|        return has_value();
 1741|     96|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|    256|    {
  490|    256|        return m_has_value;
  491|    256|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     96|    {
 1316|     96|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    128|    {
 1805|    128|        return std::move(value());
 1806|    128|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    128|    {
 1769|    128|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    128|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    128|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    128|        return this->get_value();
 1771|    128|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|    128|    {
  456|    128|        return m_value;
  457|    128|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|    208|    {
 1979|    208|        return detail::transform_error_impl(std::move(*this),
 1980|    208|                                            std::forward<F>(f));
 1981|    208|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|    208|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    208|    else {
 1472|    208|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    208|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    208|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 208, False: 0]
  |  |  ------------------
  ------------------
 1474|    208|                   ? result(*std::forward<Exp>(exp))
 1475|    208|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    208|    }
 1479|    208|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|    208|        : base(std::in_place, std::forward<U>(val)),
 1570|    208|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    208|    {
 1572|    208|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|    208|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    208|    {
  442|    208|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|    208|    {
 1805|    208|        return std::move(value());
 1806|    208|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|     96|        : base(std::in_place, std::forward<U>(val)),
 1570|     96|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     96|    {
 1572|     96|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|     96|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     96|    {
  442|     96|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|     96|    {
 1979|     96|        return detail::transform_error_impl(std::move(*this),
 1980|     96|                                            std::forward<F>(f));
 1981|     96|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|     96|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     96|    else {
 1472|     96|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     96|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     96|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 96, False: 0]
  |  |  ------------------
  ------------------
 1474|     96|                   ? result(*std::forward<Exp>(exp))
 1475|     96|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     96|    }
 1479|     96|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  489|    192|    {
  490|    192|        return m_has_value;
  491|    192|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|     96|    {
 1805|     96|        return std::move(value());
 1806|     96|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|     96|    {
 1769|     96|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     96|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     96|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     96|        return this->get_value();
 1771|     96|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  455|     96|    {
  456|     96|        return m_value;
  457|     96|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|     96|        : base(std::in_place, std::forward<U>(val)),
 1570|     96|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     96|    {
 1572|     96|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|     96|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     96|    {
  442|     96|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     96|    {
 1316|     96|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1739|     96|    {
 1740|     96|        return has_value();
 1741|     96|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  489|    192|    {
  490|    192|        return m_has_value;
  491|    192|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|     96|    {
 1805|     96|        return std::move(value());
 1806|     96|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|     96|    {
 1769|     96|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     96|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     96|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     96|        return this->get_value();
 1771|     96|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  455|     96|    {
  456|     96|        return m_value;
  457|     96|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  58.3k|    {
 3000|  58.3k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  58.3k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  58.3k|    {
 2981|  58.3k|        return t.data();
 2982|  58.3k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|  60.3k|    {
 3375|  60.3k|        return detail::to_address(ranges::begin(derived()));
 3376|  60.3k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  60.3k|    {
 2869|  60.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  60.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  60.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  60.3k|    {
 2850|  60.3k|        return decay_copy(t.begin());
 2851|  60.3k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|  60.3k|    {
 3334|  60.3k|        return static_cast<D&>(*this);
 3335|  60.3k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1978|     38|    {
 1979|     38|        return detail::transform_error_impl(std::move(*this),
 1980|     38|                                            std::forward<F>(f));
 1981|     38|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1461|     38|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     38|    else {
 1472|     38|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     38|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     38|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 1474|     38|                   ? result(*std::forward<Exp>(exp))
 1475|     38|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     38|    }
 1479|     38|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1569|     38|        : base(std::in_place, std::forward<U>(val)),
 1570|     38|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     38|    {
 1572|     38|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|     38|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     38|    {
  442|     38|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     38|    {
 1316|     38|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|     38|    {
 1740|     38|        return has_value();
 1741|     38|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|     76|    {
  490|     76|        return m_has_value;
  491|     76|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|     38|    {
 1805|     38|        return std::move(value());
 1806|     38|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|     38|    {
 1769|     38|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     38|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     38|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     38|        return this->get_value();
 1771|     38|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|     38|    {
  456|     38|        return m_value;
  457|     38|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1964|     76|    {
 1965|     76|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|     76|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSK_OT0_:
 1461|     76|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     76|    else {
 1472|     76|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     76|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     76|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 76]
  |  |  ------------------
  ------------------
 1474|     76|                   ? result(*std::forward<Exp>(exp))
 1475|     76|                   : result(unexpect,
 1476|     76|                            trivial_invoke(std::forward<F>(f),
 1477|     76|                                           std::forward<Exp>(exp).error()));
 1478|     76|    }
 1479|     76|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|     38|    {
 2869|     38|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|     38|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|     38|    {
 2850|     38|        return decay_copy(t.begin());
 2851|     38|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|     32|    {
 1979|     32|        return detail::transform_error_impl(std::move(*this),
 1980|     32|                                            std::forward<F>(f));
 1981|     32|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|     32|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     32|    else {
 1472|     32|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     32|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 1474|     32|                   ? result(*std::forward<Exp>(exp))
 1475|     32|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     32|    }
 1479|     32|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|     32|        : base(std::in_place, std::forward<U>(val)),
 1570|     32|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     32|    {
 1572|     32|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|     32|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     32|    {
  442|     32|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     32|    {
 1316|     32|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|     32|    {
 1740|     32|        return has_value();
 1741|     32|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|     64|    {
  490|     64|        return m_has_value;
  491|     64|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|     32|    {
 1805|     32|        return std::move(value());
 1806|     32|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|     32|    {
 1769|     32|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     32|        return this->get_value();
 1771|     32|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|     32|    {
  456|     32|        return m_value;
  457|     32|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1964|     32|    {
 1965|     32|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|     32|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|     32|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     32|    else {
 1472|     32|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     32|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 32]
  |  |  ------------------
  ------------------
 1474|     32|                   ? result(*std::forward<Exp>(exp))
 1475|     32|                   : result(unexpect,
 1476|     32|                            trivial_invoke(std::forward<F>(f),
 1477|     32|                                           std::forward<Exp>(exp).error()));
 1478|     32|    }
 1479|     32|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|     32|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|     32|    static_cast<    \
  |  |  935|     32|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|     32|    {
 3912|     32|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|    242|    {
 1795|    242|        return value();
 1796|    242|    }
_ZN3scn2v46detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7444|     42|{
 7445|     42|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|     42|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     42|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|     42|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|     42|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     42|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|     42|    auto start = begin;
 7449|     42|    ++begin;
 7450|       |
 7451|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|     42|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 0, False: 42]
  ------------------
 7458|      0|        handler.on_charset_inverted();
 7459|      0|        ++begin;
 7460|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 0, False: 0]
  ------------------
 7467|      0|            handler.on_charset_single(char32_t{']'});
 7468|      0|            ++begin;
 7469|      0|        }
 7470|      0|    }
 7471|     42|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 42]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|  1.83k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 1.83k, False: 0]
  ------------------
 7476|  1.83k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  1.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.83k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|  1.83k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 42, False: 1.78k]
  ------------------
 7481|     42|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|     42|        }
 7483|       |
 7484|  1.78k|        parse_presentation_set_literal(begin, end, handler);
 7485|  1.78k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|     42|}
_ZN3scn2v46detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7408|  1.78k|{
 7409|  1.78k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  1.78k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  1.78k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.78k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|  1.78k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 1.78k, False: 0]
  |  Branch (7416:25): [True: 132, False: 1.65k]
  |  Branch (7416:49): [True: 132, False: 0]
  ------------------
 7417|  1.78k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 132, False: 0]
  ------------------
 7418|    132|        ++begin;
 7419|       |
 7420|    132|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|    132|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 132]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|    132|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 132]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|    132|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|    132|        return;
 7434|    132|    }
 7435|       |
 7436|  1.65k|    handler.on_charset_single(cp_first);
 7437|  1.65k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7384|  1.92k|{
 7385|  1.92k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  1.92k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  1.92k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  3.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.92k]
  |  |  |  Branch (865:45): [True: 0, False: 1.92k]
  |  |  |  Branch (865:45): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|  1.92k|    const auto cp =
 7394|  1.92k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  1.92k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|  1.92k|    begin += len;
 7401|  1.92k|    return cp;
 7402|  1.92k|}
_ZNK3scn2v46detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7003|  6.48k|    {
 7004|  6.48k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7005|  6.48k|                charset_string_size};
 7006|  6.48k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|     54|        : base(std::in_place, std::forward<U>(val)),
 1570|     54|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     54|    {
 1572|     54|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|     54|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     54|    {
  442|     54|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6176|  14.3k|    {
 6177|  14.3k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.3k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|  14.3k|        return static_cast<std::size_t>(m_desc &
 6182|  14.3k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|  14.3k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6202|  22.4k|    {
 6203|  22.4k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|  22.4k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6144|  8.15k|    {
 6145|  8.15k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  8.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.15k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|  8.15k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  8.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.15k]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|  8.15k|        const auto t = type(id);
 6157|  8.15k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  8.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50, False: 8.10k]
  |  |  ------------------
  ------------------
 6158|     50|            return {};
 6159|     50|        }
 6160|       |
 6161|  8.10k|        basic_scan_arg<Context> arg;
 6162|  8.10k|        arg.m_type = t;
 6163|  8.10k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 8.10k, False: 0]
  ------------------
 6164|  8.10k|            arg.m_value.ref_value = m_builtin_values[id];
 6165|  8.10k|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|  8.10k|        return arg;
 6170|  8.15k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5954|  8.15k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5559|  28.5k|    arg_value() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6211|  8.15k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|  8.15k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|  8.15k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|  8.15k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|  8.15k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6206|  8.10k|    {
 6207|  8.10k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|  8.10k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5960|  16.0k|    {
 5961|  16.0k|        return m_type != detail::arg_type::none_type;
 5962|  16.0k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|     90|{
 9300|     90|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|     90|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|     90|{
 9201|     90|#define SCN_VISIT(Type)                                                \
 9202|     90|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|     90|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|     90|    }                                                                  \
 9205|     90|    else {                                                             \
 9206|     90|        return vis(monostate_val);                                     \
 9207|     90|    }
 9208|       |
 9209|     90|    monostate monostate_val{};
 9210|       |
 9211|     90|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 90]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 90]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|     10|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 10, False: 80]
  ------------------
 9217|     10|            SCN_VISIT(int);
  ------------------
  |  | 9202|     10|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     10|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     10|    }                                                                  \
  |  | 9205|     10|    else {                                                             \
  |  | 9206|     10|        return vis(monostate_val);                                     \
  |  | 9207|     10|    }
  ------------------
 9218|     10|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 90]
  ------------------
 9219|     10|            SCN_VISIT(long);
  ------------------
  |  | 9202|     10|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     10|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     10|    }                                                                  \
  |  | 9205|     10|    else {                                                             \
  |  | 9206|     10|        return vis(monostate_val);                                     \
  |  | 9207|     10|    }
  ------------------
 9220|     10|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 90]
  ------------------
 9221|     10|            SCN_VISIT(long long);
  ------------------
  |  | 9202|     10|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     10|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     10|    }                                                                  \
  |  | 9205|     10|    else {                                                             \
  |  | 9206|     10|        return vis(monostate_val);                                     \
  |  | 9207|     10|    }
  ------------------
 9222|     10|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 90]
  ------------------
 9223|     10|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|     10|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     10|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     10|    }                                                                  \
  |  | 9205|     10|    else {                                                             \
  |  | 9206|     10|        return vis(monostate_val);                                     \
  |  | 9207|     10|    }
  ------------------
 9224|     10|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 90]
  ------------------
 9225|     10|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|     10|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     10|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     10|    }                                                                  \
  |  | 9205|     10|    else {                                                             \
  |  | 9206|     10|        return vis(monostate_val);                                     \
  |  | 9207|     10|    }
  ------------------
 9226|     20|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 10, False: 80]
  ------------------
 9227|     20|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|     20|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     20|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     20|    }                                                                  \
  |  | 9205|     20|    else {                                                             \
  |  | 9206|     20|        return vis(monostate_val);                                     \
  |  | 9207|     20|    }
  ------------------
 9228|     20|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 90]
  ------------------
 9229|     20|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|     20|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     20|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     20|    }                                                                  \
  |  | 9205|     20|    else {                                                             \
  |  | 9206|     20|        return vis(monostate_val);                                     \
  |  | 9207|     20|    }
  ------------------
 9230|     20|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 90]
  ------------------
 9231|     20|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|     20|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     20|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     20|    }                                                                  \
  |  | 9205|     20|    else {                                                             \
  |  | 9206|     20|        return vis(monostate_val);                                     \
  |  | 9207|     20|    }
  ------------------
 9232|     30|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 10, False: 80]
  ------------------
 9233|     30|            SCN_VISIT(void*);
  ------------------
  |  | 9202|     30|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     30|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     30|    }                                                                  \
  |  | 9205|     30|    else {                                                             \
  |  | 9206|     30|        return vis(monostate_val);                                     \
  |  | 9207|     30|    }
  ------------------
 9234|     40|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 10, False: 80]
  ------------------
 9235|     40|            SCN_VISIT(bool);
  ------------------
  |  | 9202|     40|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     40|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     40|    }                                                                  \
  |  | 9205|     40|    else {                                                             \
  |  | 9206|     40|        return vis(monostate_val);                                     \
  |  | 9207|     40|    }
  ------------------
 9236|     50|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 10, False: 80]
  ------------------
 9237|     50|            SCN_VISIT(char);
  ------------------
  |  | 9202|     50|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     50|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     50|    }                                                                  \
  |  | 9205|     50|    else {                                                             \
  |  | 9206|     50|        return vis(monostate_val);                                     \
  |  | 9207|     50|    }
  ------------------
 9238|     50|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 90]
  ------------------
 9239|     50|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|     50|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     50|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     50|    }                                                                  \
  |  | 9205|     50|    else {                                                             \
  |  | 9206|     50|        return vis(monostate_val);                                     \
  |  | 9207|     50|    }
  ------------------
 9240|     50|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 90]
  ------------------
 9241|     50|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|     50|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     50|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     50|    }                                                                  \
  |  | 9205|     50|    else {                                                             \
  |  | 9206|     50|        return vis(monostate_val);                                     \
  |  | 9207|     50|    }
  ------------------
 9242|     50|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 90]
  ------------------
 9243|     50|            SCN_VISIT(float);
  ------------------
  |  | 9202|     50|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     50|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     50|    }                                                                  \
  |  | 9205|     50|    else {                                                             \
  |  | 9206|     50|        return vis(monostate_val);                                     \
  |  | 9207|     50|    }
  ------------------
 9244|     60|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 10, False: 80]
  ------------------
 9245|     60|            SCN_VISIT(double);
  ------------------
  |  | 9202|     60|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     60|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     60|    }                                                                  \
  |  | 9205|     60|    else {                                                             \
  |  | 9206|     60|        return vis(monostate_val);                                     \
  |  | 9207|     60|    }
  ------------------
 9246|     60|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 90]
  ------------------
 9247|     60|            SCN_VISIT(long double);
  ------------------
  |  | 9202|     60|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     60|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     60|    }                                                                  \
  |  | 9205|     60|    else {                                                             \
  |  | 9206|     60|        return vis(monostate_val);                                     \
  |  | 9207|     60|    }
  ------------------
 9248|     70|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 10, False: 80]
  ------------------
 9249|     70|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|     70|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     70|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     70|    }                                                                  \
  |  | 9205|     70|    else {                                                             \
  |  | 9206|     70|        return vis(monostate_val);                                     \
  |  | 9207|     70|    }
  ------------------
 9250|     80|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 10, False: 80]
  ------------------
 9251|     80|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|     80|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     80|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     80|    }                                                                  \
  |  | 9205|     80|    else {                                                             \
  |  | 9206|     80|        return vis(monostate_val);                                     \
  |  | 9207|     80|    }
  ------------------
 9252|     80|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 90]
  ------------------
 9253|     80|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|     80|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     80|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     80|    }                                                                  \
  |  | 9205|     80|    else {                                                             \
  |  | 9206|     80|        return vis(monostate_val);                                     \
  |  | 9207|     80|    }
  ------------------
 9254|     90|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 10, False: 80]
  ------------------
 9255|     90|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|     90|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     90|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     90|    }                                                                  \
  |  | 9205|     90|    else {                                                             \
  |  | 9206|     90|        return vis(monostate_val);                                     \
  |  | 9207|     90|    }
  ------------------
 9256|     90|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 90]
  ------------------
 9257|     90|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|     90|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     90|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     90|    }                                                                  \
  |  | 9205|     90|    else {                                                             \
  |  | 9206|     90|        return vis(monostate_val);                                     \
  |  | 9207|     90|    }
  ------------------
 9258|     90|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 90]
  ------------------
 9259|     90|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|     90|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     90|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     90|    }                                                                  \
  |  | 9205|     90|    else {                                                             \
  |  | 9206|     90|        return vis(monostate_val);                                     \
  |  | 9207|     90|    }
  ------------------
 9260|       |
 9261|     90|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 90]
  ------------------
 9262|     90|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|     90|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|     90|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 90]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 90]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|     90|            SCN_CLANG_POP
 9279|     90|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|  24.0k|{
 6006|  24.0k|    return arg.m_type;
 6007|  24.0k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|  7.93k|{
 6018|  7.93k|    return arg.m_value;
 6019|  7.93k|}
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|     32|    {
 1979|     32|        return detail::transform_error_impl(std::move(*this),
 1980|     32|                                            std::forward<F>(f));
 1981|     32|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|     32|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     32|    else {
 1472|     32|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     32|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 1474|     32|                   ? result(*std::forward<Exp>(exp))
 1475|     32|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     32|    }
 1479|     32|}
_ZNO3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|     32|    {
 1805|     32|        return std::move(value());
 1806|     32|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 6256|  14.3k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|  14.3k|    {
 6258|  14.3k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  14.3k|    {
 3075|  14.3k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  14.3k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  14.3k|    {
 3041|  14.3k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  14.3k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  14.3k|{
 7793|  14.3k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  14.3k|    handler.check_args_exhausted();
 7795|  14.3k|    return handler.get_error();
 7796|  14.3k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  14.3k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  14.3k|    auto begin = format.data();
 7761|  14.3k|    auto it = begin;
 7762|  14.3k|    const auto end = format.data() + format.size();
 7763|       |
 7764|  91.2k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 90.6k, False: 546]
  ------------------
 7765|  90.6k|        const auto ch = *it++;
 7766|  90.6k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 14.3k, False: 76.3k]
  ------------------
 7767|  14.3k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  14.3k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  14.3k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 13.5k, False: 786]
  ------------------
 7771|  13.5k|                return;
 7772|  13.5k|            }
 7773|  14.3k|        }
 7774|  76.3k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 352, False: 76.0k]
  ------------------
 7775|    352|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|    686|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 260, False: 92]
  |  |  |  Branch (865:45): [True: 18, False: 334]
  |  |  |  Branch (865:45): [True: 242, False: 92]
  |  |  ------------------
  ------------------
 7776|    260|                handler.on_error("Unmatched '}' in format string");
 7777|    260|                return;
 7778|    260|            }
 7779|       |
 7780|     92|            handler.on_literal_text(begin, it);
 7781|     92|            begin = ++it;
 7782|     92|        }
 7783|  90.6k|    }
 7784|       |
 7785|    546|    handler.on_literal_text(begin, end);
 7786|    546|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7689|  14.3k|{
 7690|  14.3k|    struct id_adapter {
 7691|  14.3k|        constexpr void operator()()
 7692|  14.3k|        {
 7693|  14.3k|            arg_id = handler.on_arg_id();
 7694|  14.3k|        }
 7695|  14.3k|        constexpr void operator()(std::size_t id)
 7696|  14.3k|        {
 7697|  14.3k|            arg_id = handler.on_arg_id(id);
 7698|  14.3k|        }
 7699|       |
 7700|  14.3k|        constexpr void on_error(const char* msg)
 7701|  14.3k|        {
 7702|  14.3k|            SCN_UNLIKELY_ATTR
 7703|  14.3k|            handler.on_error(msg);
 7704|  14.3k|        }
 7705|       |
 7706|  14.3k|        Handler& handler;
 7707|  14.3k|        std::size_t arg_id;
 7708|  14.3k|    };
 7709|       |
 7710|  14.3k|    ++begin;
 7711|  14.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.3k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  14.3k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 96, False: 14.2k]
  ------------------
 7717|     96|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|     96|    }
 7719|  14.2k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 26, False: 14.1k]
  ------------------
 7720|     26|        handler.on_literal_text(begin, begin + 1);
 7721|     26|    }
 7722|  14.1k|    else {
 7723|  14.1k|        auto adapter = id_adapter{handler, 0};
 7724|  14.1k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  14.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.1k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  14.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 14.1k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  14.1k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 8.05k, False: 6.13k]
  ------------------
 7735|  8.05k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  8.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.05k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  8.05k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  8.05k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 186, False: 7.86k]
  |  |  |  Branch (865:45): [True: 0, False: 8.05k]
  |  |  |  Branch (865:45): [True: 186, False: 7.86k]
  |  |  ------------------
  ------------------
 7741|    186|                handler.on_error("Unknown format specifier");
 7742|    186|                return begin;
 7743|    186|            }
 7744|  8.05k|        }
 7745|  6.13k|        else {
 7746|  6.13k|            SCN_UNLIKELY_ATTR
 7747|  6.13k|            handler.on_error("Missing '}' in format string");
 7748|  6.13k|            return begin;
 7749|  6.13k|        }
 7750|  14.1k|    }
 7751|  7.99k|    return begin + 1;
 7752|  14.3k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8831|  8.15k|    {
 8832|  8.15k|        return m_args.get(id);
 8833|  8.15k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6285|  6.81k|    {
 6286|  6.81k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  6.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.81k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|  6.81k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|  6.81k|        do_check_arg_id(id);
 6294|  6.81k|        return id;
 6295|  6.81k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6805|  8.15k|{
 6806|  8.15k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|  8.15k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|  8.15k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  14.1k|{
 7191|  14.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  14.1k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 14.1k, False: 0]
  |  Branch (7192:26): [True: 7.46k, False: 6.72k]
  ------------------
 7193|  7.46k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|  7.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|  7.46k|    }
 7195|       |
 7196|  6.72k|    handler();
 7197|  6.72k|    return begin;
 7198|  14.1k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7160|  7.46k|{
 7161|  7.46k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  7.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7162|       |
 7163|  7.46k|    CharT c = *begin;
 7164|  7.46k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7164:9): [True: 6.10k, False: 1.36k]
  |  Branch (7164:27): [True: 6, False: 1.35k]
  ------------------
 7165|  6.10k|        handler.on_error("Invalid argument ID");
 7166|  6.10k|        return begin;
 7167|  6.10k|    }
 7168|       |
 7169|  1.35k|    int idx = 0;
 7170|  1.35k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7170:9): [True: 0, False: 1.35k]
  ------------------
 7171|      0|        idx = parse_simple_int(begin, end);
 7172|      0|    }
 7173|  1.35k|    else {
 7174|  1.35k|        ++begin;
 7175|  1.35k|    }
 7176|       |
 7177|  1.35k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7177:9): [True: 0, False: 1.35k]
  |  Branch (7177:26): [True: 1.35k, False: 0]
  |  Branch (7177:50): [True: 24, False: 1.33k]
  ------------------
 7178|     24|        handler.on_error("Invalid argument ID");
 7179|     24|        return begin;
 7180|     24|    }
 7181|  1.33k|    handler(idx);
 7182|       |
 7183|  1.33k|    return begin;
 7184|  1.35k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7701|  6.13k|        {
 7702|  6.13k|            SCN_UNLIKELY_ATTR
 7703|  6.13k|            handler.on_error(msg);
 7704|  6.13k|        }
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7139|    630|{
 7140|    630|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|    630|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    630|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|    630|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|    630|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    630|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7142|       |
 7143|    630|    unsigned long long value = 0;
 7144|  2.62k|    do {
 7145|  2.62k|        value *= 10;
 7146|  2.62k|        value += static_cast<unsigned long long>(*begin - '0');
 7147|  2.62k|        if (value >
  ------------------
  |  Branch (7147:13): [True: 0, False: 2.62k]
  ------------------
 7148|  2.62k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7149|      0|            return -1;
 7150|      0|        }
 7151|  2.62k|        ++begin;
 7152|  2.62k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7152:14): [True: 2.62k, False: 0]
  |  Branch (7152:30): [True: 2.44k, False: 180]
  |  Branch (7152:47): [True: 1.99k, False: 450]
  ------------------
 7153|    630|    return static_cast<int>(value);
 7154|    630|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7696|  1.33k|        {
 7697|  1.33k|            arg_id = handler.on_arg_id(id);
 7698|  1.33k|        }
_ZN3scn2v424basic_scan_parse_contextIcE12check_arg_idEm:
 6298|  1.33k|    {
 6299|  1.33k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  865|  1.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.33k]
  |  |  ------------------
  ------------------
 6300|      0|            on_error(
 6301|      0|                "Cannot switch from manual to automatic argument indexing");
 6302|      0|            return;
 6303|      0|        }
 6304|  1.33k|        m_next_arg_id = -1;
 6305|  1.33k|        do_check_arg_id(id);
 6306|  1.33k|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  6.72k|        {
 7693|  6.72k|            arg_id = handler.on_arg_id();
 7694|  6.72k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6280|  7.85k|    {
 6281|  7.85k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|  7.85k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6269|  15.9k|    {
 6270|  15.9k|        return m_format.data();
 6271|  15.9k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|  8.05k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  8.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|  8.05k|    {
 7871|  8.05k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  8.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|  8.05k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7605|  8.05k|{
 7606|  8.05k|    auto do_presentation = [&]() -> const CharT* {
 7607|  8.05k|        if (*begin == CharT{'['}) {
 7608|  8.05k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  8.05k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|  8.05k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|  8.05k|                return begin;
 7614|  8.05k|            }
 7615|  8.05k|            handler.on_character_set_string(set);
 7616|  8.05k|            return begin;
 7617|  8.05k|        }
 7618|  8.05k|        if (*begin == CharT{'/'}) {
 7619|  8.05k|            return parse_presentation_regex(begin, end, handler);
 7620|  8.05k|        }
 7621|  8.05k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  8.05k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|  8.05k|            handler.on_error("Invalid type specifier in format string");
 7624|  8.05k|            return begin;
 7625|  8.05k|        }
 7626|  8.05k|        handler.on_type(type);
 7627|  8.05k|        return begin;
 7628|  8.05k|    };
 7629|       |
 7630|  8.05k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 8.04k, False: 8]
  |  Branch (7630:28): [True: 46, False: 8.00k]
  ------------------
 7631|  8.05k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 2, False: 44]
  |  Branch (7631:36): [True: 2, False: 0]
  ------------------
 7632|      2|        return do_presentation();
 7633|      2|    }
 7634|       |
 7635|  8.05k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.05k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  8.05k|    begin = parse_align(begin, end, handler);
 7641|  8.05k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.05k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  8.05k|    begin = parse_width(begin, end, handler);
 7647|  8.05k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.05k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  8.05k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 198, False: 7.85k]
  ------------------
 7653|    198|        ++begin;
 7654|    198|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 198]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|    198|        begin = parse_precision(begin, end, handler);
 7659|    198|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 198]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|    198|    }
 7664|       |
 7665|  8.05k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 0, False: 8.05k]
  ------------------
 7666|      0|        handler.on_localized();
 7667|      0|        ++begin;
 7668|      0|    }
 7669|  8.05k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.05k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  8.05k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 8.05k, False: 0]
  |  Branch (7674:25): [True: 7.98k, False: 72]
  ------------------
 7675|  7.98k|        do_presentation();
 7676|  7.98k|    }
 7677|  8.05k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 124, False: 7.92k]
  |  |  ------------------
  ------------------
 7678|    124|        handler.on_error("Unexpected end of format string");
 7679|    124|        return begin;
 7680|    124|    }
 7681|       |
 7682|  7.92k|    return begin;
 7683|  8.05k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7254|     46|{
 7255|     46|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 2, False: 44]
  |  Branch (7255:33): [True: 2, False: 0]
  ------------------
 7256|     46|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 18, False: 26]
  |  Branch (7256:33): [True: 0, False: 18]
  ------------------
 7257|     46|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|  7.98k|    auto do_presentation = [&]() -> const CharT* {
 7607|  7.98k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 2.59k, False: 5.39k]
  ------------------
 7608|  2.59k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  2.59k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  2.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.59k]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|  2.59k|            handler.on_character_set_string(set);
 7616|  2.59k|            return begin;
 7617|  2.59k|        }
 7618|  5.39k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 5.27k, False: 118]
  ------------------
 7619|  5.27k|            return parse_presentation_regex(begin, end, handler);
 7620|  5.27k|        }
 7621|    118|        presentation_type type = parse_presentation_type(*begin++);
 7622|    118|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 108, False: 10]
  |  |  ------------------
  ------------------
 7623|    108|            handler.on_error("Invalid type specifier in format string");
 7624|    108|            return begin;
 7625|    108|        }
 7626|     10|        handler.on_type(type);
 7627|     10|        return begin;
 7628|    118|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7444|  2.59k|{
 7445|  2.59k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  2.59k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  2.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  2.59k|    auto start = begin;
 7449|  2.59k|    ++begin;
 7450|       |
 7451|  2.59k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.59k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|  2.59k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 108, False: 2.48k]
  ------------------
 7458|    108|        handler.on_charset_inverted();
 7459|    108|        ++begin;
 7460|    108|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 108]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|    108|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 0, False: 108]
  ------------------
 7467|      0|            handler.on_charset_single(char32_t{']'});
 7468|      0|            ++begin;
 7469|      0|        }
 7470|    108|    }
 7471|  2.48k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 2.48k]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|   976k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 976k, False: 0]
  ------------------
 7476|   976k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   976k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 976k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|   976k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 2.59k, False: 973k]
  ------------------
 7481|  2.59k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  2.59k|        }
 7483|       |
 7484|   973k|        parse_presentation_set_literal(begin, end, handler);
 7485|   973k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|  2.59k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7408|   973k|{
 7409|   973k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   973k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   973k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|   973k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|   973k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|   973k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 973k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|   973k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 973k, False: 0]
  |  Branch (7416:25): [True: 2.53k, False: 971k]
  |  Branch (7416:49): [True: 2.53k, False: 0]
  ------------------
 7417|   973k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 2.35k, False: 180]
  ------------------
 7418|  2.35k|        ++begin;
 7419|       |
 7420|  2.35k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  2.35k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  2.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.35k]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|  2.35k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  2.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.35k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|  2.35k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  2.35k|        return;
 7434|  2.35k|    }
 7435|       |
 7436|   971k|    handler.on_charset_single(cp_first);
 7437|   971k|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7384|   976k|{
 7385|   976k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   976k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   976k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|   976k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|   976k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 976k]
  |  |  |  Branch (865:45): [True: 0, False: 976k]
  |  |  |  Branch (865:45): [True: 0, False: 976k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|   976k|    const auto cp =
 7394|   976k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|   976k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   976k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 976k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|   976k|    begin += len;
 7401|   976k|    return cp;
 7402|   976k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7098|  2.59k|    {
 7099|  2.59k|        m_specs.charset_string_data = fmt.data();
 7100|  2.59k|        m_specs.charset_string_size = fmt.size();
 7101|  2.59k|        on_type(presentation_type::string_set);
 7102|  2.59k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_RSK_SK_OT0_:
 7496|  5.27k|{
 7497|  5.27k|#if !SCN_DISABLE_REGEX
 7498|  5.27k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  5.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7499|  5.27k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  930|  5.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7500|       |
 7501|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7502|       |                  std::is_same_v<CharT, wchar_t>) {
 7503|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 7504|       |        return begin;
 7505|       |    }
 7506|       |
 7507|  5.27k|    auto start = begin;
 7508|  5.27k|    ++begin;
 7509|       |
 7510|  5.27k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  5.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.27k]
  |  |  ------------------
  ------------------
 7511|      0|        handler.on_error("Unexpected end of regex in format string");
 7512|      0|        return begin;
 7513|      0|    }
 7514|       |
 7515|  5.27k|    handler.on_type(presentation_type::regex);
 7516|  3.74M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7516:12): [True: 3.74M, False: 72]
  ------------------
 7517|  3.74M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7517:13): [True: 14.2k, False: 3.72M]
  ------------------
 7518|  14.2k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7518:17): [True: 5.20k, False: 9.00k]
  ------------------
 7519|  5.20k|                break;
 7520|  5.20k|            }
 7521|  9.00k|            else {
 7522|  9.00k|                handler.on_type(presentation_type::regex_escaped);
 7523|  9.00k|            }
 7524|  14.2k|        }
 7525|  3.74M|    }
 7526|  5.27k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  5.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 5.20k]
  |  |  ------------------
  ------------------
 7527|     72|        handler.on_error("Unexpected end of regex in format string");
 7528|     72|        return begin;
 7529|     72|    }
 7530|       |
 7531|  5.20k|    auto regex_end = begin;
 7532|  5.20k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7533|  5.20k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  865|  5.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.20k]
  |  |  ------------------
  ------------------
 7534|      0|        handler.on_error("Invalid (empty) regex in format string");
 7535|      0|        return begin;
 7536|      0|    }
 7537|  5.20k|    handler.on_regex_pattern(regex_pattern);
 7538|  5.20k|    ++begin;
 7539|       |
 7540|  5.20k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  5.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.20k]
  |  |  ------------------
  ------------------
 7541|      0|        handler.on_error("Unexpected end of regex in format string");
 7542|      0|        return begin;
 7543|      0|    }
 7544|       |
 7545|  5.20k|    regex_flags flags{regex_flags::none};
 7546|  5.20k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7547|  5.20k|        {{'m', regex_flags::multiline},
 7548|  5.20k|         {'s', regex_flags::singleline},
 7549|  5.20k|         {'i', regex_flags::nocase},
 7550|  5.20k|         {'n', regex_flags::nocapture}}};
 7551|  5.96k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7551:12): [True: 5.95k, False: 8]
  ------------------
 7552|  5.95k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7552:13): [True: 5.18k, False: 772]
  ------------------
 7553|  5.18k|            break;
 7554|  5.18k|        }
 7555|    772|        bool found_flag = false;
 7556|  2.24k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7556:24): [True: 2.24k, False: 8]
  ------------------
 7557|  2.24k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7557:17): [True: 1.48k, False: 764]
  ------------------
 7558|  1.48k|                continue;
 7559|  1.48k|            }
 7560|    764|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7560:17): [True: 0, False: 764]
  ------------------
 7561|      0|                handler.on_error("Flag set multiple times in regex");
 7562|      0|                return begin;
 7563|      0|            }
 7564|    764|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7565|    764|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (7565:17): [True: 8, False: 756]
  ------------------
 7566|       |                // clang-format off
 7567|      8|                handler.on_error("/s flag for regex isn't supported by regex backend");
 7568|       |                // clang-format on
 7569|      8|            }
 7570|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7571|       |            if (*begin == CharT{'m'}) {
 7572|       |                // clang-format off
 7573|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7574|       |                // clang-format on
 7575|       |            }
 7576|       |#endif
 7577|    764|#endif
 7578|    764|            flags |= flag.second;
 7579|    764|            found_flag = true;
 7580|    764|            break;
 7581|    764|        }
 7582|    772|        if (!found_flag) {
  ------------------
  |  Branch (7582:13): [True: 8, False: 764]
  ------------------
 7583|      8|            handler.on_error("Invalid flag in regex");
 7584|      8|            return begin;
 7585|      8|        }
 7586|    772|    }
 7587|  5.19k|    handler.on_regex_flags(flags);
 7588|       |
 7589|  5.19k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  5.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 5.18k]
  |  |  ------------------
  ------------------
 7590|      8|        handler.on_error("Unexpected end of regex in format string");
 7591|      8|        return begin;
 7592|      8|    }
 7593|       |
 7594|  5.18k|    return begin;
 7595|       |#else
 7596|       |    handler.on_error("Regular expression support is disabled");
 7597|       |    return {};
 7598|       |#endif
 7599|  5.19k|}
_ZN3scn2v46detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7106|  5.20k|    {
 7107|  5.20k|        m_specs.charset_string_data = pattern.data();
 7108|  5.20k|        m_specs.charset_string_size = pattern.size();
 7109|  5.20k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7202|    118|{
 7203|    118|    switch (type) {
 7204|      0|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 0, False: 118]
  ------------------
 7205|      0|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 0, False: 118]
  ------------------
 7206|      0|            return presentation_type::int_binary;
 7207|      0|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 0, False: 118]
  ------------------
 7208|      0|            return presentation_type::int_decimal;
 7209|      0|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 0, False: 118]
  ------------------
 7210|      0|            return presentation_type::int_generic;
 7211|      0|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 0, False: 118]
  ------------------
 7212|      0|            return presentation_type::int_unsigned_decimal;
 7213|      0|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 0, False: 118]
  ------------------
 7214|      0|            return presentation_type::int_octal;
 7215|      0|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 0, False: 118]
  ------------------
 7216|      0|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 0, False: 118]
  ------------------
 7217|      0|            return presentation_type::int_hex;
 7218|      0|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 0, False: 118]
  ------------------
 7219|      0|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 0, False: 118]
  ------------------
 7220|      0|            return presentation_type::int_arbitrary_base;
 7221|      2|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 2, False: 116]
  ------------------
 7222|      2|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 0, False: 118]
  ------------------
 7223|      2|            return presentation_type::float_hex;
 7224|      0|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 0, False: 118]
  ------------------
 7225|      0|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 0, False: 118]
  ------------------
 7226|      0|            return presentation_type::float_scientific;
 7227|      0|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 0, False: 118]
  ------------------
 7228|      0|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 0, False: 118]
  ------------------
 7229|      0|            return presentation_type::float_fixed;
 7230|      0|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 0, False: 118]
  ------------------
 7231|      0|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 0, False: 118]
  ------------------
 7232|      0|            return presentation_type::float_general;
 7233|      8|        case 's':
  ------------------
  |  Branch (7233:9): [True: 8, False: 110]
  ------------------
 7234|      8|            return presentation_type::string;
 7235|      0|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 0, False: 118]
  ------------------
 7236|      0|            return presentation_type::character;
 7237|      0|        case '?':
  ------------------
  |  Branch (7237:9): [True: 0, False: 118]
  ------------------
 7238|      0|            return presentation_type::escaped_character;
 7239|      0|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 0, False: 118]
  ------------------
 7240|      0|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 118]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 118]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|    108|        default:
  ------------------
  |  Branch (7247:9): [True: 108, False: 10]
  ------------------
 7248|    108|            return presentation_type::none;
 7249|    118|    }
 7250|    118|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7279|  8.05k|{
 7280|  8.05k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  8.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  8.05k|    auto check_align = [](wchar_t ch) {
 7283|  8.05k|        switch (ch) {
 7284|  8.05k|            case L'<':
 7285|  8.05k|                return align_type::left;
 7286|  8.05k|            case L'>':
 7287|  8.05k|                return align_type::right;
 7288|  8.05k|            case L'^':
 7289|  8.05k|                return align_type::center;
 7290|  8.05k|            default:
 7291|  8.05k|                return align_type::none;
 7292|  8.05k|        }
 7293|  8.05k|    };
 7294|       |
 7295|  8.05k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  8.05k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18, False: 8.03k]
  |  |  |  Branch (865:45): [True: 18, False: 8.03k]
  |  |  |  Branch (865:45): [True: 0, False: 8.03k]
  |  |  ------------------
  ------------------
 7297|  8.05k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|     18|        handler.on_error("Invalid encoding in fill character");
 7299|     18|        return begin;
 7300|     18|    }
 7301|       |
 7302|  8.03k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  8.03k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  8.03k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  8.03k|    const auto begin_before_fill = begin;
 7307|  8.03k|    begin += potential_fill_len;
 7308|       |
 7309|  8.03k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 8, False: 8.02k]
  ------------------
 7310|      8|        return begin_before_fill;
 7311|      8|    }
 7312|       |
 7313|  8.02k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  8.02k|    const auto begin_after_fill = begin;
 7315|  8.02k|    ++begin;
 7316|       |
 7317|  8.02k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 7.99k, False: 30]
  ------------------
 7318|  7.99k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  7.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.99k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  7.99k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 2.19k, False: 5.80k]
  ------------------
 7323|  2.19k|            return begin_before_fill;
 7324|  2.19k|        }
 7325|  7.99k|    }
 7326|       |
 7327|  5.83k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 4.28k, False: 1.54k]
  ------------------
 7328|  4.28k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 522, False: 3.76k]
  ------------------
 7329|    522|            handler.on_align(potential_align_on_fill);
 7330|    522|            return begin_after_fill;
 7331|    522|        }
 7332|  3.76k|        return begin_before_fill;
 7333|  4.28k|    }
 7334|       |
 7335|  1.54k|    handler.on_fill(potential_fill);
 7336|  1.54k|    handler.on_align(potential_align_after_fill);
 7337|  1.54k|    return begin;
 7338|  5.83k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7261|  8.05k|{
 7262|  8.05k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  8.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|       |    if constexpr (sizeof(CharT) != 1) {
 7264|       |        return 1;
 7265|       |    }
 7266|  8.05k|    else {
 7267|  8.05k|        const auto lengths =
 7268|  8.05k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|  8.05k|            "\3\4";
 7270|  8.05k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|  8.05k|        return len;
 7272|  8.05k|    }
 7273|  8.05k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|  16.0k|    auto check_align = [](wchar_t ch) {
 7283|  16.0k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 16.0k]
  ------------------
 7285|      0|                return align_type::left;
 7286|     90|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 90, False: 15.9k]
  ------------------
 7287|     90|                return align_type::right;
 7288|  1.99k|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 1.99k, False: 14.0k]
  ------------------
 7289|  1.99k|                return align_type::center;
 7290|  13.9k|            default:
  ------------------
  |  Branch (7290:13): [True: 13.9k, False: 2.08k]
  ------------------
 7291|  13.9k|                return align_type::none;
 7292|  16.0k|        }
 7293|  16.0k|    };
_ZN3scn2v46detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7019|  1.54k|    {
 7020|  1.54k|        m_specs.fill = fill;
 7021|  1.54k|    }
_ZN3scn2v46detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6900|  1.54k|    {
 6901|  1.54k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  930|  1.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6902|  1.54k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  930|  1.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6903|  1.54k|        if constexpr (sizeof(CharT) == 1) {
 6904|  3.09k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6904:32): [True: 1.54k, False: 1.54k]
  ------------------
 6905|  1.54k|                SCN_GCC_PUSH
 6906|  1.54k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6907|  1.54k|                m_data[i] = s[i];
 6908|  1.54k|                SCN_GCC_POP
 6909|  1.54k|            }
 6910|  1.54k|            m_size = static_cast<unsigned char>(s.size());
 6911|       |        }
 6912|       |        else if constexpr (sizeof(CharT) == 2) {
 6913|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6914|       |            m_data[1] =
 6915|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6916|       |            if (s.size() == 1) {
 6917|       |                return;
 6918|       |            }
 6919|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6920|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6921|       |        }
 6922|       |        else {
 6923|       |            const auto front = static_cast<unsigned>(s.front());
 6924|       |            m_data[0] = static_cast<char>(front);
 6925|       |            m_data[1] = static_cast<char>(front >> 8);
 6926|       |            m_data[2] = static_cast<char>(front >> 16);
 6927|       |            m_data[3] = static_cast<char>(front >> 24);
 6928|       |        }
 6929|  1.54k|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7344|  8.05k|{
 7345|  8.05k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  8.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  8.05k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 2.65k, False: 5.39k]
  |  Branch (7347:33): [True: 432, False: 2.22k]
  ------------------
 7348|    432|        int width = parse_simple_int(begin, end);
 7349|    432|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|    432|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 432, False: 0]
  |  |  ------------------
  ------------------
 7350|    432|            handler.on_width(width);
 7351|    432|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|    432|    }
 7357|  8.05k|    return begin;
 7358|  8.05k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7364|    198|{
 7365|    198|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|    198|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    198|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|    198|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7367:9): [True: 198, False: 0]
  |  Branch (7367:33): [True: 198, False: 0]
  ------------------
 7368|    198|        int prec = parse_simple_int(begin, end);
 7369|    198|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  864|    198|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 198, False: 0]
  |  |  ------------------
  ------------------
 7370|    198|            handler.on_precision(prec);
 7371|    198|        }
 7372|      0|        else {
 7373|      0|            handler.on_error("Invalid field precision");
 7374|      0|            return begin;
 7375|      0|        }
 7376|    198|    }
 7377|    198|    return begin;
 7378|    198|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|  7.84k|{
 9300|  7.84k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  7.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  7.84k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  7.84k|{
 9201|  7.84k|#define SCN_VISIT(Type)                                                \
 9202|  7.84k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  7.84k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  7.84k|    }                                                                  \
 9205|  7.84k|    else {                                                             \
 9206|  7.84k|        return vis(monostate_val);                                     \
 9207|  7.84k|    }
 9208|       |
 9209|  7.84k|    monostate monostate_val{};
 9210|       |
 9211|  7.84k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 7.84k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 7.84k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|    872|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 872, False: 6.97k]
  ------------------
 9217|    872|            SCN_VISIT(int);
  ------------------
  |  | 9202|    872|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    872|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    872|    }                                                                  \
  |  | 9205|    872|    else {                                                             \
  |  | 9206|    872|        return vis(monostate_val);                                     \
  |  | 9207|    872|    }
  ------------------
 9218|    872|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 7.84k]
  ------------------
 9219|    872|            SCN_VISIT(long);
  ------------------
  |  | 9202|    872|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    872|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    872|    }                                                                  \
  |  | 9205|    872|    else {                                                             \
  |  | 9206|    872|        return vis(monostate_val);                                     \
  |  | 9207|    872|    }
  ------------------
 9220|    872|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 7.84k]
  ------------------
 9221|    872|            SCN_VISIT(long long);
  ------------------
  |  | 9202|    872|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    872|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    872|    }                                                                  \
  |  | 9205|    872|    else {                                                             \
  |  | 9206|    872|        return vis(monostate_val);                                     \
  |  | 9207|    872|    }
  ------------------
 9222|    872|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 7.84k]
  ------------------
 9223|    872|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|    872|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    872|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    872|    }                                                                  \
  |  | 9205|    872|    else {                                                             \
  |  | 9206|    872|        return vis(monostate_val);                                     \
  |  | 9207|    872|    }
  ------------------
 9224|    872|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 7.84k]
  ------------------
 9225|    872|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|    872|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    872|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    872|    }                                                                  \
  |  | 9205|    872|    else {                                                             \
  |  | 9206|    872|        return vis(monostate_val);                                     \
  |  | 9207|    872|    }
  ------------------
 9226|  1.74k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 872, False: 6.97k]
  ------------------
 9227|  1.74k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  1.74k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.74k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.74k|    }                                                                  \
  |  | 9205|  1.74k|    else {                                                             \
  |  | 9206|  1.74k|        return vis(monostate_val);                                     \
  |  | 9207|  1.74k|    }
  ------------------
 9228|  1.74k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 7.84k]
  ------------------
 9229|  1.74k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  1.74k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.74k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.74k|    }                                                                  \
  |  | 9205|  1.74k|    else {                                                             \
  |  | 9206|  1.74k|        return vis(monostate_val);                                     \
  |  | 9207|  1.74k|    }
  ------------------
 9230|  1.74k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 7.84k]
  ------------------
 9231|  1.74k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  1.74k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.74k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.74k|    }                                                                  \
  |  | 9205|  1.74k|    else {                                                             \
  |  | 9206|  1.74k|        return vis(monostate_val);                                     \
  |  | 9207|  1.74k|    }
  ------------------
 9232|  2.61k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 872, False: 6.97k]
  ------------------
 9233|  2.61k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  2.61k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.61k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.61k|    }                                                                  \
  |  | 9205|  2.61k|    else {                                                             \
  |  | 9206|  2.61k|        return vis(monostate_val);                                     \
  |  | 9207|  2.61k|    }
  ------------------
 9234|  3.48k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 872, False: 6.97k]
  ------------------
 9235|  3.48k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  3.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.48k|    }                                                                  \
  |  | 9205|  3.48k|    else {                                                             \
  |  | 9206|  3.48k|        return vis(monostate_val);                                     \
  |  | 9207|  3.48k|    }
  ------------------
 9236|  4.36k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 872, False: 6.97k]
  ------------------
 9237|  4.36k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  4.36k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.36k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.36k|    }                                                                  \
  |  | 9205|  4.36k|    else {                                                             \
  |  | 9206|  4.36k|        return vis(monostate_val);                                     \
  |  | 9207|  4.36k|    }
  ------------------
 9238|  4.36k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 7.84k]
  ------------------
 9239|  4.36k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  4.36k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.36k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.36k|    }                                                                  \
  |  | 9205|  4.36k|    else {                                                             \
  |  | 9206|  4.36k|        return vis(monostate_val);                                     \
  |  | 9207|  4.36k|    }
  ------------------
 9240|  4.36k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 7.84k]
  ------------------
 9241|  4.36k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  4.36k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.36k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.36k|    }                                                                  \
  |  | 9205|  4.36k|    else {                                                             \
  |  | 9206|  4.36k|        return vis(monostate_val);                                     \
  |  | 9207|  4.36k|    }
  ------------------
 9242|  4.36k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 7.84k]
  ------------------
 9243|  4.36k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  4.36k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.36k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.36k|    }                                                                  \
  |  | 9205|  4.36k|    else {                                                             \
  |  | 9206|  4.36k|        return vis(monostate_val);                                     \
  |  | 9207|  4.36k|    }
  ------------------
 9244|  5.23k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 872, False: 6.97k]
  ------------------
 9245|  5.23k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  5.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.23k|    }                                                                  \
  |  | 9205|  5.23k|    else {                                                             \
  |  | 9206|  5.23k|        return vis(monostate_val);                                     \
  |  | 9207|  5.23k|    }
  ------------------
 9246|  5.23k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 7.84k]
  ------------------
 9247|  5.23k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  5.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.23k|    }                                                                  \
  |  | 9205|  5.23k|    else {                                                             \
  |  | 9206|  5.23k|        return vis(monostate_val);                                     \
  |  | 9207|  5.23k|    }
  ------------------
 9248|  6.10k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 872, False: 6.97k]
  ------------------
 9249|  6.10k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  6.10k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  6.10k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  6.10k|    }                                                                  \
  |  | 9205|  6.10k|    else {                                                             \
  |  | 9206|  6.10k|        return vis(monostate_val);                                     \
  |  | 9207|  6.10k|    }
  ------------------
 9250|  6.97k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 872, False: 6.97k]
  ------------------
 9251|  6.97k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  6.97k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  6.97k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  6.97k|    }                                                                  \
  |  | 9205|  6.97k|    else {                                                             \
  |  | 9206|  6.97k|        return vis(monostate_val);                                     \
  |  | 9207|  6.97k|    }
  ------------------
 9252|  6.97k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 7.84k]
  ------------------
 9253|  6.97k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  6.97k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  6.97k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  6.97k|    }                                                                  \
  |  | 9205|  6.97k|    else {                                                             \
  |  | 9206|  6.97k|        return vis(monostate_val);                                     \
  |  | 9207|  6.97k|    }
  ------------------
 9254|  7.84k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 872, False: 6.97k]
  ------------------
 9255|  7.84k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  7.84k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  7.84k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  7.84k|    }                                                                  \
  |  | 9205|  7.84k|    else {                                                             \
  |  | 9206|  7.84k|        return vis(monostate_val);                                     \
  |  | 9207|  7.84k|    }
  ------------------
 9256|  7.84k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 7.84k]
  ------------------
 9257|  7.84k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  7.84k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  7.84k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  7.84k|    }                                                                  \
  |  | 9205|  7.84k|    else {                                                             \
  |  | 9206|  7.84k|        return vis(monostate_val);                                     \
  |  | 9207|  7.84k|    }
  ------------------
 9258|  7.84k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 7.84k]
  ------------------
 9259|  7.84k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  7.84k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  7.84k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  7.84k|    }                                                                  \
  |  | 9205|  7.84k|    else {                                                             \
  |  | 9206|  7.84k|        return vis(monostate_val);                                     \
  |  | 9207|  7.84k|    }
  ------------------
 9260|       |
 9261|  7.84k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 7.84k]
  ------------------
 9262|  7.84k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  7.84k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  7.84k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 7.84k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 7.84k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  7.84k|            SCN_CLANG_POP
 9279|  7.84k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3479|     64|    {
 3480|     64|        return m_iterator;
 3481|     64|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1569|     16|        : base(std::in_place, std::forward<U>(val)),
 1570|     16|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     16|    {
 1572|     16|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|     16|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     16|    {
  442|     16|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     16|    {
 1316|     16|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3483|     32|    {
 3484|     32|        return m_sentinel;
 3485|     32|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3464|     32|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|     32|    static_cast<    \
  |  |  935|     32|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|     32|    static_cast<    \
  |  |  935|     32|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|     32|    {
 3466|     32|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  489|     32|    {
  490|     32|        return m_has_value;
  491|     32|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|     16|    {
 1769|     16|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     16|        return this->get_value();
 1771|     16|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  455|     16|    {
  456|     16|        return m_value;
  457|     16|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1978|     16|    {
 1979|     16|        return detail::transform_error_impl(std::move(*this),
 1980|     16|                                            std::forward<F>(f));
 1981|     16|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1461|     16|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|     16|    else {
 1472|     16|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|     16|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 1474|     16|                   ? result(*std::forward<Exp>(exp))
 1475|     16|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|     16|    }
 1479|     16|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|     16|    {
 1805|     16|        return std::move(value());
 1806|     16|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|     16|        : base(std::in_place, std::forward<U>(val)),
 1570|     16|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     16|    {
 1572|     16|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|     16|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     16|    {
  442|     16|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     16|    {
 1316|     16|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1739|     16|    {
 1740|     16|        return has_value();
 1741|     16|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|     32|    {
  490|     32|        return m_has_value;
  491|     32|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|     16|    {
 1805|     16|        return std::move(value());
 1806|     16|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|     16|    {
 1769|     16|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|     16|        return this->get_value();
 1771|     16|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|     16|    {
  456|     16|        return m_value;
  457|     16|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6176|  28.6k|    {
 6177|  28.6k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  28.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 28.6k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|  28.6k|        return static_cast<std::size_t>(m_desc &
 6182|  28.6k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|  28.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6202|  49.0k|    {
 6203|  49.0k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|  49.0k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6144|  20.3k|    {
 6145|  20.3k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  20.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20.3k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|  20.3k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  20.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20.3k]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|  20.3k|        const auto t = type(id);
 6157|  20.3k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  20.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18, False: 20.3k]
  |  |  ------------------
  ------------------
 6158|     18|            return {};
 6159|     18|        }
 6160|       |
 6161|  20.3k|        basic_scan_arg<Context> arg;
 6162|  20.3k|        arg.m_type = t;
 6163|  20.3k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 20.3k, False: 0]
  ------------------
 6164|  20.3k|            arg.m_value.ref_value = m_builtin_values[id];
 6165|  20.3k|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|  20.3k|        return arg;
 6170|  20.3k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5954|  20.3k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6211|  20.3k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|  20.3k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|  20.3k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|  20.3k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|  20.3k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6206|  20.3k|    {
 6207|  20.3k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|  20.3k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5960|  40.6k|    {
 5961|  40.6k|        return m_type != detail::arg_type::none_type;
 5962|  40.6k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|    144|{
 9300|    144|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|    144|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|    144|{
 9201|    144|#define SCN_VISIT(Type)                                                \
 9202|    144|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|    144|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|    144|    }                                                                  \
 9205|    144|    else {                                                             \
 9206|    144|        return vis(monostate_val);                                     \
 9207|    144|    }
 9208|       |
 9209|    144|    monostate monostate_val{};
 9210|       |
 9211|    144|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 144]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 144]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|     16|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 16, False: 128]
  ------------------
 9217|     16|            SCN_VISIT(int);
  ------------------
  |  | 9202|     16|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     16|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     16|    }                                                                  \
  |  | 9205|     16|    else {                                                             \
  |  | 9206|     16|        return vis(monostate_val);                                     \
  |  | 9207|     16|    }
  ------------------
 9218|     16|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 144]
  ------------------
 9219|     16|            SCN_VISIT(long);
  ------------------
  |  | 9202|     16|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     16|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     16|    }                                                                  \
  |  | 9205|     16|    else {                                                             \
  |  | 9206|     16|        return vis(monostate_val);                                     \
  |  | 9207|     16|    }
  ------------------
 9220|     16|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 144]
  ------------------
 9221|     16|            SCN_VISIT(long long);
  ------------------
  |  | 9202|     16|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     16|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     16|    }                                                                  \
  |  | 9205|     16|    else {                                                             \
  |  | 9206|     16|        return vis(monostate_val);                                     \
  |  | 9207|     16|    }
  ------------------
 9222|     16|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 144]
  ------------------
 9223|     16|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|     16|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     16|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     16|    }                                                                  \
  |  | 9205|     16|    else {                                                             \
  |  | 9206|     16|        return vis(monostate_val);                                     \
  |  | 9207|     16|    }
  ------------------
 9224|     16|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 144]
  ------------------
 9225|     16|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|     16|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     16|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     16|    }                                                                  \
  |  | 9205|     16|    else {                                                             \
  |  | 9206|     16|        return vis(monostate_val);                                     \
  |  | 9207|     16|    }
  ------------------
 9226|     32|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 16, False: 128]
  ------------------
 9227|     32|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|     32|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     32|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     32|    }                                                                  \
  |  | 9205|     32|    else {                                                             \
  |  | 9206|     32|        return vis(monostate_val);                                     \
  |  | 9207|     32|    }
  ------------------
 9228|     32|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 144]
  ------------------
 9229|     32|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|     32|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     32|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     32|    }                                                                  \
  |  | 9205|     32|    else {                                                             \
  |  | 9206|     32|        return vis(monostate_val);                                     \
  |  | 9207|     32|    }
  ------------------
 9230|     32|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 144]
  ------------------
 9231|     32|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|     32|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     32|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     32|    }                                                                  \
  |  | 9205|     32|    else {                                                             \
  |  | 9206|     32|        return vis(monostate_val);                                     \
  |  | 9207|     32|    }
  ------------------
 9232|     48|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 16, False: 128]
  ------------------
 9233|     48|            SCN_VISIT(void*);
  ------------------
  |  | 9202|     48|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     48|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     48|    }                                                                  \
  |  | 9205|     48|    else {                                                             \
  |  | 9206|     48|        return vis(monostate_val);                                     \
  |  | 9207|     48|    }
  ------------------
 9234|     64|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 16, False: 128]
  ------------------
 9235|     64|            SCN_VISIT(bool);
  ------------------
  |  | 9202|     64|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     64|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     64|    }                                                                  \
  |  | 9205|     64|    else {                                                             \
  |  | 9206|     64|        return vis(monostate_val);                                     \
  |  | 9207|     64|    }
  ------------------
 9236|     64|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 144]
  ------------------
 9237|     64|            SCN_VISIT(char);
  ------------------
  |  | 9202|     64|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     64|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     64|    }                                                                  \
  |  | 9205|     64|    else {                                                             \
  |  | 9206|     64|        return vis(monostate_val);                                     \
  |  | 9207|     64|    }
  ------------------
 9238|     80|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 16, False: 128]
  ------------------
 9239|     80|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|     80|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     80|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     80|    }                                                                  \
  |  | 9205|     80|    else {                                                             \
  |  | 9206|     80|        return vis(monostate_val);                                     \
  |  | 9207|     80|    }
  ------------------
 9240|     80|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 144]
  ------------------
 9241|     80|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|     80|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     80|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     80|    }                                                                  \
  |  | 9205|     80|    else {                                                             \
  |  | 9206|     80|        return vis(monostate_val);                                     \
  |  | 9207|     80|    }
  ------------------
 9242|     80|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 144]
  ------------------
 9243|     80|            SCN_VISIT(float);
  ------------------
  |  | 9202|     80|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     80|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     80|    }                                                                  \
  |  | 9205|     80|    else {                                                             \
  |  | 9206|     80|        return vis(monostate_val);                                     \
  |  | 9207|     80|    }
  ------------------
 9244|     96|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 16, False: 128]
  ------------------
 9245|     96|            SCN_VISIT(double);
  ------------------
  |  | 9202|     96|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     96|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     96|    }                                                                  \
  |  | 9205|     96|    else {                                                             \
  |  | 9206|     96|        return vis(monostate_val);                                     \
  |  | 9207|     96|    }
  ------------------
 9246|     96|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 144]
  ------------------
 9247|     96|            SCN_VISIT(long double);
  ------------------
  |  | 9202|     96|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     96|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     96|    }                                                                  \
  |  | 9205|     96|    else {                                                             \
  |  | 9206|     96|        return vis(monostate_val);                                     \
  |  | 9207|     96|    }
  ------------------
 9248|     96|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 144]
  ------------------
 9249|     96|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|     96|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|     96|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|     96|    }                                                                  \
  |  | 9205|     96|    else {                                                             \
  |  | 9206|     96|        return vis(monostate_val);                                     \
  |  | 9207|     96|    }
  ------------------
 9250|    112|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 16, False: 128]
  ------------------
 9251|    112|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|    112|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    112|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    112|    }                                                                  \
  |  | 9205|    112|    else {                                                             \
  |  | 9206|    112|        return vis(monostate_val);                                     \
  |  | 9207|    112|    }
  ------------------
 9252|    128|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 16, False: 128]
  ------------------
 9253|    128|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|    128|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    128|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    128|    }                                                                  \
  |  | 9205|    128|    else {                                                             \
  |  | 9206|    128|        return vis(monostate_val);                                     \
  |  | 9207|    128|    }
  ------------------
 9254|    144|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 16, False: 128]
  ------------------
 9255|    144|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|    144|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    144|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    144|    }                                                                  \
  |  | 9205|    144|    else {                                                             \
  |  | 9206|    144|        return vis(monostate_val);                                     \
  |  | 9207|    144|    }
  ------------------
 9256|    144|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 144]
  ------------------
 9257|    144|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|    144|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    144|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    144|    }                                                                  \
  |  | 9205|    144|    else {                                                             \
  |  | 9206|    144|        return vis(monostate_val);                                     \
  |  | 9207|    144|    }
  ------------------
 9258|    144|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 144]
  ------------------
 9259|    144|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|    144|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    144|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    144|    }                                                                  \
  |  | 9205|    144|    else {                                                             \
  |  | 9206|    144|        return vis(monostate_val);                                     \
  |  | 9207|    144|    }
  ------------------
 9260|       |
 9261|    144|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 144]
  ------------------
 9262|    144|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|    144|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|    144|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 144]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 144]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|    144|            SCN_CLANG_POP
 9279|    144|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|  60.7k|{
 6006|  60.7k|    return arg.m_type;
 6007|  60.7k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|  20.2k|{
 6018|  20.2k|    return arg.m_value;
 6019|  20.2k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 6256|  28.6k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|  28.6k|    {
 6258|  28.6k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  28.6k|    {
 3075|  28.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  28.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  28.6k|    {
 3041|  28.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  28.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  28.6k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  28.6k|{
 7793|  28.6k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  28.6k|    handler.check_args_exhausted();
 7795|  28.6k|    return handler.get_error();
 7796|  28.6k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  28.6k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  28.6k|    auto begin = format.data();
 7761|  28.6k|    auto it = begin;
 7762|  28.6k|    const auto end = format.data() + format.size();
 7763|       |
 7764|  59.9M|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 59.9M, False: 8.07k]
  ------------------
 7765|  59.9M|        const auto ch = *it++;
 7766|  59.9M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 20.5k, False: 59.8M]
  ------------------
 7767|  20.5k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  20.5k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  20.5k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 20.3k, False: 188]
  ------------------
 7771|  20.3k|                return;
 7772|  20.3k|            }
 7773|  20.5k|        }
 7774|  59.8M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 1.54k, False: 59.8M]
  ------------------
 7775|  1.54k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|  3.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 228, False: 1.31k]
  |  |  |  Branch (865:45): [True: 18, False: 1.52k]
  |  |  |  Branch (865:45): [True: 210, False: 1.31k]
  |  |  ------------------
  ------------------
 7776|    228|                handler.on_error("Unmatched '}' in format string");
 7777|    228|                return;
 7778|    228|            }
 7779|       |
 7780|  1.31k|            handler.on_literal_text(begin, it);
 7781|  1.31k|            begin = ++it;
 7782|  1.31k|        }
 7783|  59.9M|    }
 7784|       |
 7785|  8.07k|    handler.on_literal_text(begin, end);
 7786|  8.07k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7689|  20.5k|{
 7690|  20.5k|    struct id_adapter {
 7691|  20.5k|        constexpr void operator()()
 7692|  20.5k|        {
 7693|  20.5k|            arg_id = handler.on_arg_id();
 7694|  20.5k|        }
 7695|  20.5k|        constexpr void operator()(std::size_t id)
 7696|  20.5k|        {
 7697|  20.5k|            arg_id = handler.on_arg_id(id);
 7698|  20.5k|        }
 7699|       |
 7700|  20.5k|        constexpr void on_error(const char* msg)
 7701|  20.5k|        {
 7702|  20.5k|            SCN_UNLIKELY_ATTR
 7703|  20.5k|            handler.on_error(msg);
 7704|  20.5k|        }
 7705|       |
 7706|  20.5k|        Handler& handler;
 7707|  20.5k|        std::size_t arg_id;
 7708|  20.5k|    };
 7709|       |
 7710|  20.5k|    ++begin;
 7711|  20.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20.5k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  20.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 144, False: 20.3k]
  ------------------
 7717|    144|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|    144|    }
 7719|  20.3k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 20.3k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  20.3k|    else {
 7723|  20.3k|        auto adapter = id_adapter{handler, 0};
 7724|  20.3k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  20.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  20.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20.3k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  20.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 20.3k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  20.3k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 20.2k, False: 144]
  ------------------
 7735|  20.2k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20.2k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  20.2k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  20.2k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  40.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 108, False: 20.1k]
  |  |  |  Branch (865:45): [True: 0, False: 20.2k]
  |  |  |  Branch (865:45): [True: 108, False: 20.1k]
  |  |  ------------------
  ------------------
 7741|    108|                handler.on_error("Unknown format specifier");
 7742|    108|                return begin;
 7743|    108|            }
 7744|  20.2k|        }
 7745|    144|        else {
 7746|    144|            SCN_UNLIKELY_ATTR
 7747|    144|            handler.on_error("Missing '}' in format string");
 7748|    144|            return begin;
 7749|    144|        }
 7750|  20.3k|    }
 7751|  20.2k|    return begin + 1;
 7752|  20.5k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8831|  20.3k|    {
 8832|  20.3k|        return m_args.get(id);
 8833|  20.3k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6285|  20.3k|    {
 6286|  20.3k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  20.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20.3k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|  20.3k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|  20.3k|        do_check_arg_id(id);
 6294|  20.3k|        return id;
 6295|  20.3k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6315|      6|    {
 6316|      6|        m_error = unexpected(detail::handle_error(
 6317|      6|            scan_error{scan_error::invalid_format_string, msg}));
 6318|      6|        return m_error.error();
 6319|      6|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6805|  20.3k|{
 6806|  20.3k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|  20.3k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|  20.3k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  20.3k|{
 7191|  20.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  20.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  20.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 20.3k, False: 0]
  |  Branch (7192:26): [True: 150, False: 20.2k]
  ------------------
 7193|    150|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|    150|    }
 7195|       |
 7196|  20.2k|    handler();
 7197|  20.2k|    return begin;
 7198|  20.3k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7160|    150|{
 7161|    150|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|    150|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    150|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7162|       |
 7163|    150|    CharT c = *begin;
 7164|    150|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7164:9): [True: 36, False: 114]
  |  Branch (7164:27): [True: 108, False: 6]
  ------------------
 7165|    144|        handler.on_error("Invalid argument ID");
 7166|    144|        return begin;
 7167|    144|    }
 7168|       |
 7169|      6|    int idx = 0;
 7170|      6|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7170:9): [True: 6, False: 0]
  ------------------
 7171|      6|        idx = parse_simple_int(begin, end);
 7172|      6|    }
 7173|      0|    else {
 7174|      0|        ++begin;
 7175|      0|    }
 7176|       |
 7177|      6|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7177:9): [True: 0, False: 6]
  |  Branch (7177:26): [True: 6, False: 0]
  |  Branch (7177:50): [True: 0, False: 6]
  ------------------
 7178|      0|        handler.on_error("Invalid argument ID");
 7179|      0|        return begin;
 7180|      0|    }
 7181|      6|    handler(idx);
 7182|       |
 7183|      6|    return begin;
 7184|      6|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7701|    144|        {
 7702|    144|            SCN_UNLIKELY_ATTR
 7703|    144|            handler.on_error(msg);
 7704|    144|        }
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7139|  4.27k|{
 7140|  4.27k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  4.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|  4.27k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  4.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7142|       |
 7143|  4.27k|    unsigned long long value = 0;
 7144|  4.63k|    do {
 7145|  4.63k|        value *= 10;
 7146|  4.63k|        value += static_cast<unsigned long long>(*begin - '0');
 7147|  4.63k|        if (value >
  ------------------
  |  Branch (7147:13): [True: 0, False: 4.63k]
  ------------------
 7148|  4.63k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7149|      0|            return -1;
 7150|      0|        }
 7151|  4.63k|        ++begin;
 7152|  4.63k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7152:14): [True: 4.63k, False: 0]
  |  Branch (7152:30): [True: 906, False: 3.72k]
  |  Branch (7152:47): [True: 360, False: 546]
  ------------------
 7153|  4.27k|    return static_cast<int>(value);
 7154|  4.27k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7696|      6|        {
 7697|      6|            arg_id = handler.on_arg_id(id);
 7698|      6|        }
_ZN3scn2v424basic_scan_parse_contextIwE12check_arg_idEm:
 6298|      6|    {
 6299|      6|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 6300|      6|            on_error(
 6301|      6|                "Cannot switch from manual to automatic argument indexing");
 6302|      6|            return;
 6303|      6|        }
 6304|      0|        m_next_arg_id = -1;
 6305|      0|        do_check_arg_id(id);
 6306|      0|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  20.2k|        {
 7693|  20.2k|            arg_id = handler.on_arg_id();
 7694|  20.2k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6280|  20.1k|    {
 6281|  20.1k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|  20.1k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6269|  40.3k|    {
 6270|  40.3k|        return m_format.data();
 6271|  40.3k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|  20.2k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|  20.2k|    {
 7871|  20.2k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  20.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|  20.2k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7605|  20.2k|{
 7606|  20.2k|    auto do_presentation = [&]() -> const CharT* {
 7607|  20.2k|        if (*begin == CharT{'['}) {
 7608|  20.2k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  20.2k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|  20.2k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|  20.2k|                return begin;
 7614|  20.2k|            }
 7615|  20.2k|            handler.on_character_set_string(set);
 7616|  20.2k|            return begin;
 7617|  20.2k|        }
 7618|  20.2k|        if (*begin == CharT{'/'}) {
 7619|  20.2k|            return parse_presentation_regex(begin, end, handler);
 7620|  20.2k|        }
 7621|  20.2k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  20.2k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|  20.2k|            handler.on_error("Invalid type specifier in format string");
 7624|  20.2k|            return begin;
 7625|  20.2k|        }
 7626|  20.2k|        handler.on_type(type);
 7627|  20.2k|        return begin;
 7628|  20.2k|    };
 7629|       |
 7630|  20.2k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 20.2k, False: 0]
  |  Branch (7630:28): [True: 126, False: 20.1k]
  ------------------
 7631|  20.2k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 0, False: 126]
  |  Branch (7631:36): [True: 0, False: 0]
  ------------------
 7632|      0|        return do_presentation();
 7633|      0|    }
 7634|       |
 7635|  20.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20.2k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  20.2k|    begin = parse_align(begin, end, handler);
 7641|  20.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20.2k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  20.2k|    begin = parse_width(begin, end, handler);
 7647|  20.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20.2k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  20.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 540, False: 19.7k]
  ------------------
 7653|    540|        ++begin;
 7654|    540|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    540|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 540]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|    540|        begin = parse_precision(begin, end, handler);
 7659|    540|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    540|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 540]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|    540|    }
 7664|       |
 7665|  20.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 0, False: 20.2k]
  ------------------
 7666|      0|        handler.on_localized();
 7667|      0|        ++begin;
 7668|      0|    }
 7669|  20.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20.2k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  20.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 20.2k, False: 0]
  |  Branch (7674:25): [True: 19.7k, False: 510]
  ------------------
 7675|  19.7k|        do_presentation();
 7676|  19.7k|    }
 7677|  20.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18, False: 20.2k]
  |  |  ------------------
  ------------------
 7678|     18|        handler.on_error("Unexpected end of format string");
 7679|     18|        return begin;
 7680|     18|    }
 7681|       |
 7682|  20.2k|    return begin;
 7683|  20.2k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7254|    126|{
 7255|    126|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 0, False: 126]
  |  Branch (7255:33): [True: 0, False: 0]
  ------------------
 7256|    126|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 0, False: 126]
  |  Branch (7256:33): [True: 0, False: 0]
  ------------------
 7257|    126|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|  19.7k|    auto do_presentation = [&]() -> const CharT* {
 7607|  19.7k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 180, False: 19.5k]
  ------------------
 7608|    180|            auto set = parse_presentation_set(begin, end, handler);
 7609|    180|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 180]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|    180|            handler.on_character_set_string(set);
 7616|    180|            return begin;
 7617|    180|        }
 7618|  19.5k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 19.3k, False: 228]
  ------------------
 7619|  19.3k|            return parse_presentation_regex(begin, end, handler);
 7620|  19.3k|        }
 7621|    228|        presentation_type type = parse_presentation_type(*begin++);
 7622|    228|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|    228|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 102, False: 126]
  |  |  ------------------
  ------------------
 7623|    102|            handler.on_error("Invalid type specifier in format string");
 7624|    102|            return begin;
 7625|    102|        }
 7626|    126|        handler.on_type(type);
 7627|    126|        return begin;
 7628|    228|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7444|    180|{
 7445|    180|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|    180|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    180|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|    180|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|    180|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    180|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|    180|    auto start = begin;
 7449|    180|    ++begin;
 7450|       |
 7451|    180|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 180]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|    180|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 0, False: 180]
  ------------------
 7458|      0|        handler.on_charset_inverted();
 7459|      0|        ++begin;
 7460|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 0, False: 0]
  ------------------
 7467|      0|            handler.on_charset_single(char32_t{']'});
 7468|      0|            ++begin;
 7469|      0|        }
 7470|      0|    }
 7471|    180|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 180]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|  7.74k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 7.74k, False: 0]
  ------------------
 7476|  7.74k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  7.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.74k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|  7.74k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 180, False: 7.56k]
  ------------------
 7481|    180|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|    180|        }
 7483|       |
 7484|  7.56k|        parse_presentation_set_literal(begin, end, handler);
 7485|  7.56k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|    180|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7408|  7.56k|{
 7409|  7.56k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  7.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  7.56k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  7.56k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  7.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.56k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|  7.56k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 7.56k, False: 0]
  |  Branch (7416:25): [True: 396, False: 7.16k]
  |  Branch (7416:49): [True: 396, False: 0]
  ------------------
 7417|  7.56k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 396, False: 0]
  ------------------
 7418|    396|        ++begin;
 7419|       |
 7420|    396|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|    396|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|    396|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 396]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|    396|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|    396|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 396]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|    396|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|    396|        return;
 7434|    396|    }
 7435|       |
 7436|  7.16k|    handler.on_charset_single(cp_first);
 7437|  7.16k|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7384|  7.95k|{
 7385|  7.95k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  7.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  7.95k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  7.95k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.95k]
  |  |  |  Branch (865:45): [True: 0, False: 7.95k]
  |  |  |  Branch (865:45): [True: 0, False: 7.95k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|  7.95k|    const auto cp =
 7394|  7.95k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  7.95k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  7.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.95k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|  7.95k|    begin += len;
 7401|  7.95k|    return cp;
 7402|  7.95k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7098|    180|    {
 7099|    180|        m_specs.charset_string_data = fmt.data();
 7100|    180|        m_specs.charset_string_size = fmt.size();
 7101|    180|        on_type(presentation_type::string_set);
 7102|    180|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_RSK_SK_OT0_:
 7496|  19.3k|{
 7497|  19.3k|#if !SCN_DISABLE_REGEX
 7498|  19.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7499|  19.3k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  930|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7500|       |
 7501|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7502|       |                  std::is_same_v<CharT, wchar_t>) {
 7503|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 7504|       |        return begin;
 7505|       |    }
 7506|       |
 7507|  19.3k|    auto start = begin;
 7508|  19.3k|    ++begin;
 7509|       |
 7510|  19.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 7511|      0|        handler.on_error("Unexpected end of regex in format string");
 7512|      0|        return begin;
 7513|      0|    }
 7514|       |
 7515|  19.3k|    handler.on_type(presentation_type::regex);
 7516|  2.53M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7516:12): [True: 2.53M, False: 18]
  ------------------
 7517|  2.53M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7517:13): [True: 21.7k, False: 2.51M]
  ------------------
 7518|  21.7k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7518:17): [True: 19.3k, False: 2.39k]
  ------------------
 7519|  19.3k|                break;
 7520|  19.3k|            }
 7521|  2.39k|            else {
 7522|  2.39k|                handler.on_type(presentation_type::regex_escaped);
 7523|  2.39k|            }
 7524|  21.7k|        }
 7525|  2.53M|    }
 7526|  19.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18, False: 19.3k]
  |  |  ------------------
  ------------------
 7527|     18|        handler.on_error("Unexpected end of regex in format string");
 7528|     18|        return begin;
 7529|     18|    }
 7530|       |
 7531|  19.3k|    auto regex_end = begin;
 7532|  19.3k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7533|  19.3k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  865|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 7534|      0|        handler.on_error("Invalid (empty) regex in format string");
 7535|      0|        return begin;
 7536|      0|    }
 7537|  19.3k|    handler.on_regex_pattern(regex_pattern);
 7538|  19.3k|    ++begin;
 7539|       |
 7540|  19.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 7541|      0|        handler.on_error("Unexpected end of regex in format string");
 7542|      0|        return begin;
 7543|      0|    }
 7544|       |
 7545|  19.3k|    regex_flags flags{regex_flags::none};
 7546|  19.3k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7547|  19.3k|        {{'m', regex_flags::multiline},
 7548|  19.3k|         {'s', regex_flags::singleline},
 7549|  19.3k|         {'i', regex_flags::nocase},
 7550|  19.3k|         {'n', regex_flags::nocapture}}};
 7551|  19.9k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7551:12): [True: 19.9k, False: 0]
  ------------------
 7552|  19.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7552:13): [True: 19.3k, False: 612]
  ------------------
 7553|  19.3k|            break;
 7554|  19.3k|        }
 7555|    612|        bool found_flag = false;
 7556|  1.76k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7556:24): [True: 1.76k, False: 0]
  ------------------
 7557|  1.76k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7557:17): [True: 1.15k, False: 612]
  ------------------
 7558|  1.15k|                continue;
 7559|  1.15k|            }
 7560|    612|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7560:17): [True: 0, False: 612]
  ------------------
 7561|      0|                handler.on_error("Flag set multiple times in regex");
 7562|      0|                return begin;
 7563|      0|            }
 7564|    612|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7565|    612|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (7565:17): [True: 0, False: 612]
  ------------------
 7566|       |                // clang-format off
 7567|      0|                handler.on_error("/s flag for regex isn't supported by regex backend");
 7568|       |                // clang-format on
 7569|      0|            }
 7570|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7571|       |            if (*begin == CharT{'m'}) {
 7572|       |                // clang-format off
 7573|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7574|       |                // clang-format on
 7575|       |            }
 7576|       |#endif
 7577|    612|#endif
 7578|    612|            flags |= flag.second;
 7579|    612|            found_flag = true;
 7580|    612|            break;
 7581|    612|        }
 7582|    612|        if (!found_flag) {
  ------------------
  |  Branch (7582:13): [True: 0, False: 612]
  ------------------
 7583|      0|            handler.on_error("Invalid flag in regex");
 7584|      0|            return begin;
 7585|      0|        }
 7586|    612|    }
 7587|  19.3k|    handler.on_regex_flags(flags);
 7588|       |
 7589|  19.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 7590|      0|        handler.on_error("Unexpected end of regex in format string");
 7591|      0|        return begin;
 7592|      0|    }
 7593|       |
 7594|  19.3k|    return begin;
 7595|       |#else
 7596|       |    handler.on_error("Regular expression support is disabled");
 7597|       |    return {};
 7598|       |#endif
 7599|  19.3k|}
_ZN3scn2v46detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7106|  19.3k|    {
 7107|  19.3k|        m_specs.charset_string_data = pattern.data();
 7108|  19.3k|        m_specs.charset_string_size = pattern.size();
 7109|  19.3k|    }
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7202|    228|{
 7203|    228|    switch (type) {
 7204|      0|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 0, False: 228]
  ------------------
 7205|      0|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 0, False: 228]
  ------------------
 7206|      0|            return presentation_type::int_binary;
 7207|      0|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 0, False: 228]
  ------------------
 7208|      0|            return presentation_type::int_decimal;
 7209|      0|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 0, False: 228]
  ------------------
 7210|      0|            return presentation_type::int_generic;
 7211|      0|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 0, False: 228]
  ------------------
 7212|      0|            return presentation_type::int_unsigned_decimal;
 7213|      0|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 0, False: 228]
  ------------------
 7214|      0|            return presentation_type::int_octal;
 7215|      0|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 0, False: 228]
  ------------------
 7216|      0|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 0, False: 228]
  ------------------
 7217|      0|            return presentation_type::int_hex;
 7218|      0|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 0, False: 228]
  ------------------
 7219|      0|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 0, False: 228]
  ------------------
 7220|      0|            return presentation_type::int_arbitrary_base;
 7221|      0|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 0, False: 228]
  ------------------
 7222|      0|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 0, False: 228]
  ------------------
 7223|      0|            return presentation_type::float_hex;
 7224|      0|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 0, False: 228]
  ------------------
 7225|      0|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 0, False: 228]
  ------------------
 7226|      0|            return presentation_type::float_scientific;
 7227|      0|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 0, False: 228]
  ------------------
 7228|      0|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 0, False: 228]
  ------------------
 7229|      0|            return presentation_type::float_fixed;
 7230|      0|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 0, False: 228]
  ------------------
 7231|      0|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 0, False: 228]
  ------------------
 7232|      0|            return presentation_type::float_general;
 7233|    108|        case 's':
  ------------------
  |  Branch (7233:9): [True: 108, False: 120]
  ------------------
 7234|    108|            return presentation_type::string;
 7235|     18|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 18, False: 210]
  ------------------
 7236|     18|            return presentation_type::character;
 7237|      0|        case '?':
  ------------------
  |  Branch (7237:9): [True: 0, False: 228]
  ------------------
 7238|      0|            return presentation_type::escaped_character;
 7239|      0|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 0, False: 228]
  ------------------
 7240|      0|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 228]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 228]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|    102|        default:
  ------------------
  |  Branch (7247:9): [True: 102, False: 126]
  ------------------
 7248|    102|            return presentation_type::none;
 7249|    228|    }
 7250|    228|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7279|  20.2k|{
 7280|  20.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  20.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  20.2k|    auto check_align = [](wchar_t ch) {
 7283|  20.2k|        switch (ch) {
 7284|  20.2k|            case L'<':
 7285|  20.2k|                return align_type::left;
 7286|  20.2k|            case L'>':
 7287|  20.2k|                return align_type::right;
 7288|  20.2k|            case L'^':
 7289|  20.2k|                return align_type::center;
 7290|  20.2k|            default:
 7291|  20.2k|                return align_type::none;
 7292|  20.2k|        }
 7293|  20.2k|    };
 7294|       |
 7295|  20.2k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  20.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  40.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20.2k]
  |  |  |  Branch (865:45): [True: 0, False: 20.2k]
  |  |  |  Branch (865:45): [True: 0, False: 20.2k]
  |  |  ------------------
  ------------------
 7297|  20.2k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  20.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  20.2k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  20.2k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  20.2k|    const auto begin_before_fill = begin;
 7307|  20.2k|    begin += potential_fill_len;
 7308|       |
 7309|  20.2k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 20.2k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  20.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  20.2k|    const auto begin_after_fill = begin;
 7315|  20.2k|    ++begin;
 7316|       |
 7317|  20.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 20.2k, False: 0]
  ------------------
 7318|  20.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20.2k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  20.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 180, False: 20.0k]
  ------------------
 7323|    180|            return begin_before_fill;
 7324|    180|        }
 7325|  20.2k|    }
 7326|       |
 7327|  20.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 5.70k, False: 14.3k]
  ------------------
 7328|  5.70k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 180, False: 5.52k]
  ------------------
 7329|    180|            handler.on_align(potential_align_on_fill);
 7330|    180|            return begin_after_fill;
 7331|    180|        }
 7332|  5.52k|        return begin_before_fill;
 7333|  5.70k|    }
 7334|       |
 7335|  14.3k|    handler.on_fill(potential_fill);
 7336|  14.3k|    handler.on_align(potential_align_after_fill);
 7337|  14.3k|    return begin;
 7338|  20.0k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7261|  20.2k|{
 7262|  20.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  20.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|  20.2k|    if constexpr (sizeof(CharT) != 1) {
 7264|  20.2k|        return 1;
 7265|       |    }
 7266|       |    else {
 7267|       |        const auto lengths =
 7268|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|       |            "\3\4";
 7270|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|       |        return len;
 7272|       |    }
 7273|  20.2k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|  40.5k|    auto check_align = [](wchar_t ch) {
 7283|  40.5k|        switch (ch) {
 7284|    144|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 144, False: 40.3k]
  ------------------
 7285|    144|                return align_type::left;
 7286|     36|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 36, False: 40.4k]
  ------------------
 7287|     36|                return align_type::right;
 7288|  14.3k|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 14.3k, False: 26.1k]
  ------------------
 7289|  14.3k|                return align_type::center;
 7290|  25.9k|            default:
  ------------------
  |  Branch (7290:13): [True: 25.9k, False: 14.5k]
  ------------------
 7291|  25.9k|                return align_type::none;
 7292|  40.5k|        }
 7293|  40.5k|    };
_ZN3scn2v46detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7019|  14.3k|    {
 7020|  14.3k|        m_specs.fill = fill;
 7021|  14.3k|    }
_ZN3scn2v46detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6900|  14.3k|    {
 6901|  14.3k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6902|  14.3k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6903|       |        if constexpr (sizeof(CharT) == 1) {
 6904|       |            for (size_t i = 0; i < s.size(); ++i) {
 6905|       |                SCN_GCC_PUSH
 6906|       |                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6907|       |                m_data[i] = s[i];
 6908|       |                SCN_GCC_POP
 6909|       |            }
 6910|       |            m_size = static_cast<unsigned char>(s.size());
 6911|       |        }
 6912|       |        else if constexpr (sizeof(CharT) == 2) {
 6913|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6914|       |            m_data[1] =
 6915|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6916|       |            if (s.size() == 1) {
 6917|       |                return;
 6918|       |            }
 6919|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6920|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6921|       |        }
 6922|  14.3k|        else {
 6923|  14.3k|            const auto front = static_cast<unsigned>(s.front());
 6924|  14.3k|            m_data[0] = static_cast<char>(front);
 6925|  14.3k|            m_data[1] = static_cast<char>(front >> 8);
 6926|  14.3k|            m_data[2] = static_cast<char>(front >> 16);
 6927|  14.3k|            m_data[3] = static_cast<char>(front >> 24);
 6928|  14.3k|        }
 6929|  14.3k|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7344|  20.2k|{
 7345|  20.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  20.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  20.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 4.00k, False: 16.2k]
  |  Branch (7347:33): [True: 3.72k, False: 282]
  ------------------
 7348|  3.72k|        int width = parse_simple_int(begin, end);
 7349|  3.72k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  3.72k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.72k, False: 0]
  |  |  ------------------
  ------------------
 7350|  3.72k|            handler.on_width(width);
 7351|  3.72k|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|  3.72k|    }
 7357|  20.2k|    return begin;
 7358|  20.2k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7364|    540|{
 7365|    540|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|    540|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    540|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|    540|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7367:9): [True: 540, False: 0]
  |  Branch (7367:33): [True: 540, False: 0]
  ------------------
 7368|    540|        int prec = parse_simple_int(begin, end);
 7369|    540|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  864|    540|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 540, False: 0]
  |  |  ------------------
  ------------------
 7370|    540|            handler.on_precision(prec);
 7371|    540|        }
 7372|      0|        else {
 7373|      0|            handler.on_error("Invalid field precision");
 7374|      0|            return begin;
 7375|      0|        }
 7376|    540|    }
 7377|    540|    return begin;
 7378|    540|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|  20.1k|{
 9300|  20.1k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  20.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  20.1k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  20.1k|{
 9201|  20.1k|#define SCN_VISIT(Type)                                                \
 9202|  20.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  20.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  20.1k|    }                                                                  \
 9205|  20.1k|    else {                                                             \
 9206|  20.1k|        return vis(monostate_val);                                     \
 9207|  20.1k|    }
 9208|       |
 9209|  20.1k|    monostate monostate_val{};
 9210|       |
 9211|  20.1k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 20.1k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 20.1k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|  2.23k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 2.23k, False: 17.8k]
  ------------------
 9217|  2.23k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  2.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.23k|    }                                                                  \
  |  | 9205|  2.23k|    else {                                                             \
  |  | 9206|  2.23k|        return vis(monostate_val);                                     \
  |  | 9207|  2.23k|    }
  ------------------
 9218|  2.23k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 20.1k]
  ------------------
 9219|  2.23k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  2.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.23k|    }                                                                  \
  |  | 9205|  2.23k|    else {                                                             \
  |  | 9206|  2.23k|        return vis(monostate_val);                                     \
  |  | 9207|  2.23k|    }
  ------------------
 9220|  2.23k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 20.1k]
  ------------------
 9221|  2.23k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  2.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.23k|    }                                                                  \
  |  | 9205|  2.23k|    else {                                                             \
  |  | 9206|  2.23k|        return vis(monostate_val);                                     \
  |  | 9207|  2.23k|    }
  ------------------
 9222|  2.23k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 20.1k]
  ------------------
 9223|  2.23k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  2.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.23k|    }                                                                  \
  |  | 9205|  2.23k|    else {                                                             \
  |  | 9206|  2.23k|        return vis(monostate_val);                                     \
  |  | 9207|  2.23k|    }
  ------------------
 9224|  2.23k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 20.1k]
  ------------------
 9225|  2.23k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  2.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.23k|    }                                                                  \
  |  | 9205|  2.23k|    else {                                                             \
  |  | 9206|  2.23k|        return vis(monostate_val);                                     \
  |  | 9207|  2.23k|    }
  ------------------
 9226|  4.46k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 2.23k, False: 17.8k]
  ------------------
 9227|  4.46k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  4.46k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.46k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.46k|    }                                                                  \
  |  | 9205|  4.46k|    else {                                                             \
  |  | 9206|  4.46k|        return vis(monostate_val);                                     \
  |  | 9207|  4.46k|    }
  ------------------
 9228|  4.46k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 20.1k]
  ------------------
 9229|  4.46k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  4.46k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.46k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.46k|    }                                                                  \
  |  | 9205|  4.46k|    else {                                                             \
  |  | 9206|  4.46k|        return vis(monostate_val);                                     \
  |  | 9207|  4.46k|    }
  ------------------
 9230|  4.46k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 20.1k]
  ------------------
 9231|  4.46k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  4.46k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.46k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.46k|    }                                                                  \
  |  | 9205|  4.46k|    else {                                                             \
  |  | 9206|  4.46k|        return vis(monostate_val);                                     \
  |  | 9207|  4.46k|    }
  ------------------
 9232|  6.70k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 2.23k, False: 17.8k]
  ------------------
 9233|  6.70k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  6.70k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  6.70k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  6.70k|    }                                                                  \
  |  | 9205|  6.70k|    else {                                                             \
  |  | 9206|  6.70k|        return vis(monostate_val);                                     \
  |  | 9207|  6.70k|    }
  ------------------
 9234|  8.93k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 2.23k, False: 17.8k]
  ------------------
 9235|  8.93k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  8.93k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.93k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.93k|    }                                                                  \
  |  | 9205|  8.93k|    else {                                                             \
  |  | 9206|  8.93k|        return vis(monostate_val);                                     \
  |  | 9207|  8.93k|    }
  ------------------
 9236|  8.93k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 20.1k]
  ------------------
 9237|  8.93k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  8.93k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.93k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.93k|    }                                                                  \
  |  | 9205|  8.93k|    else {                                                             \
  |  | 9206|  8.93k|        return vis(monostate_val);                                     \
  |  | 9207|  8.93k|    }
  ------------------
 9238|  11.1k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 2.23k, False: 17.8k]
  ------------------
 9239|  11.1k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  11.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  11.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  11.1k|    }                                                                  \
  |  | 9205|  11.1k|    else {                                                             \
  |  | 9206|  11.1k|        return vis(monostate_val);                                     \
  |  | 9207|  11.1k|    }
  ------------------
 9240|  11.1k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 20.1k]
  ------------------
 9241|  11.1k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  11.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  11.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  11.1k|    }                                                                  \
  |  | 9205|  11.1k|    else {                                                             \
  |  | 9206|  11.1k|        return vis(monostate_val);                                     \
  |  | 9207|  11.1k|    }
  ------------------
 9242|  11.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 20.1k]
  ------------------
 9243|  11.1k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  11.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  11.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  11.1k|    }                                                                  \
  |  | 9205|  11.1k|    else {                                                             \
  |  | 9206|  11.1k|        return vis(monostate_val);                                     \
  |  | 9207|  11.1k|    }
  ------------------
 9244|  13.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 2.23k, False: 17.8k]
  ------------------
 9245|  13.4k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  13.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  13.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  13.4k|    }                                                                  \
  |  | 9205|  13.4k|    else {                                                             \
  |  | 9206|  13.4k|        return vis(monostate_val);                                     \
  |  | 9207|  13.4k|    }
  ------------------
 9246|  13.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 20.1k]
  ------------------
 9247|  13.4k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  13.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  13.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  13.4k|    }                                                                  \
  |  | 9205|  13.4k|    else {                                                             \
  |  | 9206|  13.4k|        return vis(monostate_val);                                     \
  |  | 9207|  13.4k|    }
  ------------------
 9248|  13.4k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 20.1k]
  ------------------
 9249|  13.4k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  13.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  13.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  13.4k|    }                                                                  \
  |  | 9205|  13.4k|    else {                                                             \
  |  | 9206|  13.4k|        return vis(monostate_val);                                     \
  |  | 9207|  13.4k|    }
  ------------------
 9250|  15.6k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 2.23k, False: 17.8k]
  ------------------
 9251|  15.6k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  15.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  15.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  15.6k|    }                                                                  \
  |  | 9205|  15.6k|    else {                                                             \
  |  | 9206|  15.6k|        return vis(monostate_val);                                     \
  |  | 9207|  15.6k|    }
  ------------------
 9252|  17.8k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 2.23k, False: 17.8k]
  ------------------
 9253|  17.8k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  17.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.8k|    }                                                                  \
  |  | 9205|  17.8k|    else {                                                             \
  |  | 9206|  17.8k|        return vis(monostate_val);                                     \
  |  | 9207|  17.8k|    }
  ------------------
 9254|  20.1k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 2.23k, False: 17.8k]
  ------------------
 9255|  20.1k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  20.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  20.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  20.1k|    }                                                                  \
  |  | 9205|  20.1k|    else {                                                             \
  |  | 9206|  20.1k|        return vis(monostate_val);                                     \
  |  | 9207|  20.1k|    }
  ------------------
 9256|  20.1k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 20.1k]
  ------------------
 9257|  20.1k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  20.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  20.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  20.1k|    }                                                                  \
  |  | 9205|  20.1k|    else {                                                             \
  |  | 9206|  20.1k|        return vis(monostate_val);                                     \
  |  | 9207|  20.1k|    }
  ------------------
 9258|  20.1k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 20.1k]
  ------------------
 9259|  20.1k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  20.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  20.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  20.1k|    }                                                                  \
  |  | 9205|  20.1k|    else {                                                             \
  |  | 9206|  20.1k|        return vis(monostate_val);                                     \
  |  | 9207|  20.1k|    }
  ------------------
 9260|       |
 9261|  20.1k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 20.1k]
  ------------------
 9262|  20.1k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  20.1k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  20.1k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 20.1k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 20.1k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  20.1k|            SCN_CLANG_POP
 9279|  20.1k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3479|  1.21k|    {
 3480|  1.21k|        return m_iterator;
 3481|  1.21k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1569|    304|        : base(std::in_place, std::forward<U>(val)),
 1570|    304|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    304|    {
 1572|    304|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|    304|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    304|    {
  442|    304|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    304|    {
 1316|    304|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3483|    608|    {
 3484|    608|        return m_sentinel;
 3485|    608|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3464|    608|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|    608|    static_cast<    \
  |  |  935|    608|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|    608|    static_cast<    \
  |  |  935|    608|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|    608|    {
 3466|    608|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  489|    608|    {
  490|    608|        return m_has_value;
  491|    608|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|    304|    {
 1769|    304|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    304|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    304|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    304|        return this->get_value();
 1771|    304|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  455|    304|    {
  456|    304|        return m_value;
  457|    304|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1978|    304|    {
 1979|    304|        return detail::transform_error_impl(std::move(*this),
 1980|    304|                                            std::forward<F>(f));
 1981|    304|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1461|    304|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    304|    else {
 1472|    304|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    304|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    304|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 304, False: 0]
  |  |  ------------------
  ------------------
 1474|    304|                   ? result(*std::forward<Exp>(exp))
 1475|    304|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    304|    }
 1479|    304|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|    304|    {
 1805|    304|        return std::move(value());
 1806|    304|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|    304|        : base(std::in_place, std::forward<U>(val)),
 1570|    304|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    304|    {
 1572|    304|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|    304|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    304|    {
  442|    304|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    304|    {
 1316|    304|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1739|    304|    {
 1740|    304|        return has_value();
 1741|    304|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    608|    {
  490|    608|        return m_has_value;
  491|    608|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|    304|    {
 1805|    304|        return std::move(value());
 1806|    304|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|    304|    {
 1769|    304|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    304|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    304|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    304|        return this->get_value();
 1771|    304|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    304|    {
  456|    304|        return m_value;
  457|    304|    }

_ZN3scn2v44scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  1.59k|{
   89|  1.59k|    auto result = make_scan_result<Source, Args...>();
   90|  1.59k|    fill_scan_result(result,
   91|  1.59k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  1.59k|                           make_scan_args<wscan_context>(result->values())));
   93|  1.59k|    return result;
   94|  1.59k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEwEEEE:
   43|  14.3k|{
   44|  14.3k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  14.3k|}
_ZN3scn2v44scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  1.59k|{
  131|  1.59k|    auto result = make_scan_result<Source, Args...>();
  132|  1.59k|    fill_scan_result(result,
  133|  1.59k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  1.59k|                           make_scan_args<wscan_context>(result->values())));
  135|  1.59k|    return result;
  136|  1.59k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeETnPvLPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEwEEEE:
   59|  14.3k|{
   60|  14.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  14.3k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  1.59k|{
   89|  1.59k|    auto result = make_scan_result<Source, Args...>();
   90|  1.59k|    fill_scan_result(result,
   91|  1.59k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  1.59k|                           make_scan_args<wscan_context>(result->values())));
   93|  1.59k|    return result;
   94|  1.59k|}
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  1.59k|{
  131|  1.59k|    auto result = make_scan_result<Source, Args...>();
  132|  1.59k|    fill_scan_result(result,
  133|  1.59k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  1.59k|                           make_scan_args<wscan_context>(result->values())));
  135|  1.59k|    return result;
  136|  1.59k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  1.59k|{
   89|  1.59k|    auto result = make_scan_result<Source, Args...>();
   90|  1.59k|    fill_scan_result(result,
   91|  1.59k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  1.59k|                           make_scan_args<wscan_context>(result->values())));
   93|  1.59k|    return result;
   94|  1.59k|}
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  1.59k|{
  131|  1.59k|    auto result = make_scan_result<Source, Args...>();
  132|  1.59k|    fill_scan_result(result,
  133|  1.59k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  1.59k|                           make_scan_args<wscan_context>(result->values())));
  135|  1.59k|    return result;
  136|  1.59k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  1.59k|{
   89|  1.59k|    auto result = make_scan_result<Source, Args...>();
   90|  1.59k|    fill_scan_result(result,
   91|  1.59k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  1.59k|                           make_scan_args<wscan_context>(result->values())));
   93|  1.59k|    return result;
   94|  1.59k|}
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  1.59k|{
  131|  1.59k|    auto result = make_scan_result<Source, Args...>();
  132|  1.59k|    fill_scan_result(result,
  133|  1.59k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  1.59k|                           make_scan_args<wscan_context>(result->values())));
  135|  1.59k|    return result;
  136|  1.59k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  1.59k|{
   89|  1.59k|    auto result = make_scan_result<Source, Args...>();
   90|  1.59k|    fill_scan_result(result,
   91|  1.59k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  1.59k|                           make_scan_args<wscan_context>(result->values())));
   93|  1.59k|    return result;
   94|  1.59k|}
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  1.59k|{
  131|  1.59k|    auto result = make_scan_result<Source, Args...>();
  132|  1.59k|    fill_scan_result(result,
  133|  1.59k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  1.59k|                           make_scan_args<wscan_context>(result->values())));
  135|  1.59k|    return result;
  136|  1.59k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEEOSA_NS0_24basic_scan_format_stringIwNSL_13type_identityISA_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  1.59k|{
   89|  1.59k|    auto result = make_scan_result<Source, Args...>();
   90|  1.59k|    fill_scan_result(result,
   91|  1.59k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  1.59k|                           make_scan_args<wscan_context>(result->values())));
   93|  1.59k|    return result;
   94|  1.59k|}
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELS2_0ETnPvLS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEERKT0_OSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  1.59k|{
  131|  1.59k|    auto result = make_scan_result<Source, Args...>();
  132|  1.59k|    fill_scan_result(result,
  133|  1.59k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  1.59k|                           make_scan_args<wscan_context>(result->values())));
  135|  1.59k|    return result;
  136|  1.59k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSQ_13type_identityISE_E4typeEJDpNS12_ISW_E4typeEEEE:
   88|  1.59k|{
   89|  1.59k|    auto result = make_scan_result<Source, Args...>();
   90|  1.59k|    fill_scan_result(result,
   91|  1.59k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  1.59k|                           make_scan_args<wscan_context>(result->values())));
   93|  1.59k|    return result;
   94|  1.59k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSJ_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSS_13type_identityISF_E4typeEJDpNS17_ISY_E4typeEEEE:
  130|  1.59k|{
  131|  1.59k|    auto result = make_scan_result<Source, Args...>();
  132|  1.59k|    fill_scan_result(result,
  133|  1.59k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  1.59k|                           make_scan_args<wscan_context>(result->values())));
  135|  1.59k|    return result;
  136|  1.59k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIwNSP_13type_identityISD_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  1.59k|{
   89|  1.59k|    auto result = make_scan_result<Source, Args...>();
   90|  1.59k|    fill_scan_result(result,
   91|  1.59k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  1.59k|                           make_scan_args<wscan_context>(result->values())));
   93|  1.59k|    return result;
   94|  1.59k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSI_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIwNSR_13type_identityISE_E4typeEJDpNS16_ISX_E4typeEEEE:
  130|  1.59k|{
  131|  1.59k|    auto result = make_scan_result<Source, Args...>();
  132|  1.59k|    fill_scan_result(result,
  133|  1.59k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  1.59k|                           make_scan_args<wscan_context>(result->values())));
  135|  1.59k|    return result;
  136|  1.59k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  1.59k|{
   89|  1.59k|    auto result = make_scan_result<Source, Args...>();
   90|  1.59k|    fill_scan_result(result,
   91|  1.59k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  1.59k|                           make_scan_args<wscan_context>(result->values())));
   93|  1.59k|    return result;
   94|  1.59k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  1.59k|{
  131|  1.59k|    auto result = make_scan_result<Source, Args...>();
  132|  1.59k|    fill_scan_result(result,
  133|  1.59k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  1.59k|                           make_scan_args<wscan_context>(result->values())));
  135|  1.59k|    return result;
  136|  1.59k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  21.4k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  21.4k|{
  309|  21.4k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  21.4k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|     16|{
  895|     16|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|     16|                                  m_nan_payload_buffer, value);
  897|     16|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
  898|      0|        value = this->setsign(value);
  899|      0|        return n;
  900|      0|    }
  901|       |
  902|     16|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 0, False: 16]
  ------------------
  903|     16|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 0, False: 0]
  ------------------
  904|      0|        return detail::unexpected_scan_error(
  905|      0|            scan_error::value_negative_overflow, n.error().msg());
  906|      0|    }
  907|     16|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 0, False: 16]
  ------------------
  908|     16|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 0, False: 0]
  ------------------
  909|      0|        return detail::unexpected_scan_error(
  910|      0|            scan_error::value_negative_underflow, n.error().msg());
  911|      0|    }
  912|     16|    return n;
  913|     16|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|     32|{
  895|     32|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|     32|                                  m_nan_payload_buffer, value);
  897|     32|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 32]
  |  |  ------------------
  ------------------
  898|      0|        value = this->setsign(value);
  899|      0|        return n;
  900|      0|    }
  901|       |
  902|     32|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 0, False: 32]
  ------------------
  903|     32|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 0, False: 0]
  ------------------
  904|      0|        return detail::unexpected_scan_error(
  905|      0|            scan_error::value_negative_overflow, n.error().msg());
  906|      0|    }
  907|     32|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 0, False: 32]
  ------------------
  908|     32|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 0, False: 0]
  ------------------
  909|      0|        return detail::unexpected_scan_error(
  910|      0|            scan_error::value_negative_underflow, n.error().msg());
  911|      0|    }
  912|     32|    return n;
  913|     32|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|     16|{
 1153|     16|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|     16|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|     16|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|     16|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|     16|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 16, False: 0]
  ------------------
 1159|     16|        SCN_UNLIKELY_ATTR
 1160|     16|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|     16|                                             "Invalid integer value");
 1162|     16|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|     32|{
 1153|     32|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|     32|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|     32|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|     32|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|     32|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 32, False: 0]
  ------------------
 1159|     32|        SCN_UNLIKELY_ATTR
 1160|     32|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|     32|                                             "Invalid integer value");
 1162|     32|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|     16|{
 1153|     16|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|     16|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|     16|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|     16|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|     16|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 16, False: 0]
  ------------------
 1159|     16|        SCN_UNLIKELY_ATTR
 1160|     16|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|     16|                                             "Invalid integer value");
 1162|     16|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|     32|{
 1153|     32|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|     32|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|     32|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|     32|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|     32|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 32, False: 0]
  ------------------
 1159|     32|        SCN_UNLIKELY_ATTR
 1160|     32|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|     32|                                             "Invalid integer value");
 1162|     32|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|     16|{
 1153|     16|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|     16|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|     16|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|     16|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|     16|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 16, False: 0]
  ------------------
 1159|     16|        SCN_UNLIKELY_ATTR
 1160|     16|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|     16|                                             "Invalid integer value");
 1162|     16|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|     32|{
 1153|     32|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|     32|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|     32|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|     32|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|     32|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 32, False: 0]
  ------------------
 1159|     32|        SCN_UNLIKELY_ATTR
 1160|     32|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|     32|                                             "Invalid integer value");
 1162|     32|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|  7.16k|{
 1903|  7.16k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|  7.16k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|  14.3k|{
 1921|  14.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|  14.3k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|     54|{
  207|     54|    return find_classic_impl(
  208|     54|        source, [](char ch) { return is_ascii_space(ch); },
  209|     54|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|     54|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|    932|{
  215|    932|    return find_classic_impl(
  216|    932|        source, [](char ch) { return !is_ascii_space(ch); },
  217|    932|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|    932|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|      6|{
  329|      6|    SCN_UNLIKELY_ATTR
  330|      6|    return e;
  331|      6|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|  7.16k|{
 1872|  7.16k|    return vscan_internal(source, format, args);
 1873|  7.16k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|  14.3k|{
 1886|  14.3k|    return vscan_internal(source, format, args);
 1887|  14.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|     54|{
  131|     54|    auto it = source.begin();
  132|       |
  133|  2.15k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 2.10k, False: 54]
  ------------------
  134|  2.10k|        auto sv =
  135|  2.10k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  2.10k|                .substr(0, 8);
  137|       |
  138|  2.10k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 540, False: 1.56k]
  ------------------
  139|    540|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|    540|            it = detail::make_string_view_iterator(source, tmp_it);
  141|    540|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 0, False: 540]
  ------------------
  142|      0|                break;
  143|      0|            }
  144|    540|            continue;
  145|    540|        }
  146|       |
  147|  7.17k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 5.61k, False: 1.56k]
  ------------------
  148|  5.61k|            auto tmp =
  149|  5.61k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  5.61k|            auto res = get_next_code_point(tmp);
  151|  5.61k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 0, False: 5.61k]
  ------------------
  152|      0|                return it;
  153|      0|            }
  154|  5.61k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  5.61k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  5.61k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  5.61k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  5.61k|        }
  158|  1.56k|    }
  159|       |
  160|     54|    return detail::make_string_view_iterator(source, it);
  161|     54|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  3.71k|{
  118|  3.71k|    static_assert(sizeof(*source.data()) == 1);
  119|  3.71k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  3.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  3.71k|    uint64_t word{};
  121|  3.71k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  3.71k|    return has_byte_greater(word, 127) != 0;
  124|  3.71k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  4.19k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|  5.61k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|    932|{
  131|    932|    auto it = source.begin();
  132|       |
  133|  1.83k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 1.61k, False: 216]
  ------------------
  134|  1.61k|        auto sv =
  135|  1.61k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  1.61k|                .substr(0, 8);
  137|       |
  138|  1.61k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 604, False: 1.01k]
  ------------------
  139|    604|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|    604|            it = detail::make_string_view_iterator(source, tmp_it);
  141|    604|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 496, False: 108]
  ------------------
  142|    496|                break;
  143|    496|            }
  144|    108|            continue;
  145|    604|        }
  146|       |
  147|  4.10k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 3.31k, False: 792]
  ------------------
  148|  3.31k|            auto tmp =
  149|  3.31k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  3.31k|            auto res = get_next_code_point(tmp);
  151|  3.31k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 220, False: 3.09k]
  ------------------
  152|    220|                return it;
  153|    220|            }
  154|  3.09k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  3.09k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  3.09k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  3.09k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  3.09k|        }
  158|  1.01k|    }
  159|       |
  160|    712|    return detail::make_string_view_iterator(source, it);
  161|    932|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  1.00k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  3.31k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|     16|{
  804|     16|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 16]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|     16|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 16]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|     16|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 16]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|     16|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 16]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|     16|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|     16|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 0, False: 16]
  ------------------
  851|      0|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  852|      0|            return detail::unexpected_scan_error(
  853|      0|                scan_error::invalid_scanned_value,
  854|      0|                "Invalid floating-point digit");
  855|      0|        }
  856|      0|    }
  857|     16|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
  858|     16|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|     16|                                             "Invalid floating-point digit");
  860|     16|    }
  861|       |
  862|      0|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|      0|    else {
  879|       |        // Default to fast_float
  880|      0|        return fast_float_impl<CharT, T>{data}(value);
  881|      0|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|      0|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|     32|{
  804|     32|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 32]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|     32|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 32]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|     32|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 32]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|     32|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 32]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|     32|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|     32|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 0, False: 32]
  ------------------
  851|      0|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  852|      0|            return detail::unexpected_scan_error(
  853|      0|                scan_error::invalid_scanned_value,
  854|      0|                "Invalid floating-point digit");
  855|      0|        }
  856|      0|    }
  857|     32|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
  858|     32|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|     32|                                             "Invalid floating-point digit");
  860|     32|    }
  861|       |
  862|      0|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|      0|    else {
  879|       |        // Default to fast_float
  880|      0|        return fast_float_impl<CharT, T>{data}(value);
  881|      0|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|      0|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  14.3k|{
 1317|  14.3k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 14.3k, False: 0]
  ------------------
 1318|  14.3k|        return false;
 1319|  14.3k|    }
 1320|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 0, False: 0]
  |  Branch (1320:39): [True: 0, False: 0]
  ------------------
 1321|  14.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|  14.3k|        : format_handler_base{argcount},
 1593|  14.3k|          parse_ctx{format},
 1594|  14.3k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  14.3k|    static_cast<    \
  |  |  935|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  14.3k|    static_cast<    \
  |  |  935|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  14.3k|    {
 1596|  14.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|  42.9k|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|  42.9k|    {
 1412|  42.9k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|  42.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42.9k]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|  42.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|  14.3k|        : contiguous_ctx(source, args, loc)
 1544|  14.3k|    {
 1545|  14.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  14.3k|{
 1734|  14.3k|    const auto beg = handler.get_ctx().begin();
 1735|  14.3k|    detail::parse_format_string<false>(format, handler);
 1736|  14.3k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.2k, False: 108]
  |  |  ------------------
  ------------------
 1737|  14.2k|        return unexpected(err.error());
 1738|  14.2k|    }
 1739|    108|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  14.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|   209k|    {
 1718|   209k|        return ctx.get();
 1719|   209k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|   209k|    {
 1549|   209k|        return contiguous_ctx;
 1550|   209k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|  14.9k|    {
 1600|  68.3k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 54.0k, False: 14.3k]
  ------------------
 1601|  54.0k|            auto it = get_ctx().begin();
 1602|  54.0k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 48, False: 53.9k]
  ------------------
 1603|     48|                SCN_UNLIKELY_ATTR
 1604|     48|                return on_error(
 1605|     48|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|     48|            }
 1607|       |
 1608|  53.9k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|  53.9k|                    detail::make_string_view_from_pointers(begin, end));
 1610|  53.9k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 228, False: 53.7k]
  ------------------
 1611|    228|                SCN_UNLIKELY_ATTR
 1612|    228|                return on_error({scan_error::invalid_format_string,
 1613|    228|                                 "Invalid encoding in format string"});
 1614|    228|            }
 1615|  53.7k|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 360, False: 53.3k]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|    360|                get_ctx().advance_to(
 1618|    360|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|    360|                auto begin_it = impl::read_while_classic_space(
 1621|    360|                    detail::make_string_view_from_pointers(
 1622|    360|                        detail::to_address(after_space_it),
 1623|    360|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|    360|                begin = detail::to_address(begin_it) - 1;
 1626|    360|                continue;
 1627|    360|            }
 1628|       |
 1629|  53.3k|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 354, False: 53.0k]
  ------------------
 1630|    354|                SCN_UNLIKELY_ATTR
 1631|    354|                return on_error({scan_error::invalid_literal,
 1632|    354|                                 "Unexpected literal character in source"});
 1633|    354|            }
 1634|  53.0k|            get_ctx().advance_to(ranges::next(it));
 1635|  53.0k|        }
 1636|  14.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|  52.1k|    {
 1460|  52.1k|        error = unexpected(err);
 1461|  52.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1666|     96|    {
 1667|     96|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1668|     96|        set_arg_as_visited(arg_id);
 1669|       |
 1670|     96|        on_visit_scan_arg(
 1671|     96|            impl::default_arg_reader<context_type>{
 1672|     96|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1673|     96|            arg);
 1674|     96|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|  8.15k|{
 1372|  8.15k|    auto arg = ctx.arg(id);
 1373|  8.15k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  8.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50, False: 8.10k]
  |  |  ------------------
  ------------------
 1374|     50|        handler.on_error("Failed to find argument with ID");
 1375|     50|    }
 1376|  8.15k|    return arg;
 1377|  8.15k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|  28.5k|    {
 1486|  28.5k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 68, False: 28.4k]
  |  |  ------------------
  ------------------
 1487|     68|            on_error({scan_error::invalid_format_string,
 1488|     68|                      "Argument ID out-of-range"});
 1489|     68|            return;
 1490|     68|        }
 1491|       |
 1492|  28.4k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 28.4k]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|  28.4k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  28.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 28.4k, False: 0]
  |  |  ------------------
  ------------------
 1498|  28.4k|            visited_args_lower64 |= (1ull << id);
 1499|  28.4k|            return;
 1500|  28.4k|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|  28.4k|    {
 1470|  28.4k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 28.4k]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|  28.4k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  28.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 28.4k, False: 0]
  |  |  ------------------
  ------------------
 1477|  28.4k|            return (visited_args_lower64 >> id) & 1ull;
 1478|  28.4k|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|  28.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|     96|    {
 1651|     96|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 6, False: 90]
  |  Branch (1651:13): [True: 6, False: 90]
  |  Branch (1651:29): [True: 0, False: 90]
  ------------------
 1652|      6|            SCN_UNLIKELY_ATTR
 1653|      6|            return;
 1654|      6|        }
 1655|       |
 1656|     90|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|     90|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 56, False: 34]
  |  |  ------------------
  ------------------
 1658|     56|            on_error(r.error());
 1659|     56|        }
 1660|     34|        else {
 1661|     34|            get_ctx().advance_to(*r);
 1662|     34|        }
 1663|     90|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|  6.81k|    {
 1640|  6.81k|        return parse_ctx.next_arg_id();
 1641|  6.81k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1643|  1.33k|    {
 1644|  1.33k|        parse_ctx.check_arg_id(id);
 1645|  1.33k|        return id;
 1646|  1.33k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|  8.05k|    {
 1680|  8.05k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  8.05k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  8.05k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 8.05k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  8.05k|        auto specs = detail::format_specs{};
 1693|  8.05k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  8.05k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  8.05k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  8.05k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  8.05k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 124, False: 7.93k]
  |  Branch (1698:29): [True: 80, False: 7.85k]
  ------------------
 1699|    204|            SCN_UNLIKELY_ATTR
 1700|    204|            on_error({scan_error::invalid_format_string,
 1701|    204|                      "Missing '}' in format string"});
 1702|    204|            return parse_ctx.begin();
 1703|    204|        }
 1704|  7.85k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  7.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.85k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|  7.85k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  7.85k|        on_visit_scan_arg(
 1710|  7.85k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  7.85k|                                           get_ctx().locale()},
 1712|  7.85k|            arg);
 1713|  7.85k|        return parse_ctx.begin();
 1714|  7.85k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|  8.05k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  8.05k|    {
 1391|  8.05k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|  7.85k|    {
 1651|  7.85k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 2, False: 7.84k]
  |  Branch (1651:13): [True: 2, False: 7.84k]
  |  Branch (1651:29): [True: 0, False: 7.84k]
  ------------------
 1652|      2|            SCN_UNLIKELY_ATTR
 1653|      2|            return;
 1654|      2|        }
 1655|       |
 1656|  7.84k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  7.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  7.84k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.11k, False: 734]
  |  |  ------------------
  ------------------
 1658|  7.11k|            on_error(r.error());
 1659|  7.11k|        }
 1660|    734|        else {
 1661|    734|            get_ctx().advance_to(*r);
 1662|    734|        }
 1663|  7.84k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1453|  13.4k|    {
 1454|  13.4k|        SCN_UNLIKELY_ATTR
 1455|  13.4k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1456|  13.4k|                                              msg);
 1457|  13.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|  42.9k|    {
 1419|  42.9k|        {
 1420|  42.9k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 42.9k]
  ------------------
 1421|  42.9k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 42.9k]
  ------------------
 1422|  42.9k|                                      ? std::numeric_limits<uint64_t>::max()
 1423|  42.9k|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|  42.9k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 14.5k, False: 28.4k]
  ------------------
 1426|  14.5k|                return on_error({scan_error::invalid_format_string,
 1427|  14.5k|                                 "Argument list not exhausted"});
 1428|  14.5k|            }
 1429|  42.9k|        }
 1430|       |
 1431|  28.4k|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 28.4k, False: 0]
  ------------------
 1432|  28.4k|            return;
 1433|  28.4k|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|   149k|    {
 1465|   149k|        return error;
 1466|   149k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  14.3k|{
 1749|  14.3k|    const auto argcount = args.size();
 1750|  14.3k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 0, False: 14.3k]
  |  Branch (1750:60): [True: 0, False: 0]
  ------------------
 1751|      0|        auto arg = args.get(0);
 1752|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|      0|    }
 1754|       |
 1755|  14.3k|    auto handler = format_handler<true, CharT>{
 1756|  14.3k|        ranges::subrange<const CharT*>{source.data(),
 1757|  14.3k|                                       source.data() + source.size()},
 1758|  14.3k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  14.3k|    static_cast<    \
  |  |  935|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  14.3k|    static_cast<    \
  |  |  935|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  14.3k|    return vscan_parse_format_string(format, handler);
 1760|  14.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  28.6k|{
 1749|  28.6k|    const auto argcount = args.size();
 1750|  28.6k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 0, False: 28.6k]
  |  Branch (1750:60): [True: 0, False: 0]
  ------------------
 1751|      0|        auto arg = args.get(0);
 1752|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|      0|    }
 1754|       |
 1755|  28.6k|    auto handler = format_handler<true, CharT>{
 1756|  28.6k|        ranges::subrange<const CharT*>{source.data(),
 1757|  28.6k|                                       source.data() + source.size()},
 1758|  28.6k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  28.6k|    static_cast<    \
  |  |  935|  28.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  28.6k|    static_cast<    \
  |  |  935|  28.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  28.6k|    return vscan_parse_format_string(format, handler);
 1760|  28.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  28.6k|{
 1317|  28.6k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 28.6k, False: 0]
  ------------------
 1318|  28.6k|        return false;
 1319|  28.6k|    }
 1320|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 0, False: 0]
  |  Branch (1320:39): [True: 0, False: 0]
  ------------------
 1321|  28.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|  28.6k|        : format_handler_base{argcount},
 1593|  28.6k|          parse_ctx{format},
 1594|  28.6k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  28.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  28.6k|    static_cast<    \
  |  |  935|  28.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  28.6k|    static_cast<    \
  |  |  935|  28.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  28.6k|    {
 1596|  28.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|  28.6k|        : contiguous_ctx(source, args, loc)
 1544|  28.6k|    {
 1545|  28.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  28.6k|{
 1734|  28.6k|    const auto beg = handler.get_ctx().begin();
 1735|  28.6k|    detail::parse_format_string<false>(format, handler);
 1736|  28.6k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  28.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.5k, False: 66]
  |  |  ------------------
  ------------------
 1737|  28.5k|        return unexpected(err.error());
 1738|  28.5k|    }
 1739|     66|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  28.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|   176M|    {
 1718|   176M|        return ctx.get();
 1719|   176M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|   176M|    {
 1549|   176M|        return contiguous_ctx;
 1550|   176M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|  29.9k|    {
 1600|  58.7M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 58.7M, False: 20.4k]
  ------------------
 1601|  58.7M|            auto it = get_ctx().begin();
 1602|  58.7M|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 30, False: 58.7M]
  ------------------
 1603|     30|                SCN_UNLIKELY_ATTR
 1604|     30|                return on_error(
 1605|     30|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|     30|            }
 1607|       |
 1608|  58.7M|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|  58.7M|                    detail::make_string_view_from_pointers(begin, end));
 1610|  58.7M|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 8.73k, False: 58.7M]
  ------------------
 1611|  8.73k|                SCN_UNLIKELY_ATTR
 1612|  8.73k|                return on_error({scan_error::invalid_format_string,
 1613|  8.73k|                                 "Invalid encoding in format string"});
 1614|  8.73k|            }
 1615|  58.7M|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 278, False: 58.7M]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|    278|                get_ctx().advance_to(
 1618|    278|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|    278|                auto begin_it = impl::read_while_classic_space(
 1621|    278|                    detail::make_string_view_from_pointers(
 1622|    278|                        detail::to_address(after_space_it),
 1623|    278|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|    278|                begin = detail::to_address(begin_it) - 1;
 1626|    278|                continue;
 1627|    278|            }
 1628|       |
 1629|  58.7M|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 710, False: 58.7M]
  ------------------
 1630|    710|                SCN_UNLIKELY_ATTR
 1631|    710|                return on_error({scan_error::invalid_literal,
 1632|    710|                                 "Unexpected literal character in source"});
 1633|    710|            }
 1634|  58.7M|            get_ctx().advance_to(ranges::next(it));
 1635|  58.7M|        }
 1636|  29.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1666|    144|    {
 1667|    144|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1668|    144|        set_arg_as_visited(arg_id);
 1669|       |
 1670|    144|        on_visit_scan_arg(
 1671|    144|            impl::default_arg_reader<context_type>{
 1672|    144|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1673|    144|            arg);
 1674|    144|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|  20.3k|{
 1372|  20.3k|    auto arg = ctx.arg(id);
 1373|  20.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  20.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18, False: 20.3k]
  |  |  ------------------
  ------------------
 1374|     18|        handler.on_error("Failed to find argument with ID");
 1375|     18|    }
 1376|  20.3k|    return arg;
 1377|  20.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|    144|    {
 1651|    144|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 144]
  |  Branch (1651:13): [True: 0, False: 144]
  |  Branch (1651:29): [True: 0, False: 144]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|    144|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|    144|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 110, False: 34]
  |  |  ------------------
  ------------------
 1658|    110|            on_error(r.error());
 1659|    110|        }
 1660|     34|        else {
 1661|     34|            get_ctx().advance_to(*r);
 1662|     34|        }
 1663|    144|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|  20.3k|    {
 1640|  20.3k|        return parse_ctx.next_arg_id();
 1641|  20.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1643|      6|    {
 1644|      6|        parse_ctx.check_arg_id(id);
 1645|      6|        return id;
 1646|      6|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|  20.2k|    {
 1680|  20.2k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  20.2k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  20.2k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 20.2k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  20.2k|        auto specs = detail::format_specs{};
 1693|  20.2k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  20.2k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  20.2k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  20.2k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  20.2k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 18, False: 20.2k]
  |  Branch (1698:29): [True: 66, False: 20.1k]
  ------------------
 1699|     84|            SCN_UNLIKELY_ATTR
 1700|     84|            on_error({scan_error::invalid_format_string,
 1701|     84|                      "Missing '}' in format string"});
 1702|     84|            return parse_ctx.begin();
 1703|     84|        }
 1704|  20.1k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 36, False: 20.1k]
  |  |  ------------------
  ------------------
 1705|     36|            return parse_ctx.begin();
 1706|     36|        }
 1707|  20.1k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  20.1k|        on_visit_scan_arg(
 1710|  20.1k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  20.1k|                                           get_ctx().locale()},
 1712|  20.1k|            arg);
 1713|  20.1k|        return parse_ctx.begin();
 1714|  20.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|  20.2k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  20.2k|    {
 1391|  20.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|  20.1k|    {
 1651|  20.1k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 24, False: 20.1k]
  |  Branch (1651:13): [True: 24, False: 20.1k]
  |  Branch (1651:29): [True: 0, False: 20.1k]
  ------------------
 1652|     24|            SCN_UNLIKELY_ATTR
 1653|     24|            return;
 1654|     24|        }
 1655|       |
 1656|  20.1k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  20.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  20.1k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.9k, False: 154]
  |  |  ------------------
  ------------------
 1658|  19.9k|            on_error(r.error());
 1659|  19.9k|        }
 1660|    154|        else {
 1661|    154|            get_ctx().advance_to(*r);
 1662|    154|        }
 1663|  20.1k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    796|{
 1462|    796|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    796|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    796|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    796|            return transcode_to_string_impl_to32(src, dest);
 1473|    796|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    796|    SCN_EXPECT(false);
  ------------------
  |  |  930|    796|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    796|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    796|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    796|{
 1355|    796|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    796|    auto it = src.begin();
 1358|   471k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 470k, False: 796]
  ------------------
 1359|   470k|        auto res = get_next_code_point(
 1360|   470k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   470k|                                                                 src.end()));
 1362|   470k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   470k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.7k, False: 459k]
  |  |  ------------------
  ------------------
 1363|  10.7k|            dest.push_back(DestCharT{0xfffd});
 1364|  10.7k|        }
 1365|   459k|        else {
 1366|   459k|            dest.push_back(res.value);
 1367|   459k|        }
 1368|   470k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   470k|    }
 1370|    796|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   541k|{
 1279|   541k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   541k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   541k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   541k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   541k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   541k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.51k, False: 534k]
  |  |  ------------------
  ------------------
 1283|  7.51k|        return {get_start_for_next_code_point(input),
 1284|  7.51k|                detail::invalid_code_point};
 1285|  7.51k|    }
 1286|   534k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16, False: 534k]
  |  |  ------------------
  ------------------
 1287|     16|        return {input.end(), detail::invalid_code_point};
 1288|     16|    }
 1289|       |
 1290|   534k|    return {input.begin() + len,
 1291|   534k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   534k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  7.51k|{
 1265|  7.51k|    auto it = input.begin();
 1266|  27.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 27.1k, False: 77]
  ------------------
 1267|  27.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 7.44k, False: 19.6k]
  ------------------
 1268|  7.44k|            break;
 1269|  7.44k|        }
 1270|  27.1k|    }
 1271|  7.51k|    return it;
 1272|  7.51k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  2.33k|    constexpr parse_error(code c) : m_code(c)
  808|  2.33k|    {
  809|  2.33k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  2.33k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  2.33k|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  1.09k|    {
  823|  1.09k|        return a.m_code == b.m_code;
  824|  1.09k|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|    248|    {
  827|    248|        return !(a == b);
  828|    248|    }
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3034|  18.2k|    {
 3035|  18.2k|        SCN_UNLIKELY_ATTR
 3036|  18.2k|        m_msg = msg;
 3037|  18.2k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3039|  27.9k|    {
 3040|  27.9k|        return m_msg == nullptr;
 3041|  27.9k|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3675|     62|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl22nonascii_specs_handler17on_charset_singleEDi:
 5019|   325k|    {
 5020|   325k|        on_charset_range(cp, cp + 1);
 5021|   325k|    }
_ZN3scn2v44impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 5024|   326k|    {
 5025|   326k|        if (end <= 127) {
  ------------------
  |  Branch (5025:13): [True: 176k, False: 149k]
  ------------------
 5026|   176k|            return;
 5027|   176k|        }
 5028|       |
 5029|  31.6M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (5029:25): [True: 31.6M, False: 148k]
  ------------------
 5030|       |            // TODO: check for overlap
 5031|  31.6M|            if (elem.first == end) {
  ------------------
  |  Branch (5031:17): [True: 552, False: 31.6M]
  ------------------
 5032|    552|                elem.first = begin;
 5033|    552|                return;
 5034|    552|            }
 5035|       |
 5036|  31.6M|            if (elem.second == begin) {
  ------------------
  |  Branch (5036:17): [True: 870, False: 31.6M]
  ------------------
 5037|    870|                elem.second = end;
 5038|    870|                return;
 5039|    870|            }
 5040|  31.6M|        }
 5041|       |
 5042|   148k|        extra_ranges.push_back(std::make_pair(begin, end));
 5043|   148k|    }
_ZNK3scn2v44impl22nonascii_specs_handler19on_charset_invertedEv:
 5046|     36|    {
 5047|       |        // no-op
 5048|     36|    }
_ZNK3scn2v44impl22nonascii_specs_handler9get_errorEv:
 5061|   328k|    {
 5062|   328k|        return err;
 5063|   328k|    }
_ZN3scn2v44impl16bool_reader_baseC2Ej:
 5375|     74|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  5.19k|{
  458|  5.19k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  5.19k|        static_cast<unsigned char>(ch))];
  460|  5.19k|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   225k|{
  469|   225k|    return static_cast<unsigned char>(ch) <= 127;
  470|   225k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|    804|{
  474|    804|#if WCHAR_MIN < 0
  475|    804|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 804, False: 0]
  |  Branch (475:23): [True: 804, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|    804|}
_ZN3scn2v44impl13is_ascii_charEDi:
  482|   259k|{
  483|   259k|    return cp <= 127;
  484|   259k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  3.71k|{
  539|  3.71k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  3.71k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  1.69k|{
  784|  1.69k|    return e != eof_error::good;
  785|  1.69k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|    248|{
  854|    248|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 248]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|    248|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 0, False: 248]
  ------------------
  859|      0|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|      0|    }
  861|       |
  862|    248|    return detail::unexpected_scan_error(code, msg);
  863|    248|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|    248|{
  868|    248|    return [code, msg](parse_error err) {
  869|    248|        assert(err != parse_error::good);
  870|    248|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|    248|    };
  872|    248|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|     64|{
 2320|     64|    unsigned char running_diff{0};
 2321|    224|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 160, False: 64]
  ------------------
 2322|    160|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|    160|    }
 2324|     64|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 0, False: 64]
  |  Branch (2324:33): [True: 0, False: 64]
  ------------------
 2325|     64|}
_ZN3scn2v44impl32calculate_text_width_for_fmt_v10EDi:
 2402|  25.7k|{
 2403|  25.7k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2403:9): [True: 7.47k, False: 18.3k]
  ------------------
 2404|  25.7k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2404:10): [True: 0, False: 7.47k]
  ------------------
 2405|  7.47k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2405:10): [True: 0, False: 7.47k]
  ------------------
 2406|  7.47k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2406:10): [True: 0, False: 7.47k]
  ------------------
 2407|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2408|  7.47k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2408:11): [True: 7.21k, False: 256]
  |  Branch (2408:27): [True: 1.22k, False: 5.99k]
  |  Branch (2408:43): [True: 592, False: 630]
  ------------------
 2409|  7.47k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2409:11): [True: 5.99k, False: 886]
  |  Branch (2409:27): [True: 10, False: 5.98k]
  ------------------
 2410|  7.47k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2410:11): [True: 5.97k, False: 898]
  |  Branch (2410:27): [True: 0, False: 5.97k]
  ------------------
 2411|  7.47k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2411:11): [True: 5.97k, False: 898]
  |  Branch (2411:27): [True: 258, False: 5.71k]
  ------------------
 2412|  7.47k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2412:11): [True: 5.71k, False: 898]
  |  Branch (2412:27): [True: 0, False: 5.71k]
  ------------------
 2413|  7.47k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2413:11): [True: 5.71k, False: 898]
  |  Branch (2413:27): [True: 0, False: 5.71k]
  ------------------
 2414|  7.47k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2414:11): [True: 5.71k, False: 898]
  |  Branch (2414:27): [True: 0, False: 5.71k]
  ------------------
 2415|  7.47k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2415:11): [True: 5.62k, False: 988]
  |  Branch (2415:28): [True: 6, False: 5.61k]
  ------------------
 2416|  7.47k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2416:11): [True: 5.60k, False: 998]
  |  Branch (2416:28): [True: 0, False: 5.60k]
  ------------------
 2417|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2418|  7.47k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2418:11): [True: 5.61k, False: 988]
  |  Branch (2418:28): [True: 0, False: 5.61k]
  ------------------
 2419|       |         // Supplemental Symbols and Pictographs:
 2420|  7.47k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2420:11): [True: 5.61k, False: 988]
  |  Branch (2420:28): [True: 0, False: 5.61k]
  ------------------
 2421|    866|        return 2;
 2422|    866|    }
 2423|  24.9k|    return 1;
 2424|  25.7k|}
_ZN3scn2v44impl26calculate_valid_text_widthEDi:
 2427|  15.9k|{
 2428|  15.9k|    return calculate_text_width_for_fmt_v10(cp);
 2429|  15.9k|}
_ZN3scn2v44impl20calculate_text_widthEDi:
 2442|     18|{
 2443|     18|    return calculate_text_width_for_fmt_v10(cp);
 2444|     18|}
_ZN3scn2v44impl11char_to_intEc:
 3228|    616|{
 3229|    616|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3230|    616|}
_ZN3scn2v44impl11char_to_intEw:
 3232|    490|{
 3233|    490|#if WCHAR_MIN < 0
 3234|    490|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3234:9): [True: 490, False: 0]
  |  Branch (3234:20): [True: 490, False: 0]
  ------------------
 3235|       |#else
 3236|       |    if (ch <= 255) {
 3237|       |#endif
 3238|    490|        return char_to_int(static_cast<char>(ch));
 3239|    490|    }
 3240|      0|    return 255;
 3241|    490|}
_ZN3scn2v44impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4292|  8.13k|{
 4293|  8.13k|    std::regex_constants::syntax_option_type result{};
 4294|  8.13k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4294:9): [True: 24, False: 8.11k]
  ------------------
 4295|     24|#if SCN_HAS_STD_REGEX_MULTILINE
 4296|     24|        result |= std::regex_constants::multiline;
 4297|       |#else
 4298|       |        return detail::unexpected_scan_error(
 4299|       |            scan_error::invalid_format_string,
 4300|       |            "/m flag for regex isn't supported by regex backend");
 4301|       |#endif
 4302|     24|    }
 4303|  8.13k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4303:9): [True: 0, False: 8.13k]
  ------------------
 4304|  8.13k|        detail::regex_flags::none) {
 4305|      0|        return detail::unexpected_scan_error(
 4306|      0|            scan_error::invalid_format_string,
 4307|      0|            "/s flag for regex isn't supported by regex backend");
 4308|      0|    }
 4309|  8.13k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4309:9): [True: 432, False: 7.70k]
  ------------------
 4310|    432|        result |= std::regex_constants::icase;
 4311|    432|    }
 4312|  8.13k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4312:9): [True: 0, False: 8.13k]
  ------------------
 4313|      0|        result |= std::regex_constants::nosubs;
 4314|      0|    }
 4315|  8.13k|    return result;
 4316|  8.13k|}
_ZN3scn2v44impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4669|    306|{
 4670|    306|    std::string result{pattern};
 4671|  3.30k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4671:24): [True: 3.00k, False: 306]
  ------------------
 4672|  3.00k|        result.replace(n, 2, "/");
 4673|  3.00k|        ++n;
 4674|  3.00k|    }
 4675|    306|    return result;
 4676|    306|}
_ZN3scn2v44impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4678|     78|{
 4679|     78|    std::wstring result{pattern};
 4680|    786|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4680:24): [True: 708, False: 78]
  ------------------
 4681|    708|        result.replace(n, 2, L"/");
 4682|    708|        ++n;
 4683|    708|    }
 4684|     78|    return result;
 4685|     78|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6034|  1.10k|{
 6035|  1.10k|    if (specs.width != 0) {
  ------------------
  |  Branch (6035:9): [True: 248, False: 858]
  ------------------
 6036|    248|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6036:13): [True: 218, False: 30]
  ------------------
 6037|    218|            return detail::unexpected_scan_error(
 6038|    218|                scan_error::length_too_short,
 6039|    218|                "Scanned value too narrow, width did not exceed what "
 6040|    218|                "was specified in the format string");
 6041|    218|        }
 6042|    248|    }
 6043|    888|    if (specs.precision != 0) {
  ------------------
  |  Branch (6043:9): [True: 52, False: 836]
  ------------------
 6044|       |        // Ensured by take_width_view
 6045|     52|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|     52|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|     52|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6046|     52|                   specs.precision);
 6047|     52|    }
 6048|    888|    return {};
 6049|    888|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.10k|    {
  304|  2.10k|        ranges::advance(x, n);
  305|  2.10k|        return x;
  306|  2.10k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.10k|    {
  268|  2.10k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.10k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  36.0k|    {
  151|  36.0k|        i += n;
  152|  36.0k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  9.87k|    {
  108|  9.87k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  9.87k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  9.87k|    {
   87|  9.87k|        return s - i;
   88|  9.87k|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|    478|    {
  304|    478|        ranges::advance(x, n);
  305|    478|        return x;
  306|    478|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|    478|    {
  268|    478|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|    478|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|    478|    {
  151|    478|        i += n;
  152|    478|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|    606|    {
  108|    606|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|    606|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|    606|    {
   87|    606|        return s - i;
   88|    606|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2981|  76.7k|    {
 2982|  76.7k|        return m_current;
 2983|  76.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2981|  58.7M|    {
 2982|  58.7M|        return m_current;
 2983|  58.7M|    }
_ZN3scn2v44impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5650|    872|    {
 5651|    872|        reader_error_handler eh{};
 5652|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5653|       |            detail::check_code_point_type_specs(specs, eh);
 5654|       |        }
 5655|    872|        else {
 5656|    872|            detail::check_char_type_specs(specs, eh);
 5657|    872|        }
 5658|    872|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 864, False: 8]
  |  |  ------------------
  ------------------
 5659|    864|            return detail::unexpected_scan_error(
 5660|    864|                scan_error::invalid_format_string, eh.m_msg);
 5661|    864|        }
 5662|      8|        return {};
 5663|    872|    }
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  1.37k|    {
  763|  1.37k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  1.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.37k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|    686|        : m_fptr([](storage fn,
  743|    686|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    686|              cvref<T> obj = *get<T>(fn);
  745|    686|              if constexpr (std::is_void_v<R>) {
  746|    686|                  obj(static_cast<decltype(args)>(args)...);
  747|    686|              }
  748|    686|              else {
  749|    686|                  return obj(static_cast<decltype(args)>(args)...);
  750|    686|              }
  751|    686|          }),
  752|    686|          m_storage(std::addressof(f))
  753|    686|    {
  754|    686|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|    686|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    686|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    686|              else {
  749|    686|                  return obj(static_cast<decltype(args)>(args)...);
  750|    686|              }
  751|    686|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|    686|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    686|        else if constexpr (std::is_object_v<T>) {
  688|    686|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    686|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|    686|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    686|        {
  662|    686|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|   532k|    {
  763|   532k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   532k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   532k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.18k|        : m_fptr([](storage fn,
  743|  2.18k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.18k|              cvref<T> obj = *get<T>(fn);
  745|  2.18k|              if constexpr (std::is_void_v<R>) {
  746|  2.18k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.18k|              }
  748|  2.18k|              else {
  749|  2.18k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.18k|              }
  751|  2.18k|          }),
  752|  2.18k|          m_storage(std::addressof(f))
  753|  2.18k|    {
  754|  2.18k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   255k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   255k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   255k|              else {
  749|   255k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   255k|              }
  751|   255k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   255k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   255k|        else if constexpr (std::is_object_v<T>) {
  688|   255k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   255k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.18k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.18k|        {
  662|  2.18k|        }
_ZNK3scn2v44impl16char_reader_baseIcE19skip_ws_before_readEv:
 5645|     26|    {
 5646|     26|        return false;
 5647|     26|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|    248|    return [code, msg](parse_error err) {
  869|    248|        assert(err != parse_error::good);
  870|    248|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|    248|    };
_ZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2448|  1.26k|{
 2449|  1.26k|    size_t count{0};
 2450|  1.26k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  1.26k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  1.26k|    });
 2453|  1.26k|    return count;
 2454|  1.26k|}
_ZN3scn2v44impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1544|  1.26k|{
 1545|       |    // TODO: Could be optimized by being eager
 1546|  1.26k|    auto it = input.begin();
 1547|  9.67k|    while (it != input.end()) {
  ------------------
  |  Branch (1547:12): [True: 8.40k, False: 1.26k]
  ------------------
 1548|  8.40k|        auto res = get_next_code_point(
 1549|  8.40k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1550|  8.40k|        cb(res.value);
 1551|  8.40k|        it = detail::make_string_view_iterator(input, res.iterator);
 1552|  8.40k|    }
 1553|  1.26k|}
_ZNK3scn2v44impl12function_refIFvDiES3_EclEDi:
  762|  9.79k|    {
  763|  9.79k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  9.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  9.79k|    }
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  1.26k|        : m_fptr([](storage fn,
  743|  1.26k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.26k|              cvref<T> obj = *get<T>(fn);
  745|  1.26k|              if constexpr (std::is_void_v<R>) {
  746|  1.26k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.26k|              }
  748|  1.26k|              else {
  749|  1.26k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.26k|              }
  751|  1.26k|          }),
  752|  1.26k|          m_storage(std::addressof(f))
  753|  1.26k|    {
  754|  1.26k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  8.40k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.40k|              cvref<T> obj = *get<T>(fn);
  745|  8.40k|              if constexpr (std::is_void_v<R>) {
  746|  8.40k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  8.40k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  8.40k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  8.40k|        else if constexpr (std::is_object_v<T>) {
  688|  8.40k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  8.40k|    }
_ZZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2450|  8.40k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  8.40k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  8.40k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  1.26k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.26k|        {
  662|  1.26k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|     70|    {
 1681|     70|        return m_view;
 1682|     70|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|     72|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2525|  24.4k|    {
 2526|  24.4k|        return *m_current;
 2527|  24.4k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2534|  16.9k|    {
 2535|  16.9k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  16.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2536|  16.9k|        _increment_current();
 2537|  16.9k|        return *this;
 2538|  16.9k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2767|  16.9k|    {
 2768|  16.9k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2768:13): [True: 3.86k, False: 13.0k]
  ------------------
 2769|  3.86k|            auto cplen = _get_cp_length_at_current();
 2770|  3.86k|            m_multibyte_left = cplen - 1;
 2771|  3.86k|            m_count -= _get_width_at_current_cp_start(cplen);
 2772|  3.86k|        }
 2773|  13.0k|        else {
 2774|  13.0k|            --m_multibyte_left;
 2775|  13.0k|        }
 2776|       |
 2777|  16.9k|        ++m_current;
 2778|  16.9k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2738|  3.86k|    {
 2739|  3.86k|        return static_cast<difference_type>(
 2740|  3.86k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2741|  3.86k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2744|  3.86k|    {
 2745|  3.86k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70, False: 3.79k]
  |  |  ------------------
  ------------------
 2746|     70|            return 0;
 2747|     70|        }
 2748|       |
 2749|  3.79k|        if (cplen == 1) {
  ------------------
  |  Branch (2749:13): [True: 2.72k, False: 1.07k]
  ------------------
 2750|  2.72k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  2.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2751|  2.72k|            auto cp = static_cast<char32_t>(*m_current);
 2752|  2.72k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2753|  2.72k|        }
 2754|       |
 2755|  1.07k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2756|  1.07k|                                           cplen);
 2757|  1.07k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.07k]
  |  |  ------------------
  ------------------
 2758|      0|            return 0;
 2759|      0|        }
 2760|       |
 2761|  1.07k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2762|  1.07k|        return static_cast<difference_type>(
 2763|  1.07k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2764|  1.07k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  1.10k|{
 1956|  1.10k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  1.10k|    if constexpr (ranges::sized_range<Range>) {
 1959|  1.10k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  1.10k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 0, False: 1.10k]
  ------------------
 1961|      0|            return unexpected(eof_error::eof);
 1962|      0|        }
 1963|       |
 1964|  1.10k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  1.10k|}
_ZN3scn2v44impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2630|  8.23k|    {
 2631|  8.23k|        return !(a == b);
 2632|  8.23k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2622|  8.28k|    {
 2623|  8.28k|        return a.m_current == b.m_current;
 2624|  8.28k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2529|     32|    {
 2530|     32|        return *m_current;
 2531|     32|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|     14|    {
  268|     14|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|     14|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|     14|    {
  161|     14|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|     14|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 14]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|     14|        else {
  169|     14|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 14]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|     14|        }
  173|     14|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1988|  8.84k|    {
 1989|  8.84k|        return !codepoint.empty();
 1990|  8.84k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1781|     36|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|     36|    else {
 1788|     36|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|     36|    }
 1790|     36|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1635|     36|    {
 1636|     36|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|     36|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1719|     36|    {
 1720|     36|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|     36|        else {
 1753|     36|            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|     36|            if constexpr (ranges::common_range<Range>) {
 1758|     36|                std::copy(ranges::begin(range), ranges::end(range),
 1759|     36|                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|     36|            m_view = string_view_type{str};
 1768|     36|        }
 1769|     36|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2480|    314|        : m_current(x), m_end(s), m_count(n)
 2481|    314|    {
 2482|    314|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2512|  20.1k|    {
 2513|  20.1k|        return m_current;
 2514|  20.1k|    }
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2931|    164|    {
 2932|    164|        return take_width_view{r, n};
 2933|    164|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2899|    164|        : m_base(base), m_count(count)
 2900|    164|    {
 2901|    164|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2813|    164|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5690|      2|    {
 5691|      2|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5691:13): [True: 2, False: 0]
  ------------------
 5692|      2|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5692:13): [True: 0, False: 0]
  ------------------
 5693|      2|            return read_default(range, value, loc);
 5694|      2|        }
 5695|       |
 5696|      0|        reader_impl_for_int<CharT> reader{};
 5697|      0|        signed char tmp_value{};
 5698|      0|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5699|      0|        value = static_cast<signed char>(value);
 5700|      0|        return ret;
 5701|      2|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5672|      2|    {
 5673|      2|        SCN_UNUSED(loc);
  ------------------
  |  |  915|      2|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5674|      2|        if constexpr (std::is_same_v<CharT, char>) {
 5675|      2|            return code_unit_reader<char>{}.read(range, value);
 5676|       |        }
 5677|       |        else {
 5678|       |            SCN_UNUSED(range);
 5679|       |            SCN_EXPECT(false);
 5680|       |            SCN_UNREACHABLE;
 5681|       |        }
 5682|      2|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5590|      2|    {
 5591|      2|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5592|      2|        ch = *range.begin();
 5593|      2|        return it;
 5594|      2|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1944|     14|{
 1945|     14|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|     14|    return ranges::next(range.begin());
 1950|     14|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  950|     14|{
  951|     14|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|     14|    return eof_error::good;
  955|     14|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  944|     14|{
  945|     14|    return is_range_eof(r.begin(), r.end());
  946|     14|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  8.85k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  8.85k|    {
  938|  8.85k|        return begin == end;
  939|  8.85k|    }
  940|  8.85k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2869|  20.0k|        {
 2870|  20.0k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2870:21): [True: 0, False: 20.0k]
  |  Branch (2870:39): [True: 0, False: 0]
  ------------------
 2871|  20.0k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2871:20): [True: 42, False: 20.0k]
  ------------------
 2872|  20.0k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2915|  16.1k|    {
 2916|  16.1k|        return sentinel<true>{m_base.get().end()};
 2917|  16.1k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2816|  16.7k|    {
 2817|  16.7k|        return view;
 2818|  16.7k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2850|  16.1k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  16.1k|    static_cast<    \
  |  |  935|  16.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|     14|    {
  296|     14|        ++x;
  297|     14|        return x;
  298|     14|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2909|    314|    {
 2910|    314|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2911|    314|                                      m_count};
 2912|    314|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3365|      6|{
 3366|      6|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3367|      6|    auto [base_prefix_begin_it, sign] = sign_result;
 3368|       |
 3369|      6|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3370|      6|        parse_integer_base_prefix(
 3371|      6|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3372|       |
 3373|      6|    if (parsed_zero) {
  ------------------
  |  Branch (3373:9): [True: 0, False: 6]
  ------------------
 3374|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3374:13): [True: 0, False: 0]
  |  Branch (3374:13): [True: 0, False: 0]
  ------------------
 3375|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3375:13): [True: 0, False: 0]
  ------------------
 3376|      0|            digits_begin_it = base_prefix_begin_it;
 3377|      0|        }
 3378|      0|        else {
 3379|      0|            parsed_zero = false;
 3380|      0|        }
 3381|      0|    }
 3382|      6|    else {
 3383|      6|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3383:13): [True: 0, False: 6]
  |  Branch (3383:13): [True: 6, False: 0]
  ------------------
 3384|      6|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3384:13): [True: 6, False: 0]
  ------------------
 3385|      6|            digits_begin_it = base_prefix_begin_it;
 3386|      6|        }
 3387|      6|    }
 3388|       |
 3389|      6|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3389:9): [True: 6, False: 0]
  ------------------
 3390|      6|        sign = sign_type::plus_sign;
 3391|      6|    }
 3392|      6|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3393|      6|        digits_begin_it, parsed_base, sign, parsed_zero};
 3394|      6|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3246|      8|{
 3247|      8|    auto r = read_one_of_code_unit(range, "+-");
 3248|      8|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 8, False: 0]
  ------------------
 3249|      8|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 8, False: 0]
  ------------------
 3250|      8|            return std::pair{range.begin(), sign_type::default_sign};
 3251|      8|        }
 3252|      0|        return unexpected(eof_error::eof);
 3253|      8|    }
 3254|       |
 3255|      0|    auto& it = *r;
 3256|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 0, False: 0]
  ------------------
 3257|      0|        return std::pair{it, sign_type::minus_sign};
 3258|      0|    }
 3259|      0|    return std::pair{it, sign_type::plus_sign};
 3260|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2371|      8|{
 2372|      8|    auto it = read_code_unit(range);
 2373|      8|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|     16|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 16, False: 8]
  ------------------
 2378|     16|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 16]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|     16|    }
 2382|       |
 2383|      8|    return unexpected(parse_error::error);
 2384|      8|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3332|      6|{
 3333|      6|    switch (base) {
 3334|      0|        case 2:
  ------------------
  |  Branch (3334:9): [True: 0, False: 6]
  ------------------
 3335|       |            // allow 0b/0B
 3336|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3337|      0|                    false};
 3338|       |
 3339|      0|        case 8: {
  ------------------
  |  Branch (3339:9): [True: 0, False: 6]
  ------------------
 3340|       |            // allow 0o/0O/0
 3341|      0|            bool zero_parsed = false;
 3342|      0|            auto it = apply_opt(
 3343|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3344|      0|            return {it, 8, zero_parsed};
 3345|      0|        }
 3346|       |
 3347|      2|        case 16:
  ------------------
  |  Branch (3347:9): [True: 2, False: 4]
  ------------------
 3348|       |            // allow 0x/0X
 3349|      2|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3350|      2|                    false};
 3351|       |
 3352|      0|        case 0:
  ------------------
  |  Branch (3352:9): [True: 0, False: 6]
  ------------------
 3353|       |            // detect base
 3354|      0|            return parse_integer_base_prefix_for_detection(range);
 3355|       |
 3356|      4|        default:
  ------------------
  |  Branch (3356:9): [True: 4, False: 2]
  ------------------
 3357|       |            // no base prefix allowed
 3358|      4|            return {range.begin(), base, false};
 3359|      6|    }
 3360|      6|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2390|      2|{
 2391|      2|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 2, False: 0]
  ------------------
 2392|      2|        return range.begin();
 2393|      2|    }
 2394|      0|    return *result;
 2395|      2|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2330|      8|{
 2331|      8|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|      8|    else {
 2344|      8|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|      8|            if (ch < 'A' || ch > 'Z') {
 2346|      8|                return ch;
 2347|      8|            }
 2348|      8|            return static_cast<char_type>(ch +
 2349|      8|                                          static_cast<char_type>('a' - 'A'));
 2350|      8|        };
 2351|       |
 2352|      8|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|      8|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|      8|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|      8|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 2357|      8|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|      8|                    return ascii_tolower(a) ==
 2359|      8|                           static_cast<detail::char_t<Range>>(b);
 2360|      8|                }))) {
 2361|      8|            return unexpected(parse_error::error);
 2362|      8|        }
 2363|       |
 2364|      0|        return it;
 2365|      8|    }
 2366|      8|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1955|      8|{
 1956|      8|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|      8|    else {
 1967|      8|        auto it = range.begin();
 1968|      8|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 8]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|     28|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 20, False: 8]
  ------------------
 1973|     20|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 0, False: 20]
  ------------------
 1974|      0|                return unexpected(eof_error::eof);
 1975|      0|            }
 1976|     20|        }
 1977|       |
 1978|      8|        return it;
 1979|      8|    }
 1980|      8|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|      8|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|      8|    else {
 1116|      8|        return 0;
 1117|      8|    }
 1118|      8|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2344|      8|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|      8|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 0, False: 8]
  |  Branch (2345:29): [True: 8, False: 0]
  ------------------
 2346|      8|                return ch;
 2347|      8|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|      8|        };
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  8.84k|{
  945|  8.84k|    return is_range_eof(r.begin(), r.end());
  946|  8.84k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3290|      2|{
 3291|      2|    return read_matching_string_classic_nocase(range, "0x");
 3292|      2|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3399|      6|{
 3400|      6|    using char_type = detail::char_t<Range>;
 3401|       |
 3402|       |    if constexpr (ranges::contiguous_range<Range>) {
 3403|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3404|       |            return detail::unexpected_scan_error(
 3405|       |                scan_error::invalid_scanned_value,
 3406|       |                "Failed to parse integer: No digits found");
 3407|       |        }
 3408|       |        return range.end();
 3409|       |    }
 3410|      6|    else {
 3411|      6|        return read_while1_code_unit(range,
 3412|      6|                                     [&](char_type ch) noexcept {
 3413|      6|                                         return char_to_int(ch) < base;
 3414|      6|                                     })
 3415|      6|            .transform_error(map_parse_error_to_scan_error(
 3416|      6|                scan_error::invalid_scanned_value,
 3417|      6|                "Failed to parse integer: No digits found"));
 3418|      6|    }
 3419|      6|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2094|      8|{
 2095|      8|    auto it = read_while_code_unit(range, pred);
 2096|      8|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 8, False: 0]
  ------------------
 2097|      8|        return unexpected(parse_error::error);
 2098|      8|    }
 2099|      0|    return it;
 2100|      8|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2074|      8|{
 2075|      8|    return read_until_code_unit(range, std::not_fn(pred));
 2076|      8|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2055|      8|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|      8|    else {
 2060|      8|        auto first = range.begin();
 2061|      8|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 8, False: 0]
  ------------------
 2062|      8|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 8, False: 0]
  ------------------
 2063|      8|                return first;
 2064|      8|            }
 2065|      8|        }
 2066|      0|        return first;
 2067|      8|    }
 2068|      8|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2880|  11.1k|        {
 2881|  11.1k|            return !(y == x);
 2882|  11.1k|        }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3412|      6|                                     [&](char_type ch) noexcept {
 3413|      6|                                         return char_to_int(ch) < base;
 3414|      6|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2516|  20.0k|    {
 2517|  20.0k|        return m_count;
 2518|  20.0k|    }
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5690|      6|    {
 5691|      6|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5691:13): [True: 6, False: 0]
  ------------------
 5692|      6|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5692:13): [True: 0, False: 0]
  ------------------
 5693|      6|            return read_default(range, value, loc);
 5694|      6|        }
 5695|       |
 5696|      0|        reader_impl_for_int<CharT> reader{};
 5697|      0|        signed char tmp_value{};
 5698|      0|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5699|      0|        value = static_cast<signed char>(value);
 5700|      0|        return ret;
 5701|      6|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5672|     16|    {
 5673|     16|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     16|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5674|     16|        if constexpr (std::is_same_v<CharT, char>) {
 5675|     16|            return code_unit_reader<char>{}.read(range, value);
 5676|       |        }
 5677|       |        else {
 5678|       |            SCN_UNUSED(range);
 5679|       |            SCN_EXPECT(false);
 5680|       |            SCN_UNREACHABLE;
 5681|       |        }
 5682|     16|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5590|     16|    {
 5591|     16|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5592|     16|        ch = *range.begin();
 5593|     16|        return it;
 5594|     16|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|    112|{
 1945|    112|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 112]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|    112|    return ranges::next(range.begin());
 1950|    112|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|    378|{
  951|    378|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|    378|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 378]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|    378|    return eof_error::good;
  955|    378|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   251k|{
  945|   251k|    return is_range_eof(r.begin(), r.end());
  946|   251k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   305k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   305k|    {
  938|   305k|        return begin == end;
  939|   305k|    }
  940|   305k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  53.1k|    {
  296|  53.1k|        ++x;
  297|  53.1k|        return x;
  298|  53.1k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3365|     48|{
 3366|     48|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|     48|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     48|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     48|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 48]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     48|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     48|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3367|     48|    auto [base_prefix_begin_it, sign] = sign_result;
 3368|       |
 3369|     48|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3370|     48|        parse_integer_base_prefix(
 3371|     48|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3372|       |
 3373|     48|    if (parsed_zero) {
  ------------------
  |  Branch (3373:9): [True: 0, False: 48]
  ------------------
 3374|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3374:13): [True: 0, False: 0]
  ------------------
 3375|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3375:13): [True: 0, False: 0]
  ------------------
 3376|      0|            digits_begin_it = base_prefix_begin_it;
 3377|      0|        }
 3378|      0|        else {
 3379|      0|            parsed_zero = false;
 3380|      0|        }
 3381|      0|    }
 3382|     48|    else {
 3383|     48|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3383:13): [True: 0, False: 48]
  ------------------
 3384|     48|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3384:13): [True: 48, False: 0]
  ------------------
 3385|     48|            digits_begin_it = base_prefix_begin_it;
 3386|     48|        }
 3387|     48|    }
 3388|       |
 3389|     48|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3389:9): [True: 48, False: 0]
  ------------------
 3390|     48|        sign = sign_type::plus_sign;
 3391|     48|    }
 3392|     48|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3393|     48|        digits_begin_it, parsed_base, sign, parsed_zero};
 3394|     48|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3246|     64|{
 3247|     64|    auto r = read_one_of_code_unit(range, "+-");
 3248|     64|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 64, False: 0]
  ------------------
 3249|     64|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 64, False: 0]
  ------------------
 3250|     64|            return std::pair{range.begin(), sign_type::default_sign};
 3251|     64|        }
 3252|      0|        return unexpected(eof_error::eof);
 3253|     64|    }
 3254|       |
 3255|      0|    auto& it = *r;
 3256|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 0, False: 0]
  ------------------
 3257|      0|        return std::pair{it, sign_type::minus_sign};
 3258|      0|    }
 3259|      0|    return std::pair{it, sign_type::plus_sign};
 3260|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|     64|{
 2372|     64|    auto it = read_code_unit(range);
 2373|     64|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 64]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|    128|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 128, False: 64]
  ------------------
 2378|    128|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 128]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|    128|    }
 2382|       |
 2383|     64|    return unexpected(parse_error::error);
 2384|     64|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3332|     48|{
 3333|     48|    switch (base) {
 3334|      0|        case 2:
  ------------------
  |  Branch (3334:9): [True: 0, False: 48]
  ------------------
 3335|       |            // allow 0b/0B
 3336|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3337|      0|                    false};
 3338|       |
 3339|      0|        case 8: {
  ------------------
  |  Branch (3339:9): [True: 0, False: 48]
  ------------------
 3340|       |            // allow 0o/0O/0
 3341|      0|            bool zero_parsed = false;
 3342|      0|            auto it = apply_opt(
 3343|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3344|      0|            return {it, 8, zero_parsed};
 3345|      0|        }
 3346|       |
 3347|     16|        case 16:
  ------------------
  |  Branch (3347:9): [True: 16, False: 32]
  ------------------
 3348|       |            // allow 0x/0X
 3349|     16|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3350|     16|                    false};
 3351|       |
 3352|      0|        case 0:
  ------------------
  |  Branch (3352:9): [True: 0, False: 48]
  ------------------
 3353|       |            // detect base
 3354|      0|            return parse_integer_base_prefix_for_detection(range);
 3355|       |
 3356|     32|        default:
  ------------------
  |  Branch (3356:9): [True: 32, False: 16]
  ------------------
 3357|       |            // no base prefix allowed
 3358|     32|            return {range.begin(), base, false};
 3359|     48|    }
 3360|     48|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|     16|{
 2391|     16|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 16, False: 0]
  ------------------
 2392|     16|        return range.begin();
 2393|     16|    }
 2394|      0|    return *result;
 2395|     16|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|     64|{
 2331|     64|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|     64|                  std::is_same_v<char_type, char>) {
 2335|     64|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 0, False: 64]
  ------------------
 2336|      0|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|      0|        }
 2338|     64|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 64, False: 0]
  ------------------
 2339|     64|            return unexpected(parse_error::error);
 2340|     64|        }
 2341|      0|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|     64|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|     32|{
 2246|     32|    auto it = read_code_unit(range);
 2247|     32|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|     32|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 2252|     32|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|     32|        return unexpected(parse_error::error);
 2254|     32|    }
 2255|       |
 2256|      0|    return *it;
 2257|     32|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3290|     16|{
 3291|     16|    return read_matching_string_classic_nocase(range, "0x");
 3292|     16|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3399|     48|{
 3400|     48|    using char_type = detail::char_t<Range>;
 3401|       |
 3402|     48|    if constexpr (ranges::contiguous_range<Range>) {
 3403|     48|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 48]
  |  |  ------------------
  ------------------
 3404|      0|            return detail::unexpected_scan_error(
 3405|      0|                scan_error::invalid_scanned_value,
 3406|      0|                "Failed to parse integer: No digits found");
 3407|      0|        }
 3408|     48|        return range.end();
 3409|       |    }
 3410|       |    else {
 3411|       |        return read_while1_code_unit(range,
 3412|       |                                     [&](char_type ch) noexcept {
 3413|       |                                         return char_to_int(ch) < base;
 3414|       |                                     })
 3415|       |            .transform_error(map_parse_error_to_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found"));
 3418|       |    }
 3419|     48|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  1.13k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  1.13k|                  ranges::sized_range<Range>) {
 1785|  1.13k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  1.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  1.13k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  1.13k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  1.13k|    {
 1589|  1.13k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  3.59k|    {
 1602|  3.59k|        return sv;
 1603|  3.59k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5977|    678|{
 5978|    678|    using char_type = detail::char_t<Range>;
 5979|    678|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5980|       |
 5981|    678|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5981:9): [True: 678, False: 0]
  ------------------
 5982|    678|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5983|    678|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5984|       |
 5985|    678|        if (max_width == 0) {
  ------------------
  |  Branch (5985:13): [True: 678, False: 0]
  ------------------
 5986|    678|            auto it = read_while_code_unit(range, pred);
 5987|       |
 5988|    678|            if (want_skipped_width) {
  ------------------
  |  Branch (5988:17): [True: 18, False: 660]
  ------------------
 5989|     18|                auto prefix_width =
 5990|     18|                    static_cast<std::ptrdiff_t>(
 5991|     18|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5992|     18|                    ranges::distance(range.begin(), it);
 5993|     18|                return result_type{it, prefix_width};
 5994|     18|            }
 5995|    660|            return result_type{it, 0};
 5996|    678|        }
 5997|       |
 5998|      0|        auto max_width_view = take_width(range, max_width);
 5999|      0|        auto w_it = read_while_code_unit(max_width_view, pred);
 6000|       |
 6001|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6001:13): [True: 0, False: 0]
  ------------------
 6002|      0|            return result_type{w_it.base(), max_width - w_it.count()};
 6003|      0|        }
 6004|      0|        return result_type{w_it.base(), 0};
 6005|      0|    }
 6006|       |
 6007|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6008|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 0]
  ------------------
 6009|      0|        auto it = read_while_code_units(range, fill_chars);
 6010|       |
 6011|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6011:13): [True: 0, False: 0]
  ------------------
 6012|      0|            auto prefix_width =
 6013|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6014|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6015|      0|            return result_type{it, prefix_width};
 6016|      0|        }
 6017|      0|        return result_type{it, 0};
 6018|      0|    }
 6019|       |
 6020|      0|    auto max_width_view = take_width(range, max_width);
 6021|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6022|       |
 6023|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6023:9): [True: 0, False: 0]
  ------------------
 6024|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6025|      0|    }
 6026|      0|    return result_type{w_it.base(), 0};
 6027|      0|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|    678|{
 2075|    678|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    678|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|    678|{
 2056|    678|    if constexpr (ranges::common_range<Range>) {
 2057|    678|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|    678|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|    678|        : m_fptr([](storage fn,
  743|    678|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    678|              cvref<T> obj = *get<T>(fn);
  745|    678|              if constexpr (std::is_void_v<R>) {
  746|    678|                  obj(static_cast<decltype(args)>(args)...);
  747|    678|              }
  748|    678|              else {
  749|    678|                  return obj(static_cast<decltype(args)>(args)...);
  750|    678|              }
  751|    678|          }),
  752|    678|          m_storage(std::addressof(f))
  753|    678|    {
  754|    678|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|    678|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    678|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    678|              else {
  749|    678|                  return obj(static_cast<decltype(args)>(args)...);
  750|    678|              }
  751|    678|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    678|    {
  684|    678|        if constexpr (std::is_const_v<T>) {
  685|    678|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    678|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5983|    678|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|    678|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    678|        {
  667|    678|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3054|      8|{
 3055|      8|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 0, False: 8]
  ------------------
 3056|      0|        auto it = read_while_classic_space(range);
 3057|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3059|      0|            return unexpected(e);
 3060|      0|        }
 3061|       |
 3062|      0|        return it;
 3063|      0|    }
 3064|       |
 3065|      8|    return read_while_classic_space(range);
 3066|      8|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2215|      8|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|      8|    else {
 2225|      8|        auto it = range.begin();
 2226|       |
 2227|      8|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|      8|            auto seg = get_contiguous_beginning(range);
 2229|      8|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|      8|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 8]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|      8|            ranges::advance(it, seg.size());
 2234|      8|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|      8|            return detail::is_cp_space(cp);
 2238|      8|        });
 2239|      8|    }
 2240|      8|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1039|     14|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|     14|    else {
 1059|     14|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|     14|    }
 1061|     14|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2180|     20|{
 2181|     20|    return read_until_code_point(range, std::not_fn(pred));
 2182|     20|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2159|     50|{
 2160|     50|    auto it = range.begin();
 2161|  8.02k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 7.98k, False: 36]
  ------------------
 2162|  7.98k|        const auto val =
 2163|  7.98k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  7.98k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  7.98k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 6.99k, False: 996]
  |  |  ------------------
  ------------------
 2165|  6.99k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  6.99k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  6.99k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 14, False: 6.97k]
  ------------------
 2168|     14|                return it;
 2169|     14|            }
 2170|  6.99k|        }
 2171|  7.97k|        it = val.iterator;
 2172|  7.97k|    }
 2173|       |
 2174|     36|    return it;
 2175|     50|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1997|  8.84k|{
 1998|  8.84k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  8.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  8.84k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  8.84k|    auto it = range.begin();
 2002|  8.84k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  8.84k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  8.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.38k, False: 7.46k]
  |  |  ------------------
  ------------------
 2005|  1.38k|        ++it;
 2006|  1.38k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  1.38k|        return {it, {}};
 2008|  1.38k|    }
 2009|       |
 2010|  7.46k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 7.13k, False: 330]
  ------------------
 2011|  7.13k|        ++it;
 2012|  7.13k|        return {it, string_type(1, *range.begin())};
 2013|  7.13k|    }
 2014|       |
 2015|    330|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|    330|    return {it, string_type{range.begin(), it}};
 2017|  7.46k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1264|  1.38k|{
 1265|  1.38k|    auto it = input.begin();
 1266|  1.52k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 1.52k, False: 0]
  ------------------
 1267|  1.52k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 1.38k, False: 144]
  ------------------
 1268|  1.38k|            break;
 1269|  1.38k|        }
 1270|  1.52k|    }
 1271|  1.38k|    return it;
 1272|  1.38k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|    330|    {
  283|    330|        return n - fn::impl_i_n_s(i, n, bound);
  284|    330|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|    330|    {
  227|    330|        constexpr iter_difference_t<I> zero{0};
  228|    330|        iter_difference_t<I> counter{0};
  229|       |
  230|    330|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 330]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    330|        else {
  237|    990|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 660, False: 330]
  |  Branch (237:34): [True: 660, False: 0]
  ------------------
  238|    660|                ++i;
  239|    660|                ++counter;
  240|    660|            }
  241|    330|        }
  242|       |
  243|    330|        return counter;
  244|    330|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2236|      8|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|      8|            return detail::is_cp_space(cp);
 2238|      8|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3054|    188|{
 3055|    188|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 128, False: 60]
  ------------------
 3056|    128|        auto it = read_while_classic_space(range);
 3057|    128|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|    128|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 128]
  |  |  ------------------
  ------------------
 3059|      0|            return unexpected(e);
 3060|      0|        }
 3061|       |
 3062|    128|        return it;
 3063|    128|    }
 3064|       |
 3065|     60|    return read_while_classic_space(range);
 3066|    188|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|    548|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|    548|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|    548|        auto buf = make_contiguous_buffer(range);
 2220|    548|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|    548|        return ranges::next(range.begin(),
 2222|    548|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|    548|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|    596|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|    596|                  ranges::sized_range<Range>) {
 1785|    596|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|    596|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|    596|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|    596|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|    596|    {
 1589|    596|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3144|  1.74k|    {
 3145|  1.74k|        reader_error_handler eh{};
 3146|  1.74k|        get_derived().check_specs_impl(specs, eh);
 3147|  1.74k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.72k, False: 16]
  |  |  ------------------
  ------------------
 3148|  1.72k|            return detail::unexpected_scan_error(
 3149|  1.72k|                scan_error::invalid_format_string, eh.m_msg);
 3150|  1.72k|        }
 3151|     16|        return {};
 3152|  1.74k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3156|  1.74k|    {
 3157|  1.74k|        return static_cast<Derived&>(*this);
 3158|  1.74k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3524|  1.74k|    {
 3525|  1.74k|        detail::check_int_type_specs(specs, eh);
 3526|  1.74k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3139|     36|    {
 3140|     36|        return true;
 3141|     36|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3578|      2|    {
 3579|      2|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|      2|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|      2|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 2]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|      0|            else {
 3590|      0|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 0]
  ------------------
 3591|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|      0|            }
 3597|      0|        }
 3598|       |
 3599|      2|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 2]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|      2|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|      2|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 3605|      2|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|      0|                    parse_integer_digits_without_thsep(
 3607|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|      0|                        prefix_result.parsed_base));
 3609|       |
 3610|      0|            auto buf = make_contiguous_buffer(
 3611|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|      0|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|      6|    {
 3579|      6|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|      6|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|      6|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 6]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|      0|            else {
 3590|      0|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 0]
  ------------------
 3591|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|      0|            }
 3597|      0|        }
 3598|       |
 3599|      6|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 6]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|      6|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3605|      6|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|      6|                    parse_integer_digits_without_thsep(
 3607|      6|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|      6|                        prefix_result.parsed_base));
 3609|       |
 3610|      6|            auto buf = make_contiguous_buffer(
 3611|      6|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|      6|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      6|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|      6|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3578|      2|    {
 3579|      2|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|      2|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|      2|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 2]
  ------------------
 3583|      0|            if constexpr (!std::is_signed_v<T>) {
 3584|      0|                return detail::unexpected_scan_error(
 3585|      0|                    scan_error::invalid_scanned_value,
 3586|      0|                    "Unexpected '-' sign when parsing an "
 3587|      0|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|      0|        }
 3598|       |
 3599|      2|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 2]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|      2|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|      2|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 3605|      2|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|      0|                    parse_integer_digits_without_thsep(
 3607|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|      0|                        prefix_result.parsed_base));
 3609|       |
 3610|      0|            auto buf = make_contiguous_buffer(
 3611|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|      0|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|      6|    {
 3579|      6|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|      6|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|      6|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 6]
  ------------------
 3583|      0|            if constexpr (!std::is_signed_v<T>) {
 3584|      0|                return detail::unexpected_scan_error(
 3585|      0|                    scan_error::invalid_scanned_value,
 3586|      0|                    "Unexpected '-' sign when parsing an "
 3587|      0|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|      0|        }
 3598|       |
 3599|      6|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 6]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|      6|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3605|      6|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|      6|                    parse_integer_digits_without_thsep(
 3607|      6|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|      6|                        prefix_result.parsed_base));
 3609|       |
 3610|      6|            auto buf = make_contiguous_buffer(
 3611|      6|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|      6|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      6|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|      6|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3578|      2|    {
 3579|      2|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|      2|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|      2|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 2]
  ------------------
 3583|      0|            if constexpr (!std::is_signed_v<T>) {
 3584|      0|                return detail::unexpected_scan_error(
 3585|      0|                    scan_error::invalid_scanned_value,
 3586|      0|                    "Unexpected '-' sign when parsing an "
 3587|      0|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|      0|        }
 3598|       |
 3599|      2|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 2]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|      2|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|      2|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 3605|      2|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|      0|                    parse_integer_digits_without_thsep(
 3607|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|      0|                        prefix_result.parsed_base));
 3609|       |
 3610|      0|            auto buf = make_contiguous_buffer(
 3611|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|      0|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|     16|    {
 3579|     16|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|     16|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|     16|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 16]
  ------------------
 3583|      0|            if constexpr (!std::is_signed_v<T>) {
 3584|      0|                return detail::unexpected_scan_error(
 3585|      0|                    scan_error::invalid_scanned_value,
 3586|      0|                    "Unexpected '-' sign when parsing an "
 3587|      0|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|      0|        }
 3598|       |
 3599|     16|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 16]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|     16|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3605|     16|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|     16|                    parse_integer_digits_without_thsep(
 3607|     16|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|     16|                        prefix_result.parsed_base));
 3609|       |
 3610|     16|            auto buf = make_contiguous_buffer(
 3611|     16|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|     16|            SCN_TRY(result_it,
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     16|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|     16|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3144|    872|    {
 3145|    872|        reader_error_handler eh{};
 3146|    872|        get_derived().check_specs_impl(specs, eh);
 3147|    872|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 864, False: 8]
  |  |  ------------------
  ------------------
 3148|    864|            return detail::unexpected_scan_error(
 3149|    864|                scan_error::invalid_format_string, eh.m_msg);
 3150|    864|        }
 3151|      8|        return {};
 3152|    872|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3156|    872|    {
 3157|    872|        return static_cast<Derived&>(*this);
 3158|    872|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4166|    872|    {
 4167|    872|        detail::check_float_type_specs(specs, eh);
 4168|    872|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3139|     18|    {
 3140|     18|        return true;
 3141|     18|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4238|      8|    {
 4239|      8|        unsigned options{};
 4240|      8|        if (specs.localized) {
  ------------------
  |  Branch (4240:13): [True: 0, False: 8]
  ------------------
 4241|      0|            options |= float_reader_base::allow_thsep;
 4242|      0|        }
 4243|       |
 4244|      8|        SCN_GCC_COMPAT_PUSH
 4245|      8|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4246|       |
 4247|      8|        switch (specs.type) {
 4248|      0|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4248:13): [True: 0, False: 8]
  ------------------
 4249|      0|                return options | float_reader_base::allow_fixed;
 4250|       |
 4251|      0|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4251:13): [True: 0, False: 8]
  ------------------
 4252|      0|                return options | float_reader_base::allow_scientific;
 4253|       |
 4254|      0|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4254:13): [True: 0, False: 8]
  ------------------
 4255|      0|                return options | float_reader_base::allow_hex;
 4256|       |
 4257|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4257:13): [True: 0, False: 8]
  ------------------
 4258|      0|                return options | float_reader_base::allow_scientific |
 4259|      0|                       float_reader_base::allow_fixed;
 4260|       |
 4261|      8|            case detail::presentation_type::none:
  ------------------
  |  Branch (4261:13): [True: 8, False: 0]
  ------------------
 4262|      8|                return options | float_reader_base::allow_scientific |
 4263|      8|                       float_reader_base::allow_fixed |
 4264|      8|                       float_reader_base::allow_hex;
 4265|       |
 4266|      0|            default:
  ------------------
  |  Branch (4266:13): [True: 0, False: 8]
  ------------------
 4267|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4268|      8|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4269|      8|        }
 4270|       |
 4271|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4272|      8|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3690|      8|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|     18|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|     36|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4078|     16|    {
 4079|     16|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4079:13): [True: 16, False: 0]
  ------------------
 4080|     16|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4080:13): [True: 16, False: 0]
  ------------------
 4081|     16|            return;
 4082|     16|        }
 4083|       |
 4084|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4085|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4085:13): [True: 0, False: 0]
  ------------------
 4086|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4086:27): [True: 0, False: 0]
  ------------------
 4087|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4087:21): [True: 0, False: 0]
  ------------------
 4088|      0|                    ch = CharT{'.'};
 4089|      0|                }
 4090|      0|            }
 4091|      0|        }
 4092|       |
 4093|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4093:13): [True: 0, False: 0]
  ------------------
 4094|      0|            return;
 4095|      0|        }
 4096|       |
 4097|      0|        auto first =
 4098|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4099|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4099:13): [True: 0, False: 0]
  ------------------
 4100|      0|            return;
 4101|      0|        }
 4102|       |
 4103|      0|        m_thsep_indices.push_back(
 4104|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4105|       |
 4106|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4106:31): [True: 0, False: 0]
  ------------------
 4107|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4107:17): [True: 0, False: 0]
  ------------------
 4108|      0|                *first++ = std::move(*it);
 4109|      0|            }
 4110|      0|            else {
 4111|      0|                m_thsep_indices.push_back(
 4112|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4113|      0|            }
 4114|      0|        }
 4115|       |
 4116|      0|        str.erase(first, str.end());
 4117|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|      4|    {
 1686|      4|        return m_storage.has_value();
 1687|      4|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|      2|    {
 1691|      2|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|      2|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      2|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|      2|        return *m_storage;
 1693|      2|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|      2|    {
  763|      2|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|      2|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3735|      2|    {
 3736|      2|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3737|      2|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3738|      2|        auto it = sign_result.first;
 3739|      2|        m_sign = sign_result.second;
 3740|       |
 3741|      2|        auto digits_begin = it;
 3742|      2|        auto r = ranges::subrange{it, range.end()};
 3743|       |        if constexpr (ranges::contiguous_range<Range> &&
 3744|       |                      ranges::sized_range<Range>) {
 3745|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3746|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3747|       |                SCN_TRY_ASSIGN(
 3748|       |                    it,
 3749|       |                    do_read_source_impl(
 3750|       |                        r,
 3751|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3752|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3753|       |            }
 3754|       |            else {
 3755|       |                auto cb = [&](const auto& rr)
 3756|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|       |                    auto res = read_all(rr);
 3758|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3759|       |                        return detail::unexpected_scan_error(
 3760|       |                            scan_error::invalid_scanned_value,
 3761|       |                            "Invalid float value");
 3762|       |                    }
 3763|       |                    return res;
 3764|       |                };
 3765|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3766|       |            }
 3767|       |        }
 3768|      2|        else {
 3769|      2|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      2|    }                                                  \
  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3770|      0|                it,
 3771|      0|                do_read_source_impl(
 3772|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3773|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3774|      0|        }
 3775|       |
 3776|      2|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|      2|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      2|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3777|       |
 3778|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3778:13): [True: 0, False: 0]
  |  Branch (3778:48): [True: 0, False: 0]
  ------------------
 3779|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3779:13): [True: 0, False: 0]
  ------------------
 3780|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3780:13): [True: 0, False: 0]
  ------------------
 3781|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3782|      0|        }
 3783|       |
 3784|      0|        handle_separators();
 3785|       |
 3786|      0|        return it;
 3787|      2|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4021|      2|    {
 4022|      2|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4023|      2|        const bool allowed_nonhex =
 4024|      2|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4025|      2|             ~static_cast<unsigned>(allow_hex)) != 0;
 4026|       |
 4027|      2|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4027:39): [True: 2, False: 0]
  |  Branch (4027:45): [True: 0, False: 2]
  ------------------
 4028|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4029|      0|                scan_error::invalid_scanned_value,
 4030|      0|                "Invalid infinite floating-point value"));
 4031|      0|        }
 4032|      2|        else if (r) {
  ------------------
  |  Branch (4032:18): [True: 0, False: 2]
  ------------------
 4033|      0|            return *r;
 4034|      0|        }
 4035|       |
 4036|      2|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4036:39): [True: 2, False: 0]
  |  Branch (4036:45): [True: 0, False: 2]
  ------------------
 4037|      0|            return unexpected(r.error());
 4038|      0|        }
 4039|      2|        else if (r) {
  ------------------
  |  Branch (4039:18): [True: 0, False: 2]
  ------------------
 4040|      0|            return *r;
 4041|      0|        }
 4042|       |
 4043|      2|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4043:13): [True: 2, False: 0]
  |  Branch (4043:28): [True: 0, False: 2]
  ------------------
 4044|       |            // only hex allowed:
 4045|       |            // prefix "0x" allowed, not required
 4046|      0|            auto it = range.begin();
 4047|       |
 4048|      0|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4048:22): [True: 0, False: 0]
  ------------------
 4049|      0|                m_kind = float_kind::hex_with_prefix;
 4050|      0|                it = *r;
 4051|      0|            }
 4052|      0|            else {
 4053|      0|                m_kind = float_kind::hex_without_prefix;
 4054|      0|            }
 4055|       |
 4056|      0|            return read_hex(ranges::subrange{it, range.end()});
 4057|      0|        }
 4058|      2|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4058:13): [True: 0, False: 2]
  |  Branch (4058:29): [True: 0, False: 0]
  ------------------
 4059|       |            // only nonhex allowed:
 4060|       |            // no prefix allowed
 4061|      0|            m_kind = float_kind::generic;
 4062|      0|            return read_regular_float(range);
 4063|      0|        }
 4064|       |        // both hex and nonhex allowed:
 4065|       |        // check for "0x" prefix -> hex,
 4066|       |        // regular otherwise
 4067|       |
 4068|      2|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  ------------------
  ------------------
 4069|      0|            m_kind = float_kind::hex_with_prefix;
 4070|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4071|      0|        }
 4072|       |
 4073|      2|        m_kind = float_kind::generic;
 4074|      2|        return read_regular(range);
 4075|      2|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3829|      2|    {
 3830|      2|        auto it = range.begin();
 3831|      2|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3831:73): [True: 2, False: 0]
  ------------------
 3832|      2|            return unexpected(r.error());
 3833|      2|        }
 3834|      0|        else {
 3835|      0|            it = *r;
 3836|      0|        }
 3837|       |
 3838|      0|        if (auto r = read_matching_string_classic_nocase(
 3839|      0|                ranges::subrange{it, range.end()}, "inity");
 3840|      0|            !r) {
  ------------------
  |  Branch (3840:13): [True: 0, False: 0]
  ------------------
 3841|      0|            m_kind = float_kind::inf_short;
 3842|      0|            return it;
 3843|      0|        }
 3844|      0|        else {
 3845|      0|            m_kind = float_kind::inf_long;
 3846|      0|            return *r;
 3847|      0|        }
 3848|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3852|      2|    {
 3853|      2|        auto it = range.begin();
 3854|      2|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3854:73): [True: 2, False: 0]
  ------------------
 3855|      2|            return r.transform_error(map_parse_error_to_scan_error(
 3856|      2|                scan_error::invalid_scanned_value,
 3857|      2|                "Invalid floating-point NaN value"));
 3858|      2|        }
 3859|      0|        else {
 3860|      0|            it = *r;
 3861|      0|        }
 3862|       |
 3863|      0|        if (auto r =
 3864|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3865|      0|            !r) {
  ------------------
  |  Branch (3865:13): [True: 0, False: 0]
  ------------------
 3866|      0|            m_kind = float_kind::nan_simple;
 3867|      0|            return it;
 3868|      0|        }
 3869|      0|        else {
 3870|      0|            it = *r;
 3871|      0|        }
 3872|       |
 3873|      0|        auto payload_beg_it = it;
 3874|      0|        it = read_while_code_unit(
 3875|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3876|      0|                return is_ascii_char(ch) &&
 3877|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3878|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3879|      0|            });
 3880|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3881|       |
 3882|      0|        m_kind = float_kind::nan_with_payload;
 3883|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3883:18): [True: 0, False: 0]
  ------------------
 3884|      0|                                             ')')) {
 3885|      0|            return *r;
 3886|      0|        }
 3887|      0|        return detail::unexpected_scan_error(
 3888|      0|            scan_error::invalid_scanned_value,
 3889|      0|            "Invalid floating-point NaN payload");
 3890|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3822|      2|    {
 3823|      2|        return read_matching_string_classic_nocase(range, "0x");
 3824|      2|    }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3964|      2|    {
 3965|      2|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3966|      2|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3966:35): [True: 2, False: 0]
  |  Branch (3966:50): [True: 0, False: 2]
  ------------------
 3967|       |
 3968|      2|        auto it = ranges::begin(range);
 3969|      2|        std::ptrdiff_t digits_count = 0;
 3970|       |
 3971|      2|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3972|      2|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 3973|      2|            return r.transform_error(
 3974|      2|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3975|      2|                                              "Invalid floating-point value"));
 3976|      2|        }
 3977|      0|        else {
 3978|      0|            digits_count += ranges::distance(it, *r);
 3979|      0|            it = *r;
 3980|      0|        }
 3981|       |
 3982|      0|        m_integral_part_length = digits_count;
 3983|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3983:18): [True: 0, False: 0]
  ------------------
 3984|      0|                                             m_locale_options.decimal_point)) {
 3985|      0|            it = *r;
 3986|      0|        }
 3987|       |
 3988|      0|        if (auto r =
  ------------------
  |  Branch (3988:18): [True: 0, False: 0]
  ------------------
 3989|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3990|      0|            digits_count += ranges::distance(it, *r);
 3991|      0|            it = *r;
 3992|      0|        }
 3993|       |
 3994|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3995|      0|            return detail::unexpected_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "No significand digits in float");
 3998|      0|        }
 3999|       |
 4000|      0|        auto beg_exp_it = it;
 4001|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 0]
  ------------------
 4002|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4003|      0|        }
 4004|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4004:13): [True: 0, False: 0]
  |  Branch (4004:29): [True: 0, False: 0]
  ------------------
 4005|      0|            return detail::unexpected_scan_error(
 4006|      0|                scan_error::invalid_scanned_value,
 4007|      0|                "No exponent given to scientific float");
 4008|      0|        }
 4009|       |
 4010|      0|        m_kind =
 4011|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4011:13): [True: 0, False: 0]
  ------------------
 4012|       |
 4013|      0|        return it;
 4014|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3792|      2|    {
 3793|      2|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  Branch (865:45): [True: 0, False: 2]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3794|      2|                         thsep_allowed)) {
 3795|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3796|      0|                return char_to_int(ch) < 10 ||
 3797|      0|                       ch == m_locale_options.thousands_sep;
 3798|      0|            });
 3799|      0|        }
 3800|       |
 3801|      2|        return read_while1_code_unit(
 3802|      2|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3803|      2|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      2|        : m_fptr([](storage fn,
  743|      2|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      2|              cvref<T> obj = *get<T>(fn);
  745|      2|              if constexpr (std::is_void_v<R>) {
  746|      2|                  obj(static_cast<decltype(args)>(args)...);
  747|      2|              }
  748|      2|              else {
  749|      2|                  return obj(static_cast<decltype(args)>(args)...);
  750|      2|              }
  751|      2|          }),
  752|      2|          m_storage(std::addressof(f))
  753|      2|    {
  754|      2|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|      2|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      2|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      2|              else {
  749|      2|                  return obj(static_cast<decltype(args)>(args)...);
  750|      2|              }
  751|      2|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      2|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      2|        else if constexpr (std::is_object_v<T>) {
  688|      2|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      2|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3802|      2|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      2|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      2|        {
  662|      2|        }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3695|      2|    {
 3696|      2|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  ------------------
  ------------------
 3697|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3698|      0|                classic_with_thsep_tag{}};
 3699|      0|        }
 3700|       |
 3701|      2|        return read_source_impl(range);
 3702|      2|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|     16|    {
  763|     16|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|     16|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3735|     16|    {
 3736|     16|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3737|     16|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3738|     16|        auto it = sign_result.first;
 3739|     16|        m_sign = sign_result.second;
 3740|       |
 3741|     16|        auto digits_begin = it;
 3742|     16|        auto r = ranges::subrange{it, range.end()};
 3743|       |        if constexpr (ranges::contiguous_range<Range> &&
 3744|     16|                      ranges::sized_range<Range>) {
 3745|     16|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  Branch (865:45): [True: 0, False: 16]
  |  |  |  Branch (865:45): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 3746|     16|                             m_locale_options.decimal_point != CharT{'.'})) {
 3747|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3748|      0|                    it,
 3749|      0|                    do_read_source_impl(
 3750|      0|                        r,
 3751|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3752|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3753|      0|            }
 3754|     16|            else {
 3755|     16|                auto cb = [&](const auto& rr)
 3756|     16|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|     16|                    auto res = read_all(rr);
 3758|     16|                    if (SCN_UNLIKELY(res == r.begin())) {
 3759|     16|                        return detail::unexpected_scan_error(
 3760|     16|                            scan_error::invalid_scanned_value,
 3761|     16|                            "Invalid float value");
 3762|     16|                    }
 3763|     16|                    return res;
 3764|     16|                };
 3765|     16|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3766|     16|            }
 3767|       |        }
 3768|       |        else {
 3769|       |            SCN_TRY_ASSIGN(
 3770|       |                it,
 3771|       |                do_read_source_impl(
 3772|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3773|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3774|       |        }
 3775|       |
 3776|     16|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3777|       |
 3778|     16|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3778:13): [True: 16, False: 0]
  |  Branch (3778:48): [True: 16, False: 0]
  ------------------
 3779|     16|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3779:13): [True: 16, False: 0]
  ------------------
 3780|     16|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3780:13): [True: 16, False: 0]
  ------------------
 3781|     16|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3782|     16|        }
 3783|       |
 3784|     16|        handle_separators();
 3785|       |
 3786|     16|        return it;
 3787|     16|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3829|     16|    {
 3830|     16|        auto it = range.begin();
 3831|     16|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3831:73): [True: 16, False: 0]
  ------------------
 3832|     16|            return unexpected(r.error());
 3833|     16|        }
 3834|      0|        else {
 3835|      0|            it = *r;
 3836|      0|        }
 3837|       |
 3838|      0|        if (auto r = read_matching_string_classic_nocase(
 3839|      0|                ranges::subrange{it, range.end()}, "inity");
 3840|      0|            !r) {
  ------------------
  |  Branch (3840:13): [True: 0, False: 0]
  ------------------
 3841|      0|            m_kind = float_kind::inf_short;
 3842|      0|            return it;
 3843|      0|        }
 3844|      0|        else {
 3845|      0|            m_kind = float_kind::inf_long;
 3846|      0|            return *r;
 3847|      0|        }
 3848|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3852|     16|    {
 3853|     16|        auto it = range.begin();
 3854|     16|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3854:73): [True: 16, False: 0]
  ------------------
 3855|     16|            return r.transform_error(map_parse_error_to_scan_error(
 3856|     16|                scan_error::invalid_scanned_value,
 3857|     16|                "Invalid floating-point NaN value"));
 3858|     16|        }
 3859|      0|        else {
 3860|      0|            it = *r;
 3861|      0|        }
 3862|       |
 3863|      0|        if (auto r =
 3864|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3865|      0|            !r) {
  ------------------
  |  Branch (3865:13): [True: 0, False: 0]
  ------------------
 3866|      0|            m_kind = float_kind::nan_simple;
 3867|      0|            return it;
 3868|      0|        }
 3869|      0|        else {
 3870|      0|            it = *r;
 3871|      0|        }
 3872|       |
 3873|      0|        auto payload_beg_it = it;
 3874|      0|        it = read_while_code_unit(
 3875|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3876|      0|                return is_ascii_char(ch) &&
 3877|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3878|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3879|      0|            });
 3880|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3881|       |
 3882|      0|        m_kind = float_kind::nan_with_payload;
 3883|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3883:18): [True: 0, False: 0]
  ------------------
 3884|      0|                                             ')')) {
 3885|      0|            return *r;
 3886|      0|        }
 3887|      0|        return detail::unexpected_scan_error(
 3888|      0|            scan_error::invalid_scanned_value,
 3889|      0|            "Invalid floating-point NaN payload");
 3890|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|     16|    {
 3823|     16|        return read_matching_string_classic_nocase(range, "0x");
 3824|     16|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4021|     16|    {
 4022|     16|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4023|     16|        const bool allowed_nonhex =
 4024|     16|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4025|     16|             ~static_cast<unsigned>(allow_hex)) != 0;
 4026|       |
 4027|     16|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4027:39): [True: 16, False: 0]
  |  Branch (4027:45): [True: 0, False: 16]
  ------------------
 4028|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4029|      0|                scan_error::invalid_scanned_value,
 4030|      0|                "Invalid infinite floating-point value"));
 4031|      0|        }
 4032|     16|        else if (r) {
  ------------------
  |  Branch (4032:18): [True: 0, False: 16]
  ------------------
 4033|      0|            return *r;
 4034|      0|        }
 4035|       |
 4036|     16|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4036:39): [True: 16, False: 0]
  |  Branch (4036:45): [True: 0, False: 16]
  ------------------
 4037|      0|            return unexpected(r.error());
 4038|      0|        }
 4039|     16|        else if (r) {
  ------------------
  |  Branch (4039:18): [True: 0, False: 16]
  ------------------
 4040|      0|            return *r;
 4041|      0|        }
 4042|       |
 4043|     16|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4043:13): [True: 16, False: 0]
  |  Branch (4043:28): [True: 0, False: 16]
  ------------------
 4044|       |            // only hex allowed:
 4045|       |            // prefix "0x" allowed, not required
 4046|      0|            auto it = range.begin();
 4047|       |
 4048|      0|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4048:22): [True: 0, False: 0]
  ------------------
 4049|      0|                m_kind = float_kind::hex_with_prefix;
 4050|      0|                it = *r;
 4051|      0|            }
 4052|      0|            else {
 4053|      0|                m_kind = float_kind::hex_without_prefix;
 4054|      0|            }
 4055|       |
 4056|      0|            return read_hex(ranges::subrange{it, range.end()});
 4057|      0|        }
 4058|     16|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4058:13): [True: 0, False: 16]
  |  Branch (4058:29): [True: 0, False: 0]
  ------------------
 4059|       |            // only nonhex allowed:
 4060|       |            // no prefix allowed
 4061|      0|            m_kind = float_kind::generic;
 4062|      0|            return read_regular_float(range);
 4063|      0|        }
 4064|       |        // both hex and nonhex allowed:
 4065|       |        // check for "0x" prefix -> hex,
 4066|       |        // regular otherwise
 4067|       |
 4068|     16|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 4069|      0|            m_kind = float_kind::hex_with_prefix;
 4070|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4071|      0|        }
 4072|       |
 4073|     16|        m_kind = float_kind::generic;
 4074|     16|        return read_regular(range);
 4075|     16|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3756|     16|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|     16|                    auto res = read_all(rr);
 3758|     16|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 3759|      0|                        return detail::unexpected_scan_error(
 3760|      0|                            scan_error::invalid_scanned_value,
 3761|      0|                            "Invalid float value");
 3762|      0|                    }
 3763|     16|                    return res;
 3764|     16|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|     16|{
 1938|     16|    return ranges::next(range.begin(), range.end());
 1939|     16|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|     16|    {
  313|     16|        ranges::advance(x, bound);
  314|     16|        return x;
  315|     16|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|     16|    {
  275|     16|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     16|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|     22|    {
  190|     22|        i = std::move(bound);
  191|     22|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|     16|    {
 1676|     16|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|     16|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|     16|    {
 1720|     16|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|     16|                      ranges::sized_range<Range>) {
 1725|     16|            m_storage.reset();
 1726|     16|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|     16|    }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3695|     16|    {
 3696|     16|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 3697|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3698|      0|                classic_with_thsep_tag{}};
 3699|      0|        }
 3700|       |
 3701|     16|        return read_source_impl(range);
 3702|     16|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3721|     16|    {
 3722|     16|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3723|       |
 3724|     16|        const std::ptrdiff_t sign_len =
 3725|     16|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3725:13): [True: 0, False: 16]
  ------------------
 3726|       |
 3727|     16|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     16|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3728|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3729|     16|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4191|      2|    {
 4192|      2|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|      2|#if !SCN_DISABLE_LOCALE
 4195|      2|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 0, False: 2]
  ------------------
 4196|      0|            return read_impl<Range>(
 4197|      0|                range, rd,
 4198|      0|                [](float_reader<CharT>& r, auto&&... args) {
 4199|      0|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|      0|                },
 4201|      0|                value, loc);
 4202|      0|        }
 4203|      2|#endif
 4204|       |
 4205|      2|        return read_impl<Range>(
 4206|      2|            range, rd,
 4207|      2|            [](float_reader<CharT>& r, auto&&... args) {
 4208|      2|                return r.read_source(SCN_FWD(args)...);
 4209|      2|            },
 4210|      2|            value);
 4211|      2|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4227|      2|    {
 4228|      2|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|      2|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 4230|      2|            return unexpected(r.error());
 4231|      2|        }
 4232|       |
 4233|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|      0|        return ranges::next(range.begin(), n);
 4235|      0|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|      2|        : m_fptr([](storage fn,
  743|      2|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      2|              cvref<T> obj = *get<T>(fn);
  745|      2|              if constexpr (std::is_void_v<R>) {
  746|      2|                  obj(static_cast<decltype(args)>(args)...);
  747|      2|              }
  748|      2|              else {
  749|      2|                  return obj(static_cast<decltype(args)>(args)...);
  750|      2|              }
  751|      2|          }),
  752|      2|          m_storage(std::addressof(f))
  753|      2|    {
  754|      2|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|      2|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      2|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      2|              else {
  749|      2|                  return obj(static_cast<decltype(args)>(args)...);
  750|      2|              }
  751|      2|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|      2|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      2|        else if constexpr (std::is_object_v<T>) {
  688|      2|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      2|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4207|      2|            [](float_reader<CharT>& r, auto&&... args) {
 4208|      2|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|      2|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      2|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      2|        {
  662|      2|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4191|      6|    {
 4192|      6|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|      6|#if !SCN_DISABLE_LOCALE
 4195|      6|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 0, False: 6]
  ------------------
 4196|      0|            return read_impl<Range>(
 4197|      0|                range, rd,
 4198|      0|                [](float_reader<CharT>& r, auto&&... args) {
 4199|      0|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|      0|                },
 4201|      0|                value, loc);
 4202|      0|        }
 4203|      6|#endif
 4204|       |
 4205|      6|        return read_impl<Range>(
 4206|      6|            range, rd,
 4207|      6|            [](float_reader<CharT>& r, auto&&... args) {
 4208|      6|                return r.read_source(SCN_FWD(args)...);
 4209|      6|            },
 4210|      6|            value);
 4211|      6|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4227|     16|    {
 4228|     16|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|     16|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 4230|      0|            return unexpected(r.error());
 4231|      0|        }
 4232|       |
 4233|     16|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     16|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|      0|        return ranges::next(range.begin(), n);
 4235|     16|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4207|      6|            [](float_reader<CharT>& r, auto&&... args) {
 4208|      6|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|      6|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5837|    882|{
 5838|       |    if constexpr (std::is_same_v<T, bool>) {
 5839|       |        return reader_impl_for_bool<CharT>{};
 5840|       |    }
 5841|       |    else if constexpr (std::is_same_v<T, char>) {
 5842|       |        return reader_impl_for_char<CharT>{};
 5843|       |    }
 5844|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5845|       |        return reader_impl_for_wchar<CharT>{};
 5846|       |    }
 5847|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5848|       |        return reader_impl_for_code_point<CharT>{};
 5849|       |    }
 5850|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5851|       |                       std::is_same_v<T, std::wstring_view>) {
 5852|       |        return reader_impl_for_string<CharT>{};
 5853|       |    }
 5854|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5855|    882|                       std::is_same_v<T, std::wstring>) {
 5856|    882|        return reader_impl_for_string<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5859|       |                       std::is_same_v<T, wregex_matches>) {
 5860|       |        return reader_impl_for_regex_matches<CharT>{};
 5861|       |    }
 5862|       |    else if constexpr (std::is_same_v<T, void*>) {
 5863|       |        return reader_impl_for_voidptr<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_floating_point_v<T>) {
 5866|       |        return reader_impl_for_float<CharT>{};
 5867|       |    }
 5868|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5869|       |                       !std::is_same_v<T, wchar_t> &&
 5870|       |                       !std::is_same_v<T, char32_t> &&
 5871|       |                       !std::is_same_v<T, bool>) {
 5872|       |        return reader_impl_for_int<CharT>{};
 5873|       |    }
 5874|       |    else {
 5875|       |        return reader_impl_for_monostate<CharT>{};
 5876|       |    }
 5877|    882|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5231|  2.64k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3144|  2.61k|    {
 3145|  2.61k|        reader_error_handler eh{};
 3146|  2.61k|        get_derived().check_specs_impl(specs, eh);
 3147|  2.61k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.61k]
  |  |  ------------------
  ------------------
 3148|      0|            return detail::unexpected_scan_error(
 3149|      0|                scan_error::invalid_format_string, eh.m_msg);
 3150|      0|        }
 3151|  2.61k|        return {};
 3152|  2.61k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3156|  2.61k|    {
 3157|  2.61k|        return static_cast<Derived&>(*this);
 3158|  2.61k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5235|  2.61k|    {
 5236|  2.61k|        detail::check_string_type_specs(specs, eh);
 5237|       |
 5238|  2.61k|        SCN_GCC_PUSH
 5239|  2.61k|        SCN_GCC_IGNORE("-Wswitch")
 5240|  2.61k|        SCN_GCC_IGNORE("-Wswitch-default")
 5241|       |
 5242|  2.61k|        SCN_CLANG_PUSH
 5243|  2.61k|        SCN_CLANG_IGNORE("-Wswitch")
 5244|  2.61k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5245|       |
 5246|  2.61k|        switch (specs.type) {
  ------------------
  |  Branch (5246:17): [True: 0, False: 2.61k]
  ------------------
 5247|     24|            case detail::presentation_type::none:
  ------------------
  |  Branch (5247:13): [True: 24, False: 2.59k]
  ------------------
 5248|     24|                m_type = reader_type::word;
 5249|     24|                break;
 5250|       |
 5251|      0|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5251:13): [True: 0, False: 2.61k]
  ------------------
 5252|      0|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5252:21): [True: 0, False: 0]
  ------------------
 5253|      0|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5253:21): [True: 0, False: 0]
  ------------------
 5254|      0|                    m_type = reader_type::custom_word;
 5255|      0|                }
 5256|      0|                else {
 5257|      0|                    m_type = reader_type::word;
 5258|      0|                }
 5259|      0|                break;
 5260|      0|            }
 5261|       |
 5262|      0|            case detail::presentation_type::character:
  ------------------
  |  Branch (5262:13): [True: 0, False: 2.61k]
  ------------------
 5263|      0|                m_type = reader_type::character;
 5264|      0|                break;
 5265|       |
 5266|    864|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5266:13): [True: 864, False: 1.75k]
  ------------------
 5267|    864|                m_type = reader_type::character_set;
 5268|    864|                break;
 5269|       |
 5270|  1.42k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5270:13): [True: 1.42k, False: 1.19k]
  ------------------
 5271|  1.42k|                m_type = reader_type::regex;
 5272|  1.42k|                break;
 5273|       |
 5274|    306|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5274:13): [True: 306, False: 2.31k]
  ------------------
 5275|    306|                m_type = reader_type::regex_escaped;
 5276|    306|                break;
 5277|  2.61k|        }
 5278|       |
 5279|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5280|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5281|  2.61k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5284|  3.43k|    {
 5285|  3.43k|        return m_type == reader_type::word;
 5286|  3.43k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  1.16k|{
 1242|  1.16k|    auto it = src.begin();
 1243|   347k|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 345k, False: 1.10k]
  ------------------
 1244|   345k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|   345k|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 54, False: 345k]
  ------------------
 1246|     54|            return false;
 1247|     54|        }
 1248|   345k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 6, False: 345k]
  ------------------
 1249|      6|            return false;
 1250|      6|        }
 1251|   345k|        const auto cp = detail::decode_code_point_exhaustive(
 1252|   345k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|   345k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 0, False: 345k]
  ------------------
 1254|      0|            return false;
 1255|      0|        }
 1256|   345k|        it += len;
 1257|   345k|    }
 1258|  1.10k|    return true;
 1259|  1.16k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3096|      2|{
 3097|      2|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3098|      2|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3098:13): [True: 2, False: 0]
  ------------------
 3099|      2|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|      2|    static_cast<    \
  |  |  935|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3100|      2|        }
 3101|      0|        else {
 3102|      0|            dest.assign(source.view());
 3103|      0|        }
 3104|       |    }
 3105|       |    else {
 3106|       |        return transcode_impl(source.view(), dest);
 3107|       |    }
 3108|       |
 3109|      2|    return {};
 3110|      2|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5132|    864|        {
 5133|    864|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5133:17): [True: 0, False: 864]
  ------------------
 5134|      0|                return {};
 5135|      0|            }
 5136|       |
 5137|    864|            auto charset_string = specs.charset_string<SourceCharT>();
 5138|    864|            auto it = detail::to_address(charset_string.begin());
 5139|    864|            auto set = detail::parse_presentation_set(
 5140|    864|                it, detail::to_address(charset_string.end()), nonascii);
 5141|    864|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|    864|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    864|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 864]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5142|    864|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|    864|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|    864|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5143|    864|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|    864|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|    864|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5144|       |
 5145|    864|            std::sort(nonascii.extra_ranges.begin(),
 5146|    864|                      nonascii.extra_ranges.end());
 5147|    864|            return {};
 5148|    864|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5165|   257k|        {
 5166|   257k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5166:17): [True: 34.2k, False: 223k]
  ------------------
 5167|  34.2k|                return helper.is_char_set_in_extra_literals(cp);
 5168|  34.2k|            }
 5169|       |
 5170|   223k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5171|   257k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5115|  34.2k|        {
 5116|       |            // TODO: binary search?
 5117|  34.2k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5117:17): [True: 0, False: 34.2k]
  ------------------
 5118|      0|                return false;
 5119|      0|            }
 5120|       |
 5121|  34.2k|            const auto cp_val = static_cast<uint32_t>(cp);
 5122|  34.2k|            return std::find_if(
 5123|  34.2k|                       nonascii.extra_ranges.begin(),
 5124|  34.2k|                       nonascii.extra_ranges.end(),
 5125|  34.2k|                       [cp_val](const auto& pair) noexcept {
 5126|  34.2k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5127|  34.2k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5128|  34.2k|                       }) != nonascii.extra_ranges.end();
 5129|  34.2k|        }
_ZZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5125|  7.32M|                       [cp_val](const auto& pair) noexcept {
 5126|  7.32M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5126:35): [True: 7.32M, False: 1.43k]
  ------------------
 5127|  7.32M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5127:35): [True: 33.9k, False: 7.29M]
  ------------------
 5128|  7.32M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5105|   223k|        {
 5106|   223k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|   223k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   223k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5107|   223k|            const auto val =
 5108|   223k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5109|   223k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5110|   223k|                    (val % 8)) &
 5111|   223k|                   1u;
 5112|   223k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5102|    864|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5302|     22|    {
 5303|     22|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     22|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|     22|        return read_impl(range, specs, value);
 5305|     22|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5320|     22|    {
 5321|     22|        SCN_CLANG_PUSH
 5322|     22|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|     22|        switch (m_type) {
 5325|      2|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 2, False: 20]
  ------------------
 5326|      2|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 0, False: 22]
  ------------------
 5329|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      0|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 22]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|     14|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 14, False: 8]
  ------------------
 5336|     14|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|     14|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      0|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 0, False: 22]
  ------------------
 5341|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      0|                    range, specs.charset_string<SourceCharT>(),
 5343|      0|                    specs.regexp_flags, value);
 5344|       |
 5345|      6|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 6, False: 16]
  ------------------
 5346|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      6|                    range,
 5348|      6|                    get_unescaped_regex_pattern(
 5349|      6|                        specs.charset_string<SourceCharT>()),
 5350|      6|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 22]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|     22|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|     22|        }
 5357|       |
 5358|     22|        SCN_CLANG_POP
 5359|     22|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4849|      2|    {
 4850|      2|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|      2|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4783|      2|{
 4784|      2|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|      2|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|      2|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 2, False: 0]
  ------------------
 4788|      2|        return detail::unexpected_scan_error(
 4789|      2|            scan_error::invalid_scanned_value,
 4790|      2|            "Invalid encoding in scanned string");
 4791|      2|    }
 4792|       |
 4793|      0|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|      0|    return SCN_MOVE(result);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|      0|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2186|      6|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|      6|    else {
 2196|      6|        auto it = range.begin();
 2197|       |
 2198|      6|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|      6|            auto seg = get_contiguous_beginning(range);
 2200|      6|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|      6|                seg_it != seg.end()) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 6]
  ------------------
 2202|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|      0|            }
 2204|      6|            ranges::advance(it, seg.size());
 2205|      6|        }
 2206|       |
 2207|      0|        return read_until_code_point(
 2208|      6|            ranges::subrange{it, range.end()},
 2209|      6|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|      6|    }
 2211|      6|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2159|      6|{
 2160|      6|    auto it = range.begin();
 2161|    858|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 852, False: 6]
  ------------------
 2162|    852|        const auto val =
 2163|    852|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|    852|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|    852|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 468, False: 384]
  |  |  ------------------
  ------------------
 2165|    468|            const auto cp = detail::decode_code_point_exhaustive(
 2166|    468|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|    468|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 0, False: 468]
  ------------------
 2168|      0|                return it;
 2169|      0|            }
 2170|    468|        }
 2171|    852|        it = val.iterator;
 2172|    852|    }
 2173|       |
 2174|      6|    return it;
 2175|      6|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|    468|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    468|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    468|              else {
  749|    468|                  return obj(static_cast<decltype(args)>(args)...);
  750|    468|              }
  751|    468|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    468|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    468|        else if constexpr (std::is_object_v<T>) {
  688|    468|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    468|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2209|    468|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5077|     14|    {
 5078|     14|        auto it = read_source_impl(range, {specs});
 5079|     14|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14]
  |  |  ------------------
  ------------------
 5080|      0|            return unexpected(it.error());
 5081|      0|        }
 5082|       |
 5083|     14|        return read_string_impl(range, *it, value);
 5084|     14|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5180|     42|    {
 5181|     42|        const bool is_inverted = helper.specs.charset_is_inverted;
 5182|     42|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5183|       |
 5184|     42|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|     42|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 42]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5185|       |
 5186|     42|        read_source_callback cb_wrapper{helper};
 5187|       |
 5188|     42|        if (accepts_nonascii) {
  ------------------
  |  Branch (5188:13): [True: 42, False: 0]
  ------------------
 5189|     42|            const auto cb = [&](char32_t cp) {
 5190|     42|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|     42|            };
 5192|       |
 5193|     42|            if (is_inverted) {
  ------------------
  |  Branch (5193:17): [True: 30, False: 12]
  ------------------
 5194|     30|                auto it = read_until_code_point(range, cb);
 5195|     30|                return check_nonempty(it, range);
 5196|     30|            }
 5197|     12|            auto it = read_while_code_point(range, cb);
 5198|     12|            return check_nonempty(it, range);
 5199|     42|        }
 5200|       |
 5201|      0|        const auto cb = [&](SourceCharT ch) {
 5202|      0|            return cb_wrapper.on_ascii_only(ch);
 5203|      0|        };
 5204|       |
 5205|      0|        if (is_inverted) {
  ------------------
  |  Branch (5205:13): [True: 0, False: 0]
  ------------------
 5206|      0|            auto it = read_until_code_unit(range, cb);
 5207|      0|            return check_nonempty(it, range);
 5208|      0|        }
 5209|      0|        auto it = read_while_code_unit(range, cb);
 5210|      0|        return check_nonempty(it, range);
 5211|      0|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     42|        : m_fptr([](storage fn,
  743|     42|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     42|              cvref<T> obj = *get<T>(fn);
  745|     42|              if constexpr (std::is_void_v<R>) {
  746|     42|                  obj(static_cast<decltype(args)>(args)...);
  747|     42|              }
  748|     42|              else {
  749|     42|                  return obj(static_cast<decltype(args)>(args)...);
  750|     42|              }
  751|     42|          }),
  752|     42|          m_storage(std::addressof(f))
  753|     42|    {
  754|     42|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  6.98k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.98k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.98k|              else {
  749|  6.98k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.98k|              }
  751|  6.98k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  6.98k|    {
  684|  6.98k|        if constexpr (std::is_const_v<T>) {
  685|  6.98k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.98k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5189|  6.98k|            const auto cb = [&](char32_t cp) {
 5190|  6.98k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|  6.98k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|     42|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     42|        {
  667|     42|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5216|     42|    {
 5217|     42|        if (it == range.begin()) {
  ------------------
  |  Branch (5217:13): [True: 0, False: 42]
  ------------------
 5218|      0|            return detail::unexpected_scan_error(
 5219|      0|                scan_error::invalid_scanned_value,
 5220|      0|                "No characters matched in [character set]");
 5221|      0|        }
 5222|       |
 5223|     42|        return it;
 5224|     42|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4783|     14|{
 4784|     14|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|     14|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|     14|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 12, False: 2]
  ------------------
 4788|     12|        return detail::unexpected_scan_error(
 4789|     12|            scan_error::invalid_scanned_value,
 4790|     12|            "Invalid encoding in scanned string");
 4791|     12|    }
 4792|       |
 4793|      2|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|      2|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|      2|    return SCN_MOVE(result);
  ------------------
  |  |  934|      2|    static_cast<    \
  |  |  935|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|      2|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4920|      6|    {
 4921|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      6|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4922|      0|        return read_string_impl(range, it, value);
 4923|      6|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4942|     18|    {
 4943|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4944|       |                      !std::is_same_v<SourceCharT, char>) {
 4945|       |            return detail::unexpected_scan_error(
 4946|       |                scan_error::invalid_format_string,
 4947|       |                "Regex backend doesn't support wide strings as input");
 4948|       |        }
 4949|     18|        else {
 4950|     18|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4950:17): [True: 18, False: 0]
  ------------------
 4951|     18|                return detail::unexpected_scan_error(
 4952|     18|                    scan_error::invalid_format_string,
 4953|     18|                    "Cannot use regex with a non-contiguous source "
 4954|     18|                    "range");
 4955|     18|            }
 4956|       |
 4957|      0|            auto input = get_as_contiguous(range);
 4958|      0|            SCN_TRY(it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4959|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4960|      0|            return ranges::next(range.begin(),
 4961|      0|                                ranges::distance(input.begin(), it));
 4962|      0|        }
 4963|     18|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  959|     18|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|       |                  ranges::sized_range<Range>) {
  962|       |        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|     18|    else {
  975|     18|        return false;
  976|     18|    }
  977|     18|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5302|    850|    {
 5303|    850|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    850|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    850|        return read_impl(range, specs, value);
 5305|    850|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5320|    850|    {
 5321|    850|        SCN_CLANG_PUSH
 5322|    850|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|    850|        switch (m_type) {
 5325|      6|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 6, False: 844]
  ------------------
 5326|      6|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 0, False: 850]
  ------------------
 5329|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      0|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 850]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|    274|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 274, False: 576]
  ------------------
 5336|    274|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|    274|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|    474|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 474, False: 376]
  ------------------
 5341|    474|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|    474|                    range, specs.charset_string<SourceCharT>(),
 5343|    474|                    specs.regexp_flags, value);
 5344|       |
 5345|     96|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 96, False: 754]
  ------------------
 5346|     96|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|     96|                    range,
 5348|     96|                    get_unescaped_regex_pattern(
 5349|     96|                        specs.charset_string<SourceCharT>()),
 5350|     96|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 850]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|    850|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|    850|        }
 5357|       |
 5358|    850|        SCN_CLANG_POP
 5359|    850|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4849|     16|    {
 4850|     16|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|     16|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4783|     16|{
 4784|     16|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|     16|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|     16|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 6, False: 10]
  ------------------
 4788|      6|        return detail::unexpected_scan_error(
 4789|      6|            scan_error::invalid_scanned_value,
 4790|      6|            "Invalid encoding in scanned string");
 4791|      6|    }
 4792|       |
 4793|     10|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     10|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 10]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|     10|    return SCN_MOVE(result);
  ------------------
  |  |  934|     10|    static_cast<    \
  |  |  935|     10|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|     10|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3116|    274|{
 3117|    274|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3118|    274|        dest.assign(source.view());
 3119|       |    }
 3120|       |    else {
 3121|       |        return transcode_impl(source.view(), dest);
 3122|       |    }
 3123|       |
 3124|    274|    return {};
 3125|    274|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|     48|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|     48|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|     48|        auto buf = make_contiguous_buffer(range);
 2191|     48|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|     48|        return ranges::next(range.begin(),
 2193|     48|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|     48|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5077|    274|    {
 5078|    274|        auto it = read_source_impl(range, {specs});
 5079|    274|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24, False: 250]
  |  |  ------------------
  ------------------
 5080|     24|            return unexpected(it.error());
 5081|     24|        }
 5082|       |
 5083|    250|        return read_string_impl(range, *it, value);
 5084|    274|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5180|    822|    {
 5181|    822|        const bool is_inverted = helper.specs.charset_is_inverted;
 5182|    822|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5183|       |
 5184|    822|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|    822|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    822|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 822]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5185|       |
 5186|    822|        read_source_callback cb_wrapper{helper};
 5187|       |
 5188|    822|        if (accepts_nonascii) {
  ------------------
  |  Branch (5188:13): [True: 822, False: 0]
  ------------------
 5189|    822|            const auto cb = [&](char32_t cp) {
 5190|    822|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|    822|            };
 5192|       |
 5193|    822|            if (is_inverted) {
  ------------------
  |  Branch (5193:17): [True: 6, False: 816]
  ------------------
 5194|      6|                auto it = read_until_code_point(range, cb);
 5195|      6|                return check_nonempty(it, range);
 5196|      6|            }
 5197|    816|            auto it = read_while_code_point(range, cb);
 5198|    816|            return check_nonempty(it, range);
 5199|    822|        }
 5200|       |
 5201|      0|        const auto cb = [&](SourceCharT ch) {
 5202|      0|            return cb_wrapper.on_ascii_only(ch);
 5203|      0|        };
 5204|       |
 5205|      0|        if (is_inverted) {
  ------------------
  |  Branch (5205:13): [True: 0, False: 0]
  ------------------
 5206|      0|            auto it = read_until_code_unit(range, cb);
 5207|      0|            return check_nonempty(it, range);
 5208|      0|        }
 5209|      0|        auto it = read_while_code_unit(range, cb);
 5210|      0|        return check_nonempty(it, range);
 5211|      0|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|    822|{
 2160|    822|    auto it = range.begin();
 2161|   250k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 250k, False: 12]
  ------------------
 2162|   250k|        const auto val =
 2163|   250k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   250k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   250k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 250k, False: 0]
  |  |  ------------------
  ------------------
 2165|   250k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   250k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   250k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 810, False: 249k]
  ------------------
 2168|    810|                return it;
 2169|    810|            }
 2170|   250k|        }
 2171|   249k|        it = val.iterator;
 2172|   249k|    }
 2173|       |
 2174|     12|    return it;
 2175|    822|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   250k|{
 1998|   250k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   250k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   250k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   250k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   250k|    auto it = range.begin();
 2002|   250k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   250k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   250k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 216k, False: 33.9k]
  ------------------
 2011|   216k|        ++it;
 2012|   216k|        return {it, string_type(1, *range.begin())};
 2013|   216k|    }
 2014|       |
 2015|  33.9k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  33.9k|    return {it, string_type{range.begin(), it}};
 2017|   250k|}
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  33.9k|    {
  283|  33.9k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  33.9k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  33.9k|    {
  212|  33.9k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 6, False: 33.9k]
  ------------------
  213|      6|            auto dist = bound - i;
  214|      6|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|      6|            return dist;
  216|      6|        }
  217|  33.9k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  33.9k|        return n;
  219|  33.9k|    }
_ZN3scn2v46ranges6detail8advance_2fn3absIlEET_S6_:
  131|  67.8k|    {
  132|  67.8k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 67.8k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|  67.8k|        return t;
  136|  67.8k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKccE8is_validEv:
 1988|   250k|    {
 1989|   250k|        return !codepoint.empty();
 1990|   250k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    822|        : m_fptr([](storage fn,
  743|    822|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    822|              cvref<T> obj = *get<T>(fn);
  745|    822|              if constexpr (std::is_void_v<R>) {
  746|    822|                  obj(static_cast<decltype(args)>(args)...);
  747|    822|              }
  748|    822|              else {
  749|    822|                  return obj(static_cast<decltype(args)>(args)...);
  750|    822|              }
  751|    822|          }),
  752|    822|          m_storage(std::addressof(f))
  753|    822|    {
  754|    822|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|   250k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   250k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   250k|              else {
  749|   250k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   250k|              }
  751|   250k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   250k|    {
  684|   250k|        if constexpr (std::is_const_v<T>) {
  685|   250k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   250k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5189|   250k|            const auto cb = [&](char32_t cp) {
 5190|   250k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|   250k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    822|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    822|        {
  667|    822|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5216|    822|    {
 5217|    822|        if (it == range.begin()) {
  ------------------
  |  Branch (5217:13): [True: 72, False: 750]
  ------------------
 5218|     72|            return detail::unexpected_scan_error(
 5219|     72|                scan_error::invalid_scanned_value,
 5220|     72|                "No characters matched in [character set]");
 5221|     72|        }
 5222|       |
 5223|    750|        return it;
 5224|    822|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|    816|{
 2181|    816|    return read_until_code_point(range, std::not_fn(pred));
 2182|    816|}
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4783|    264|{
 4784|    264|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    264|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    264|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 0, False: 264]
  ------------------
 4788|      0|        return detail::unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Invalid encoding in scanned string");
 4791|      0|    }
 4792|       |
 4793|    264|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    264|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 264]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    264|    return SCN_MOVE(result);
  ------------------
  |  |  934|    264|    static_cast<    \
  |  |  935|    264|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    264|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4920|    570|    {
 4921|    570|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|    570|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    570|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    570|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 556, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    556|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    556|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    556|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    556|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    556|    }                                                  \
  |  |  |  | 3939|    570|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4922|     14|        return read_string_impl(range, it, value);
 4923|    570|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4942|  1.71k|    {
 4943|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4944|       |                      !std::is_same_v<SourceCharT, char>) {
 4945|       |            return detail::unexpected_scan_error(
 4946|       |                scan_error::invalid_format_string,
 4947|       |                "Regex backend doesn't support wide strings as input");
 4948|       |        }
 4949|  1.71k|        else {
 4950|  1.71k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4950:17): [True: 0, False: 1.71k]
  ------------------
 4951|      0|                return detail::unexpected_scan_error(
 4952|      0|                    scan_error::invalid_format_string,
 4953|      0|                    "Cannot use regex with a non-contiguous source "
 4954|      0|                    "range");
 4955|      0|            }
 4956|       |
 4957|  1.71k|            auto input = get_as_contiguous(range);
 4958|  1.71k|            SCN_TRY(it,
  ------------------
  |  | 3940|  1.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.66k, False: 42]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.66k|    }                                                  \
  |  |  |  | 3939|  1.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     42|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4959|     42|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4960|     42|            return ranges::next(range.begin(),
 4961|     42|                                ranges::distance(input.begin(), it));
 4962|  1.71k|        }
 4963|  1.71k|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  959|  1.71k|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|  1.71k|                  ranges::sized_range<Range>) {
  962|  1.71k|        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|       |    else {
  975|       |        return false;
  976|       |    }
  977|  1.71k|}
_ZN3scn2v44impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1065|  1.71k|{
 1066|  1.71k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  930|  1.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1067|       |
 1068|       |    if constexpr (ranges::contiguous_range<Range> &&
 1069|  1.71k|                  ranges::sized_range<Range>) {
 1070|  1.71k|        return r;
 1071|       |    }
 1072|       |    else if constexpr (std::is_same_v<
 1073|       |                           ranges::const_iterator_t<Range>,
 1074|       |                           typename detail::basic_scan_buffer<
 1075|       |                               detail::char_t<Range>>::forward_iterator>) {
 1076|       |        if constexpr (ranges::common_range<Range>) {
 1077|       |            return detail::make_string_view_from_pointers(
 1078|       |                r.begin().to_contiguous_segment_iterator(),
 1079|       |                r.end().to_contiguous_segment_iterator());
 1080|       |        }
 1081|       |        else {
 1082|       |            return r.begin().contiguous_segment();
 1083|       |        }
 1084|       |    }
 1085|       |    else {
 1086|       |        SCN_EXPECT(false);
 1087|       |        SCN_UNREACHABLE;
 1088|       |        // for return type deduction
 1089|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1090|       |    }
 1091|  1.71k|}
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  981|  1.71k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|  1.71k|                  ranges::sized_range<Range>) {
  984|  1.71k|        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|       |                               detail::char_t<Range>>::forward_iterator>) {
  990|       |        auto beg = r.begin();
  991|       |        if (beg.contiguous_segment().empty()) {
  992|       |            return false;
  993|       |        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|       |        else {
  999|       |            if (beg.stores_parent()) {
 1000|       |                return beg.contiguous_segment().end() ==
 1001|       |                       beg.parent()->current_view().end();
 1002|       |            }
 1003|       |            return true;
 1004|       |        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  1.71k|}
_ZN3scn2v44impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4367|  1.71k|{
 4368|  1.71k|    static_assert(ranges::contiguous_range<Input> &&
 4369|  1.71k|                  ranges::borrowed_range<Input> &&
 4370|  1.71k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4371|       |
 4372|  1.71k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4373|  1.71k|    std::basic_regex<CharT> re{};
 4374|  1.71k|    try {
 4375|  1.71k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3940|  1.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4376|  1.71k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4377|  1.71k|                                     re_flags | std::regex_constants::nosubs};
 4378|  1.71k|    }
 4379|  1.71k|    catch (const std::regex_error& err) {
 4380|  1.42k|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4381|  1.42k|                                             "Invalid regex");
 4382|  1.42k|    }
 4383|       |
 4384|    282|    std::match_results<const CharT*> matches{};
 4385|    282|    try {
 4386|    282|        bool found = std::regex_search(input.data(),
 4387|    282|                                       input.data() + input.size(), matches, re,
 4388|    282|                                       std::regex_constants::match_continuous);
 4389|    282|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4389:13): [True: 240, False: 42]
  |  Branch (4389:23): [True: 0, False: 42]
  ------------------
 4390|    222|            return detail::unexpected_scan_error(
 4391|    222|                scan_error::invalid_scanned_value,
 4392|    222|                "Regular expression didn't match");
 4393|    222|        }
 4394|    282|    }
 4395|    282|    catch (const std::regex_error& err) {
 4396|     18|        return detail::unexpected_scan_error(
 4397|     18|            scan_error::invalid_format_string,
 4398|     18|            "Regex matching failed with an error");
 4399|     18|    }
 4400|       |
 4401|     42|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4402|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4403|       |    auto re =
 4404|       |#if SCN_REGEX_BOOST_USE_ICU
 4405|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4406|       |                             make_regex_flags(flags) |
 4407|       |                                 boost::regex_constants::no_except |
 4408|       |                                 boost::regex_constants::nosubs);
 4409|       |#else
 4410|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4411|       |                                  make_regex_flags(flags) |
 4412|       |                                      boost::regex_constants::no_except |
 4413|       |                                      boost::regex_constants::nosubs};
 4414|       |#endif
 4415|       |    if (re.status() != 0) {
 4416|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4417|       |                                             "Invalid regex");
 4418|       |    }
 4419|       |
 4420|       |    boost::match_results<const CharT*> matches{};
 4421|       |    try {
 4422|       |        bool found =
 4423|       |#if SCN_REGEX_BOOST_USE_ICU
 4424|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4425|       |                                   matches, re,
 4426|       |                                   boost::regex_constants::match_continuous);
 4427|       |#else
 4428|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4429|       |                                matches, re,
 4430|       |                                boost::regex_constants::match_continuous);
 4431|       |#endif
 4432|       |        if (!found || matches.prefix().matched) {
 4433|       |            return detail::unexpected_scan_error(
 4434|       |                scan_error::invalid_scanned_value,
 4435|       |                "Regular expression didn't match");
 4436|       |        }
 4437|       |    }
 4438|       |    catch (const std::runtime_error& err) {
 4439|       |        return detail::unexpected_scan_error(
 4440|       |            scan_error::invalid_format_string,
 4441|       |            "Regex matching failed with an error");
 4442|       |    }
 4443|       |
 4444|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4445|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4446|       |    static_assert(std::is_same_v<CharT, char>);
 4447|       |    std::string flagged_pattern{};
 4448|       |    auto re = [&]() {
 4449|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4450|       |        opts.set_never_capture(true);
 4451|       |        if (flagstr.empty()) {
 4452|       |            return re2::RE2{pattern, opts};
 4453|       |        }
 4454|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4455|       |        flagged_pattern.append(flagstr);
 4456|       |        flagged_pattern.append(pattern);
 4457|       |        return re2::RE2{flagged_pattern, opts};
 4458|       |    }();
 4459|       |    if (!re.ok()) {
 4460|       |        return detail::unexpected_scan_error(
 4461|       |            scan_error::invalid_format_string,
 4462|       |            "Failed to parse regular expression");
 4463|       |    }
 4464|       |
 4465|       |    auto new_input = detail::make_string_view_from_pointers(
 4466|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4467|       |    bool found = re2::RE2::Consume(&new_input, re);
 4468|       |    if (!found) {
 4469|       |        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 4470|       |                                             "Regular expression didn't match");
 4471|       |    }
 4472|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4473|       |#endif  // SCN_REGEX_BACKEND == ...
 4474|    282|}
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5837|    882|{
 5838|       |    if constexpr (std::is_same_v<T, bool>) {
 5839|       |        return reader_impl_for_bool<CharT>{};
 5840|       |    }
 5841|       |    else if constexpr (std::is_same_v<T, char>) {
 5842|       |        return reader_impl_for_char<CharT>{};
 5843|       |    }
 5844|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5845|       |        return reader_impl_for_wchar<CharT>{};
 5846|       |    }
 5847|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5848|       |        return reader_impl_for_code_point<CharT>{};
 5849|       |    }
 5850|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5851|       |                       std::is_same_v<T, std::wstring_view>) {
 5852|       |        return reader_impl_for_string<CharT>{};
 5853|       |    }
 5854|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5855|    882|                       std::is_same_v<T, std::wstring>) {
 5856|    882|        return reader_impl_for_string<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5859|       |                       std::is_same_v<T, wregex_matches>) {
 5860|       |        return reader_impl_for_regex_matches<CharT>{};
 5861|       |    }
 5862|       |    else if constexpr (std::is_same_v<T, void*>) {
 5863|       |        return reader_impl_for_voidptr<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_floating_point_v<T>) {
 5866|       |        return reader_impl_for_float<CharT>{};
 5867|       |    }
 5868|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5869|       |                       !std::is_same_v<T, wchar_t> &&
 5870|       |                       !std::is_same_v<T, char32_t> &&
 5871|       |                       !std::is_same_v<T, bool>) {
 5872|       |        return reader_impl_for_int<CharT>{};
 5873|       |    }
 5874|       |    else {
 5875|       |        return reader_impl_for_monostate<CharT>{};
 5876|       |    }
 5877|    882|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3096|      2|{
 3097|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3098|       |        if (source.stores_allocated_string()) {
 3099|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3100|       |        }
 3101|       |        else {
 3102|       |            dest.assign(source.view());
 3103|       |        }
 3104|       |    }
 3105|      2|    else {
 3106|      2|        return transcode_impl(source.view(), dest);
 3107|      2|    }
 3108|       |
 3109|      0|    return {};
 3110|      2|}
_ZN3scn2v44impl14transcode_implIcwEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3071|    276|{
 3072|    276|    dst.clear();
 3073|    276|    transcode_valid_to_string(src, dst);
 3074|    276|    return {};
 3075|    276|}
_ZN3scn2v44impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1501|    276|{
 1502|    276|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1503|       |
 1504|    276|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  930|    276|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    276|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1505|    276|    if constexpr (sizeof(SourceCharT) == 1) {
 1506|       |        if constexpr (sizeof(DestCharT) == 2) {
 1507|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1508|       |            std::u32string tmp;
 1509|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1510|       |            return transcode_to_string_impl_32to16<true>(
 1511|       |                std::u32string_view{tmp}, dest);
 1512|       |        }
 1513|    276|        else if constexpr (sizeof(DestCharT) == 4) {
 1514|    276|            return transcode_valid_to_string_impl_to32(src, dest);
 1515|    276|        }
 1516|       |    }
 1517|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1518|       |        if constexpr (sizeof(DestCharT) == 1) {
 1519|       |            std::u32string tmp;
 1520|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1521|       |            return transcode_to_string_impl_32to8<true>(
 1522|       |                std::u32string_view{tmp}, dest);
 1523|       |        }
 1524|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1525|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1526|       |        }
 1527|       |    }
 1528|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1529|       |        if constexpr (sizeof(DestCharT) == 1) {
 1530|       |            return transcode_to_string_impl_32to8<true>(src, dest);
 1531|       |        }
 1532|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1533|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1534|       |        }
 1535|       |    }
 1536|       |
 1537|    276|    SCN_EXPECT(false);
  ------------------
  |  |  930|    276|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    276|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1538|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1539|    276|}
_ZN3scn2v44impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1375|    276|{
 1376|    276|    static_assert(sizeof(DestCharT) == 4);
 1377|       |
 1378|    276|    auto it = src.begin();
 1379|  86.5k|    while (it != src.end()) {
  ------------------
  |  Branch (1379:12): [True: 86.2k, False: 276]
  ------------------
 1380|  86.2k|        auto res = get_next_code_point_valid(
 1381|  86.2k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1382|  86.2k|                                                                 src.end()));
 1383|  86.2k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  930|  86.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  86.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1384|  86.2k|        dest.push_back(res.value);
 1385|  86.2k|        it = detail::make_string_view_iterator(src, res.iterator);
 1386|  86.2k|    }
 1387|    276|}
_ZN3scn2v44impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1298|  86.2k|{
 1299|  86.2k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|  86.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  86.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1300|       |
 1301|  86.2k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1302|  86.2k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  930|  86.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  86.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1303|       |
 1304|  86.2k|    return {input.begin() + len,
 1305|  86.2k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1306|  86.2k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5302|     22|    {
 5303|     22|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     22|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|     22|        return read_impl(range, specs, value);
 5305|     22|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5320|     22|    {
 5321|     22|        SCN_CLANG_PUSH
 5322|     22|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|     22|        switch (m_type) {
 5325|      2|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 2, False: 20]
  ------------------
 5326|      2|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 0, False: 22]
  ------------------
 5329|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      0|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 22]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|     14|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 14, False: 8]
  ------------------
 5336|     14|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|     14|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      0|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 0, False: 22]
  ------------------
 5341|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      0|                    range, specs.charset_string<SourceCharT>(),
 5343|      0|                    specs.regexp_flags, value);
 5344|       |
 5345|      6|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 6, False: 16]
  ------------------
 5346|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      6|                    range,
 5348|      6|                    get_unescaped_regex_pattern(
 5349|      6|                        specs.charset_string<SourceCharT>()),
 5350|      6|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 22]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|     22|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|     22|        }
 5357|       |
 5358|     22|        SCN_CLANG_POP
 5359|     22|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4849|      2|    {
 4850|      2|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|      2|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4783|      2|{
 4784|      2|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|      2|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|      2|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 2, False: 0]
  ------------------
 4788|      2|        return detail::unexpected_scan_error(
 4789|      2|            scan_error::invalid_scanned_value,
 4790|      2|            "Invalid encoding in scanned string");
 4791|      2|    }
 4792|       |
 4793|      0|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|      0|    return SCN_MOVE(result);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|      0|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5077|     14|    {
 5078|     14|        auto it = read_source_impl(range, {specs});
 5079|     14|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14]
  |  |  ------------------
  ------------------
 5080|      0|            return unexpected(it.error());
 5081|      0|        }
 5082|       |
 5083|     14|        return read_string_impl(range, *it, value);
 5084|     14|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4783|     14|{
 4784|     14|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|     14|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|     14|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 12, False: 2]
  ------------------
 4788|     12|        return detail::unexpected_scan_error(
 4789|     12|            scan_error::invalid_scanned_value,
 4790|     12|            "Invalid encoding in scanned string");
 4791|     12|    }
 4792|       |
 4793|      2|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|      2|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|      2|    return SCN_MOVE(result);
  ------------------
  |  |  934|      2|    static_cast<    \
  |  |  935|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|      2|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4920|      6|    {
 4921|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      6|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4922|      0|        return read_string_impl(range, it, value);
 4923|      6|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5302|    850|    {
 5303|    850|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    850|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    850|        return read_impl(range, specs, value);
 5305|    850|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5320|    850|    {
 5321|    850|        SCN_CLANG_PUSH
 5322|    850|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|    850|        switch (m_type) {
 5325|      6|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 6, False: 844]
  ------------------
 5326|      6|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 0, False: 850]
  ------------------
 5329|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      0|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 850]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|    274|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 274, False: 576]
  ------------------
 5336|    274|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|    274|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|    474|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 474, False: 376]
  ------------------
 5341|    474|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|    474|                    range, specs.charset_string<SourceCharT>(),
 5343|    474|                    specs.regexp_flags, value);
 5344|       |
 5345|     96|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 96, False: 754]
  ------------------
 5346|     96|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|     96|                    range,
 5348|     96|                    get_unescaped_regex_pattern(
 5349|     96|                        specs.charset_string<SourceCharT>()),
 5350|     96|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 850]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|    850|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|    850|        }
 5357|       |
 5358|    850|        SCN_CLANG_POP
 5359|    850|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4849|     16|    {
 4850|     16|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|     16|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4783|     16|{
 4784|     16|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|     16|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|     16|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 6, False: 10]
  ------------------
 4788|      6|        return detail::unexpected_scan_error(
 4789|      6|            scan_error::invalid_scanned_value,
 4790|      6|            "Invalid encoding in scanned string");
 4791|      6|    }
 4792|       |
 4793|     10|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     10|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 10]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|     10|    return SCN_MOVE(result);
  ------------------
  |  |  934|     10|    static_cast<    \
  |  |  935|     10|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|     10|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3116|    274|{
 3117|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3118|       |        dest.assign(source.view());
 3119|       |    }
 3120|    274|    else {
 3121|    274|        return transcode_impl(source.view(), dest);
 3122|    274|    }
 3123|       |
 3124|      0|    return {};
 3125|    274|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5077|    274|    {
 5078|    274|        auto it = read_source_impl(range, {specs});
 5079|    274|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24, False: 250]
  |  |  ------------------
  ------------------
 5080|     24|            return unexpected(it.error());
 5081|     24|        }
 5082|       |
 5083|    250|        return read_string_impl(range, *it, value);
 5084|    274|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4783|    264|{
 4784|    264|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    264|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    264|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 0, False: 264]
  ------------------
 4788|      0|        return detail::unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Invalid encoding in scanned string");
 4791|      0|    }
 4792|       |
 4793|    264|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    264|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 264]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    264|    return SCN_MOVE(result);
  ------------------
  |  |  934|    264|    static_cast<    \
  |  |  935|    264|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    264|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4920|    570|    {
 4921|    570|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|    570|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    570|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    570|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 556, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    556|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    556|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    556|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    556|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    556|    }                                                  \
  |  |  |  | 3939|    570|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4922|     14|        return read_string_impl(range, it, value);
 4923|    570|    }
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5837|    882|{
 5838|       |    if constexpr (std::is_same_v<T, bool>) {
 5839|       |        return reader_impl_for_bool<CharT>{};
 5840|       |    }
 5841|       |    else if constexpr (std::is_same_v<T, char>) {
 5842|       |        return reader_impl_for_char<CharT>{};
 5843|       |    }
 5844|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5845|       |        return reader_impl_for_wchar<CharT>{};
 5846|       |    }
 5847|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5848|       |        return reader_impl_for_code_point<CharT>{};
 5849|       |    }
 5850|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5851|    882|                       std::is_same_v<T, std::wstring_view>) {
 5852|    882|        return reader_impl_for_string<CharT>{};
 5853|       |    }
 5854|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5855|       |                       std::is_same_v<T, std::wstring>) {
 5856|       |        return reader_impl_for_string<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5859|       |                       std::is_same_v<T, wregex_matches>) {
 5860|       |        return reader_impl_for_regex_matches<CharT>{};
 5861|       |    }
 5862|       |    else if constexpr (std::is_same_v<T, void*>) {
 5863|       |        return reader_impl_for_voidptr<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_floating_point_v<T>) {
 5866|       |        return reader_impl_for_float<CharT>{};
 5867|       |    }
 5868|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5869|       |                       !std::is_same_v<T, wchar_t> &&
 5870|       |                       !std::is_same_v<T, char32_t> &&
 5871|       |                       !std::is_same_v<T, bool>) {
 5872|       |        return reader_impl_for_int<CharT>{};
 5873|       |    }
 5874|       |    else {
 5875|       |        return reader_impl_for_monostate<CharT>{};
 5876|       |    }
 5877|    882|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5302|     22|    {
 5303|     22|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     22|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|     22|        return read_impl(range, specs, value);
 5305|     22|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5320|     22|    {
 5321|     22|        SCN_CLANG_PUSH
 5322|     22|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|     22|        switch (m_type) {
 5325|      2|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 2, False: 20]
  ------------------
 5326|      2|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 0, False: 22]
  ------------------
 5329|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      0|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 22]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|     14|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 14, False: 8]
  ------------------
 5336|     14|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|     14|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      0|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 0, False: 22]
  ------------------
 5341|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      0|                    range, specs.charset_string<SourceCharT>(),
 5343|      0|                    specs.regexp_flags, value);
 5344|       |
 5345|      6|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 6, False: 16]
  ------------------
 5346|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      6|                    range,
 5348|      6|                    get_unescaped_regex_pattern(
 5349|      6|                        specs.charset_string<SourceCharT>()),
 5350|      6|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 22]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|     22|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|     22|        }
 5357|       |
 5358|     22|        SCN_CLANG_POP
 5359|     22|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4856|      2|    {
 4857|      2|        return read_string_view_impl(range, read_until_classic_space(range),
 4858|      2|                                     value);
 4859|      2|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4802|      2|{
 4803|      2|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|      2|    auto src = [&]() {
 4806|      2|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|      2|            return make_contiguous_buffer(
 4808|      2|                ranges::subrange{range.begin().base(), result.base()});
 4809|      2|        }
 4810|      2|        else {
 4811|      2|            return make_contiguous_buffer(
 4812|      2|                ranges::subrange{range.begin(), result});
 4813|      2|        }
 4814|      2|    }();
 4815|      2|    using src_type = decltype(src);
 4816|       |
 4817|      2|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|      2|    else {
 4830|      2|        const auto view = src.view();
 4831|      2|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|      2|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 2, False: 0]
  ------------------
 4834|      2|            return detail::unexpected_scan_error(
 4835|      2|                scan_error::invalid_scanned_value,
 4836|      2|                "Invalid encoding in scanned string_view");
 4837|      2|        }
 4838|       |
 4839|      0|        return SCN_MOVE(result);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|      2|    }
 4841|      2|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4805|      2|    auto src = [&]() {
 4806|      2|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|      2|            return make_contiguous_buffer(
 4808|      2|                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|       |        else {
 4811|       |            return make_contiguous_buffer(
 4812|       |                ranges::subrange{range.begin(), result});
 4813|       |        }
 4814|      2|    }();
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5091|     14|    {
 5092|     14|        auto it = read_source_impl(range, {specs});
 5093|     14|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14]
  |  |  ------------------
  ------------------
 5094|      0|            return unexpected(it.error());
 5095|      0|        }
 5096|       |
 5097|     14|        return read_string_view_impl(range, *it, value);
 5098|     14|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4802|     14|{
 4803|     14|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|     14|    auto src = [&]() {
 4806|     14|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|     14|            return make_contiguous_buffer(
 4808|     14|                ranges::subrange{range.begin().base(), result.base()});
 4809|     14|        }
 4810|     14|        else {
 4811|     14|            return make_contiguous_buffer(
 4812|     14|                ranges::subrange{range.begin(), result});
 4813|     14|        }
 4814|     14|    }();
 4815|     14|    using src_type = decltype(src);
 4816|       |
 4817|     14|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|     14|    else {
 4830|     14|        const auto view = src.view();
 4831|     14|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|     14|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 12, False: 2]
  ------------------
 4834|     12|            return detail::unexpected_scan_error(
 4835|     12|                scan_error::invalid_scanned_value,
 4836|     12|                "Invalid encoding in scanned string_view");
 4837|     12|        }
 4838|       |
 4839|      2|        return SCN_MOVE(result);
  ------------------
  |  |  934|      2|    static_cast<    \
  |  |  935|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|     14|    }
 4841|     14|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4805|     14|    auto src = [&]() {
 4806|     14|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|     14|            return make_contiguous_buffer(
 4808|     14|                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|       |        else {
 4811|       |            return make_contiguous_buffer(
 4812|       |                ranges::subrange{range.begin(), result});
 4813|       |        }
 4814|     14|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4931|      6|    {
 4932|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      6|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|      0|        return read_string_view_impl(range, it, value);
 4934|      6|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5302|    850|    {
 5303|    850|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    850|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    850|        return read_impl(range, specs, value);
 5305|    850|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5320|    850|    {
 5321|    850|        SCN_CLANG_PUSH
 5322|    850|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|    850|        switch (m_type) {
 5325|      6|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 6, False: 844]
  ------------------
 5326|      6|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 0, False: 850]
  ------------------
 5329|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      0|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 850]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|    274|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 274, False: 576]
  ------------------
 5336|    274|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|    274|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|    474|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 474, False: 376]
  ------------------
 5341|    474|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|    474|                    range, specs.charset_string<SourceCharT>(),
 5343|    474|                    specs.regexp_flags, value);
 5344|       |
 5345|     96|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 96, False: 754]
  ------------------
 5346|     96|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|     96|                    range,
 5348|     96|                    get_unescaped_regex_pattern(
 5349|     96|                        specs.charset_string<SourceCharT>()),
 5350|     96|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 850]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|    850|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|    850|        }
 5357|       |
 5358|    850|        SCN_CLANG_POP
 5359|    850|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4856|     16|    {
 4857|     16|        return read_string_view_impl(range, read_until_classic_space(range),
 4858|     16|                                     value);
 4859|     16|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4802|     16|{
 4803|     16|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|     16|    auto src = [&]() {
 4806|     16|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|     16|            return make_contiguous_buffer(
 4808|     16|                ranges::subrange{range.begin().base(), result.base()});
 4809|     16|        }
 4810|     16|        else {
 4811|     16|            return make_contiguous_buffer(
 4812|     16|                ranges::subrange{range.begin(), result});
 4813|     16|        }
 4814|     16|    }();
 4815|     16|    using src_type = decltype(src);
 4816|       |
 4817|     16|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|     16|    else {
 4830|     16|        const auto view = src.view();
 4831|     16|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|     16|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 6, False: 10]
  ------------------
 4834|      6|            return detail::unexpected_scan_error(
 4835|      6|                scan_error::invalid_scanned_value,
 4836|      6|                "Invalid encoding in scanned string_view");
 4837|      6|        }
 4838|       |
 4839|     10|        return SCN_MOVE(result);
  ------------------
  |  |  934|     10|    static_cast<    \
  |  |  935|     10|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|     16|    }
 4841|     16|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4805|     16|    auto src = [&]() {
 4806|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|       |            return make_contiguous_buffer(
 4808|       |                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|     16|        else {
 4811|     16|            return make_contiguous_buffer(
 4812|     16|                ranges::subrange{range.begin(), result});
 4813|     16|        }
 4814|     16|    }();
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5091|    274|    {
 5092|    274|        auto it = read_source_impl(range, {specs});
 5093|    274|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24, False: 250]
  |  |  ------------------
  ------------------
 5094|     24|            return unexpected(it.error());
 5095|     24|        }
 5096|       |
 5097|    250|        return read_string_view_impl(range, *it, value);
 5098|    274|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4802|    264|{
 4803|    264|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|    264|    auto src = [&]() {
 4806|    264|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|    264|            return make_contiguous_buffer(
 4808|    264|                ranges::subrange{range.begin().base(), result.base()});
 4809|    264|        }
 4810|    264|        else {
 4811|    264|            return make_contiguous_buffer(
 4812|    264|                ranges::subrange{range.begin(), result});
 4813|    264|        }
 4814|    264|    }();
 4815|    264|    using src_type = decltype(src);
 4816|       |
 4817|    264|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|    264|    else {
 4830|    264|        const auto view = src.view();
 4831|    264|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|    264|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 0, False: 264]
  ------------------
 4834|      0|            return detail::unexpected_scan_error(
 4835|      0|                scan_error::invalid_scanned_value,
 4836|      0|                "Invalid encoding in scanned string_view");
 4837|      0|        }
 4838|       |
 4839|    264|        return SCN_MOVE(result);
  ------------------
  |  |  934|    264|    static_cast<    \
  |  |  935|    264|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|    264|    }
 4841|    264|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4805|    264|    auto src = [&]() {
 4806|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|       |            return make_contiguous_buffer(
 4808|       |                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|    264|        else {
 4811|    264|            return make_contiguous_buffer(
 4812|    264|                ranges::subrange{range.begin(), result});
 4813|    264|        }
 4814|    264|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4931|    570|    {
 4932|    570|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|    570|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    570|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    570|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 556, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    556|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    556|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    556|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    556|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    556|    }                                                  \
  |  |  |  | 3939|    570|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|     14|        return read_string_view_impl(range, it, value);
 4934|    570|    }
_ZN3scn2v44impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5650|  2.23k|    {
 5651|  2.23k|        reader_error_handler eh{};
 5652|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5653|       |            detail::check_code_point_type_specs(specs, eh);
 5654|       |        }
 5655|  2.23k|        else {
 5656|  2.23k|            detail::check_char_type_specs(specs, eh);
 5657|  2.23k|        }
 5658|  2.23k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.18k, False: 54]
  |  |  ------------------
  ------------------
 5659|  2.18k|            return detail::unexpected_scan_error(
 5660|  2.18k|                scan_error::invalid_format_string, eh.m_msg);
 5661|  2.18k|        }
 5662|     54|        return {};
 5663|  2.23k|    }
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  12.8k|    {
  763|  12.8k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  12.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  12.8k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  4.98k|        : m_fptr([](storage fn,
  743|  4.98k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.98k|              cvref<T> obj = *get<T>(fn);
  745|  4.98k|              if constexpr (std::is_void_v<R>) {
  746|  4.98k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.98k|              }
  748|  4.98k|              else {
  749|  4.98k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.98k|              }
  751|  4.98k|          }),
  752|  4.98k|          m_storage(std::addressof(f))
  753|  4.98k|    {
  754|  4.98k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  5.77k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.77k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.77k|              else {
  749|  5.77k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.77k|              }
  751|  5.77k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  5.77k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.77k|        else if constexpr (std::is_object_v<T>) {
  688|  5.77k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.77k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  4.98k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.98k|        {
  662|  4.98k|        }
_ZNK3scn2v44impl16char_reader_baseIwE19skip_ws_before_readEv:
 5645|    124|    {
 5646|    124|        return false;
 5647|    124|    }
_ZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2448|    410|{
 2449|    410|    size_t count{0};
 2450|    410|    for_each_code_point(input, [&count](char32_t cp) {
 2451|    410|        count += calculate_text_width_for_fmt_v10(cp);
 2452|    410|    });
 2453|    410|    return count;
 2454|    410|}
_ZN3scn2v44impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1544|    410|{
 1545|       |    // TODO: Could be optimized by being eager
 1546|    410|    auto it = input.begin();
 1547|  1.79k|    while (it != input.end()) {
  ------------------
  |  Branch (1547:12): [True: 1.38k, False: 410]
  ------------------
 1548|  1.38k|        auto res = get_next_code_point(
 1549|  1.38k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1550|  1.38k|        cb(res.value);
 1551|  1.38k|        it = detail::make_string_view_iterator(input, res.iterator);
 1552|  1.38k|    }
 1553|    410|}
_ZN3scn2v44impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|  58.7M|{
 1279|  58.7M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|  58.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|  58.7M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|  58.7M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  58.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 58.7M]
  |  |  ------------------
  ------------------
 1283|      0|        return {get_start_for_next_code_point(input),
 1284|      0|                detail::invalid_code_point};
 1285|      0|    }
 1286|  58.7M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|  58.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 58.7M]
  |  |  ------------------
  ------------------
 1287|      0|        return {input.end(), detail::invalid_code_point};
 1288|      0|    }
 1289|       |
 1290|  58.7M|    return {input.begin() + len,
 1291|  58.7M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|  58.7M|}
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|    410|        : m_fptr([](storage fn,
  743|    410|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    410|              cvref<T> obj = *get<T>(fn);
  745|    410|              if constexpr (std::is_void_v<R>) {
  746|    410|                  obj(static_cast<decltype(args)>(args)...);
  747|    410|              }
  748|    410|              else {
  749|    410|                  return obj(static_cast<decltype(args)>(args)...);
  750|    410|              }
  751|    410|          }),
  752|    410|          m_storage(std::addressof(f))
  753|    410|    {
  754|    410|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  1.38k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.38k|              cvref<T> obj = *get<T>(fn);
  745|  1.38k|              if constexpr (std::is_void_v<R>) {
  746|  1.38k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  1.38k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  1.38k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.38k|        else if constexpr (std::is_object_v<T>) {
  688|  1.38k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.38k|    }
_ZZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2450|  1.38k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  1.38k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  1.38k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|    410|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    410|        {
  662|    410|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|    154|    {
 1681|    154|        return m_view;
 1682|    154|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|    228|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2520|     66|    {
 2521|     66|        return m_multibyte_left;
 2522|     66|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2525|  18.7k|    {
 2526|  18.7k|        return *m_current;
 2527|  18.7k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2534|  12.9k|    {
 2535|  12.9k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2536|  12.9k|        _increment_current();
 2537|  12.9k|        return *this;
 2538|  12.9k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2767|  12.9k|    {
 2768|  12.9k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2768:13): [True: 12.9k, False: 0]
  ------------------
 2769|  12.9k|            auto cplen = _get_cp_length_at_current();
 2770|  12.9k|            m_multibyte_left = cplen - 1;
 2771|  12.9k|            m_count -= _get_width_at_current_cp_start(cplen);
 2772|  12.9k|        }
 2773|      0|        else {
 2774|      0|            --m_multibyte_left;
 2775|      0|        }
 2776|       |
 2777|  12.9k|        ++m_current;
 2778|  12.9k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2738|  12.9k|    {
 2739|  12.9k|        return static_cast<difference_type>(
 2740|  12.9k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2741|  12.9k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2744|  12.9k|    {
 2745|  12.9k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12.9k]
  |  |  ------------------
  ------------------
 2746|      0|            return 0;
 2747|      0|        }
 2748|       |
 2749|  12.9k|        if (cplen == 1) {
  ------------------
  |  Branch (2749:13): [True: 12.9k, False: 0]
  ------------------
 2750|  12.9k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2751|  12.9k|            auto cp = static_cast<char32_t>(*m_current);
 2752|  12.9k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2753|  12.9k|        }
 2754|       |
 2755|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2756|      0|                                           cplen);
 2757|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2758|      0|            return 0;
 2759|      0|        }
 2760|       |
 2761|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2762|      0|        return static_cast<difference_type>(
 2763|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2764|      0|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|    208|{
 1956|    208|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    208|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    208|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|    208|    if constexpr (ranges::sized_range<Range>) {
 1959|    208|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|    208|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 0, False: 208]
  ------------------
 1961|      0|            return unexpected(eof_error::eof);
 1962|      0|        }
 1963|       |
 1964|    208|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|    208|}
_ZN3scn2v44impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2630|  4.86k|    {
 2631|  4.86k|        return !(a == b);
 2632|  4.86k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2622|  5.02k|    {
 2623|  5.02k|        return a.m_current == b.m_current;
 2624|  5.02k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2529|    608|    {
 2530|    608|        return *m_current;
 2531|    608|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1988|  6.01k|    {
 1989|  6.01k|        return !codepoint.empty();
 1990|  6.01k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1781|     88|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|     88|    else {
 1788|     88|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|     88|    }
 1790|     88|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1635|     88|    {
 1636|     88|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|     88|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1719|     88|    {
 1720|     88|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|     88|        else {
 1753|     88|            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|     88|            if constexpr (ranges::common_range<Range>) {
 1758|     88|                std::copy(ranges::begin(range), ranges::end(range),
 1759|     88|                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|     88|            m_view = string_view_type{str};
 1768|     88|        }
 1769|     88|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2480|  2.29k|        : m_current(x), m_end(s), m_count(n)
 2481|  2.29k|    {
 2482|  2.29k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2512|  16.4k|    {
 2513|  16.4k|        return m_current;
 2514|  16.4k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2215|    278|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    278|    else {
 2225|    278|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|    278|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    278|            return detail::is_cp_space(cp);
 2238|    278|        });
 2239|    278|    }
 2240|    278|}
_ZN3scn2v44impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2180|    278|{
 2181|    278|    return read_until_code_point(range, std::not_fn(pred));
 2182|    278|}
_ZN3scn2v44impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2159|    278|{
 2160|    278|    auto it = range.begin();
 2161|    410|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 410, False: 0]
  ------------------
 2162|    410|        const auto val =
 2163|    410|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|    410|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|    410|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 410, False: 0]
  |  |  ------------------
  ------------------
 2165|    410|            const auto cp = detail::decode_code_point_exhaustive(
 2166|    410|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|    410|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 278, False: 132]
  ------------------
 2168|    278|                return it;
 2169|    278|            }
 2170|    410|        }
 2171|    132|        it = val.iterator;
 2172|    132|    }
 2173|       |
 2174|      0|    return it;
 2175|    278|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  13.0k|{
 1998|  13.0k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  13.0k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  13.0k|    auto it = range.begin();
 2002|  13.0k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  13.0k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.0k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  13.0k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 13.0k, False: 0]
  ------------------
 2011|  13.0k|        ++it;
 2012|  13.0k|        return {it, string_type(1, *range.begin())};
 2013|  13.0k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  13.0k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  13.7k|{
  945|  13.7k|    return is_range_eof(r.begin(), r.end());
  946|  13.7k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  58.7M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  58.7M|    {
  938|  58.7M|        return begin == end;
  939|  58.7M|    }
  940|  58.7M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|     32|    {
  190|     32|        i = std::move(bound);
  191|     32|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  13.0k|    {
 1989|  13.0k|        return !codepoint.empty();
 1990|  13.0k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|    278|        : m_fptr([](storage fn,
  743|    278|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    278|              cvref<T> obj = *get<T>(fn);
  745|    278|              if constexpr (std::is_void_v<R>) {
  746|    278|                  obj(static_cast<decltype(args)>(args)...);
  747|    278|              }
  748|    278|              else {
  749|    278|                  return obj(static_cast<decltype(args)>(args)...);
  750|    278|              }
  751|    278|          }),
  752|    278|          m_storage(std::addressof(f))
  753|    278|    {
  754|    278|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|    410|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    410|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    410|              else {
  749|    410|                  return obj(static_cast<decltype(args)>(args)...);
  750|    410|              }
  751|    410|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|    410|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    410|        else if constexpr (std::is_object_v<T>) {
  688|    410|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    410|    }
_ZZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2236|    410|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    410|            return detail::is_cp_space(cp);
 2238|    410|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|    278|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    278|        {
  662|    278|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|    720|{
  951|    720|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|    720|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 720]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|    720|    return eof_error::good;
  955|    720|}
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2931|    790|    {
 2932|    790|        return take_width_view{r, n};
 2933|    790|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2899|    790|        : m_base(base), m_count(count)
 2900|    790|    {
 2901|    790|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2813|    790|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5726|     38|    {
 5727|     38|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5727:13): [True: 38, False: 0]
  ------------------
 5728|     38|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5728:13): [True: 0, False: 0]
  ------------------
 5729|     38|            return read_default(range, value, loc);
 5730|     38|        }
 5731|       |
 5732|      0|        reader_impl_for_int<CharT> reader{};
 5733|      0|        using integer_type =
 5734|      0|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5735|      0|        integer_type tmp_value{};
 5736|      0|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5737|      0|        value = static_cast<integer_type>(value);
 5738|      0|        return ret;
 5739|     38|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5710|     38|    {
 5711|     38|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     38|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5712|       |        if constexpr (std::is_same_v<CharT, char>) {
 5713|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5714|       |        }
 5715|     38|        else {
 5716|     38|            return code_unit_reader<wchar_t>{}.read(range, value);
 5717|     38|        }
 5718|     38|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5590|     38|    {
 5591|     38|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5592|     38|        ch = *range.begin();
 5593|     38|        return it;
 5594|     38|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1944|    266|{
 1945|    266|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    266|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 266]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|    266|    return ranges::next(range.begin());
 1950|    266|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  950|    266|{
  951|    266|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|    266|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 266]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|    266|    return eof_error::good;
  955|    266|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  944|    266|{
  945|    266|    return is_range_eof(r.begin(), r.end());
  946|    266|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  6.28k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  6.28k|    {
  938|  6.28k|        return begin == end;
  939|  6.28k|    }
  940|  6.28k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2869|  15.9k|        {
 2870|  15.9k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2870:21): [True: 66, False: 15.8k]
  |  Branch (2870:39): [True: 66, False: 0]
  ------------------
 2871|  15.9k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2871:20): [True: 66, False: 15.8k]
  ------------------
 2872|  15.9k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2915|  3.36k|    {
 2916|  3.36k|        return sentinel<true>{m_base.get().end()};
 2917|  3.36k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2816|  7.94k|    {
 2817|  7.94k|        return view;
 2818|  7.94k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2850|  3.36k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  3.36k|    static_cast<    \
  |  |  935|  3.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|    266|    {
  296|    266|        ++x;
  297|    266|        return x;
  298|    266|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2909|  2.29k|    {
 2910|  2.29k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2911|  2.29k|                                      m_count};
 2912|  2.29k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3578|     38|    {
 3579|     38|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|     38|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|     38|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 38]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|      0|            else {
 3590|      0|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 0]
  ------------------
 3591|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|      0|            }
 3597|      0|        }
 3598|       |
 3599|     38|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 38]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|     38|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     38|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 3605|     38|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 38, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     38|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|      0|                    parse_integer_digits_without_thsep(
 3607|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|      0|                        prefix_result.parsed_base));
 3609|       |
 3610|      0|            auto buf = make_contiguous_buffer(
 3611|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|      0|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3365|    114|{
 3366|    114|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|    114|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    114|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    114|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    114|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 114]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    114|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    114|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3367|    114|    auto [base_prefix_begin_it, sign] = sign_result;
 3368|       |
 3369|    114|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3370|    114|        parse_integer_base_prefix(
 3371|    114|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3372|       |
 3373|    114|    if (parsed_zero) {
  ------------------
  |  Branch (3373:9): [True: 0, False: 114]
  ------------------
 3374|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3374:13): [True: 0, False: 0]
  |  Branch (3374:13): [True: 0, False: 0]
  ------------------
 3375|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3375:13): [True: 0, False: 0]
  ------------------
 3376|      0|            digits_begin_it = base_prefix_begin_it;
 3377|      0|        }
 3378|      0|        else {
 3379|      0|            parsed_zero = false;
 3380|      0|        }
 3381|      0|    }
 3382|    114|    else {
 3383|    114|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3383:13): [True: 0, False: 114]
  |  Branch (3383:13): [True: 114, False: 0]
  ------------------
 3384|    114|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3384:13): [True: 114, False: 0]
  ------------------
 3385|    114|            digits_begin_it = base_prefix_begin_it;
 3386|    114|        }
 3387|    114|    }
 3388|       |
 3389|    114|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3389:9): [True: 114, False: 0]
  ------------------
 3390|    114|        sign = sign_type::plus_sign;
 3391|    114|    }
 3392|    114|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3393|    114|        digits_begin_it, parsed_base, sign, parsed_zero};
 3394|    114|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3246|    152|{
 3247|    152|    auto r = read_one_of_code_unit(range, "+-");
 3248|    152|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 152, False: 0]
  ------------------
 3249|    152|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 152, False: 0]
  ------------------
 3250|    152|            return std::pair{range.begin(), sign_type::default_sign};
 3251|    152|        }
 3252|      0|        return unexpected(eof_error::eof);
 3253|    152|    }
 3254|       |
 3255|      0|    auto& it = *r;
 3256|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 0, False: 0]
  ------------------
 3257|      0|        return std::pair{it, sign_type::minus_sign};
 3258|      0|    }
 3259|      0|    return std::pair{it, sign_type::plus_sign};
 3260|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2371|    152|{
 2372|    152|    auto it = read_code_unit(range);
 2373|    152|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 152]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|    304|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 304, False: 152]
  ------------------
 2378|    304|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 304]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|    304|    }
 2382|       |
 2383|    152|    return unexpected(parse_error::error);
 2384|    152|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3332|    114|{
 3333|    114|    switch (base) {
 3334|      0|        case 2:
  ------------------
  |  Branch (3334:9): [True: 0, False: 114]
  ------------------
 3335|       |            // allow 0b/0B
 3336|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3337|      0|                    false};
 3338|       |
 3339|      0|        case 8: {
  ------------------
  |  Branch (3339:9): [True: 0, False: 114]
  ------------------
 3340|       |            // allow 0o/0O/0
 3341|      0|            bool zero_parsed = false;
 3342|      0|            auto it = apply_opt(
 3343|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3344|      0|            return {it, 8, zero_parsed};
 3345|      0|        }
 3346|       |
 3347|     38|        case 16:
  ------------------
  |  Branch (3347:9): [True: 38, False: 76]
  ------------------
 3348|       |            // allow 0x/0X
 3349|     38|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3350|     38|                    false};
 3351|       |
 3352|      0|        case 0:
  ------------------
  |  Branch (3352:9): [True: 0, False: 114]
  ------------------
 3353|       |            // detect base
 3354|      0|            return parse_integer_base_prefix_for_detection(range);
 3355|       |
 3356|     76|        default:
  ------------------
  |  Branch (3356:9): [True: 76, False: 38]
  ------------------
 3357|       |            // no base prefix allowed
 3358|     76|            return {range.begin(), base, false};
 3359|    114|    }
 3360|    114|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2390|     38|{
 2391|     38|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 38, False: 0]
  ------------------
 2392|     38|        return range.begin();
 2393|     38|    }
 2394|      0|    return *result;
 2395|     38|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2330|    152|{
 2331|    152|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|    152|    else {
 2344|    152|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|    152|            if (ch < 'A' || ch > 'Z') {
 2346|    152|                return ch;
 2347|    152|            }
 2348|    152|            return static_cast<char_type>(ch +
 2349|    152|                                          static_cast<char_type>('a' - 'A'));
 2350|    152|        };
 2351|       |
 2352|    152|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|    152|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    152|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    152|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 152]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    152|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    152|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|    152|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|    152|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|    152|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 152, False: 0]
  |  |  ------------------
  ------------------
 2357|    152|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|    152|                    return ascii_tolower(a) ==
 2359|    152|                           static_cast<detail::char_t<Range>>(b);
 2360|    152|                }))) {
 2361|    152|            return unexpected(parse_error::error);
 2362|    152|        }
 2363|       |
 2364|      0|        return it;
 2365|    152|    }
 2366|    152|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1955|    152|{
 1956|    152|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    152|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    152|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    152|    else {
 1967|    152|        auto it = range.begin();
 1968|    152|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 152]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|    532|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 380, False: 152]
  ------------------
 1973|    380|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 0, False: 380]
  ------------------
 1974|      0|                return unexpected(eof_error::eof);
 1975|      0|            }
 1976|    380|        }
 1977|       |
 1978|    152|        return it;
 1979|    152|    }
 1980|    152|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|    152|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    152|    else {
 1116|    152|        return 0;
 1117|    152|    }
 1118|    152|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2344|    152|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|    152|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 0, False: 152]
  |  Branch (2345:29): [True: 152, False: 0]
  ------------------
 2346|    152|                return ch;
 2347|    152|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|    152|        };
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  6.01k|{
  945|  6.01k|    return is_range_eof(r.begin(), r.end());
  946|  6.01k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3290|     38|{
 3291|     38|    return read_matching_string_classic_nocase(range, "0x");
 3292|     38|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3399|    114|{
 3400|    114|    using char_type = detail::char_t<Range>;
 3401|       |
 3402|       |    if constexpr (ranges::contiguous_range<Range>) {
 3403|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3404|       |            return detail::unexpected_scan_error(
 3405|       |                scan_error::invalid_scanned_value,
 3406|       |                "Failed to parse integer: No digits found");
 3407|       |        }
 3408|       |        return range.end();
 3409|       |    }
 3410|    114|    else {
 3411|    114|        return read_while1_code_unit(range,
 3412|    114|                                     [&](char_type ch) noexcept {
 3413|    114|                                         return char_to_int(ch) < base;
 3414|    114|                                     })
 3415|    114|            .transform_error(map_parse_error_to_scan_error(
 3416|    114|                scan_error::invalid_scanned_value,
 3417|    114|                "Failed to parse integer: No digits found"));
 3418|    114|    }
 3419|    114|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2094|    152|{
 2095|    152|    auto it = read_while_code_unit(range, pred);
 2096|    152|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 152, False: 0]
  ------------------
 2097|    152|        return unexpected(parse_error::error);
 2098|    152|    }
 2099|      0|    return it;
 2100|    152|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2074|    152|{
 2075|    152|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    152|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2055|    152|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    152|    else {
 2060|    152|        auto first = range.begin();
 2061|    152|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 152, False: 0]
  ------------------
 2062|    152|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 152, False: 0]
  ------------------
 2063|    152|                return first;
 2064|    152|            }
 2065|    152|        }
 2066|      0|        return first;
 2067|    152|    }
 2068|    152|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2880|  7.87k|        {
 2881|  7.87k|            return !(y == x);
 2882|  7.87k|        }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    114|        : m_fptr([](storage fn,
  743|    114|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    114|              cvref<T> obj = *get<T>(fn);
  745|    114|              if constexpr (std::is_void_v<R>) {
  746|    114|                  obj(static_cast<decltype(args)>(args)...);
  747|    114|              }
  748|    114|              else {
  749|    114|                  return obj(static_cast<decltype(args)>(args)...);
  750|    114|              }
  751|    114|          }),
  752|    114|          m_storage(std::addressof(f))
  753|    114|    {
  754|    114|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    114|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    114|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    114|              else {
  749|    114|                  return obj(static_cast<decltype(args)>(args)...);
  750|    114|              }
  751|    114|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    114|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    114|        else if constexpr (std::is_object_v<T>) {
  688|    114|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    114|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3412|    114|                                     [&](char_type ch) noexcept {
 3413|    114|                                         return char_to_int(ch) < base;
 3414|    114|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    114|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    114|        {
  662|    114|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2516|  16.0k|    {
 2517|  16.0k|        return m_count;
 2518|  16.0k|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5726|     16|    {
 5727|     16|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5727:13): [True: 16, False: 0]
  ------------------
 5728|     16|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5728:13): [True: 0, False: 0]
  ------------------
 5729|     16|            return read_default(range, value, loc);
 5730|     16|        }
 5731|       |
 5732|      0|        reader_impl_for_int<CharT> reader{};
 5733|      0|        using integer_type =
 5734|      0|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5735|      0|        integer_type tmp_value{};
 5736|      0|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5737|      0|        value = static_cast<integer_type>(value);
 5738|      0|        return ret;
 5739|     16|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5710|     32|    {
 5711|     32|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     32|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5712|       |        if constexpr (std::is_same_v<CharT, char>) {
 5713|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5714|       |        }
 5715|     32|        else {
 5716|     32|            return code_unit_reader<wchar_t>{}.read(range, value);
 5717|     32|        }
 5718|     32|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5590|     32|    {
 5591|     32|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5592|     32|        ch = *range.begin();
 5593|     32|        return it;
 5594|     32|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|    224|{
 1945|    224|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 224]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|    224|    return ranges::next(range.begin());
 1950|    224|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  58.7M|    {
  296|  58.7M|        ++x;
  297|  58.7M|        return x;
  298|  58.7M|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|     16|    {
 3579|     16|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|     16|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|     16|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 16]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|      0|            else {
 3590|      0|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 0]
  ------------------
 3591|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|      0|            }
 3597|      0|        }
 3598|       |
 3599|     16|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 16]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|     16|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3605|     16|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|     16|                    parse_integer_digits_without_thsep(
 3607|     16|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|     16|                        prefix_result.parsed_base));
 3609|       |
 3610|     16|            auto buf = make_contiguous_buffer(
 3611|     16|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|     16|            SCN_TRY(result_it,
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     16|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|     16|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3365|     96|{
 3366|     96|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|     96|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     96|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     96|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     96|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 96]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     96|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     96|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3367|     96|    auto [base_prefix_begin_it, sign] = sign_result;
 3368|       |
 3369|     96|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3370|     96|        parse_integer_base_prefix(
 3371|     96|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3372|       |
 3373|     96|    if (parsed_zero) {
  ------------------
  |  Branch (3373:9): [True: 0, False: 96]
  ------------------
 3374|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3374:13): [True: 0, False: 0]
  ------------------
 3375|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3375:13): [True: 0, False: 0]
  ------------------
 3376|      0|            digits_begin_it = base_prefix_begin_it;
 3377|      0|        }
 3378|      0|        else {
 3379|      0|            parsed_zero = false;
 3380|      0|        }
 3381|      0|    }
 3382|     96|    else {
 3383|     96|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3383:13): [True: 0, False: 96]
  ------------------
 3384|     96|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3384:13): [True: 96, False: 0]
  ------------------
 3385|     96|            digits_begin_it = base_prefix_begin_it;
 3386|     96|        }
 3387|     96|    }
 3388|       |
 3389|     96|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3389:9): [True: 96, False: 0]
  ------------------
 3390|     96|        sign = sign_type::plus_sign;
 3391|     96|    }
 3392|     96|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3393|     96|        digits_begin_it, parsed_base, sign, parsed_zero};
 3394|     96|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3246|    128|{
 3247|    128|    auto r = read_one_of_code_unit(range, "+-");
 3248|    128|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 128, False: 0]
  ------------------
 3249|    128|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 128, False: 0]
  ------------------
 3250|    128|            return std::pair{range.begin(), sign_type::default_sign};
 3251|    128|        }
 3252|      0|        return unexpected(eof_error::eof);
 3253|    128|    }
 3254|       |
 3255|      0|    auto& it = *r;
 3256|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 0, False: 0]
  ------------------
 3257|      0|        return std::pair{it, sign_type::minus_sign};
 3258|      0|    }
 3259|      0|    return std::pair{it, sign_type::plus_sign};
 3260|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|    128|{
 2372|    128|    auto it = read_code_unit(range);
 2373|    128|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 128]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|    256|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 256, False: 128]
  ------------------
 2378|    256|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 256]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|    256|    }
 2382|       |
 2383|    128|    return unexpected(parse_error::error);
 2384|    128|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3332|     96|{
 3333|     96|    switch (base) {
 3334|      0|        case 2:
  ------------------
  |  Branch (3334:9): [True: 0, False: 96]
  ------------------
 3335|       |            // allow 0b/0B
 3336|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3337|      0|                    false};
 3338|       |
 3339|      0|        case 8: {
  ------------------
  |  Branch (3339:9): [True: 0, False: 96]
  ------------------
 3340|       |            // allow 0o/0O/0
 3341|      0|            bool zero_parsed = false;
 3342|      0|            auto it = apply_opt(
 3343|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3344|      0|            return {it, 8, zero_parsed};
 3345|      0|        }
 3346|       |
 3347|     32|        case 16:
  ------------------
  |  Branch (3347:9): [True: 32, False: 64]
  ------------------
 3348|       |            // allow 0x/0X
 3349|     32|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3350|     32|                    false};
 3351|       |
 3352|      0|        case 0:
  ------------------
  |  Branch (3352:9): [True: 0, False: 96]
  ------------------
 3353|       |            // detect base
 3354|      0|            return parse_integer_base_prefix_for_detection(range);
 3355|       |
 3356|     64|        default:
  ------------------
  |  Branch (3356:9): [True: 64, False: 32]
  ------------------
 3357|       |            // no base prefix allowed
 3358|     64|            return {range.begin(), base, false};
 3359|     96|    }
 3360|     96|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|     32|{
 2391|     32|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 32, False: 0]
  ------------------
 2392|     32|        return range.begin();
 2393|     32|    }
 2394|      0|    return *result;
 2395|     32|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|    128|{
 2331|    128|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|    128|    else {
 2344|    128|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|    128|            if (ch < 'A' || ch > 'Z') {
 2346|    128|                return ch;
 2347|    128|            }
 2348|    128|            return static_cast<char_type>(ch +
 2349|    128|                                          static_cast<char_type>('a' - 'A'));
 2350|    128|        };
 2351|       |
 2352|    128|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|    128|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    128|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    128|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 128]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    128|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|    128|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|    128|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|    128|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 128, False: 0]
  |  |  ------------------
  ------------------
 2357|    128|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|    128|                    return ascii_tolower(a) ==
 2359|    128|                           static_cast<detail::char_t<Range>>(b);
 2360|    128|                }))) {
 2361|    128|            return unexpected(parse_error::error);
 2362|    128|        }
 2363|       |
 2364|      0|        return it;
 2365|    128|    }
 2366|    128|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|    128|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|    128|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 0, False: 128]
  |  Branch (2345:29): [True: 128, False: 0]
  ------------------
 2346|    128|                return ch;
 2347|    128|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|    128|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|     64|{
 2246|     64|    auto it = read_code_unit(range);
 2247|     64|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 64]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|     64|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 64, False: 0]
  |  |  ------------------
  ------------------
 2252|     64|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|     64|        return unexpected(parse_error::error);
 2254|     64|    }
 2255|       |
 2256|      0|    return *it;
 2257|     64|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3290|     32|{
 3291|     32|    return read_matching_string_classic_nocase(range, "0x");
 3292|     32|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3399|     96|{
 3400|     96|    using char_type = detail::char_t<Range>;
 3401|       |
 3402|     96|    if constexpr (ranges::contiguous_range<Range>) {
 3403|     96|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|     96|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 96]
  |  |  ------------------
  ------------------
 3404|      0|            return detail::unexpected_scan_error(
 3405|      0|                scan_error::invalid_scanned_value,
 3406|      0|                "Failed to parse integer: No digits found");
 3407|      0|        }
 3408|     96|        return range.end();
 3409|       |    }
 3410|       |    else {
 3411|       |        return read_while1_code_unit(range,
 3412|       |                                     [&](char_type ch) noexcept {
 3413|       |                                         return char_to_int(ch) < base;
 3414|       |                                     })
 3415|       |            .transform_error(map_parse_error_to_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found"));
 3418|       |    }
 3419|     96|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|    994|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|    994|                  ranges::sized_range<Range>) {
 1785|    994|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|    994|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|    994|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|    994|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|    994|    {
 1589|    994|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  1.16k|    {
 1602|  1.16k|        return sv;
 1603|  1.16k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5977|  4.79k|{
 5978|  4.79k|    using char_type = detail::char_t<Range>;
 5979|  4.79k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5980|       |
 5981|  4.79k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5981:9): [True: 4.79k, False: 0]
  ------------------
 5982|  4.79k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5983|  4.79k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5984|       |
 5985|  4.79k|        if (max_width == 0) {
  ------------------
  |  Branch (5985:13): [True: 4.79k, False: 0]
  ------------------
 5986|  4.79k|            auto it = read_while_code_unit(range, pred);
 5987|       |
 5988|  4.79k|            if (want_skipped_width) {
  ------------------
  |  Branch (5988:17): [True: 0, False: 4.79k]
  ------------------
 5989|      0|                auto prefix_width =
 5990|      0|                    static_cast<std::ptrdiff_t>(
 5991|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5992|      0|                    ranges::distance(range.begin(), it);
 5993|      0|                return result_type{it, prefix_width};
 5994|      0|            }
 5995|  4.79k|            return result_type{it, 0};
 5996|  4.79k|        }
 5997|       |
 5998|      0|        auto max_width_view = take_width(range, max_width);
 5999|      0|        auto w_it = read_while_code_unit(max_width_view, pred);
 6000|       |
 6001|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6001:13): [True: 0, False: 0]
  ------------------
 6002|      0|            return result_type{w_it.base(), max_width - w_it.count()};
 6003|      0|        }
 6004|      0|        return result_type{w_it.base(), 0};
 6005|      0|    }
 6006|       |
 6007|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6008|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 0]
  ------------------
 6009|      0|        auto it = read_while_code_units(range, fill_chars);
 6010|       |
 6011|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6011:13): [True: 0, False: 0]
  ------------------
 6012|      0|            auto prefix_width =
 6013|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6014|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6015|      0|            return result_type{it, prefix_width};
 6016|      0|        }
 6017|      0|        return result_type{it, 0};
 6018|      0|    }
 6019|       |
 6020|      0|    auto max_width_view = take_width(range, max_width);
 6021|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6022|       |
 6023|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6023:9): [True: 0, False: 0]
  ------------------
 6024|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6025|      0|    }
 6026|      0|    return result_type{w_it.base(), 0};
 6027|      0|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  4.81k|{
 2075|  4.81k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  4.81k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  4.82k|{
 2056|  4.82k|    if constexpr (ranges::common_range<Range>) {
 2057|  4.82k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  4.82k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|  4.79k|        : m_fptr([](storage fn,
  743|  4.79k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.79k|              cvref<T> obj = *get<T>(fn);
  745|  4.79k|              if constexpr (std::is_void_v<R>) {
  746|  4.79k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.79k|              }
  748|  4.79k|              else {
  749|  4.79k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.79k|              }
  751|  4.79k|          }),
  752|  4.79k|          m_storage(std::addressof(f))
  753|  4.79k|    {
  754|  4.79k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  4.79k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.79k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.79k|              else {
  749|  4.79k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.79k|              }
  751|  4.79k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|  4.79k|    {
  684|  4.79k|        if constexpr (std::is_const_v<T>) {
  685|  4.79k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.79k|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5983|  4.79k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|  4.79k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.79k|        {
  667|  4.79k|        }
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2055|     12|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|     12|    else {
 2060|     12|        auto first = range.begin();
 2061|    594|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 582, False: 12]
  ------------------
 2062|    582|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 0, False: 582]
  ------------------
 2063|      0|                return first;
 2064|      0|            }
 2065|    582|        }
 2066|     12|        return first;
 2067|     12|    }
 2068|     12|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3054|     38|{
 3055|     38|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 0, False: 38]
  ------------------
 3056|      0|        auto it = read_while_classic_space(range);
 3057|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3059|      0|            return unexpected(e);
 3060|      0|        }
 3061|       |
 3062|      0|        return it;
 3063|      0|    }
 3064|       |
 3065|     38|    return read_while_classic_space(range);
 3066|     38|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2215|     38|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|     38|    else {
 2225|     38|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|     38|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|     38|            return detail::is_cp_space(cp);
 2238|     38|        });
 2239|     38|    }
 2240|     38|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2180|     38|{
 2181|     38|    return read_until_code_point(range, std::not_fn(pred));
 2182|     38|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2159|     38|{
 2160|     38|    auto it = range.begin();
 2161|     38|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 38, False: 0]
  ------------------
 2162|     38|        const auto val =
 2163|     38|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|     38|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|     38|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 2165|     38|            const auto cp = detail::decode_code_point_exhaustive(
 2166|     38|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|     38|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 38, False: 0]
  ------------------
 2168|     38|                return it;
 2169|     38|            }
 2170|     38|        }
 2171|      0|        it = val.iterator;
 2172|      0|    }
 2173|       |
 2174|      0|    return it;
 2175|     38|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1997|  6.01k|{
 1998|  6.01k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  6.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  6.01k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  6.01k|    auto it = range.begin();
 2002|  6.01k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  6.01k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  6.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.01k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  6.01k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 6.01k, False: 0]
  ------------------
 2011|  6.01k|        ++it;
 2012|  6.01k|        return {it, string_type(1, *range.begin())};
 2013|  6.01k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  6.01k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|     38|        : m_fptr([](storage fn,
  743|     38|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     38|              cvref<T> obj = *get<T>(fn);
  745|     38|              if constexpr (std::is_void_v<R>) {
  746|     38|                  obj(static_cast<decltype(args)>(args)...);
  747|     38|              }
  748|     38|              else {
  749|     38|                  return obj(static_cast<decltype(args)>(args)...);
  750|     38|              }
  751|     38|          }),
  752|     38|          m_storage(std::addressof(f))
  753|     38|    {
  754|     38|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|     38|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     38|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     38|              else {
  749|     38|                  return obj(static_cast<decltype(args)>(args)...);
  750|     38|              }
  751|     38|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|     38|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     38|        else if constexpr (std::is_object_v<T>) {
  688|     38|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     38|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2236|     38|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|     38|            return detail::is_cp_space(cp);
 2238|     38|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|     38|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     38|        {
  662|     38|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3054|    396|{
 3055|    396|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 256, False: 140]
  ------------------
 3056|    256|        auto it = read_while_classic_space(range);
 3057|    256|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|    256|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 256]
  |  |  ------------------
  ------------------
 3059|      0|            return unexpected(e);
 3060|      0|        }
 3061|       |
 3062|    256|        return it;
 3063|    256|    }
 3064|       |
 3065|    140|    return read_while_classic_space(range);
 3066|    396|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|    674|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    674|    else {
 2225|    674|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|    674|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    674|            return detail::is_cp_space(cp);
 2238|    674|        });
 2239|    674|    }
 2240|    674|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|    716|{
 2181|    716|    return read_until_code_point(range, std::not_fn(pred));
 2182|    716|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|    824|{
 2160|    824|    auto it = range.begin();
 2161|  12.7k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 12.6k, False: 84]
  ------------------
 2162|  12.6k|        const auto val =
 2163|  12.6k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  12.6k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  12.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 12.6k, False: 0]
  |  |  ------------------
  ------------------
 2165|  12.6k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  12.6k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  12.6k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 740, False: 11.9k]
  ------------------
 2168|    740|                return it;
 2169|    740|            }
 2170|  12.6k|        }
 2171|  11.9k|        it = val.iterator;
 2172|  11.9k|    }
 2173|       |
 2174|     84|    return it;
 2175|    824|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|    674|        : m_fptr([](storage fn,
  743|    674|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    674|              cvref<T> obj = *get<T>(fn);
  745|    674|              if constexpr (std::is_void_v<R>) {
  746|    674|                  obj(static_cast<decltype(args)>(args)...);
  747|    674|              }
  748|    674|              else {
  749|    674|                  return obj(static_cast<decltype(args)>(args)...);
  750|    674|              }
  751|    674|          }),
  752|    674|          m_storage(std::addressof(f))
  753|    674|    {
  754|    674|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|    830|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    830|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    830|              else {
  749|    830|                  return obj(static_cast<decltype(args)>(args)...);
  750|    830|              }
  751|    830|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|    830|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    830|        else if constexpr (std::is_object_v<T>) {
  688|    830|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    830|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|    830|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    830|            return detail::is_cp_space(cp);
 2238|    830|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|    674|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    674|        {
  662|    674|        }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3144|  4.46k|    {
 3145|  4.46k|        reader_error_handler eh{};
 3146|  4.46k|        get_derived().check_specs_impl(specs, eh);
 3147|  4.46k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.36k, False: 108]
  |  |  ------------------
  ------------------
 3148|  4.36k|            return detail::unexpected_scan_error(
 3149|  4.36k|                scan_error::invalid_format_string, eh.m_msg);
 3150|  4.36k|        }
 3151|    108|        return {};
 3152|  4.46k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3156|  4.46k|    {
 3157|  4.46k|        return static_cast<Derived&>(*this);
 3158|  4.46k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3524|  4.46k|    {
 3525|  4.46k|        detail::check_int_type_specs(specs, eh);
 3526|  4.46k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3139|    140|    {
 3140|    140|        return true;
 3141|    140|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3578|     38|    {
 3579|     38|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|     38|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|     38|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 38]
  ------------------
 3583|      0|            if constexpr (!std::is_signed_v<T>) {
 3584|      0|                return detail::unexpected_scan_error(
 3585|      0|                    scan_error::invalid_scanned_value,
 3586|      0|                    "Unexpected '-' sign when parsing an "
 3587|      0|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|      0|        }
 3598|       |
 3599|     38|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 38]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|     38|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     38|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 3605|     38|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 38, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     38|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|      0|                    parse_integer_digits_without_thsep(
 3607|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|      0|                        prefix_result.parsed_base));
 3609|       |
 3610|      0|            auto buf = make_contiguous_buffer(
 3611|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|      0|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|     16|    {
 3579|     16|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|     16|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|     16|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 16]
  ------------------
 3583|      0|            if constexpr (!std::is_signed_v<T>) {
 3584|      0|                return detail::unexpected_scan_error(
 3585|      0|                    scan_error::invalid_scanned_value,
 3586|      0|                    "Unexpected '-' sign when parsing an "
 3587|      0|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|      0|        }
 3598|       |
 3599|     16|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 16]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|     16|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3605|     16|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|     16|                    parse_integer_digits_without_thsep(
 3607|     16|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|     16|                        prefix_result.parsed_base));
 3609|       |
 3610|     16|            auto buf = make_contiguous_buffer(
 3611|     16|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|     16|            SCN_TRY(result_it,
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     16|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|     16|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3578|     38|    {
 3579|     38|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|     38|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|     38|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 38]
  ------------------
 3583|      0|            if constexpr (!std::is_signed_v<T>) {
 3584|      0|                return detail::unexpected_scan_error(
 3585|      0|                    scan_error::invalid_scanned_value,
 3586|      0|                    "Unexpected '-' sign when parsing an "
 3587|      0|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|      0|        }
 3598|       |
 3599|     38|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 38]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|     38|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     38|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 3605|     38|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 38, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     38|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|      0|                    parse_integer_digits_without_thsep(
 3607|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|      0|                        prefix_result.parsed_base));
 3609|       |
 3610|      0|            auto buf = make_contiguous_buffer(
 3611|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|      0|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|     32|    {
 3579|     32|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|     32|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|     32|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 0, False: 32]
  ------------------
 3583|      0|            if constexpr (!std::is_signed_v<T>) {
 3584|      0|                return detail::unexpected_scan_error(
 3585|      0|                    scan_error::invalid_scanned_value,
 3586|      0|                    "Unexpected '-' sign when parsing an "
 3587|      0|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|      0|        }
 3598|       |
 3599|     32|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 0, False: 32]
  ------------------
 3600|      0|            value = T{0};
 3601|      0|            return std::next(prefix_result.iterator);
 3602|      0|        }
 3603|       |
 3604|     32|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3605|     32|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|     32|                    parse_integer_digits_without_thsep(
 3607|     32|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|     32|                        prefix_result.parsed_base));
 3609|       |
 3610|     32|            auto buf = make_contiguous_buffer(
 3611|     32|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|     32|            SCN_TRY(result_it,
  ------------------
  |  | 3940|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     32|    }                                                  \
  |  |  |  | 3939|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|      0|                                        prefix_result.parsed_base));
 3615|       |
 3616|      0|            return ranges::next(
 3617|      0|                prefix_result.iterator,
 3618|      0|                ranges::distance(buf.view().begin(), result_it));
 3619|     32|        }
 3620|       |
 3621|      0|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|      0|            localized_number_formatting_options<CharT>{loc};
 3626|      0|#endif
 3627|       |
 3628|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|      0|                parse_integer_digits_with_thsep(
 3630|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|      0|                    prefix_result.parsed_base, locale_options));
 3632|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|      0|            parse_digits_result;
 3634|       |
 3635|      0|        auto nothsep_source_view =
 3636|      0|            std::basic_string_view<CharT>{nothsep_source};
 3637|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|      0|            nothsep_source_it,
 3639|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|      0|                                prefix_result.parsed_base));
 3641|       |
 3642|      0|        return ranges::next(
 3643|      0|            prefix_result.iterator,
 3644|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|      0|                ranges::ssize(thsep_indices));
 3646|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3144|  2.23k|    {
 3145|  2.23k|        reader_error_handler eh{};
 3146|  2.23k|        get_derived().check_specs_impl(specs, eh);
 3147|  2.23k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.18k, False: 54]
  |  |  ------------------
  ------------------
 3148|  2.18k|            return detail::unexpected_scan_error(
 3149|  2.18k|                scan_error::invalid_format_string, eh.m_msg);
 3150|  2.18k|        }
 3151|     54|        return {};
 3152|  2.23k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3156|  2.23k|    {
 3157|  2.23k|        return static_cast<Derived&>(*this);
 3158|  2.23k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4166|  2.23k|    {
 4167|  2.23k|        detail::check_float_type_specs(specs, eh);
 4168|  2.23k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3139|     70|    {
 3140|     70|        return true;
 3141|     70|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4238|     54|    {
 4239|     54|        unsigned options{};
 4240|     54|        if (specs.localized) {
  ------------------
  |  Branch (4240:13): [True: 0, False: 54]
  ------------------
 4241|      0|            options |= float_reader_base::allow_thsep;
 4242|      0|        }
 4243|       |
 4244|     54|        SCN_GCC_COMPAT_PUSH
 4245|     54|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4246|       |
 4247|     54|        switch (specs.type) {
 4248|      0|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4248:13): [True: 0, False: 54]
  ------------------
 4249|      0|                return options | float_reader_base::allow_fixed;
 4250|       |
 4251|      0|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4251:13): [True: 0, False: 54]
  ------------------
 4252|      0|                return options | float_reader_base::allow_scientific;
 4253|       |
 4254|      0|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4254:13): [True: 0, False: 54]
  ------------------
 4255|      0|                return options | float_reader_base::allow_hex;
 4256|       |
 4257|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4257:13): [True: 0, False: 54]
  ------------------
 4258|      0|                return options | float_reader_base::allow_scientific |
 4259|      0|                       float_reader_base::allow_fixed;
 4260|       |
 4261|     54|            case detail::presentation_type::none:
  ------------------
  |  Branch (4261:13): [True: 54, False: 0]
  ------------------
 4262|     54|                return options | float_reader_base::allow_scientific |
 4263|     54|                       float_reader_base::allow_fixed |
 4264|     54|                       float_reader_base::allow_hex;
 4265|       |
 4266|      0|            default:
  ------------------
  |  Branch (4266:13): [True: 0, False: 54]
  ------------------
 4267|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4268|     54|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4269|     54|        }
 4270|       |
 4271|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4272|     54|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3690|     54|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|     70|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|    140|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4078|     32|    {
 4079|     32|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4079:13): [True: 32, False: 0]
  ------------------
 4080|     32|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4080:13): [True: 32, False: 0]
  ------------------
 4081|     32|            return;
 4082|     32|        }
 4083|       |
 4084|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4085|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4085:13): [True: 0, False: 0]
  ------------------
 4086|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4086:27): [True: 0, False: 0]
  ------------------
 4087|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4087:21): [True: 0, False: 0]
  ------------------
 4088|      0|                    ch = CharT{'.'};
 4089|      0|                }
 4090|      0|            }
 4091|      0|        }
 4092|       |
 4093|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4093:13): [True: 0, False: 0]
  ------------------
 4094|      0|            return;
 4095|      0|        }
 4096|       |
 4097|      0|        auto first =
 4098|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4099|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4099:13): [True: 0, False: 0]
  ------------------
 4100|      0|            return;
 4101|      0|        }
 4102|       |
 4103|      0|        m_thsep_indices.push_back(
 4104|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4105|       |
 4106|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4106:31): [True: 0, False: 0]
  ------------------
 4107|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4107:17): [True: 0, False: 0]
  ------------------
 4108|      0|                *first++ = std::move(*it);
 4109|      0|            }
 4110|      0|            else {
 4111|      0|                m_thsep_indices.push_back(
 4112|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4113|      0|            }
 4114|      0|        }
 4115|       |
 4116|      0|        str.erase(first, str.end());
 4117|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|      4|    {
 1686|      4|        return m_storage.has_value();
 1687|      4|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|      2|    {
 1691|      2|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|      2|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      2|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|      2|        return *m_storage;
 1693|      2|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|     38|    {
  763|     38|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|     38|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3735|     38|    {
 3736|     38|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3737|     38|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3738|     38|        auto it = sign_result.first;
 3739|     38|        m_sign = sign_result.second;
 3740|       |
 3741|     38|        auto digits_begin = it;
 3742|     38|        auto r = ranges::subrange{it, range.end()};
 3743|       |        if constexpr (ranges::contiguous_range<Range> &&
 3744|       |                      ranges::sized_range<Range>) {
 3745|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3746|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3747|       |                SCN_TRY_ASSIGN(
 3748|       |                    it,
 3749|       |                    do_read_source_impl(
 3750|       |                        r,
 3751|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3752|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3753|       |            }
 3754|       |            else {
 3755|       |                auto cb = [&](const auto& rr)
 3756|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|       |                    auto res = read_all(rr);
 3758|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3759|       |                        return detail::unexpected_scan_error(
 3760|       |                            scan_error::invalid_scanned_value,
 3761|       |                            "Invalid float value");
 3762|       |                    }
 3763|       |                    return res;
 3764|       |                };
 3765|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3766|       |            }
 3767|       |        }
 3768|     38|        else {
 3769|     38|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 38, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     38|    }                                                  \
  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3770|      0|                it,
 3771|      0|                do_read_source_impl(
 3772|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3773|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3774|      0|        }
 3775|       |
 3776|     38|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|     38|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     38|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3777|       |
 3778|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3778:13): [True: 0, False: 0]
  |  Branch (3778:48): [True: 0, False: 0]
  ------------------
 3779|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3779:13): [True: 0, False: 0]
  ------------------
 3780|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3780:13): [True: 0, False: 0]
  ------------------
 3781|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3782|      0|        }
 3783|       |
 3784|      0|        handle_separators();
 3785|       |
 3786|      0|        return it;
 3787|     38|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4021|     38|    {
 4022|     38|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4023|     38|        const bool allowed_nonhex =
 4024|     38|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4025|     38|             ~static_cast<unsigned>(allow_hex)) != 0;
 4026|       |
 4027|     38|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4027:39): [True: 38, False: 0]
  |  Branch (4027:45): [True: 0, False: 38]
  ------------------
 4028|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4029|      0|                scan_error::invalid_scanned_value,
 4030|      0|                "Invalid infinite floating-point value"));
 4031|      0|        }
 4032|     38|        else if (r) {
  ------------------
  |  Branch (4032:18): [True: 0, False: 38]
  ------------------
 4033|      0|            return *r;
 4034|      0|        }
 4035|       |
 4036|     38|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4036:39): [True: 38, False: 0]
  |  Branch (4036:45): [True: 0, False: 38]
  ------------------
 4037|      0|            return unexpected(r.error());
 4038|      0|        }
 4039|     38|        else if (r) {
  ------------------
  |  Branch (4039:18): [True: 0, False: 38]
  ------------------
 4040|      0|            return *r;
 4041|      0|        }
 4042|       |
 4043|     38|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4043:13): [True: 38, False: 0]
  |  Branch (4043:28): [True: 0, False: 38]
  ------------------
 4044|       |            // only hex allowed:
 4045|       |            // prefix "0x" allowed, not required
 4046|      0|            auto it = range.begin();
 4047|       |
 4048|      0|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4048:22): [True: 0, False: 0]
  ------------------
 4049|      0|                m_kind = float_kind::hex_with_prefix;
 4050|      0|                it = *r;
 4051|      0|            }
 4052|      0|            else {
 4053|      0|                m_kind = float_kind::hex_without_prefix;
 4054|      0|            }
 4055|       |
 4056|      0|            return read_hex(ranges::subrange{it, range.end()});
 4057|      0|        }
 4058|     38|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4058:13): [True: 0, False: 38]
  |  Branch (4058:29): [True: 0, False: 0]
  ------------------
 4059|       |            // only nonhex allowed:
 4060|       |            // no prefix allowed
 4061|      0|            m_kind = float_kind::generic;
 4062|      0|            return read_regular_float(range);
 4063|      0|        }
 4064|       |        // both hex and nonhex allowed:
 4065|       |        // check for "0x" prefix -> hex,
 4066|       |        // regular otherwise
 4067|       |
 4068|     38|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
 4069|      0|            m_kind = float_kind::hex_with_prefix;
 4070|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4071|      0|        }
 4072|       |
 4073|     38|        m_kind = float_kind::generic;
 4074|     38|        return read_regular(range);
 4075|     38|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3829|     38|    {
 3830|     38|        auto it = range.begin();
 3831|     38|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3831:73): [True: 38, False: 0]
  ------------------
 3832|     38|            return unexpected(r.error());
 3833|     38|        }
 3834|      0|        else {
 3835|      0|            it = *r;
 3836|      0|        }
 3837|       |
 3838|      0|        if (auto r = read_matching_string_classic_nocase(
 3839|      0|                ranges::subrange{it, range.end()}, "inity");
 3840|      0|            !r) {
  ------------------
  |  Branch (3840:13): [True: 0, False: 0]
  ------------------
 3841|      0|            m_kind = float_kind::inf_short;
 3842|      0|            return it;
 3843|      0|        }
 3844|      0|        else {
 3845|      0|            m_kind = float_kind::inf_long;
 3846|      0|            return *r;
 3847|      0|        }
 3848|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3852|     38|    {
 3853|     38|        auto it = range.begin();
 3854|     38|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3854:73): [True: 38, False: 0]
  ------------------
 3855|     38|            return r.transform_error(map_parse_error_to_scan_error(
 3856|     38|                scan_error::invalid_scanned_value,
 3857|     38|                "Invalid floating-point NaN value"));
 3858|     38|        }
 3859|      0|        else {
 3860|      0|            it = *r;
 3861|      0|        }
 3862|       |
 3863|      0|        if (auto r =
 3864|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3865|      0|            !r) {
  ------------------
  |  Branch (3865:13): [True: 0, False: 0]
  ------------------
 3866|      0|            m_kind = float_kind::nan_simple;
 3867|      0|            return it;
 3868|      0|        }
 3869|      0|        else {
 3870|      0|            it = *r;
 3871|      0|        }
 3872|       |
 3873|      0|        auto payload_beg_it = it;
 3874|      0|        it = read_while_code_unit(
 3875|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3876|      0|                return is_ascii_char(ch) &&
 3877|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3878|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3879|      0|            });
 3880|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3881|       |
 3882|      0|        m_kind = float_kind::nan_with_payload;
 3883|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3883:18): [True: 0, False: 0]
  ------------------
 3884|      0|                                             ')')) {
 3885|      0|            return *r;
 3886|      0|        }
 3887|      0|        return detail::unexpected_scan_error(
 3888|      0|            scan_error::invalid_scanned_value,
 3889|      0|            "Invalid floating-point NaN payload");
 3890|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3822|     38|    {
 3823|     38|        return read_matching_string_classic_nocase(range, "0x");
 3824|     38|    }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3964|     38|    {
 3965|     38|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3966|     38|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3966:35): [True: 38, False: 0]
  |  Branch (3966:50): [True: 0, False: 38]
  ------------------
 3967|       |
 3968|     38|        auto it = ranges::begin(range);
 3969|     38|        std::ptrdiff_t digits_count = 0;
 3970|       |
 3971|     38|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3972|     38|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 3973|     38|            return r.transform_error(
 3974|     38|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3975|     38|                                              "Invalid floating-point value"));
 3976|     38|        }
 3977|      0|        else {
 3978|      0|            digits_count += ranges::distance(it, *r);
 3979|      0|            it = *r;
 3980|      0|        }
 3981|       |
 3982|      0|        m_integral_part_length = digits_count;
 3983|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3983:18): [True: 0, False: 0]
  ------------------
 3984|      0|                                             m_locale_options.decimal_point)) {
 3985|      0|            it = *r;
 3986|      0|        }
 3987|       |
 3988|      0|        if (auto r =
  ------------------
  |  Branch (3988:18): [True: 0, False: 0]
  ------------------
 3989|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3990|      0|            digits_count += ranges::distance(it, *r);
 3991|      0|            it = *r;
 3992|      0|        }
 3993|       |
 3994|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3995|      0|            return detail::unexpected_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "No significand digits in float");
 3998|      0|        }
 3999|       |
 4000|      0|        auto beg_exp_it = it;
 4001|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 0]
  ------------------
 4002|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4003|      0|        }
 4004|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4004:13): [True: 0, False: 0]
  |  Branch (4004:29): [True: 0, False: 0]
  ------------------
 4005|      0|            return detail::unexpected_scan_error(
 4006|      0|                scan_error::invalid_scanned_value,
 4007|      0|                "No exponent given to scientific float");
 4008|      0|        }
 4009|       |
 4010|      0|        m_kind =
 4011|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4011:13): [True: 0, False: 0]
  ------------------
 4012|       |
 4013|      0|        return it;
 4014|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3792|     38|    {
 3793|     38|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 38]
  |  |  |  Branch (865:45): [True: 0, False: 38]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3794|     38|                         thsep_allowed)) {
 3795|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3796|      0|                return char_to_int(ch) < 10 ||
 3797|      0|                       ch == m_locale_options.thousands_sep;
 3798|      0|            });
 3799|      0|        }
 3800|       |
 3801|     38|        return read_while1_code_unit(
 3802|     38|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3803|     38|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|     38|        : m_fptr([](storage fn,
  743|     38|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     38|              cvref<T> obj = *get<T>(fn);
  745|     38|              if constexpr (std::is_void_v<R>) {
  746|     38|                  obj(static_cast<decltype(args)>(args)...);
  747|     38|              }
  748|     38|              else {
  749|     38|                  return obj(static_cast<decltype(args)>(args)...);
  750|     38|              }
  751|     38|          }),
  752|     38|          m_storage(std::addressof(f))
  753|     38|    {
  754|     38|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|     38|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     38|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     38|              else {
  749|     38|                  return obj(static_cast<decltype(args)>(args)...);
  750|     38|              }
  751|     38|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|     38|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     38|        else if constexpr (std::is_object_v<T>) {
  688|     38|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     38|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3802|     38|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|     38|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     38|        {
  662|     38|        }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3695|     38|    {
 3696|     38|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
 3697|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3698|      0|                classic_with_thsep_tag{}};
 3699|      0|        }
 3700|       |
 3701|     38|        return read_source_impl(range);
 3702|     38|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|     32|    {
  763|     32|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|     32|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3735|     32|    {
 3736|     32|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3737|     32|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3738|     32|        auto it = sign_result.first;
 3739|     32|        m_sign = sign_result.second;
 3740|       |
 3741|     32|        auto digits_begin = it;
 3742|     32|        auto r = ranges::subrange{it, range.end()};
 3743|       |        if constexpr (ranges::contiguous_range<Range> &&
 3744|     32|                      ranges::sized_range<Range>) {
 3745|     32|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32]
  |  |  |  Branch (865:45): [True: 0, False: 32]
  |  |  |  Branch (865:45): [True: 0, False: 32]
  |  |  ------------------
  ------------------
 3746|     32|                             m_locale_options.decimal_point != CharT{'.'})) {
 3747|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3748|      0|                    it,
 3749|      0|                    do_read_source_impl(
 3750|      0|                        r,
 3751|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3752|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3753|      0|            }
 3754|     32|            else {
 3755|     32|                auto cb = [&](const auto& rr)
 3756|     32|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|     32|                    auto res = read_all(rr);
 3758|     32|                    if (SCN_UNLIKELY(res == r.begin())) {
 3759|     32|                        return detail::unexpected_scan_error(
 3760|     32|                            scan_error::invalid_scanned_value,
 3761|     32|                            "Invalid float value");
 3762|     32|                    }
 3763|     32|                    return res;
 3764|     32|                };
 3765|     32|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 32]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3766|     32|            }
 3767|       |        }
 3768|       |        else {
 3769|       |            SCN_TRY_ASSIGN(
 3770|       |                it,
 3771|       |                do_read_source_impl(
 3772|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3773|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3774|       |        }
 3775|       |
 3776|     32|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3777|       |
 3778|     32|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3778:13): [True: 32, False: 0]
  |  Branch (3778:48): [True: 32, False: 0]
  ------------------
 3779|     32|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3779:13): [True: 32, False: 0]
  ------------------
 3780|     32|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3780:13): [True: 32, False: 0]
  ------------------
 3781|     32|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3782|     32|        }
 3783|       |
 3784|     32|        handle_separators();
 3785|       |
 3786|     32|        return it;
 3787|     32|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3829|     32|    {
 3830|     32|        auto it = range.begin();
 3831|     32|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3831:73): [True: 32, False: 0]
  ------------------
 3832|     32|            return unexpected(r.error());
 3833|     32|        }
 3834|      0|        else {
 3835|      0|            it = *r;
 3836|      0|        }
 3837|       |
 3838|      0|        if (auto r = read_matching_string_classic_nocase(
 3839|      0|                ranges::subrange{it, range.end()}, "inity");
 3840|      0|            !r) {
  ------------------
  |  Branch (3840:13): [True: 0, False: 0]
  ------------------
 3841|      0|            m_kind = float_kind::inf_short;
 3842|      0|            return it;
 3843|      0|        }
 3844|      0|        else {
 3845|      0|            m_kind = float_kind::inf_long;
 3846|      0|            return *r;
 3847|      0|        }
 3848|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3852|     32|    {
 3853|     32|        auto it = range.begin();
 3854|     32|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3854:73): [True: 32, False: 0]
  ------------------
 3855|     32|            return r.transform_error(map_parse_error_to_scan_error(
 3856|     32|                scan_error::invalid_scanned_value,
 3857|     32|                "Invalid floating-point NaN value"));
 3858|     32|        }
 3859|      0|        else {
 3860|      0|            it = *r;
 3861|      0|        }
 3862|       |
 3863|      0|        if (auto r =
 3864|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3865|      0|            !r) {
  ------------------
  |  Branch (3865:13): [True: 0, False: 0]
  ------------------
 3866|      0|            m_kind = float_kind::nan_simple;
 3867|      0|            return it;
 3868|      0|        }
 3869|      0|        else {
 3870|      0|            it = *r;
 3871|      0|        }
 3872|       |
 3873|      0|        auto payload_beg_it = it;
 3874|      0|        it = read_while_code_unit(
 3875|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3876|      0|                return is_ascii_char(ch) &&
 3877|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3878|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3879|      0|            });
 3880|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3881|       |
 3882|      0|        m_kind = float_kind::nan_with_payload;
 3883|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3883:18): [True: 0, False: 0]
  ------------------
 3884|      0|                                             ')')) {
 3885|      0|            return *r;
 3886|      0|        }
 3887|      0|        return detail::unexpected_scan_error(
 3888|      0|            scan_error::invalid_scanned_value,
 3889|      0|            "Invalid floating-point NaN payload");
 3890|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|     32|    {
 3823|     32|        return read_matching_string_classic_nocase(range, "0x");
 3824|     32|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4021|     32|    {
 4022|     32|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4023|     32|        const bool allowed_nonhex =
 4024|     32|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4025|     32|             ~static_cast<unsigned>(allow_hex)) != 0;
 4026|       |
 4027|     32|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4027:39): [True: 32, False: 0]
  |  Branch (4027:45): [True: 0, False: 32]
  ------------------
 4028|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4029|      0|                scan_error::invalid_scanned_value,
 4030|      0|                "Invalid infinite floating-point value"));
 4031|      0|        }
 4032|     32|        else if (r) {
  ------------------
  |  Branch (4032:18): [True: 0, False: 32]
  ------------------
 4033|      0|            return *r;
 4034|      0|        }
 4035|       |
 4036|     32|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4036:39): [True: 32, False: 0]
  |  Branch (4036:45): [True: 0, False: 32]
  ------------------
 4037|      0|            return unexpected(r.error());
 4038|      0|        }
 4039|     32|        else if (r) {
  ------------------
  |  Branch (4039:18): [True: 0, False: 32]
  ------------------
 4040|      0|            return *r;
 4041|      0|        }
 4042|       |
 4043|     32|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4043:13): [True: 32, False: 0]
  |  Branch (4043:28): [True: 0, False: 32]
  ------------------
 4044|       |            // only hex allowed:
 4045|       |            // prefix "0x" allowed, not required
 4046|      0|            auto it = range.begin();
 4047|       |
 4048|      0|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4048:22): [True: 0, False: 0]
  ------------------
 4049|      0|                m_kind = float_kind::hex_with_prefix;
 4050|      0|                it = *r;
 4051|      0|            }
 4052|      0|            else {
 4053|      0|                m_kind = float_kind::hex_without_prefix;
 4054|      0|            }
 4055|       |
 4056|      0|            return read_hex(ranges::subrange{it, range.end()});
 4057|      0|        }
 4058|     32|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4058:13): [True: 0, False: 32]
  |  Branch (4058:29): [True: 0, False: 0]
  ------------------
 4059|       |            // only nonhex allowed:
 4060|       |            // no prefix allowed
 4061|      0|            m_kind = float_kind::generic;
 4062|      0|            return read_regular_float(range);
 4063|      0|        }
 4064|       |        // both hex and nonhex allowed:
 4065|       |        // check for "0x" prefix -> hex,
 4066|       |        // regular otherwise
 4067|       |
 4068|     32|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32]
  |  |  ------------------
  ------------------
 4069|      0|            m_kind = float_kind::hex_with_prefix;
 4070|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4071|      0|        }
 4072|       |
 4073|     32|        m_kind = float_kind::generic;
 4074|     32|        return read_regular(range);
 4075|     32|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3756|     32|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|     32|                    auto res = read_all(rr);
 3758|     32|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32]
  |  |  ------------------
  ------------------
 3759|      0|                        return detail::unexpected_scan_error(
 3760|      0|                            scan_error::invalid_scanned_value,
 3761|      0|                            "Invalid float value");
 3762|      0|                    }
 3763|     32|                    return res;
 3764|     32|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|     32|{
 1938|     32|    return ranges::next(range.begin(), range.end());
 1939|     32|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|     32|    {
  313|     32|        ranges::advance(x, bound);
  314|     32|        return x;
  315|     32|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|     32|    {
  275|     32|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     32|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|     32|    {
 1676|     32|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|     32|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|     32|    {
 1720|     32|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|     32|                      ranges::sized_range<Range>) {
 1725|     32|            m_storage.reset();
 1726|     32|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|     32|    }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3695|     32|    {
 3696|     32|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32]
  |  |  ------------------
  ------------------
 3697|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3698|      0|                classic_with_thsep_tag{}};
 3699|      0|        }
 3700|       |
 3701|     32|        return read_source_impl(range);
 3702|     32|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3721|     32|    {
 3722|     32|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3723|       |
 3724|     32|        const std::ptrdiff_t sign_len =
 3725|     32|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3725:13): [True: 0, False: 32]
  ------------------
 3726|       |
 3727|     32|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     32|    }                                                  \
  |  |  |  | 3939|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3728|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3729|     32|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4191|     38|    {
 4192|     38|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|     38|#if !SCN_DISABLE_LOCALE
 4195|     38|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 0, False: 38]
  ------------------
 4196|      0|            return read_impl<Range>(
 4197|      0|                range, rd,
 4198|      0|                [](float_reader<CharT>& r, auto&&... args) {
 4199|      0|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|      0|                },
 4201|      0|                value, loc);
 4202|      0|        }
 4203|     38|#endif
 4204|       |
 4205|     38|        return read_impl<Range>(
 4206|     38|            range, rd,
 4207|     38|            [](float_reader<CharT>& r, auto&&... args) {
 4208|     38|                return r.read_source(SCN_FWD(args)...);
 4209|     38|            },
 4210|     38|            value);
 4211|     38|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4227|     38|    {
 4228|     38|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|     38|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 4230|     38|            return unexpected(r.error());
 4231|     38|        }
 4232|       |
 4233|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|      0|        return ranges::next(range.begin(), n);
 4235|      0|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|     38|        : m_fptr([](storage fn,
  743|     38|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     38|              cvref<T> obj = *get<T>(fn);
  745|     38|              if constexpr (std::is_void_v<R>) {
  746|     38|                  obj(static_cast<decltype(args)>(args)...);
  747|     38|              }
  748|     38|              else {
  749|     38|                  return obj(static_cast<decltype(args)>(args)...);
  750|     38|              }
  751|     38|          }),
  752|     38|          m_storage(std::addressof(f))
  753|     38|    {
  754|     38|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|     38|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     38|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     38|              else {
  749|     38|                  return obj(static_cast<decltype(args)>(args)...);
  750|     38|              }
  751|     38|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|     38|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     38|        else if constexpr (std::is_object_v<T>) {
  688|     38|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     38|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4207|     38|            [](float_reader<CharT>& r, auto&&... args) {
 4208|     38|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|     38|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     38|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     38|        {
  662|     38|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4191|     16|    {
 4192|     16|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|     16|#if !SCN_DISABLE_LOCALE
 4195|     16|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 0, False: 16]
  ------------------
 4196|      0|            return read_impl<Range>(
 4197|      0|                range, rd,
 4198|      0|                [](float_reader<CharT>& r, auto&&... args) {
 4199|      0|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|      0|                },
 4201|      0|                value, loc);
 4202|      0|        }
 4203|     16|#endif
 4204|       |
 4205|     16|        return read_impl<Range>(
 4206|     16|            range, rd,
 4207|     16|            [](float_reader<CharT>& r, auto&&... args) {
 4208|     16|                return r.read_source(SCN_FWD(args)...);
 4209|     16|            },
 4210|     16|            value);
 4211|     16|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4227|     32|    {
 4228|     32|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|     32|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32]
  |  |  ------------------
  ------------------
 4230|      0|            return unexpected(r.error());
 4231|      0|        }
 4232|       |
 4233|     32|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     32|    }                                                  \
  |  |  |  | 3939|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|      0|        return ranges::next(range.begin(), n);
 4235|     32|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|     16|        : m_fptr([](storage fn,
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
  752|     16|          m_storage(std::addressof(f))
  753|     16|    {
  754|     16|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|     16|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     16|        else if constexpr (std::is_object_v<T>) {
  688|     16|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     16|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4207|     16|            [](float_reader<CharT>& r, auto&&... args) {
 4208|     16|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|     16|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     16|        {
  662|     16|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5837|  2.25k|{
 5838|       |    if constexpr (std::is_same_v<T, bool>) {
 5839|       |        return reader_impl_for_bool<CharT>{};
 5840|       |    }
 5841|       |    else if constexpr (std::is_same_v<T, char>) {
 5842|       |        return reader_impl_for_char<CharT>{};
 5843|       |    }
 5844|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5845|       |        return reader_impl_for_wchar<CharT>{};
 5846|       |    }
 5847|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5848|       |        return reader_impl_for_code_point<CharT>{};
 5849|       |    }
 5850|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5851|       |                       std::is_same_v<T, std::wstring_view>) {
 5852|       |        return reader_impl_for_string<CharT>{};
 5853|       |    }
 5854|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5855|  2.25k|                       std::is_same_v<T, std::wstring>) {
 5856|  2.25k|        return reader_impl_for_string<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5859|       |                       std::is_same_v<T, wregex_matches>) {
 5860|       |        return reader_impl_for_regex_matches<CharT>{};
 5861|       |    }
 5862|       |    else if constexpr (std::is_same_v<T, void*>) {
 5863|       |        return reader_impl_for_voidptr<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_floating_point_v<T>) {
 5866|       |        return reader_impl_for_float<CharT>{};
 5867|       |    }
 5868|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5869|       |                       !std::is_same_v<T, wchar_t> &&
 5870|       |                       !std::is_same_v<T, char32_t> &&
 5871|       |                       !std::is_same_v<T, bool>) {
 5872|       |        return reader_impl_for_int<CharT>{};
 5873|       |    }
 5874|       |    else {
 5875|       |        return reader_impl_for_monostate<CharT>{};
 5876|       |    }
 5877|  2.25k|}
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5231|  6.75k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3144|  6.70k|    {
 3145|  6.70k|        reader_error_handler eh{};
 3146|  6.70k|        get_derived().check_specs_impl(specs, eh);
 3147|  6.70k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  6.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.70k]
  |  |  ------------------
  ------------------
 3148|      0|            return detail::unexpected_scan_error(
 3149|      0|                scan_error::invalid_format_string, eh.m_msg);
 3150|      0|        }
 3151|  6.70k|        return {};
 3152|  6.70k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3156|  6.70k|    {
 3157|  6.70k|        return static_cast<Derived&>(*this);
 3158|  6.70k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5235|  6.70k|    {
 5236|  6.70k|        detail::check_string_type_specs(specs, eh);
 5237|       |
 5238|  6.70k|        SCN_GCC_PUSH
 5239|  6.70k|        SCN_GCC_IGNORE("-Wswitch")
 5240|  6.70k|        SCN_GCC_IGNORE("-Wswitch-default")
 5241|       |
 5242|  6.70k|        SCN_CLANG_PUSH
 5243|  6.70k|        SCN_CLANG_IGNORE("-Wswitch")
 5244|  6.70k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5245|       |
 5246|  6.70k|        switch (specs.type) {
  ------------------
  |  Branch (5246:17): [True: 0, False: 6.70k]
  ------------------
 5247|    162|            case detail::presentation_type::none:
  ------------------
  |  Branch (5247:13): [True: 162, False: 6.54k]
  ------------------
 5248|    162|                m_type = reader_type::word;
 5249|    162|                break;
 5250|       |
 5251|     36|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5251:13): [True: 36, False: 6.66k]
  ------------------
 5252|     36|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5252:21): [True: 12, False: 24]
  ------------------
 5253|     36|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5253:21): [True: 12, False: 12]
  ------------------
 5254|     24|                    m_type = reader_type::custom_word;
 5255|     24|                }
 5256|     12|                else {
 5257|     12|                    m_type = reader_type::word;
 5258|     12|                }
 5259|     36|                break;
 5260|      0|            }
 5261|       |
 5262|      6|            case detail::presentation_type::character:
  ------------------
  |  Branch (5262:13): [True: 6, False: 6.69k]
  ------------------
 5263|      6|                m_type = reader_type::character;
 5264|      6|                break;
 5265|       |
 5266|     60|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5266:13): [True: 60, False: 6.64k]
  ------------------
 5267|     60|                m_type = reader_type::character_set;
 5268|     60|                break;
 5269|       |
 5270|  6.36k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5270:13): [True: 6.36k, False: 342]
  ------------------
 5271|  6.36k|                m_type = reader_type::regex;
 5272|  6.36k|                break;
 5273|       |
 5274|     78|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5274:13): [True: 78, False: 6.62k]
  ------------------
 5275|     78|                m_type = reader_type::regex_escaped;
 5276|     78|                break;
 5277|  6.70k|        }
 5278|       |
 5279|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5280|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5281|  6.70k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5284|  6.96k|    {
 5285|  6.96k|        return m_type == reader_type::word;
 5286|  6.96k|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|    662|{
 1242|    662|    auto it = src.begin();
 1243|  13.9k|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 13.6k, False: 344]
  ------------------
 1244|  13.6k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  13.6k|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 13.6k]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|  13.6k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 13.6k]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|  13.6k|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  13.6k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  13.6k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 318, False: 13.3k]
  ------------------
 1254|    318|            return false;
 1255|    318|        }
 1256|  13.3k|        it += len;
 1257|  13.3k|    }
 1258|    344|    return true;
 1259|    662|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3096|      2|{
 3097|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3098|       |        if (source.stores_allocated_string()) {
 3099|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3100|       |        }
 3101|       |        else {
 3102|       |            dest.assign(source.view());
 3103|       |        }
 3104|       |    }
 3105|      2|    else {
 3106|      2|        return transcode_impl(source.view(), dest);
 3107|      2|    }
 3108|       |
 3109|      0|    return {};
 3110|      2|}
_ZN3scn2v44impl14transcode_implIwcEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3071|     86|{
 3072|     86|    dst.clear();
 3073|     86|    transcode_valid_to_string(src, dst);
 3074|     86|    return {};
 3075|     86|}
_ZN3scn2v44impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1501|     86|{
 1502|     86|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1503|       |
 1504|     86|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  930|     86|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     86|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1505|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1506|       |        if constexpr (sizeof(DestCharT) == 2) {
 1507|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1508|       |            std::u32string tmp;
 1509|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1510|       |            return transcode_to_string_impl_32to16<true>(
 1511|       |                std::u32string_view{tmp}, dest);
 1512|       |        }
 1513|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1514|       |            return transcode_valid_to_string_impl_to32(src, dest);
 1515|       |        }
 1516|       |    }
 1517|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1518|       |        if constexpr (sizeof(DestCharT) == 1) {
 1519|       |            std::u32string tmp;
 1520|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1521|       |            return transcode_to_string_impl_32to8<true>(
 1522|       |                std::u32string_view{tmp}, dest);
 1523|       |        }
 1524|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1525|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1526|       |        }
 1527|       |    }
 1528|     86|    else if constexpr (sizeof(SourceCharT) == 4) {
 1529|     86|        if constexpr (sizeof(DestCharT) == 1) {
 1530|     86|            return transcode_to_string_impl_32to8<true>(src, dest);
 1531|       |        }
 1532|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1533|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1534|       |        }
 1535|     86|    }
 1536|       |
 1537|     86|    SCN_EXPECT(false);
  ------------------
  |  |  930|     86|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     86|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1538|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1539|     86|}
_ZN3scn2v44impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1392|     86|{
 1393|     86|    static_assert(sizeof(SourceCharT) == 4);
 1394|     86|    static_assert(sizeof(DestCharT) == 1);
 1395|       |
 1396|  2.20k|    for (auto cp : src) {
  ------------------
  |  Branch (1396:18): [True: 2.20k, False: 86]
  ------------------
 1397|  2.20k|        const auto u32cp = static_cast<uint32_t>(cp);
 1398|  2.20k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  865|  2.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [Folded - Ignored]
  |  |  |  Branch (865:45): [Folded - Ignored]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1399|       |            // Replacement character
 1400|      0|            dest.push_back(static_cast<char>(0xef));
 1401|      0|            dest.push_back(static_cast<char>(0xbf));
 1402|      0|            dest.push_back(static_cast<char>(0xbd));
 1403|      0|        }
 1404|  2.20k|        else if (cp < 128) {
  ------------------
  |  Branch (1404:18): [True: 1.55k, False: 658]
  ------------------
 1405|  1.55k|            dest.push_back(static_cast<char>(cp));
 1406|  1.55k|        }
 1407|    658|        else if (cp < 2048) {
  ------------------
  |  Branch (1407:18): [True: 26, False: 632]
  ------------------
 1408|     26|            dest.push_back(
 1409|     26|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1410|     26|            dest.push_back(
 1411|     26|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1412|     26|        }
 1413|    632|        else if (cp < 65536) {
  ------------------
  |  Branch (1413:18): [True: 446, False: 186]
  ------------------
 1414|    446|            dest.push_back(
 1415|    446|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1416|    446|            dest.push_back(static_cast<char>(
 1417|    446|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1418|    446|            dest.push_back(
 1419|    446|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1420|    446|        }
 1421|    186|        else {
 1422|    186|            dest.push_back(
 1423|    186|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1424|    186|            dest.push_back(static_cast<char>(
 1425|    186|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1426|    186|            dest.push_back(static_cast<char>(
 1427|    186|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1428|    186|            dest.push_back(
 1429|    186|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1430|    186|        }
 1431|  2.20k|    }
 1432|     86|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5132|     60|        {
 5133|     60|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5133:17): [True: 18, False: 42]
  ------------------
 5134|     18|                return {};
 5135|     18|            }
 5136|       |
 5137|     42|            auto charset_string = specs.charset_string<SourceCharT>();
 5138|     42|            auto it = detail::to_address(charset_string.begin());
 5139|     42|            auto set = detail::parse_presentation_set(
 5140|     42|                it, detail::to_address(charset_string.end()), nonascii);
 5141|     42|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|     42|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 42]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5142|     42|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|     42|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|     42|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5143|     42|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|     42|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|     42|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5144|       |
 5145|     42|            std::sort(nonascii.extra_ranges.begin(),
 5146|     42|                      nonascii.extra_ranges.end());
 5147|     42|            return {};
 5148|     42|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5165|  1.78k|        {
 5166|  1.78k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5166:17): [True: 516, False: 1.27k]
  ------------------
 5167|    516|                return helper.is_char_set_in_extra_literals(cp);
 5168|    516|            }
 5169|       |
 5170|  1.27k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5171|  1.78k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5115|    516|        {
 5116|       |            // TODO: binary search?
 5117|    516|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5117:17): [True: 0, False: 516]
  ------------------
 5118|      0|                return false;
 5119|      0|            }
 5120|       |
 5121|    516|            const auto cp_val = static_cast<uint32_t>(cp);
 5122|    516|            return std::find_if(
 5123|    516|                       nonascii.extra_ranges.begin(),
 5124|    516|                       nonascii.extra_ranges.end(),
 5125|    516|                       [cp_val](const auto& pair) noexcept {
 5126|    516|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5127|    516|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5128|    516|                       }) != nonascii.extra_ranges.end();
 5129|    516|        }
_ZZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5125|  6.94k|                       [cp_val](const auto& pair) noexcept {
 5126|  6.94k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5126:35): [True: 6.94k, False: 0]
  ------------------
 5127|  6.94k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5127:35): [True: 516, False: 6.42k]
  ------------------
 5128|  6.94k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5105|  2.07k|        {
 5106|  2.07k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  2.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5107|  2.07k|            const auto val =
 5108|  2.07k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5109|  2.07k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5110|  2.07k|                    (val % 8)) &
 5111|  2.07k|                   1u;
 5112|  2.07k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5156|    804|        {
 5157|    804|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5157:17): [True: 0, False: 804]
  ------------------
 5158|      0|                return false;
 5159|      0|            }
 5160|       |
 5161|    804|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5162|    804|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5102|     60|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5302|     48|    {
 5303|     48|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     48|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|     48|        return read_impl(range, specs, value);
 5305|     48|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5320|     48|    {
 5321|     48|        SCN_CLANG_PUSH
 5322|     48|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|     48|        switch (m_type) {
 5325|     38|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 38, False: 10]
  ------------------
 5326|     38|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      4|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 4, False: 44]
  ------------------
 5329|      4|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      4|                                                                   value);
 5331|       |
 5332|      2|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 2, False: 46]
  ------------------
 5333|      2|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 0, False: 48]
  ------------------
 5336|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|      0|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      0|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 0, False: 48]
  ------------------
 5341|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      0|                    range, specs.charset_string<SourceCharT>(),
 5343|      0|                    specs.regexp_flags, value);
 5344|       |
 5345|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 4, False: 44]
  ------------------
 5346|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      4|                    range,
 5348|      4|                    get_unescaped_regex_pattern(
 5349|      4|                        specs.charset_string<SourceCharT>()),
 5350|      4|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 48]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|     48|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|     48|        }
 5357|       |
 5358|     48|        SCN_CLANG_POP
 5359|     48|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4849|     38|    {
 4850|     38|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|     38|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4783|     44|{
 4784|     44|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|     44|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|     44|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 42, False: 2]
  ------------------
 4788|     42|        return detail::unexpected_scan_error(
 4789|     42|            scan_error::invalid_scanned_value,
 4790|     42|            "Invalid encoding in scanned string");
 4791|     42|    }
 4792|       |
 4793|      2|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|      2|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|      2|    return SCN_MOVE(result);
  ------------------
  |  |  934|      2|    static_cast<    \
  |  |  935|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|      2|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2186|    114|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|    114|    else {
 2196|    114|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|    114|        return read_until_code_point(
 2208|    114|            ranges::subrange{it, range.end()},
 2209|    114|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|    114|    }
 2211|    114|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2159|    114|{
 2160|    114|    auto it = range.begin();
 2161|  6.09k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 5.97k, False: 114]
  ------------------
 2162|  5.97k|        const auto val =
 2163|  5.97k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  5.97k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  5.97k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 5.97k, False: 0]
  |  |  ------------------
  ------------------
 2165|  5.97k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  5.97k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  5.97k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 0, False: 5.97k]
  ------------------
 2168|      0|                return it;
 2169|      0|            }
 2170|  5.97k|        }
 2171|  5.97k|        it = val.iterator;
 2172|  5.97k|    }
 2173|       |
 2174|    114|    return it;
 2175|    114|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    114|        : m_fptr([](storage fn,
  743|    114|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    114|              cvref<T> obj = *get<T>(fn);
  745|    114|              if constexpr (std::is_void_v<R>) {
  746|    114|                  obj(static_cast<decltype(args)>(args)...);
  747|    114|              }
  748|    114|              else {
  749|    114|                  return obj(static_cast<decltype(args)>(args)...);
  750|    114|              }
  751|    114|          }),
  752|    114|          m_storage(std::addressof(f))
  753|    114|    {
  754|    114|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  5.97k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.97k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.97k|              else {
  749|  5.97k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.97k|              }
  751|  5.97k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  5.97k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.97k|        else if constexpr (std::is_object_v<T>) {
  688|  5.97k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.97k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2209|  5.97k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    114|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    114|        {
  662|    114|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4870|      4|    {
 4871|      4|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4871:13): [True: 4, False: 0]
  ------------------
 4872|      4|            return read_string_impl(
 4873|      4|                range,
 4874|      4|                read_until_code_unit(
 4875|      4|                    range,
 4876|      4|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4877|      4|                        SourceCharT ch) { return ch == until; }),
 4878|      4|                value);
 4879|      4|        }
 4880|      0|        return read_string_impl(
 4881|      0|            range,
 4882|      0|            read_until_code_units(
 4883|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4884|      0|            value);
 4885|      4|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|      4|        : m_fptr([](storage fn,
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
  752|      4|          m_storage(std::addressof(f))
  753|      4|    {
  754|      4|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|    194|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    194|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    194|              else {
  749|    194|                  return obj(static_cast<decltype(args)>(args)...);
  750|    194|              }
  751|    194|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    194|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    194|        else if constexpr (std::is_object_v<T>) {
  688|    194|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    194|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4877|    194|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      4|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      4|        {
  662|      4|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4976|      2|    {
 4977|      2|        return read_impl(
 4978|      2|            range,
 4979|      2|            [&](const auto& rng) {
 4980|      2|                return read_string_impl(rng, read_all(rng), value);
 4981|      2|            },
 4982|      2|            detail::priority_tag<1>{});
 4983|      2|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5003|      2|    {
 5004|      2|        return read_cb(range);
 5005|      2|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4979|      2|            [&](const auto& rng) {
 4980|      2|                return read_string_impl(rng, read_all(rng), value);
 4981|      2|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1937|      6|{
 1938|      6|    return ranges::next(range.begin(), range.end());
 1939|      6|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|      6|    {
  313|      6|        ranges::advance(x, bound);
  314|      6|        return x;
  315|      6|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|      6|    {
  275|      6|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|      6|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|      6|    {
  203|    390|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 384, False: 6]
  ------------------
  204|    384|            ++i;
  205|    384|        }
  206|      6|    }
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4920|      4|    {
 4921|      4|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      4|    }                                                  \
  |  |  |  | 3939|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4922|      0|        return read_string_impl(range, it, value);
 4923|      4|    }
_ZN3scn2v44impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4942|     12|    {
 4943|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4944|       |                      !std::is_same_v<SourceCharT, char>) {
 4945|       |            return detail::unexpected_scan_error(
 4946|       |                scan_error::invalid_format_string,
 4947|       |                "Regex backend doesn't support wide strings as input");
 4948|       |        }
 4949|     12|        else {
 4950|     12|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4950:17): [True: 12, False: 0]
  ------------------
 4951|     12|                return detail::unexpected_scan_error(
 4952|     12|                    scan_error::invalid_format_string,
 4953|     12|                    "Cannot use regex with a non-contiguous source "
 4954|     12|                    "range");
 4955|     12|            }
 4956|       |
 4957|      0|            auto input = get_as_contiguous(range);
 4958|      0|            SCN_TRY(it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4959|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4960|      0|            return ranges::next(range.begin(),
 4961|      0|                                ranges::distance(input.begin(), it));
 4962|      0|        }
 4963|     12|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  959|     12|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|       |                  ranges::sized_range<Range>) {
  962|       |        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|     12|    else {
  975|     12|        return false;
  976|     12|    }
  977|     12|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5302|  2.18k|    {
 5303|  2.18k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  2.18k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  2.18k|        return read_impl(range, specs, value);
 5305|  2.18k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5320|  2.18k|    {
 5321|  2.18k|        SCN_CLANG_PUSH
 5322|  2.18k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|  2.18k|        switch (m_type) {
 5325|     20|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 20, False: 2.16k]
  ------------------
 5326|     20|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      4|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 4, False: 2.18k]
  ------------------
 5329|      4|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      4|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 2.18k]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|     20|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 20, False: 2.16k]
  ------------------
 5336|     20|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|     20|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|  2.12k|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 2.12k, False: 66]
  ------------------
 5341|  2.12k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|  2.12k|                    range, specs.charset_string<SourceCharT>(),
 5343|  2.12k|                    specs.regexp_flags, value);
 5344|       |
 5345|     22|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 22, False: 2.16k]
  ------------------
 5346|     22|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|     22|                    range,
 5348|     22|                    get_unescaped_regex_pattern(
 5349|     22|                        specs.charset_string<SourceCharT>()),
 5350|     22|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 2.18k]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|  2.18k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|  2.18k|        }
 5357|       |
 5358|  2.18k|        SCN_CLANG_POP
 5359|  2.18k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4849|     36|    {
 4850|     36|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|     36|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4783|     40|{
 4784|     40|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|     40|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|     40|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 22, False: 18]
  ------------------
 4788|     22|        return detail::unexpected_scan_error(
 4789|     22|            scan_error::invalid_scanned_value,
 4790|     22|            "Invalid encoding in scanned string");
 4791|     22|    }
 4792|       |
 4793|     18|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     18|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|     18|    return SCN_MOVE(result);
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|     18|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3116|     84|{
 3117|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3118|       |        dest.assign(source.view());
 3119|       |    }
 3120|     84|    else {
 3121|     84|        return transcode_impl(source.view(), dest);
 3122|     84|    }
 3123|       |
 3124|      0|    return {};
 3125|     84|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|    108|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|    108|    else {
 2196|    108|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|    108|        return read_until_code_point(
 2208|    108|            ranges::subrange{it, range.end()},
 2209|    108|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|    108|    }
 2211|    108|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|    108|        : m_fptr([](storage fn,
  743|    108|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    108|              cvref<T> obj = *get<T>(fn);
  745|    108|              if constexpr (std::is_void_v<R>) {
  746|    108|                  obj(static_cast<decltype(args)>(args)...);
  747|    108|              }
  748|    108|              else {
  749|    108|                  return obj(static_cast<decltype(args)>(args)...);
  750|    108|              }
  751|    108|          }),
  752|    108|          m_storage(std::addressof(f))
  753|    108|    {
  754|    108|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  10.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  10.0k|              else {
  749|  10.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.0k|              }
  751|  10.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  10.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  10.0k|        else if constexpr (std::is_object_v<T>) {
  688|  10.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  10.0k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2209|  10.0k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|    108|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    108|        {
  662|    108|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4870|      4|    {
 4871|      4|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4871:13): [True: 4, False: 0]
  ------------------
 4872|      4|            return read_string_impl(
 4873|      4|                range,
 4874|      4|                read_until_code_unit(
 4875|      4|                    range,
 4876|      4|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4877|      4|                        SourceCharT ch) { return ch == until; }),
 4878|      4|                value);
 4879|      4|        }
 4880|      0|        return read_string_impl(
 4881|      0|            range,
 4882|      0|            read_until_code_units(
 4883|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4884|      0|            value);
 4885|      4|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|      4|        : m_fptr([](storage fn,
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
  752|      4|          m_storage(std::addressof(f))
  753|      4|    {
  754|      4|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    258|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    258|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    258|              else {
  749|    258|                  return obj(static_cast<decltype(args)>(args)...);
  750|    258|              }
  751|    258|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    258|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    258|        else if constexpr (std::is_object_v<T>) {
  688|    258|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    258|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4877|    258|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      4|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      4|        {
  662|      4|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5077|     20|    {
 5078|     20|        auto it = read_source_impl(range, {specs});
 5079|     20|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2, False: 18]
  |  |  ------------------
  ------------------
 5080|      2|            return unexpected(it.error());
 5081|      2|        }
 5082|       |
 5083|     18|        return read_string_impl(range, *it, value);
 5084|     20|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5180|     60|    {
 5181|     60|        const bool is_inverted = helper.specs.charset_is_inverted;
 5182|     60|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5183|       |
 5184|     60|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|     60|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 60]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5185|       |
 5186|     60|        read_source_callback cb_wrapper{helper};
 5187|       |
 5188|     60|        if (accepts_nonascii) {
  ------------------
  |  Branch (5188:13): [True: 42, False: 18]
  ------------------
 5189|     42|            const auto cb = [&](char32_t cp) {
 5190|     42|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|     42|            };
 5192|       |
 5193|     42|            if (is_inverted) {
  ------------------
  |  Branch (5193:17): [True: 0, False: 42]
  ------------------
 5194|      0|                auto it = read_until_code_point(range, cb);
 5195|      0|                return check_nonempty(it, range);
 5196|      0|            }
 5197|     42|            auto it = read_while_code_point(range, cb);
 5198|     42|            return check_nonempty(it, range);
 5199|     42|        }
 5200|       |
 5201|     18|        const auto cb = [&](SourceCharT ch) {
 5202|     18|            return cb_wrapper.on_ascii_only(ch);
 5203|     18|        };
 5204|       |
 5205|     18|        if (is_inverted) {
  ------------------
  |  Branch (5205:13): [True: 0, False: 18]
  ------------------
 5206|      0|            auto it = read_until_code_unit(range, cb);
 5207|      0|            return check_nonempty(it, range);
 5208|      0|        }
 5209|     18|        auto it = read_while_code_unit(range, cb);
 5210|     18|        return check_nonempty(it, range);
 5211|     18|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     42|        : m_fptr([](storage fn,
  743|     42|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     42|              cvref<T> obj = *get<T>(fn);
  745|     42|              if constexpr (std::is_void_v<R>) {
  746|     42|                  obj(static_cast<decltype(args)>(args)...);
  747|     42|              }
  748|     42|              else {
  749|     42|                  return obj(static_cast<decltype(args)>(args)...);
  750|     42|              }
  751|     42|          }),
  752|     42|          m_storage(std::addressof(f))
  753|     42|    {
  754|     42|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|  1.78k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.78k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.78k|              else {
  749|  1.78k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.78k|              }
  751|  1.78k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  1.78k|    {
  684|  1.78k|        if constexpr (std::is_const_v<T>) {
  685|  1.78k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.78k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5189|  1.78k|            const auto cb = [&](char32_t cp) {
 5190|  1.78k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|  1.78k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|     42|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     42|        {
  667|     42|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5216|     60|    {
 5217|     60|        if (it == range.begin()) {
  ------------------
  |  Branch (5217:13): [True: 6, False: 54]
  ------------------
 5218|      6|            return detail::unexpected_scan_error(
 5219|      6|                scan_error::invalid_scanned_value,
 5220|      6|                "No characters matched in [character set]");
 5221|      6|        }
 5222|       |
 5223|     54|        return it;
 5224|     60|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     18|        : m_fptr([](storage fn,
  743|     18|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     18|              cvref<T> obj = *get<T>(fn);
  745|     18|              if constexpr (std::is_void_v<R>) {
  746|     18|                  obj(static_cast<decltype(args)>(args)...);
  747|     18|              }
  748|     18|              else {
  749|     18|                  return obj(static_cast<decltype(args)>(args)...);
  750|     18|              }
  751|     18|          }),
  752|     18|          m_storage(std::addressof(f))
  753|     18|    {
  754|     18|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|    804|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    804|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    804|              else {
  749|    804|                  return obj(static_cast<decltype(args)>(args)...);
  750|    804|              }
  751|    804|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|    804|    {
  684|    804|        if constexpr (std::is_const_v<T>) {
  685|    804|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    804|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5201|    804|        const auto cb = [&](SourceCharT ch) {
 5202|    804|            return cb_wrapper.on_ascii_only(ch);
 5203|    804|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|     18|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     18|        {
  667|     18|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4783|    108|{
 4784|    108|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    108|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    108|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 42, False: 66]
  ------------------
 4788|     42|        return detail::unexpected_scan_error(
 4789|     42|            scan_error::invalid_scanned_value,
 4790|     42|            "Invalid encoding in scanned string");
 4791|     42|    }
 4792|       |
 4793|     66|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     66|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     66|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 66]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|     66|    return SCN_MOVE(result);
  ------------------
  |  |  934|     66|    static_cast<    \
  |  |  935|     66|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|     66|}
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4920|  2.14k|    {
 4921|  2.14k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  2.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.05k, False: 90]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.05k|    }                                                  \
  |  |  |  | 3939|  2.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4922|     90|        return read_string_impl(range, it, value);
 4923|  2.14k|    }
_ZN3scn2v44impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4942|  6.42k|    {
 4943|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4944|       |                      !std::is_same_v<SourceCharT, char>) {
 4945|       |            return detail::unexpected_scan_error(
 4946|       |                scan_error::invalid_format_string,
 4947|       |                "Regex backend doesn't support wide strings as input");
 4948|       |        }
 4949|  6.42k|        else {
 4950|  6.42k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4950:17): [True: 0, False: 6.42k]
  ------------------
 4951|      0|                return detail::unexpected_scan_error(
 4952|      0|                    scan_error::invalid_format_string,
 4953|      0|                    "Cannot use regex with a non-contiguous source "
 4954|      0|                    "range");
 4955|      0|            }
 4956|       |
 4957|  6.42k|            auto input = get_as_contiguous(range);
 4958|  6.42k|            SCN_TRY(it,
  ------------------
  |  | 3940|  6.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  6.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  6.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  6.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6.15k, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  6.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  6.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  6.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  6.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  6.15k|    }                                                  \
  |  |  |  | 3939|  6.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4959|    270|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4960|    270|            return ranges::next(range.begin(),
 4961|    270|                                ranges::distance(input.begin(), it));
 4962|  6.42k|        }
 4963|  6.42k|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  959|  6.42k|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|  6.42k|                  ranges::sized_range<Range>) {
  962|  6.42k|        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|       |    else {
  975|       |        return false;
  976|       |    }
  977|  6.42k|}
_ZN3scn2v44impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1065|  6.42k|{
 1066|  6.42k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  930|  6.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1067|       |
 1068|       |    if constexpr (ranges::contiguous_range<Range> &&
 1069|  6.42k|                  ranges::sized_range<Range>) {
 1070|  6.42k|        return r;
 1071|       |    }
 1072|       |    else if constexpr (std::is_same_v<
 1073|       |                           ranges::const_iterator_t<Range>,
 1074|       |                           typename detail::basic_scan_buffer<
 1075|       |                               detail::char_t<Range>>::forward_iterator>) {
 1076|       |        if constexpr (ranges::common_range<Range>) {
 1077|       |            return detail::make_string_view_from_pointers(
 1078|       |                r.begin().to_contiguous_segment_iterator(),
 1079|       |                r.end().to_contiguous_segment_iterator());
 1080|       |        }
 1081|       |        else {
 1082|       |            return r.begin().contiguous_segment();
 1083|       |        }
 1084|       |    }
 1085|       |    else {
 1086|       |        SCN_EXPECT(false);
 1087|       |        SCN_UNREACHABLE;
 1088|       |        // for return type deduction
 1089|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1090|       |    }
 1091|  6.42k|}
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  981|  6.42k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|  6.42k|                  ranges::sized_range<Range>) {
  984|  6.42k|        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|       |                               detail::char_t<Range>>::forward_iterator>) {
  990|       |        auto beg = r.begin();
  991|       |        if (beg.contiguous_segment().empty()) {
  992|       |            return false;
  993|       |        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|       |        else {
  999|       |            if (beg.stores_parent()) {
 1000|       |                return beg.contiguous_segment().end() ==
 1001|       |                       beg.parent()->current_view().end();
 1002|       |            }
 1003|       |            return true;
 1004|       |        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  6.42k|}
_ZN3scn2v44impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4367|  6.42k|{
 4368|  6.42k|    static_assert(ranges::contiguous_range<Input> &&
 4369|  6.42k|                  ranges::borrowed_range<Input> &&
 4370|  6.42k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4371|       |
 4372|  6.42k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4373|  6.42k|    std::basic_regex<CharT> re{};
 4374|  6.42k|    try {
 4375|  6.42k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3940|  6.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  6.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  6.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  6.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 6.42k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  6.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  6.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4376|  6.42k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4377|  6.42k|                                     re_flags | std::regex_constants::nosubs};
 4378|  6.42k|    }
 4379|  6.42k|    catch (const std::regex_error& err) {
 4380|  5.53k|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4381|  5.53k|                                             "Invalid regex");
 4382|  5.53k|    }
 4383|       |
 4384|    894|    std::match_results<const CharT*> matches{};
 4385|    894|    try {
 4386|    894|        bool found = std::regex_search(input.data(),
 4387|    894|                                       input.data() + input.size(), matches, re,
 4388|    894|                                       std::regex_constants::match_continuous);
 4389|    894|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4389:13): [True: 624, False: 270]
  |  Branch (4389:23): [True: 0, False: 270]
  ------------------
 4390|    588|            return detail::unexpected_scan_error(
 4391|    588|                scan_error::invalid_scanned_value,
 4392|    588|                "Regular expression didn't match");
 4393|    588|        }
 4394|    894|    }
 4395|    894|    catch (const std::regex_error& err) {
 4396|     36|        return detail::unexpected_scan_error(
 4397|     36|            scan_error::invalid_format_string,
 4398|     36|            "Regex matching failed with an error");
 4399|     36|    }
 4400|       |
 4401|    270|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4402|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4403|       |    auto re =
 4404|       |#if SCN_REGEX_BOOST_USE_ICU
 4405|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4406|       |                             make_regex_flags(flags) |
 4407|       |                                 boost::regex_constants::no_except |
 4408|       |                                 boost::regex_constants::nosubs);
 4409|       |#else
 4410|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4411|       |                                  make_regex_flags(flags) |
 4412|       |                                      boost::regex_constants::no_except |
 4413|       |                                      boost::regex_constants::nosubs};
 4414|       |#endif
 4415|       |    if (re.status() != 0) {
 4416|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4417|       |                                             "Invalid regex");
 4418|       |    }
 4419|       |
 4420|       |    boost::match_results<const CharT*> matches{};
 4421|       |    try {
 4422|       |        bool found =
 4423|       |#if SCN_REGEX_BOOST_USE_ICU
 4424|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4425|       |                                   matches, re,
 4426|       |                                   boost::regex_constants::match_continuous);
 4427|       |#else
 4428|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4429|       |                                matches, re,
 4430|       |                                boost::regex_constants::match_continuous);
 4431|       |#endif
 4432|       |        if (!found || matches.prefix().matched) {
 4433|       |            return detail::unexpected_scan_error(
 4434|       |                scan_error::invalid_scanned_value,
 4435|       |                "Regular expression didn't match");
 4436|       |        }
 4437|       |    }
 4438|       |    catch (const std::runtime_error& err) {
 4439|       |        return detail::unexpected_scan_error(
 4440|       |            scan_error::invalid_format_string,
 4441|       |            "Regex matching failed with an error");
 4442|       |    }
 4443|       |
 4444|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4445|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4446|       |    static_assert(std::is_same_v<CharT, char>);
 4447|       |    std::string flagged_pattern{};
 4448|       |    auto re = [&]() {
 4449|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4450|       |        opts.set_never_capture(true);
 4451|       |        if (flagstr.empty()) {
 4452|       |            return re2::RE2{pattern, opts};
 4453|       |        }
 4454|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4455|       |        flagged_pattern.append(flagstr);
 4456|       |        flagged_pattern.append(pattern);
 4457|       |        return re2::RE2{flagged_pattern, opts};
 4458|       |    }();
 4459|       |    if (!re.ok()) {
 4460|       |        return detail::unexpected_scan_error(
 4461|       |            scan_error::invalid_format_string,
 4462|       |            "Failed to parse regular expression");
 4463|       |    }
 4464|       |
 4465|       |    auto new_input = detail::make_string_view_from_pointers(
 4466|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4467|       |    bool found = re2::RE2::Consume(&new_input, re);
 4468|       |    if (!found) {
 4469|       |        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 4470|       |                                             "Regular expression didn't match");
 4471|       |    }
 4472|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4473|       |#endif  // SCN_REGEX_BACKEND == ...
 4474|    894|}
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5837|  2.25k|{
 5838|       |    if constexpr (std::is_same_v<T, bool>) {
 5839|       |        return reader_impl_for_bool<CharT>{};
 5840|       |    }
 5841|       |    else if constexpr (std::is_same_v<T, char>) {
 5842|       |        return reader_impl_for_char<CharT>{};
 5843|       |    }
 5844|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5845|       |        return reader_impl_for_wchar<CharT>{};
 5846|       |    }
 5847|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5848|       |        return reader_impl_for_code_point<CharT>{};
 5849|       |    }
 5850|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5851|       |                       std::is_same_v<T, std::wstring_view>) {
 5852|       |        return reader_impl_for_string<CharT>{};
 5853|       |    }
 5854|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5855|  2.25k|                       std::is_same_v<T, std::wstring>) {
 5856|  2.25k|        return reader_impl_for_string<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5859|       |                       std::is_same_v<T, wregex_matches>) {
 5860|       |        return reader_impl_for_regex_matches<CharT>{};
 5861|       |    }
 5862|       |    else if constexpr (std::is_same_v<T, void*>) {
 5863|       |        return reader_impl_for_voidptr<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_floating_point_v<T>) {
 5866|       |        return reader_impl_for_float<CharT>{};
 5867|       |    }
 5868|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5869|       |                       !std::is_same_v<T, wchar_t> &&
 5870|       |                       !std::is_same_v<T, char32_t> &&
 5871|       |                       !std::is_same_v<T, bool>) {
 5872|       |        return reader_impl_for_int<CharT>{};
 5873|       |    }
 5874|       |    else {
 5875|       |        return reader_impl_for_monostate<CharT>{};
 5876|       |    }
 5877|  2.25k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3096|      2|{
 3097|      2|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3098|      2|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3098:13): [True: 2, False: 0]
  ------------------
 3099|      2|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|      2|    static_cast<    \
  |  |  935|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3100|      2|        }
 3101|      0|        else {
 3102|      0|            dest.assign(source.view());
 3103|      0|        }
 3104|       |    }
 3105|       |    else {
 3106|       |        return transcode_impl(source.view(), dest);
 3107|       |    }
 3108|       |
 3109|      2|    return {};
 3110|      2|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5302|     48|    {
 5303|     48|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     48|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|     48|        return read_impl(range, specs, value);
 5305|     48|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5320|     48|    {
 5321|     48|        SCN_CLANG_PUSH
 5322|     48|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|     48|        switch (m_type) {
 5325|     38|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 38, False: 10]
  ------------------
 5326|     38|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      4|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 4, False: 44]
  ------------------
 5329|      4|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      4|                                                                   value);
 5331|       |
 5332|      2|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 2, False: 46]
  ------------------
 5333|      2|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 0, False: 48]
  ------------------
 5336|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|      0|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      0|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 0, False: 48]
  ------------------
 5341|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      0|                    range, specs.charset_string<SourceCharT>(),
 5343|      0|                    specs.regexp_flags, value);
 5344|       |
 5345|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 4, False: 44]
  ------------------
 5346|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      4|                    range,
 5348|      4|                    get_unescaped_regex_pattern(
 5349|      4|                        specs.charset_string<SourceCharT>()),
 5350|      4|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 48]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|     48|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|     48|        }
 5357|       |
 5358|     48|        SCN_CLANG_POP
 5359|     48|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4849|     38|    {
 4850|     38|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|     38|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4783|     44|{
 4784|     44|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|     44|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|     44|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 42, False: 2]
  ------------------
 4788|     42|        return detail::unexpected_scan_error(
 4789|     42|            scan_error::invalid_scanned_value,
 4790|     42|            "Invalid encoding in scanned string");
 4791|     42|    }
 4792|       |
 4793|      2|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|      2|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|      2|    return SCN_MOVE(result);
  ------------------
  |  |  934|      2|    static_cast<    \
  |  |  935|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|      2|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4870|      4|    {
 4871|      4|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4871:13): [True: 4, False: 0]
  ------------------
 4872|      4|            return read_string_impl(
 4873|      4|                range,
 4874|      4|                read_until_code_unit(
 4875|      4|                    range,
 4876|      4|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4877|      4|                        SourceCharT ch) { return ch == until; }),
 4878|      4|                value);
 4879|      4|        }
 4880|      0|        return read_string_impl(
 4881|      0|            range,
 4882|      0|            read_until_code_units(
 4883|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4884|      0|            value);
 4885|      4|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|      4|        : m_fptr([](storage fn,
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
  752|      4|          m_storage(std::addressof(f))
  753|      4|    {
  754|      4|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|    194|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    194|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    194|              else {
  749|    194|                  return obj(static_cast<decltype(args)>(args)...);
  750|    194|              }
  751|    194|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    194|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    194|        else if constexpr (std::is_object_v<T>) {
  688|    194|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    194|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4877|    194|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      4|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      4|        {
  662|      4|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4976|      2|    {
 4977|      2|        return read_impl(
 4978|      2|            range,
 4979|      2|            [&](const auto& rng) {
 4980|      2|                return read_string_impl(rng, read_all(rng), value);
 4981|      2|            },
 4982|      2|            detail::priority_tag<1>{});
 4983|      2|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5003|      2|    {
 5004|      2|        return read_cb(range);
 5005|      2|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4979|      2|            [&](const auto& rng) {
 4980|      2|                return read_string_impl(rng, read_all(rng), value);
 4981|      2|            },
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4920|      4|    {
 4921|      4|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      4|    }                                                  \
  |  |  |  | 3939|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4922|      0|        return read_string_impl(range, it, value);
 4923|      4|    }
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5302|  2.18k|    {
 5303|  2.18k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  2.18k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  2.18k|        return read_impl(range, specs, value);
 5305|  2.18k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5320|  2.18k|    {
 5321|  2.18k|        SCN_CLANG_PUSH
 5322|  2.18k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|  2.18k|        switch (m_type) {
 5325|     20|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 20, False: 2.16k]
  ------------------
 5326|     20|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      4|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 4, False: 2.18k]
  ------------------
 5329|      4|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      4|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 2.18k]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|     20|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 20, False: 2.16k]
  ------------------
 5336|     20|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|     20|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|  2.12k|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 2.12k, False: 66]
  ------------------
 5341|  2.12k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|  2.12k|                    range, specs.charset_string<SourceCharT>(),
 5343|  2.12k|                    specs.regexp_flags, value);
 5344|       |
 5345|     22|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 22, False: 2.16k]
  ------------------
 5346|     22|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|     22|                    range,
 5348|     22|                    get_unescaped_regex_pattern(
 5349|     22|                        specs.charset_string<SourceCharT>()),
 5350|     22|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 2.18k]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|  2.18k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|  2.18k|        }
 5357|       |
 5358|  2.18k|        SCN_CLANG_POP
 5359|  2.18k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4849|     36|    {
 4850|     36|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|     36|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4783|     40|{
 4784|     40|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|     40|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|     40|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 22, False: 18]
  ------------------
 4788|     22|        return detail::unexpected_scan_error(
 4789|     22|            scan_error::invalid_scanned_value,
 4790|     22|            "Invalid encoding in scanned string");
 4791|     22|    }
 4792|       |
 4793|     18|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     18|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|     18|    return SCN_MOVE(result);
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|     18|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3116|     84|{
 3117|     84|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3118|     84|        dest.assign(source.view());
 3119|       |    }
 3120|       |    else {
 3121|       |        return transcode_impl(source.view(), dest);
 3122|       |    }
 3123|       |
 3124|     84|    return {};
 3125|     84|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4870|      4|    {
 4871|      4|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4871:13): [True: 4, False: 0]
  ------------------
 4872|      4|            return read_string_impl(
 4873|      4|                range,
 4874|      4|                read_until_code_unit(
 4875|      4|                    range,
 4876|      4|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4877|      4|                        SourceCharT ch) { return ch == until; }),
 4878|      4|                value);
 4879|      4|        }
 4880|      0|        return read_string_impl(
 4881|      0|            range,
 4882|      0|            read_until_code_units(
 4883|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4884|      0|            value);
 4885|      4|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|      4|        : m_fptr([](storage fn,
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
  752|      4|          m_storage(std::addressof(f))
  753|      4|    {
  754|      4|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    258|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    258|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    258|              else {
  749|    258|                  return obj(static_cast<decltype(args)>(args)...);
  750|    258|              }
  751|    258|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    258|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    258|        else if constexpr (std::is_object_v<T>) {
  688|    258|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    258|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4877|    258|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      4|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      4|        {
  662|      4|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5077|     20|    {
 5078|     20|        auto it = read_source_impl(range, {specs});
 5079|     20|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2, False: 18]
  |  |  ------------------
  ------------------
 5080|      2|            return unexpected(it.error());
 5081|      2|        }
 5082|       |
 5083|     18|        return read_string_impl(range, *it, value);
 5084|     20|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4783|    108|{
 4784|    108|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    108|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    108|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 42, False: 66]
  ------------------
 4788|     42|        return detail::unexpected_scan_error(
 4789|     42|            scan_error::invalid_scanned_value,
 4790|     42|            "Invalid encoding in scanned string");
 4791|     42|    }
 4792|       |
 4793|     66|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     66|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     66|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 66]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|     66|    return SCN_MOVE(result);
  ------------------
  |  |  934|     66|    static_cast<    \
  |  |  935|     66|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|     66|}
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4920|  2.14k|    {
 4921|  2.14k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  2.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.05k, False: 90]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.05k|    }                                                  \
  |  |  |  | 3939|  2.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4922|     90|        return read_string_impl(range, it, value);
 4923|  2.14k|    }
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5837|  2.25k|{
 5838|       |    if constexpr (std::is_same_v<T, bool>) {
 5839|       |        return reader_impl_for_bool<CharT>{};
 5840|       |    }
 5841|       |    else if constexpr (std::is_same_v<T, char>) {
 5842|       |        return reader_impl_for_char<CharT>{};
 5843|       |    }
 5844|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5845|       |        return reader_impl_for_wchar<CharT>{};
 5846|       |    }
 5847|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5848|       |        return reader_impl_for_code_point<CharT>{};
 5849|       |    }
 5850|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5851|  2.25k|                       std::is_same_v<T, std::wstring_view>) {
 5852|  2.25k|        return reader_impl_for_string<CharT>{};
 5853|       |    }
 5854|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5855|       |                       std::is_same_v<T, std::wstring>) {
 5856|       |        return reader_impl_for_string<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5859|       |                       std::is_same_v<T, wregex_matches>) {
 5860|       |        return reader_impl_for_regex_matches<CharT>{};
 5861|       |    }
 5862|       |    else if constexpr (std::is_same_v<T, void*>) {
 5863|       |        return reader_impl_for_voidptr<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_floating_point_v<T>) {
 5866|       |        return reader_impl_for_float<CharT>{};
 5867|       |    }
 5868|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5869|       |                       !std::is_same_v<T, wchar_t> &&
 5870|       |                       !std::is_same_v<T, char32_t> &&
 5871|       |                       !std::is_same_v<T, bool>) {
 5872|       |        return reader_impl_for_int<CharT>{};
 5873|       |    }
 5874|       |    else {
 5875|       |        return reader_impl_for_monostate<CharT>{};
 5876|       |    }
 5877|  2.25k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5302|     48|    {
 5303|     48|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     48|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|     48|        return read_impl(range, specs, value);
 5305|     48|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5320|     48|    {
 5321|     48|        SCN_CLANG_PUSH
 5322|     48|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|     48|        switch (m_type) {
 5325|     38|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 38, False: 10]
  ------------------
 5326|     38|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      4|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 4, False: 44]
  ------------------
 5329|      4|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      4|                                                                   value);
 5331|       |
 5332|      2|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 2, False: 46]
  ------------------
 5333|      2|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 0, False: 48]
  ------------------
 5336|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|      0|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      0|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 0, False: 48]
  ------------------
 5341|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      0|                    range, specs.charset_string<SourceCharT>(),
 5343|      0|                    specs.regexp_flags, value);
 5344|       |
 5345|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 4, False: 44]
  ------------------
 5346|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      4|                    range,
 5348|      4|                    get_unescaped_regex_pattern(
 5349|      4|                        specs.charset_string<SourceCharT>()),
 5350|      4|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 48]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|     48|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|     48|        }
 5357|       |
 5358|     48|        SCN_CLANG_POP
 5359|     48|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4856|     38|    {
 4857|     38|        return read_string_view_impl(range, read_until_classic_space(range),
 4858|     38|                                     value);
 4859|     38|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4802|     44|{
 4803|     44|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|     44|    auto src = [&]() {
 4806|     44|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|     44|            return make_contiguous_buffer(
 4808|     44|                ranges::subrange{range.begin().base(), result.base()});
 4809|     44|        }
 4810|     44|        else {
 4811|     44|            return make_contiguous_buffer(
 4812|     44|                ranges::subrange{range.begin(), result});
 4813|     44|        }
 4814|     44|    }();
 4815|     44|    using src_type = decltype(src);
 4816|       |
 4817|     44|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|     44|    else {
 4830|     44|        const auto view = src.view();
 4831|     44|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|     44|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 42, False: 2]
  ------------------
 4834|     42|            return detail::unexpected_scan_error(
 4835|     42|                scan_error::invalid_scanned_value,
 4836|     42|                "Invalid encoding in scanned string_view");
 4837|     42|        }
 4838|       |
 4839|      2|        return SCN_MOVE(result);
  ------------------
  |  |  934|      2|    static_cast<    \
  |  |  935|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|     44|    }
 4841|     44|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4805|     44|    auto src = [&]() {
 4806|     44|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|     44|            return make_contiguous_buffer(
 4808|     44|                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|       |        else {
 4811|       |            return make_contiguous_buffer(
 4812|       |                ranges::subrange{range.begin(), result});
 4813|       |        }
 4814|     44|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4892|      4|    {
 4893|      4|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4893:13): [True: 4, False: 0]
  ------------------
 4894|      4|            return read_string_view_impl(
 4895|      4|                range,
 4896|      4|                read_until_code_unit(
 4897|      4|                    range,
 4898|      4|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4899|      4|                        SourceCharT ch) { return ch == until; }),
 4900|      4|                value);
 4901|      4|        }
 4902|      0|        return read_string_view_impl(
 4903|      0|            range,
 4904|      0|            read_until_code_units(
 4905|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4906|      0|            value);
 4907|      4|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|      4|        : m_fptr([](storage fn,
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
  752|      4|          m_storage(std::addressof(f))
  753|      4|    {
  754|      4|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    194|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    194|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    194|              else {
  749|    194|                  return obj(static_cast<decltype(args)>(args)...);
  750|    194|              }
  751|    194|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    194|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    194|        else if constexpr (std::is_object_v<T>) {
  688|    194|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    194|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4899|    194|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      4|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      4|        {
  662|      4|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4988|      2|    {
 4989|      2|        return read_impl(
 4990|      2|            range,
 4991|      2|            [&](const auto& rng) {
 4992|      2|                return read_string_view_impl(rng, read_all(rng), value);
 4993|      2|            },
 4994|      2|            detail::priority_tag<1>{});
 4995|      2|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5003|      2|    {
 5004|      2|        return read_cb(range);
 5005|      2|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4991|      2|            [&](const auto& rng) {
 4992|      2|                return read_string_view_impl(rng, read_all(rng), value);
 4993|      2|            },
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4931|      4|    {
 4932|      4|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      4|    }                                                  \
  |  |  |  | 3939|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|      0|        return read_string_view_impl(range, it, value);
 4934|      4|    }
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5302|  2.18k|    {
 5303|  2.18k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  2.18k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  2.18k|        return read_impl(range, specs, value);
 5305|  2.18k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5320|  2.18k|    {
 5321|  2.18k|        SCN_CLANG_PUSH
 5322|  2.18k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|  2.18k|        switch (m_type) {
 5325|     20|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 20, False: 2.16k]
  ------------------
 5326|     20|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      4|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 4, False: 2.18k]
  ------------------
 5329|      4|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      4|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 2.18k]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|     20|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 20, False: 2.16k]
  ------------------
 5336|     20|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|     20|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|  2.12k|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 2.12k, False: 66]
  ------------------
 5341|  2.12k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|  2.12k|                    range, specs.charset_string<SourceCharT>(),
 5343|  2.12k|                    specs.regexp_flags, value);
 5344|       |
 5345|     22|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 22, False: 2.16k]
  ------------------
 5346|     22|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|     22|                    range,
 5348|     22|                    get_unescaped_regex_pattern(
 5349|     22|                        specs.charset_string<SourceCharT>()),
 5350|     22|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 2.18k]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|  2.18k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|  2.18k|        }
 5357|       |
 5358|  2.18k|        SCN_CLANG_POP
 5359|  2.18k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4856|     36|    {
 4857|     36|        return read_string_view_impl(range, read_until_classic_space(range),
 4858|     36|                                     value);
 4859|     36|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4802|     40|{
 4803|     40|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|     40|    auto src = [&]() {
 4806|     40|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|     40|            return make_contiguous_buffer(
 4808|     40|                ranges::subrange{range.begin().base(), result.base()});
 4809|     40|        }
 4810|     40|        else {
 4811|     40|            return make_contiguous_buffer(
 4812|     40|                ranges::subrange{range.begin(), result});
 4813|     40|        }
 4814|     40|    }();
 4815|     40|    using src_type = decltype(src);
 4816|       |
 4817|     40|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|     40|    else {
 4830|     40|        const auto view = src.view();
 4831|     40|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|     40|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 22, False: 18]
  ------------------
 4834|     22|            return detail::unexpected_scan_error(
 4835|     22|                scan_error::invalid_scanned_value,
 4836|     22|                "Invalid encoding in scanned string_view");
 4837|     22|        }
 4838|       |
 4839|     18|        return SCN_MOVE(result);
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|     40|    }
 4841|     40|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4805|     40|    auto src = [&]() {
 4806|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|       |            return make_contiguous_buffer(
 4808|       |                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|     40|        else {
 4811|     40|            return make_contiguous_buffer(
 4812|     40|                ranges::subrange{range.begin(), result});
 4813|     40|        }
 4814|     40|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4892|      4|    {
 4893|      4|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4893:13): [True: 4, False: 0]
  ------------------
 4894|      4|            return read_string_view_impl(
 4895|      4|                range,
 4896|      4|                read_until_code_unit(
 4897|      4|                    range,
 4898|      4|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4899|      4|                        SourceCharT ch) { return ch == until; }),
 4900|      4|                value);
 4901|      4|        }
 4902|      0|        return read_string_view_impl(
 4903|      0|            range,
 4904|      0|            read_until_code_units(
 4905|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4906|      0|            value);
 4907|      4|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|      4|        : m_fptr([](storage fn,
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
  752|      4|          m_storage(std::addressof(f))
  753|      4|    {
  754|      4|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES19_w:
  743|    258|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    258|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    258|              else {
  749|    258|                  return obj(static_cast<decltype(args)>(args)...);
  750|    258|              }
  751|    258|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    258|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    258|        else if constexpr (std::is_object_v<T>) {
  688|    258|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    258|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4899|    258|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      4|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      4|        {
  662|      4|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5091|     20|    {
 5092|     20|        auto it = read_source_impl(range, {specs});
 5093|     20|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2, False: 18]
  |  |  ------------------
  ------------------
 5094|      2|            return unexpected(it.error());
 5095|      2|        }
 5096|       |
 5097|     18|        return read_string_view_impl(range, *it, value);
 5098|     20|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4802|    108|{
 4803|    108|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|    108|    auto src = [&]() {
 4806|    108|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|    108|            return make_contiguous_buffer(
 4808|    108|                ranges::subrange{range.begin().base(), result.base()});
 4809|    108|        }
 4810|    108|        else {
 4811|    108|            return make_contiguous_buffer(
 4812|    108|                ranges::subrange{range.begin(), result});
 4813|    108|        }
 4814|    108|    }();
 4815|    108|    using src_type = decltype(src);
 4816|       |
 4817|    108|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|    108|    else {
 4830|    108|        const auto view = src.view();
 4831|    108|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|    108|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 42, False: 66]
  ------------------
 4834|     42|            return detail::unexpected_scan_error(
 4835|     42|                scan_error::invalid_scanned_value,
 4836|     42|                "Invalid encoding in scanned string_view");
 4837|     42|        }
 4838|       |
 4839|     66|        return SCN_MOVE(result);
  ------------------
  |  |  934|     66|    static_cast<    \
  |  |  935|     66|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|    108|    }
 4841|    108|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4805|    108|    auto src = [&]() {
 4806|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|       |            return make_contiguous_buffer(
 4808|       |                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|    108|        else {
 4811|    108|            return make_contiguous_buffer(
 4812|    108|                ranges::subrange{range.begin(), result});
 4813|    108|        }
 4814|    108|    }();
_ZN3scn2v44impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4931|  2.14k|    {
 4932|  2.14k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|  2.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.05k, False: 90]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.05k|    }                                                  \
  |  |  |  | 3939|  2.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|     90|        return read_string_view_impl(range, it, value);
 4934|  2.14k|    }
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|    360|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|    360|                  ranges::sized_range<Range>) {
 1785|    360|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|    360|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|    360|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|    360|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|    360|    {
 1589|    360|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5823|     90|{
 5824|     90|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90]
  |  |  ------------------
  ------------------
 5825|      0|        return unexpected(e);
 5826|      0|    }
 5827|       |
 5828|     90|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 10, False: 80]
  ------------------
 5829|     10|        return range.begin();
 5830|     10|    }
 5831|       |
 5832|     80|    return skip_classic_whitespace(range);
 5833|     90|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5899|     10|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     10|                          basic_contiguous_scan_context<char_type>>) {
 5904|     10|            auto rd = make_reader<T, char_type>();
 5905|     10|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     10|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|     10|    {
 5892|     10|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     10|                        .transform_error(make_eof_scan_error));
 5894|     10|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     10|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|     10|    {
 3568|     10|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     10|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|     10|        return read_default_with_base(range, value, 10);
 3570|     10|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5899|     10|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     10|                          basic_contiguous_scan_context<char_type>>) {
 5904|     10|            auto rd = make_reader<T, char_type>();
 5905|     10|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     10|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|     10|    {
 5892|     10|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     10|                        .transform_error(make_eof_scan_error));
 5894|     10|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     10|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|     10|    {
 3568|     10|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     10|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|     10|        return read_default_with_base(range, value, 10);
 3570|     10|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5899|     10|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     10|                          basic_contiguous_scan_context<char_type>>) {
 5904|     10|            auto rd = make_reader<T, char_type>();
 5905|     10|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     10|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5891|     10|    {
 5892|     10|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     10|                        .transform_error(make_eof_scan_error));
 5894|     10|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     10|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5775|     18|    {
 5776|     18|        return true;
 5777|     18|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5793|     16|    {
 5794|     16|        detail::format_specs specs{};
 5795|     16|        specs.type = detail::presentation_type::int_hex;
 5796|       |
 5797|     16|        std::uintptr_t intvalue{};
 5798|     16|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     16|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5799|      0|                                                                intvalue, loc));
 5800|      0|        value = reinterpret_cast<void*>(intvalue);
 5801|      0|        return result;
 5802|     16|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5899|     10|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     10|                          basic_contiguous_scan_context<char_type>>) {
 5904|     10|            auto rd = make_reader<T, char_type>();
 5905|     10|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     10|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|     10|    {
 5892|     10|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     10|                        .transform_error(make_eof_scan_error));
 5894|     10|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     10|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3139|     18|    {
 3140|     18|        return true;
 3141|     18|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5530|     10|    {
 5531|     10|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     10|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5532|       |
 5533|     10|        return bool_reader<CharT>{}.read_classic(range, value);
 5534|     10|    }
_ZN3scn2v44impl16bool_reader_baseC2Ev:
 5374|     26|    constexpr bool_reader_base() = default;
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5380|     16|    {
 5381|     16|        scan_error err{scan_error::invalid_scanned_value,
 5382|     16|                       "Failed to read boolean"};
 5383|       |
 5384|     16|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5384:13): [True: 16, False: 0]
  ------------------
 5385|     16|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5385:22): [True: 0, False: 16]
  ------------------
 5386|      0|                return *r;
 5387|      0|            }
 5388|     16|            else {
 5389|     16|                err = r.error();
 5390|     16|            }
 5391|     16|        }
 5392|       |
 5393|     16|        if (m_options & allow_text) {
  ------------------
  |  Branch (5393:13): [True: 16, False: 0]
  ------------------
 5394|     16|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5394:22): [True: 0, False: 16]
  ------------------
 5395|      0|                return *r;
 5396|      0|            }
 5397|     16|            else {
 5398|     16|                err = r.error();
 5399|     16|            }
 5400|     16|        }
 5401|       |
 5402|     16|        return unexpected(err);
 5403|     16|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5409|     16|    {
 5410|     16|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5410:18): [True: 0, False: 16]
  ------------------
 5411|      0|            value = false;
 5412|      0|            return *r;
 5413|      0|        }
 5414|     16|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5414:18): [True: 0, False: 16]
  ------------------
 5415|      0|            value = true;
 5416|      0|            return *r;
 5417|      0|        }
 5418|       |
 5419|     16|        return detail::unexpected_scan_error(
 5420|     16|            scan_error::invalid_scanned_value,
 5421|     16|            "Failed to read numeric boolean value: No match");
 5422|     16|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5427|     16|    {
 5428|     16|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5428:18): [True: 0, False: 16]
  ------------------
 5429|      0|            value = true;
 5430|      0|            return *r;
 5431|      0|        }
 5432|     16|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5432:18): [True: 0, False: 16]
  ------------------
 5433|      0|            value = false;
 5434|      0|            return *r;
 5435|      0|        }
 5436|       |
 5437|     16|        return detail::unexpected_scan_error(
 5438|     16|            scan_error::invalid_scanned_value,
 5439|     16|            "Failed to read textual boolean value: No match");
 5440|     16|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2293|     32|{
 2294|     32|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|     32|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|     32|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|     32|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|     32|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|     32|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 2301|     32|            return unexpected(parse_error::error);
 2302|     32|        }
 2303|      0|        return it;
 2304|       |    }
 2305|       |    else {
 2306|       |        auto range_it = range.begin();
 2307|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2308|       |            if (SCN_UNLIKELY(*range_it !=
 2309|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|       |                return unexpected(parse_error::error);
 2311|       |            }
 2312|       |        }
 2313|       |        return it;
 2314|       |    }
 2315|     32|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 5899|     10|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     10|                          basic_contiguous_scan_context<char_type>>) {
 5904|     10|            auto rd = make_reader<T, char_type>();
 5905|     10|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     10|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|     10|    {
 5892|     10|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     10|                        .transform_error(make_eof_scan_error));
 5894|     10|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     10|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3688|     10|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3674|     26|    constexpr float_reader_base() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5899|     10|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     10|                          basic_contiguous_scan_context<char_type>>) {
 5904|     10|            auto rd = make_reader<T, char_type>();
 5905|     10|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     10|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|     10|    {
 5892|     10|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     10|                        .transform_error(make_eof_scan_error));
 5894|     10|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     10|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4173|     10|    {
 4174|     10|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     10|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4175|       |
 4176|     10|        float_reader<CharT> rd{};
 4177|     10|        return read_impl<Range>(
 4178|     10|            range, rd,
 4179|     10|            [](float_reader<CharT>& r, auto&&... args) {
 4180|     10|                return r.read_source(SCN_FWD(args)...);
 4181|     10|            },
 4182|     10|            value);
 4183|     10|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|     10|        : m_fptr([](storage fn,
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
  752|     10|          m_storage(std::addressof(f))
  753|     10|    {
  754|     10|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  688|     10|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     10|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4179|     10|            [](float_reader<CharT>& r, auto&&... args) {
 4180|     10|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4181|     10|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     10|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     10|        {
  662|     10|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5899|     10|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     10|                          basic_contiguous_scan_context<char_type>>) {
 5904|     10|            auto rd = make_reader<T, char_type>();
 5905|     10|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     10|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5891|     10|    {
 5892|     10|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     10|                        .transform_error(make_eof_scan_error));
 5894|     10|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     10|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5291|     10|    {
 5292|     10|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     10|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|     10|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|     10|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5899|     10|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     10|                          basic_contiguous_scan_context<char_type>>) {
 5904|     10|            auto rd = make_reader<T, char_type>();
 5905|     10|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     10|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5891|     10|    {
 5892|     10|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     10|                        .transform_error(make_eof_scan_error));
 5894|     10|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     10|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5291|     10|    {
 5292|     10|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     10|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|     10|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|     10|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5899|     10|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     10|                          basic_contiguous_scan_context<char_type>>) {
 5904|     10|            auto rd = make_reader<T, char_type>();
 5905|     10|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     10|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5891|     10|    {
 5892|     10|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     10|                        .transform_error(make_eof_scan_error));
 5894|     10|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     10|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5291|     10|    {
 5292|     10|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     10|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|     10|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|     10|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2974|  14.3k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  14.3k|    static_cast<    \
  |  |  935|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2975|  14.3k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2976|  14.3k|          m_current(m_range.begin())
 2977|  14.3k|    {
 2978|  14.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2986|   116k|    {
 2987|   116k|        return m_range.end();
 2988|   116k|    }
_ZN3scn2v44impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1318|  53.9k|{
 1319|       |    // TODO: optimize
 1320|  53.9k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  930|  53.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  53.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1321|  53.9k|    auto res = get_next_code_point(str);
 1322|  53.9k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1323|  53.9k|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3001|  54.1k|    {
 3002|  54.1k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  54.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3003|  54.1k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3004|  54.1k|            if (it == nullptr) {
  ------------------
  |  Branch (3004:17): [True: 0, False: 54.1k]
  ------------------
 3005|      0|                it = end();
 3006|      0|            }
 3007|  54.1k|        }
 3008|  54.1k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  54.1k|    static_cast<    \
  |  |  935|  54.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3009|  54.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 2991|  8.30k|    {
 2992|  8.30k|        return ranges::subrange{begin(), end()};
 2993|  8.30k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2215|    360|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|    360|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|    360|        auto buf = make_contiguous_buffer(range);
 2220|    360|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|    360|        return ranges::next(range.begin(),
 2222|    360|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|    360|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6062|     78|    {
 6063|     78|        const bool need_skipped_width =
 6064|     78|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 78]
  |  Branch (6064:33): [True: 78, False: 0]
  ------------------
 6065|     78|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|     78|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 78]
  ------------------
 6069|     78|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 78]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|     78|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 78, False: 0]
  |  Branch (6073:56): [True: 16, False: 62]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|     16|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 16, False: 0]
  ------------------
 6077|     16|                auto max_width_view = take_width(rng, specs.precision);
 6078|     16|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|     16|                                  .transform_error(make_eof_scan_error));
 6080|     16|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|     16|            }
 6082|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|      0|                            make_eof_scan_error));
 6084|       |
 6085|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|      0|            return result_type{it, 0};
 6093|      0|        }
 6094|       |
 6095|     62|        return result_type{rng.begin(), 0};
 6096|     78|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2909|     32|    {
 2910|     32|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2911|     32|                                      m_count};
 2912|     32|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2816|    112|    {
 2817|    112|        return view;
 2818|    112|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2480|     32|        : m_current(x), m_end(s), m_count(n)
 2481|     32|    {
 2482|     32|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2880|     16|        {
 2881|     16|            return !(y == x);
 2882|     16|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2869|     48|        {
 2870|     48|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2870:21): [True: 0, False: 48]
  |  Branch (2870:39): [True: 0, False: 0]
  ------------------
 2871|     48|                   y.base() == x.m_end;
  ------------------
  |  Branch (2871:20): [True: 0, False: 48]
  ------------------
 2872|     48|        }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2915|     48|    {
 2916|     48|        return sentinel<true>{m_base.get().end()};
 2917|     48|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2850|     48|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|     48|    static_cast<    \
  |  |  935|     48|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2525|     32|    {
 2526|     32|        return *m_current;
 2527|     32|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2534|     16|    {
 2535|     16|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2536|     16|        _increment_current();
 2537|     16|        return *this;
 2538|     16|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2767|     16|    {
 2768|     16|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2768:13): [True: 16, False: 0]
  ------------------
 2769|     16|            auto cplen = _get_cp_length_at_current();
 2770|     16|            m_multibyte_left = cplen - 1;
 2771|     16|            m_count -= _get_width_at_current_cp_start(cplen);
 2772|     16|        }
 2773|      0|        else {
 2774|      0|            --m_multibyte_left;
 2775|      0|        }
 2776|       |
 2777|     16|        ++m_current;
 2778|     16|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2738|     16|    {
 2739|     16|        return static_cast<difference_type>(
 2740|     16|            detail::code_point_length_by_starting_code_unit(*m_current));
 2741|     16|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2744|     16|    {
 2745|     16|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 2746|      0|            return 0;
 2747|      0|        }
 2748|       |
 2749|     16|        if (cplen == 1) {
  ------------------
  |  Branch (2749:13): [True: 16, False: 0]
  ------------------
 2750|     16|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2751|     16|            auto cp = static_cast<char32_t>(*m_current);
 2752|     16|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2753|     16|        }
 2754|       |
 2755|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2756|      0|                                           cplen);
 2757|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2758|      0|            return 0;
 2759|      0|        }
 2760|       |
 2761|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2762|      0|        return static_cast<difference_type>(
 2763|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2764|      0|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|     16|    {
  268|     16|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|     16|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|     16|    {
  161|     16|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|     16|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 16]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|     16|        else {
  169|     16|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 16]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|     16|        }
  173|     16|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2931|     16|    {
 2932|     16|        return take_width_view{r, n};
 2933|     16|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2899|     16|        : m_base(base), m_count(count)
 2900|     16|    {
 2901|     16|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2813|     16|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3054|     16|{
 3055|     16|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 16, False: 0]
  ------------------
 3056|     16|        auto it = read_while_classic_space(range);
 3057|     16|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|     16|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 3059|      0|            return unexpected(e);
 3060|      0|        }
 3061|       |
 3062|     16|        return it;
 3063|     16|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|     16|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|     16|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|     16|    else {
 2225|     16|        auto it = range.begin();
 2226|       |
 2227|     16|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|     16|            auto seg = get_contiguous_beginning(range);
 2229|     16|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|     16|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 16]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|     16|            ranges::advance(it, seg.size());
 2234|     16|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|     16|            return detail::is_cp_space(cp);
 2238|     16|        });
 2239|     16|    }
 2240|     16|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1039|     16|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|     16|    else {
 1059|     16|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|     16|    }
 1061|     16|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|     16|{
 2181|     16|    return read_until_code_point(range, std::not_fn(pred));
 2182|     16|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|     16|{
 2160|     16|    auto it = range.begin();
 2161|     16|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 16, False: 0]
  ------------------
 2162|     16|        const auto val =
 2163|     16|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|     16|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 2165|     16|            const auto cp = detail::decode_code_point_exhaustive(
 2166|     16|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|     16|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 16, False: 0]
  ------------------
 2168|     16|                return it;
 2169|     16|            }
 2170|     16|        }
 2171|      0|        it = val.iterator;
 2172|      0|    }
 2173|       |
 2174|      0|    return it;
 2175|     16|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1997|     16|{
 1998|     16|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|     16|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|     16|    auto it = range.begin();
 2002|     16|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|     16|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|     16|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 16, False: 0]
  ------------------
 2011|     16|        ++it;
 2012|     16|        return {it, string_type(1, *range.begin())};
 2013|     16|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|     16|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|     32|{
  945|     32|    return is_range_eof(r.begin(), r.end());
  946|     32|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|     32|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|     32|    {
  938|     32|        return begin == end;
  939|     32|    }
  940|     32|}
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1988|     16|    {
 1989|     16|        return !codepoint.empty();
 1990|     16|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|     16|        : m_fptr([](storage fn,
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
  752|     16|          m_storage(std::addressof(f))
  753|     16|    {
  754|     16|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|     16|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     16|        else if constexpr (std::is_object_v<T>) {
  688|     16|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     16|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|     16|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|     16|            return detail::is_cp_space(cp);
 2238|     16|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     16|        {
  662|     16|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|     16|{
  951|     16|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|     16|    return eof_error::good;
  955|     16|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2512|     64|    {
 2513|     64|        return m_current;
 2514|     64|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2516|     64|    {
 2517|     64|        return m_count;
 2518|     64|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6062|  2.58k|    {
 6063|  2.58k|        const bool need_skipped_width =
 6064|  2.58k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 132, False: 2.45k]
  |  Branch (6064:33): [True: 0, False: 2.45k]
  ------------------
 6065|  2.58k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|  2.58k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 30, False: 2.55k]
  ------------------
 6069|  2.58k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 648, False: 1.90k]
  ------------------
 6070|    678|            return skip_fill(rng, specs.precision, specs.fill,
 6071|    678|                             need_skipped_width);
 6072|    678|        }
 6073|  1.90k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 1.90k, False: 0]
  |  Branch (6073:56): [True: 48, False: 1.86k]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|     48|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 48]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|     96|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|     48|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     48|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     48|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 48]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     48|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     48|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|     96|                            make_eof_scan_error));
 6084|       |
 6085|     96|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 48, False: 0]
  ------------------
 6086|     48|                return result_type{
 6087|     48|                    it,
 6088|     48|                    calculate_text_width(make_contiguous_buffer(
 6089|     48|                                             ranges::subrange{rng.begin(), it})
 6090|     48|                                             .view())};
 6091|     48|            }
 6092|      0|            return result_type{it, 0};
 6093|     96|        }
 6094|       |
 6095|  1.86k|        return result_type{rng.begin(), 0};
 6096|  1.90k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6104|    794|    {
 6105|    794|        const bool need_skipped_width =
 6106|    794|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 84, False: 710]
  |  Branch (6106:33): [True: 8, False: 702]
  ------------------
 6107|    794|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|    794|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 794]
  ------------------
 6110|    794|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 794]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|    794|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 770, False: 24]
  ------------------
 6119|    794|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 770, False: 0]
  ------------------
 6120|    794|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 66, False: 704]
  |  Branch (6120:35): [True: 60, False: 6]
  ------------------
 6121|    770|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 8, False: 702]
  ------------------
 6122|    710|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 8, False: 0]
  ------------------
 6123|     68|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 8, False: 60]
  ------------------
 6124|      8|                const auto initial_width =
 6125|      8|                    specs.precision - prefix_width - value_width;
 6126|      8|                auto max_width_view = take_width(rng, initial_width);
 6127|      8|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      8|                                  .transform_error(make_eof_scan_error));
 6129|      8|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      8|            }
 6131|    120|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|     60|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     60|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     60|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 60]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     60|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     60|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|    120|                            make_eof_scan_error));
 6133|       |
 6134|    120|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 60, False: 0]
  ------------------
 6135|     60|                return result_type{
 6136|     60|                    it,
 6137|     60|                    calculate_text_width(make_contiguous_buffer(
 6138|     60|                                             ranges::subrange{rng.begin(), it})
 6139|     60|                                             .view())};
 6140|     60|            }
 6141|      0|            return result_type{it, 0};
 6142|    120|        }
 6143|    726|        return result_type{rng.begin(), 0};
 6144|    794|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6214|    872|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|    872|                          basic_contiguous_scan_context<char_type>>) {
 6219|    872|            auto rd = make_reader<T, char_type>();
 6220|    872|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    872|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 864, False: 8]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    864|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    864|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    864|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    864|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    864|    }
  ------------------
 6221|      8|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|    872|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|      8|    {
 6150|      8|        const bool need_skipped_width =
 6151|      8|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 6, False: 2]
  |  Branch (6151:33): [True: 2, False: 0]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|      8|        auto it = rng.begin();
 6155|      8|        std::ptrdiff_t prefix_width = 0;
 6156|      8|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 2, False: 6]
  ------------------
 6157|      2|            auto max_width_view = take_width(rng, specs.precision);
 6158|      2|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      2|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      2|            it = prefix_result.first.base();
 6161|      2|            prefix_width = prefix_result.second;
 6162|      2|        }
 6163|      6|        else {
 6164|      6|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|      6|            std::tie(it, prefix_width) = prefix_result;
 6166|      6|        }
 6167|      8|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|      8|        std::ptrdiff_t value_width = 0;
 6171|      8|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 2, False: 6]
  ------------------
 6172|      2|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 2]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      2|            const auto initial_width = specs.precision - prefix_width;
 6180|      2|            auto max_width_view =
 6181|      2|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      2|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|      6|        else {
 6187|      6|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      6|    }                                                  \
  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6214|    872|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|    872|                          basic_contiguous_scan_context<char_type>>) {
 6219|    872|            auto rd = make_reader<T, char_type>();
 6220|    872|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    872|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 864, False: 8]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    864|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    864|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    864|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    864|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    864|    }
  ------------------
 6221|      8|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|    872|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|      8|    {
 6150|      8|        const bool need_skipped_width =
 6151|      8|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 6, False: 2]
  |  Branch (6151:33): [True: 2, False: 0]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|      8|        auto it = rng.begin();
 6155|      8|        std::ptrdiff_t prefix_width = 0;
 6156|      8|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 2, False: 6]
  ------------------
 6157|      2|            auto max_width_view = take_width(rng, specs.precision);
 6158|      2|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      2|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      2|            it = prefix_result.first.base();
 6161|      2|            prefix_width = prefix_result.second;
 6162|      2|        }
 6163|      6|        else {
 6164|      6|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|      6|            std::tie(it, prefix_width) = prefix_result;
 6166|      6|        }
 6167|      8|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|      8|        std::ptrdiff_t value_width = 0;
 6171|      8|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 2, False: 6]
  ------------------
 6172|      2|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 2]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      2|            const auto initial_width = specs.precision - prefix_width;
 6180|      2|            auto max_width_view =
 6181|      2|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      2|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|      6|        else {
 6187|      6|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      6|    }                                                  \
  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6214|    872|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|    872|                          basic_contiguous_scan_context<char_type>>) {
 6219|    872|            auto rd = make_reader<T, char_type>();
 6220|    872|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    872|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 864, False: 8]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    864|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    864|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    864|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    864|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    864|    }
  ------------------
 6221|      8|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|    872|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5780|    872|    {
 5781|    872|        reader_error_handler eh{};
 5782|    872|        detail::check_pointer_type_specs(specs, eh);
 5783|    872|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 864, False: 8]
  |  |  ------------------
  ------------------
 5784|    864|            return detail::unexpected_scan_error(
 5785|    864|                scan_error::invalid_format_string, eh.m_msg);
 5786|    864|        }
 5787|      8|        return {};
 5788|    872|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6149|      8|    {
 6150|      8|        const bool need_skipped_width =
 6151|      8|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 6, False: 2]
  |  Branch (6151:33): [True: 2, False: 0]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|      8|        auto it = rng.begin();
 6155|      8|        std::ptrdiff_t prefix_width = 0;
 6156|      8|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 2, False: 6]
  ------------------
 6157|      2|            auto max_width_view = take_width(rng, specs.precision);
 6158|      2|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      2|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      2|            it = prefix_result.first.base();
 6161|      2|            prefix_width = prefix_result.second;
 6162|      2|        }
 6163|      6|        else {
 6164|      6|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|      6|            std::tie(it, prefix_width) = prefix_result;
 6166|      6|        }
 6167|      8|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|      8|        std::ptrdiff_t value_width = 0;
 6171|      8|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 2, False: 6]
  ------------------
 6172|      2|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 2]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      2|            const auto initial_width = specs.precision - prefix_width;
 6180|      2|            auto max_width_view =
 6181|      2|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      2|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|      6|        else {
 6187|      6|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      6|    }                                                  \
  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5810|      2|    {
 5811|      2|        SCN_UNUSED(specs);
  ------------------
  |  |  915|      2|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5812|      2|        return read_default(range, value, loc);
 5813|      2|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5793|      2|    {
 5794|      2|        detail::format_specs specs{};
 5795|      2|        specs.type = detail::presentation_type::int_hex;
 5796|       |
 5797|      2|        std::uintptr_t intvalue{};
 5798|      2|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5799|      0|                                                                intvalue, loc));
 5800|      0|        value = reinterpret_cast<void*>(intvalue);
 5801|      0|        return result;
 5802|      2|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5810|      6|    {
 5811|      6|        SCN_UNUSED(specs);
  ------------------
  |  |  915|      6|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5812|      6|        return read_default(range, value, loc);
 5813|      6|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6214|    872|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|    872|                          basic_contiguous_scan_context<char_type>>) {
 6219|    872|            auto rd = make_reader<T, char_type>();
 6220|    872|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    872|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 864, False: 8]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    864|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    864|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    864|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    864|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    864|    }
  ------------------
 6221|      8|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|    872|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3144|    872|    {
 3145|    872|        reader_error_handler eh{};
 3146|    872|        get_derived().check_specs_impl(specs, eh);
 3147|    872|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 864, False: 8]
  |  |  ------------------
  ------------------
 3148|    864|            return detail::unexpected_scan_error(
 3149|    864|                scan_error::invalid_format_string, eh.m_msg);
 3150|    864|        }
 3151|      8|        return {};
 3152|    872|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3156|    872|    {
 3157|    872|        return static_cast<Derived&>(*this);
 3158|    872|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5523|    872|    {
 5524|    872|        detail::check_bool_type_specs(specs, eh);
 5525|    872|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|      8|    {
 6150|      8|        const bool need_skipped_width =
 6151|      8|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 6, False: 2]
  |  Branch (6151:33): [True: 2, False: 0]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|      8|        auto it = rng.begin();
 6155|      8|        std::ptrdiff_t prefix_width = 0;
 6156|      8|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 2, False: 6]
  ------------------
 6157|      2|            auto max_width_view = take_width(rng, specs.precision);
 6158|      2|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      2|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      2|            it = prefix_result.first.base();
 6161|      2|            prefix_width = prefix_result.second;
 6162|      2|        }
 6163|      6|        else {
 6164|      6|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|      6|            std::tie(it, prefix_width) = prefix_result;
 6166|      6|        }
 6167|      8|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|      8|        std::ptrdiff_t value_width = 0;
 6171|      8|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 2, False: 6]
  ------------------
 6172|      2|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 2]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      2|            const auto initial_width = specs.precision - prefix_width;
 6180|      2|            auto max_width_view =
 6181|      2|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      2|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|      6|        else {
 6187|      6|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      6|    }                                                  \
  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5542|      2|    {
 5543|      2|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5544|       |
 5545|      2|#if !SCN_DISABLE_LOCALE
 5546|      2|        if (specs.localized) {
  ------------------
  |  Branch (5546:13): [True: 0, False: 2]
  ------------------
 5547|      0|            return rd.read_localized(range, loc, value);
 5548|      0|        }
 5549|      2|#endif
 5550|       |
 5551|      2|        return rd.read_classic(range, value);
 5552|      2|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5555|      8|    {
 5556|      8|        SCN_GCC_COMPAT_PUSH
 5557|      8|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5558|       |
 5559|      8|        switch (specs.type) {
 5560|      0|            case detail::presentation_type::string:
  ------------------
  |  Branch (5560:13): [True: 0, False: 8]
  ------------------
 5561|      0|                return bool_reader_base::allow_text;
 5562|       |
 5563|      0|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5563:13): [True: 0, False: 8]
  ------------------
 5564|      0|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5564:13): [True: 0, False: 8]
  ------------------
 5565|      0|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5565:13): [True: 0, False: 8]
  ------------------
 5566|      0|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5566:13): [True: 0, False: 8]
  ------------------
 5567|      0|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5567:13): [True: 0, False: 8]
  ------------------
 5568|      0|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5568:13): [True: 0, False: 8]
  ------------------
 5569|      0|                return bool_reader_base::allow_numeric;
 5570|       |
 5571|      8|            default:
  ------------------
  |  Branch (5571:13): [True: 8, False: 0]
  ------------------
 5572|      8|                return bool_reader_base::allow_text |
 5573|      8|                       bool_reader_base::allow_numeric;
 5574|      8|        }
 5575|       |
 5576|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5577|      8|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5409|      2|    {
 5410|      2|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5410:18): [True: 0, False: 2]
  ------------------
 5411|      0|            value = false;
 5412|      0|            return *r;
 5413|      0|        }
 5414|      2|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5414:18): [True: 0, False: 2]
  ------------------
 5415|      0|            value = true;
 5416|      0|            return *r;
 5417|      0|        }
 5418|       |
 5419|      2|        return detail::unexpected_scan_error(
 5420|      2|            scan_error::invalid_scanned_value,
 5421|      2|            "Failed to read numeric boolean value: No match");
 5422|      2|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2245|      4|{
 2246|      4|    auto it = read_code_unit(range);
 2247|      4|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|      4|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 2252|      4|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|      4|        return unexpected(parse_error::error);
 2254|      4|    }
 2255|       |
 2256|      0|    return *it;
 2257|      4|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1955|      4|{
 1956|      4|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|      4|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      4|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|      4|    else {
 1967|      4|        auto it = range.begin();
 1968|      4|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 4]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|     22|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 18, False: 4]
  ------------------
 1973|     18|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 0, False: 18]
  ------------------
 1974|      0|                return unexpected(eof_error::eof);
 1975|      0|            }
 1976|     18|        }
 1977|       |
 1978|      4|        return it;
 1979|      4|    }
 1980|      4|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1095|      4|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|      4|    else {
 1116|      4|        return 0;
 1117|      4|    }
 1118|      4|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5380|      2|    {
 5381|      2|        scan_error err{scan_error::invalid_scanned_value,
 5382|      2|                       "Failed to read boolean"};
 5383|       |
 5384|      2|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5384:13): [True: 2, False: 0]
  ------------------
 5385|      2|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5385:22): [True: 0, False: 2]
  ------------------
 5386|      0|                return *r;
 5387|      0|            }
 5388|      2|            else {
 5389|      2|                err = r.error();
 5390|      2|            }
 5391|      2|        }
 5392|       |
 5393|      2|        if (m_options & allow_text) {
  ------------------
  |  Branch (5393:13): [True: 2, False: 0]
  ------------------
 5394|      2|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5394:22): [True: 0, False: 2]
  ------------------
 5395|      0|                return *r;
 5396|      0|            }
 5397|      2|            else {
 5398|      2|                err = r.error();
 5399|      2|            }
 5400|      2|        }
 5401|       |
 5402|      2|        return unexpected(err);
 5403|      2|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5427|      2|    {
 5428|      2|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5428:18): [True: 0, False: 2]
  ------------------
 5429|      0|            value = true;
 5430|      0|            return *r;
 5431|      0|        }
 5432|      2|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5432:18): [True: 0, False: 2]
  ------------------
 5433|      0|            value = false;
 5434|      0|            return *r;
 5435|      0|        }
 5436|       |
 5437|      2|        return detail::unexpected_scan_error(
 5438|      2|            scan_error::invalid_scanned_value,
 5439|      2|            "Failed to read textual boolean value: No match");
 5440|      2|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2293|      4|{
 2294|      4|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|      4|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|      4|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|      4|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|      4|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|      4|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 2301|      4|            return unexpected(parse_error::error);
 2302|      4|        }
 2303|      0|        return it;
 2304|       |    }
 2305|       |    else {
 2306|       |        auto range_it = range.begin();
 2307|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2308|       |            if (SCN_UNLIKELY(*range_it !=
 2309|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|       |                return unexpected(parse_error::error);
 2311|       |            }
 2312|       |        }
 2313|       |        return it;
 2314|       |    }
 2315|      4|}
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5542|      6|    {
 5543|      6|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5544|       |
 5545|      6|#if !SCN_DISABLE_LOCALE
 5546|      6|        if (specs.localized) {
  ------------------
  |  Branch (5546:13): [True: 0, False: 6]
  ------------------
 5547|      0|            return rd.read_localized(range, loc, value);
 5548|      0|        }
 5549|      6|#endif
 5550|       |
 5551|      6|        return rd.read_classic(range, value);
 5552|      6|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 6214|    872|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|    872|                          basic_contiguous_scan_context<char_type>>) {
 6219|    872|            auto rd = make_reader<T, char_type>();
 6220|    872|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    872|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 864, False: 8]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    864|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    864|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    864|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    864|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    864|    }
  ------------------
 6221|      8|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|    872|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|      8|    {
 6150|      8|        const bool need_skipped_width =
 6151|      8|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 6, False: 2]
  |  Branch (6151:33): [True: 2, False: 0]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|      8|        auto it = rng.begin();
 6155|      8|        std::ptrdiff_t prefix_width = 0;
 6156|      8|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 2, False: 6]
  ------------------
 6157|      2|            auto max_width_view = take_width(rng, specs.precision);
 6158|      2|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      2|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      2|            it = prefix_result.first.base();
 6161|      2|            prefix_width = prefix_result.second;
 6162|      2|        }
 6163|      6|        else {
 6164|      6|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|      6|            std::tie(it, prefix_width) = prefix_result;
 6166|      6|        }
 6167|      8|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|      8|        std::ptrdiff_t value_width = 0;
 6171|      8|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 2, False: 6]
  ------------------
 6172|      2|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 2]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      2|            const auto initial_width = specs.precision - prefix_width;
 6180|      2|            auto max_width_view =
 6181|      2|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      2|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      2|            it = w_it.base();
 6184|      2|            value_width = initial_width - w_it.count();
 6185|      2|        }
 6186|      6|        else {
 6187|      6|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      6|                                             specs, value, loc));
 6189|       |
 6190|      6|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 6, False: 0]
  ------------------
 6191|      6|                value_width = calculate_text_width(
 6192|      6|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      6|                        .view());
 6194|      6|            }
 6195|      6|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      8|        std::ptrdiff_t postfix_width = 0;
 6199|      8|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 8, False: 0]
  ------------------
 6200|      8|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      8|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      8|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      8|                                 value_width));
 6204|      8|            std::tie(it, postfix_width) = postfix_result;
 6205|      8|        }
 6206|       |
 6207|      8|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      8|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6, False: 2]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      6|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      6|    }
  ------------------
 6208|      8|            specs, prefix_width, value_width, postfix_width));
 6209|      2|        return it;
 6210|      8|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6214|    872|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|    872|                          basic_contiguous_scan_context<char_type>>) {
 6219|    872|            auto rd = make_reader<T, char_type>();
 6220|    872|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    872|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 864, False: 8]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    864|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    864|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    864|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    864|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    864|    }
  ------------------
 6221|      8|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|    872|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|      8|    {
 6150|      8|        const bool need_skipped_width =
 6151|      8|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 6, False: 2]
  |  Branch (6151:33): [True: 2, False: 0]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|      8|        auto it = rng.begin();
 6155|      8|        std::ptrdiff_t prefix_width = 0;
 6156|      8|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 2, False: 6]
  ------------------
 6157|      2|            auto max_width_view = take_width(rng, specs.precision);
 6158|      2|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      2|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      2|            it = prefix_result.first.base();
 6161|      2|            prefix_width = prefix_result.second;
 6162|      2|        }
 6163|      6|        else {
 6164|      6|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|      6|            std::tie(it, prefix_width) = prefix_result;
 6166|      6|        }
 6167|      8|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|      8|        std::ptrdiff_t value_width = 0;
 6171|      8|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 2, False: 6]
  ------------------
 6172|      2|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 2]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      2|            const auto initial_width = specs.precision - prefix_width;
 6180|      2|            auto max_width_view =
 6181|      2|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      2|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      2|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      2|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      2|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|      2|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|      6|        else {
 6187|      6|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      6|    }                                                  \
  |  | 3939|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6214|    872|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|    872|                          basic_contiguous_scan_context<char_type>>) {
 6219|    872|            auto rd = make_reader<T, char_type>();
 6220|    872|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    872|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 872]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|    872|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|    872|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6149|    872|    {
 6150|    872|        const bool need_skipped_width =
 6151|    872|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 32, False: 840]
  |  Branch (6151:33): [True: 22, False: 818]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|    872|        auto it = rng.begin();
 6155|    872|        std::ptrdiff_t prefix_width = 0;
 6156|    872|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 22, False: 850]
  ------------------
 6157|     22|            auto max_width_view = take_width(rng, specs.precision);
 6158|     22|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|     22|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|     22|            it = prefix_result.first.base();
 6161|     22|            prefix_width = prefix_result.second;
 6162|     22|        }
 6163|    850|        else {
 6164|    850|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    850|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    850|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    850|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 850]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    850|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    850|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|    850|            std::tie(it, prefix_width) = prefix_result;
 6166|    850|        }
 6167|    872|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|    872|        std::ptrdiff_t value_width = 0;
 6171|    872|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 22, False: 850]
  ------------------
 6172|     22|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 22]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|     22|            const auto initial_width = specs.precision - prefix_width;
 6180|     22|            auto max_width_view =
 6181|     22|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|     22|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      2|            it = w_it.base();
 6184|      2|            value_width = initial_width - w_it.count();
 6185|      2|        }
 6186|    850|        else {
 6187|    850|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    850|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    850|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 584, False: 266]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    584|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    584|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    584|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    584|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    584|    }                                                  \
  |  | 3939|    850|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    850|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    266|                                             specs, value, loc));
 6189|       |
 6190|    266|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 28, False: 238]
  ------------------
 6191|     28|                value_width = calculate_text_width(
 6192|     28|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|     28|                        .view());
 6194|     28|            }
 6195|    266|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    268|        std::ptrdiff_t postfix_width = 0;
 6199|    268|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 262, False: 6]
  ------------------
 6200|    262|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 262]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    262|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    262|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    262|                                 value_width));
 6204|    262|            std::tie(it, postfix_width) = postfix_result;
 6205|    262|        }
 6206|       |
 6207|    268|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    268|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 24, False: 244]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     24|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     24|    }
  ------------------
 6208|    268|            specs, prefix_width, value_width, postfix_width));
 6209|    244|        return it;
 6210|    268|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6214|    872|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|    872|                          basic_contiguous_scan_context<char_type>>) {
 6219|    872|            auto rd = make_reader<T, char_type>();
 6220|    872|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    872|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 872]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|    872|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|    872|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6149|    872|    {
 6150|    872|        const bool need_skipped_width =
 6151|    872|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 32, False: 840]
  |  Branch (6151:33): [True: 22, False: 818]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|    872|        auto it = rng.begin();
 6155|    872|        std::ptrdiff_t prefix_width = 0;
 6156|    872|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 22, False: 850]
  ------------------
 6157|     22|            auto max_width_view = take_width(rng, specs.precision);
 6158|     22|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|     22|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|     22|            it = prefix_result.first.base();
 6161|     22|            prefix_width = prefix_result.second;
 6162|     22|        }
 6163|    850|        else {
 6164|    850|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    850|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    850|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    850|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 850]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    850|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    850|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|    850|            std::tie(it, prefix_width) = prefix_result;
 6166|    850|        }
 6167|    872|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|    872|        std::ptrdiff_t value_width = 0;
 6171|    872|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 22, False: 850]
  ------------------
 6172|     22|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 22]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|     22|            const auto initial_width = specs.precision - prefix_width;
 6180|     22|            auto max_width_view =
 6181|     22|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|     22|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      2|            it = w_it.base();
 6184|      2|            value_width = initial_width - w_it.count();
 6185|      2|        }
 6186|    850|        else {
 6187|    850|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    850|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    850|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 584, False: 266]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    584|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    584|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    584|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    584|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    584|    }                                                  \
  |  | 3939|    850|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    850|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    266|                                             specs, value, loc));
 6189|       |
 6190|    266|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 28, False: 238]
  ------------------
 6191|     28|                value_width = calculate_text_width(
 6192|     28|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|     28|                        .view());
 6194|     28|            }
 6195|    266|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    268|        std::ptrdiff_t postfix_width = 0;
 6199|    268|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 262, False: 6]
  ------------------
 6200|    262|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 262]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    262|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    262|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    262|                                 value_width));
 6204|    262|            std::tie(it, postfix_width) = postfix_result;
 6205|    262|        }
 6206|       |
 6207|    268|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    268|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 24, False: 244]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     24|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     24|    }
  ------------------
 6208|    268|            specs, prefix_width, value_width, postfix_width));
 6209|    244|        return it;
 6210|    268|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6214|    872|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|    872|                          basic_contiguous_scan_context<char_type>>) {
 6219|    872|            auto rd = make_reader<T, char_type>();
 6220|    872|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    872|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 872]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|    872|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|    872|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6149|    872|    {
 6150|    872|        const bool need_skipped_width =
 6151|    872|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 32, False: 840]
  |  Branch (6151:33): [True: 22, False: 818]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|    872|        auto it = rng.begin();
 6155|    872|        std::ptrdiff_t prefix_width = 0;
 6156|    872|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 22, False: 850]
  ------------------
 6157|     22|            auto max_width_view = take_width(rng, specs.precision);
 6158|     22|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|     22|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|     22|            it = prefix_result.first.base();
 6161|     22|            prefix_width = prefix_result.second;
 6162|     22|        }
 6163|    850|        else {
 6164|    850|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    850|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    850|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    850|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 850]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    850|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    850|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|    850|            std::tie(it, prefix_width) = prefix_result;
 6166|    850|        }
 6167|    872|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|    872|        std::ptrdiff_t value_width = 0;
 6171|    872|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 22, False: 850]
  ------------------
 6172|     22|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 22]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|     22|            const auto initial_width = specs.precision - prefix_width;
 6180|     22|            auto max_width_view =
 6181|     22|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|     22|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      2|            it = w_it.base();
 6184|      2|            value_width = initial_width - w_it.count();
 6185|      2|        }
 6186|    850|        else {
 6187|    850|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    850|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    850|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 584, False: 266]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    584|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    584|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    584|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    584|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    584|    }                                                  \
  |  | 3939|    850|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    850|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    266|                                             specs, value, loc));
 6189|       |
 6190|    266|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 28, False: 238]
  ------------------
 6191|     28|                value_width = calculate_text_width(
 6192|     28|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|     28|                        .view());
 6194|     28|            }
 6195|    266|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    268|        std::ptrdiff_t postfix_width = 0;
 6199|    268|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 262, False: 6]
  ------------------
 6200|    262|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 262]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    262|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    262|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    262|                                 value_width));
 6204|    262|            std::tie(it, postfix_width) = postfix_result;
 6205|    262|        }
 6206|       |
 6207|    268|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    268|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 24, False: 244]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     24|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     24|    }
  ------------------
 6208|    268|            specs, prefix_width, value_width, postfix_width));
 6209|    244|        return it;
 6210|    268|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5823|    144|{
 5824|    144|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 144]
  |  |  ------------------
  ------------------
 5825|      0|        return unexpected(e);
 5826|      0|    }
 5827|       |
 5828|    144|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 16, False: 128]
  ------------------
 5829|     16|        return range.begin();
 5830|     16|    }
 5831|       |
 5832|    128|    return skip_classic_whitespace(range);
 5833|    144|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5899|     16|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     16|                          basic_contiguous_scan_context<char_type>>) {
 5904|     16|            auto rd = make_reader<T, char_type>();
 5905|     16|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     16|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|     16|    {
 5892|     16|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     16|                        .transform_error(make_eof_scan_error));
 5894|     16|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     16|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|     16|    {
 3568|     16|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     16|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|     16|        return read_default_with_base(range, value, 10);
 3570|     16|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|     16|    {
 3532|     16|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|     16|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|     16|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 16]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|     32|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|     32|                parse_integer_digits_without_thsep(
 3551|     32|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|     32|                    prefix_result.parsed_base));
 3553|       |
 3554|     32|        auto buf = make_contiguous_buffer(
 3555|     32|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|     32|        SCN_TRY(result_it,
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     16|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|      0|                                    prefix_result.parsed_base));
 3559|       |
 3560|      0|        return ranges::next(prefix_result.iterator,
 3561|      0|                            ranges::distance(buf.view().begin(), result_it));
 3562|     32|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5899|     16|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     16|                          basic_contiguous_scan_context<char_type>>) {
 5904|     16|            auto rd = make_reader<T, char_type>();
 5905|     16|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     16|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|     16|    {
 5892|     16|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     16|                        .transform_error(make_eof_scan_error));
 5894|     16|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     16|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|     16|    {
 3568|     16|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     16|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|     16|        return read_default_with_base(range, value, 10);
 3570|     16|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|     16|    {
 3532|     16|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|     16|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|     16|        if constexpr (!std::is_signed_v<T>) {
 3536|     16|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 0, False: 16]
  ------------------
 3537|      0|                return detail::unexpected_scan_error(
 3538|      0|                    scan_error::invalid_scanned_value,
 3539|      0|                    "Unexpected '-' sign when parsing an "
 3540|      0|                    "unsigned value");
 3541|      0|            }
 3542|     16|        }
 3543|       |
 3544|     16|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 16]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|     32|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|     32|                parse_integer_digits_without_thsep(
 3551|     32|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|     32|                    prefix_result.parsed_base));
 3553|       |
 3554|     32|        auto buf = make_contiguous_buffer(
 3555|     32|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|     32|        SCN_TRY(result_it,
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     16|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|      0|                                    prefix_result.parsed_base));
 3559|       |
 3560|      0|        return ranges::next(prefix_result.iterator,
 3561|      0|                            ranges::distance(buf.view().begin(), result_it));
 3562|     32|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5899|     16|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     16|                          basic_contiguous_scan_context<char_type>>) {
 5904|     16|            auto rd = make_reader<T, char_type>();
 5905|     16|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     16|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5891|     16|    {
 5892|     16|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     16|                        .transform_error(make_eof_scan_error));
 5894|     16|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     16|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5775|     70|    {
 5776|     70|        return true;
 5777|     70|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5793|     32|    {
 5794|     32|        detail::format_specs specs{};
 5795|     32|        specs.type = detail::presentation_type::int_hex;
 5796|       |
 5797|     32|        std::uintptr_t intvalue{};
 5798|     32|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     32|    }                                                  \
  |  |  |  | 3939|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5799|      0|                                                                intvalue, loc));
 5800|      0|        value = reinterpret_cast<void*>(intvalue);
 5801|      0|        return result;
 5802|     32|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5899|     16|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     16|                          basic_contiguous_scan_context<char_type>>) {
 5904|     16|            auto rd = make_reader<T, char_type>();
 5905|     16|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     16|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|     16|    {
 5892|     16|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     16|                        .transform_error(make_eof_scan_error));
 5894|     16|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     16|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3139|     82|    {
 3140|     82|        return true;
 3141|     82|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5530|     16|    {
 5531|     16|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     16|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5532|       |
 5533|     16|        return bool_reader<CharT>{}.read_classic(range, value);
 5534|     16|    }
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5380|     40|    {
 5381|     40|        scan_error err{scan_error::invalid_scanned_value,
 5382|     40|                       "Failed to read boolean"};
 5383|       |
 5384|     40|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5384:13): [True: 32, False: 8]
  ------------------
 5385|     32|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5385:22): [True: 0, False: 32]
  ------------------
 5386|      0|                return *r;
 5387|      0|            }
 5388|     32|            else {
 5389|     32|                err = r.error();
 5390|     32|            }
 5391|     32|        }
 5392|       |
 5393|     40|        if (m_options & allow_text) {
  ------------------
  |  Branch (5393:13): [True: 40, False: 0]
  ------------------
 5394|     40|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5394:22): [True: 0, False: 40]
  ------------------
 5395|      0|                return *r;
 5396|      0|            }
 5397|     40|            else {
 5398|     40|                err = r.error();
 5399|     40|            }
 5400|     40|        }
 5401|       |
 5402|     40|        return unexpected(err);
 5403|     40|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5409|     32|    {
 5410|     32|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5410:18): [True: 0, False: 32]
  ------------------
 5411|      0|            value = false;
 5412|      0|            return *r;
 5413|      0|        }
 5414|     32|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5414:18): [True: 0, False: 32]
  ------------------
 5415|      0|            value = true;
 5416|      0|            return *r;
 5417|      0|        }
 5418|       |
 5419|     32|        return detail::unexpected_scan_error(
 5420|     32|            scan_error::invalid_scanned_value,
 5421|     32|            "Failed to read numeric boolean value: No match");
 5422|     32|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5427|     40|    {
 5428|     40|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5428:18): [True: 0, False: 40]
  ------------------
 5429|      0|            value = true;
 5430|      0|            return *r;
 5431|      0|        }
 5432|     40|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5432:18): [True: 0, False: 40]
  ------------------
 5433|      0|            value = false;
 5434|      0|            return *r;
 5435|      0|        }
 5436|       |
 5437|     40|        return detail::unexpected_scan_error(
 5438|     40|            scan_error::invalid_scanned_value,
 5439|     40|            "Failed to read textual boolean value: No match");
 5440|     40|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2293|     80|{
 2294|     80|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     80|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     80|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     80|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 80]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     80|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     80|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|     80|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|     80|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2301|       |            return unexpected(parse_error::error);
 2302|       |        }
 2303|       |        return it;
 2304|       |    }
 2305|     80|    else {
 2306|     80|        auto range_it = range.begin();
 2307|     80|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2307:28): [True: 80, False: 0]
  ------------------
 2308|     80|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  865|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 80, False: 0]
  |  |  ------------------
  ------------------
 2309|     80|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|     80|                return unexpected(parse_error::error);
 2311|     80|            }
 2312|     80|        }
 2313|      0|        return it;
 2314|     80|    }
 2315|     80|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 5899|     16|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     16|                          basic_contiguous_scan_context<char_type>>) {
 5904|     16|            auto rd = make_reader<T, char_type>();
 5905|     16|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     16|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|     16|    {
 5892|     16|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     16|                        .transform_error(make_eof_scan_error));
 5894|     16|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     16|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3688|     16|    constexpr float_reader() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5899|     16|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     16|                          basic_contiguous_scan_context<char_type>>) {
 5904|     16|            auto rd = make_reader<T, char_type>();
 5905|     16|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     16|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|     16|    {
 5892|     16|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     16|                        .transform_error(make_eof_scan_error));
 5894|     16|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     16|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4173|     16|    {
 4174|     16|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     16|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4175|       |
 4176|     16|        float_reader<CharT> rd{};
 4177|     16|        return read_impl<Range>(
 4178|     16|            range, rd,
 4179|     16|            [](float_reader<CharT>& r, auto&&... args) {
 4180|     16|                return r.read_source(SCN_FWD(args)...);
 4181|     16|            },
 4182|     16|            value);
 4183|     16|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|     16|        : m_fptr([](storage fn,
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
  752|     16|          m_storage(std::addressof(f))
  753|     16|    {
  754|     16|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     16|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     16|        else if constexpr (std::is_object_v<T>) {
  688|     16|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     16|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4179|     16|            [](float_reader<CharT>& r, auto&&... args) {
 4180|     16|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4181|     16|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     16|        {
  662|     16|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5899|     16|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     16|                          basic_contiguous_scan_context<char_type>>) {
 5904|     16|            auto rd = make_reader<T, char_type>();
 5905|     16|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     16|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5891|     16|    {
 5892|     16|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     16|                        .transform_error(make_eof_scan_error));
 5894|     16|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     16|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5291|     16|    {
 5292|     16|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     16|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|     16|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|     16|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5899|     16|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     16|                          basic_contiguous_scan_context<char_type>>) {
 5904|     16|            auto rd = make_reader<T, char_type>();
 5905|     16|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     16|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5891|     16|    {
 5892|     16|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     16|                        .transform_error(make_eof_scan_error));
 5894|     16|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     16|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5291|     16|    {
 5292|     16|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     16|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|     16|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|     16|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5899|     16|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|     16|                          basic_contiguous_scan_context<char_type>>) {
 5904|     16|            auto rd = make_reader<T, char_type>();
 5905|     16|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|     16|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5891|     16|    {
 5892|     16|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|     16|                        .transform_error(make_eof_scan_error));
 5894|     16|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|     16|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5291|     16|    {
 5292|     16|        SCN_UNUSED(loc);
  ------------------
  |  |  915|     16|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|     16|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|     16|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2974|  28.6k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  28.6k|    static_cast<    \
  |  |  935|  28.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2975|  28.6k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2976|  28.6k|          m_current(m_range.begin())
 2977|  28.6k|    {
 2978|  28.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2986|   117M|    {
 2987|   117M|        return m_range.end();
 2988|   117M|    }
_ZN3scn2v44impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1318|  58.7M|{
 1319|       |    // TODO: optimize
 1320|  58.7M|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  930|  58.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1321|  58.7M|    auto res = get_next_code_point(str);
 1322|  58.7M|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1323|  58.7M|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3001|  58.7M|    {
 3002|  58.7M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  58.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3003|  58.7M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3004|  58.7M|            if (it == nullptr) {
  ------------------
  |  Branch (3004:17): [True: 0, False: 58.7M]
  ------------------
 3005|      0|                it = end();
 3006|      0|            }
 3007|  58.7M|        }
 3008|  58.7M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  58.7M|    static_cast<    \
  |  |  935|  58.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3009|  58.7M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 2991|  20.5k|    {
 2992|  20.5k|        return ranges::subrange{begin(), end()};
 2993|  20.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6062|    376|    {
 6063|    376|        const bool need_skipped_width =
 6064|    376|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 376]
  |  Branch (6064:33): [True: 376, False: 0]
  ------------------
 6065|    376|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|    376|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 376]
  ------------------
 6069|    376|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 16, False: 360]
  ------------------
 6070|     16|            return skip_fill(rng, specs.precision, specs.fill,
 6071|     16|                             need_skipped_width);
 6072|     16|        }
 6073|    360|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 360, False: 0]
  |  Branch (6073:56): [True: 304, False: 56]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|    304|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 304, False: 0]
  ------------------
 6077|    304|                auto max_width_view = take_width(rng, specs.precision);
 6078|    304|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|    304|                                  .transform_error(make_eof_scan_error));
 6080|    304|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|    304|            }
 6082|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|      0|                            make_eof_scan_error));
 6084|       |
 6085|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|      0|            return result_type{it, 0};
 6093|      0|        }
 6094|       |
 6095|     56|        return result_type{rng.begin(), 0};
 6096|    360|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5977|     16|{
 5978|     16|    using char_type = detail::char_t<Range>;
 5979|     16|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5980|       |
 5981|     16|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5981:9): [True: 16, False: 0]
  ------------------
 5982|     16|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5983|     16|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5984|       |
 5985|     16|        if (max_width == 0) {
  ------------------
  |  Branch (5985:13): [True: 0, False: 16]
  ------------------
 5986|      0|            auto it = read_while_code_unit(range, pred);
 5987|       |
 5988|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5988:17): [True: 0, False: 0]
  ------------------
 5989|      0|                auto prefix_width =
 5990|      0|                    static_cast<std::ptrdiff_t>(
 5991|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5992|      0|                    ranges::distance(range.begin(), it);
 5993|      0|                return result_type{it, prefix_width};
 5994|      0|            }
 5995|      0|            return result_type{it, 0};
 5996|      0|        }
 5997|       |
 5998|     16|        auto max_width_view = take_width(range, max_width);
 5999|     16|        auto w_it = read_while_code_unit(max_width_view, pred);
 6000|       |
 6001|     16|        if (want_skipped_width) {
  ------------------
  |  Branch (6001:13): [True: 16, False: 0]
  ------------------
 6002|     16|            return result_type{w_it.base(), max_width - w_it.count()};
 6003|     16|        }
 6004|      0|        return result_type{w_it.base(), 0};
 6005|     16|    }
 6006|       |
 6007|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6008|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 0]
  ------------------
 6009|      0|        auto it = read_while_code_units(range, fill_chars);
 6010|       |
 6011|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6011:13): [True: 0, False: 0]
  ------------------
 6012|      0|            auto prefix_width =
 6013|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6014|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6015|      0|            return result_type{it, prefix_width};
 6016|      0|        }
 6017|      0|        return result_type{it, 0};
 6018|      0|    }
 6019|       |
 6020|      0|    auto max_width_view = take_width(range, max_width);
 6021|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6022|       |
 6023|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6023:9): [True: 0, False: 0]
  ------------------
 6024|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6025|      0|    }
 6026|      0|    return result_type{w_it.base(), 0};
 6027|      0|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|     16|        : m_fptr([](storage fn,
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
  752|     16|          m_storage(std::addressof(f))
  753|     16|    {
  754|     16|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|     16|    {
  684|     16|        if constexpr (std::is_const_v<T>) {
  685|     16|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     16|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5983|     16|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|     16|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     16|        {
  667|     16|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|     16|{
 2075|     16|    return read_until_code_unit(range, std::not_fn(pred));
 2076|     16|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|     16|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|     16|    else {
 2060|     16|        auto first = range.begin();
 2061|     16|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 16, False: 0]
  ------------------
 2062|     16|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 16, False: 0]
  ------------------
 2063|     16|                return first;
 2064|     16|            }
 2065|     16|        }
 2066|      0|        return first;
 2067|     16|    }
 2068|     16|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2909|    624|    {
 2910|    624|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2911|    624|                                      m_count};
 2912|    624|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2816|  2.17k|    {
 2817|  2.17k|        return view;
 2818|  2.17k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2480|    624|        : m_current(x), m_end(s), m_count(n)
 2481|    624|    {
 2482|    624|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2880|    320|        {
 2881|    320|            return !(y == x);
 2882|    320|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2869|    928|        {
 2870|    928|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2870:21): [True: 0, False: 928]
  |  Branch (2870:39): [True: 0, False: 0]
  ------------------
 2871|    928|                   y.base() == x.m_end;
  ------------------
  |  Branch (2871:20): [True: 0, False: 928]
  ------------------
 2872|    928|        }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2915|    928|    {
 2916|    928|        return sentinel<true>{m_base.get().end()};
 2917|    928|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2850|    928|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|    928|    static_cast<    \
  |  |  935|    928|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2525|    624|    {
 2526|    624|        return *m_current;
 2527|    624|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2534|    304|    {
 2535|    304|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|    304|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    304|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2536|    304|        _increment_current();
 2537|    304|        return *this;
 2538|    304|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2767|    304|    {
 2768|    304|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2768:13): [True: 304, False: 0]
  ------------------
 2769|    304|            auto cplen = _get_cp_length_at_current();
 2770|    304|            m_multibyte_left = cplen - 1;
 2771|    304|            m_count -= _get_width_at_current_cp_start(cplen);
 2772|    304|        }
 2773|      0|        else {
 2774|      0|            --m_multibyte_left;
 2775|      0|        }
 2776|       |
 2777|    304|        ++m_current;
 2778|    304|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2738|    304|    {
 2739|    304|        return static_cast<difference_type>(
 2740|    304|            detail::code_point_length_by_starting_code_unit(*m_current));
 2741|    304|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2744|    304|    {
 2745|    304|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 304]
  |  |  ------------------
  ------------------
 2746|      0|            return 0;
 2747|      0|        }
 2748|       |
 2749|    304|        if (cplen == 1) {
  ------------------
  |  Branch (2749:13): [True: 304, False: 0]
  ------------------
 2750|    304|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|    304|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    304|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2751|    304|            auto cp = static_cast<char32_t>(*m_current);
 2752|    304|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2753|    304|        }
 2754|       |
 2755|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2756|      0|                                           cplen);
 2757|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2758|      0|            return 0;
 2759|      0|        }
 2760|       |
 2761|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2762|      0|        return static_cast<difference_type>(
 2763|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2764|      0|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2931|    320|    {
 2932|    320|        return take_width_view{r, n};
 2933|    320|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2899|    320|        : m_base(base), m_count(count)
 2900|    320|    {
 2901|    320|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2813|    320|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3054|    304|{
 3055|    304|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 304, False: 0]
  ------------------
 3056|    304|        auto it = read_while_classic_space(range);
 3057|    304|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|    304|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 304]
  |  |  ------------------
  ------------------
 3059|      0|            return unexpected(e);
 3060|      0|        }
 3061|       |
 3062|    304|        return it;
 3063|    304|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|    304|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|    304|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    304|    else {
 2225|    304|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|    304|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    304|            return detail::is_cp_space(cp);
 2238|    304|        });
 2239|    304|    }
 2240|    304|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|    304|{
 2181|    304|    return read_until_code_point(range, std::not_fn(pred));
 2182|    304|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|    304|{
 2160|    304|    auto it = range.begin();
 2161|    304|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 304, False: 0]
  ------------------
 2162|    304|        const auto val =
 2163|    304|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|    304|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|    304|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 304, False: 0]
  |  |  ------------------
  ------------------
 2165|    304|            const auto cp = detail::decode_code_point_exhaustive(
 2166|    304|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|    304|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 304, False: 0]
  ------------------
 2168|    304|                return it;
 2169|    304|            }
 2170|    304|        }
 2171|      0|        it = val.iterator;
 2172|      0|    }
 2173|       |
 2174|      0|    return it;
 2175|    304|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1997|    304|{
 1998|    304|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|    304|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    304|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|    304|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|    304|    auto it = range.begin();
 2002|    304|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|    304|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 304]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|    304|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 304, False: 0]
  ------------------
 2011|    304|        ++it;
 2012|    304|        return {it, string_type(1, *range.begin())};
 2013|    304|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|    304|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|    608|{
  945|    608|    return is_range_eof(r.begin(), r.end());
  946|    608|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|    608|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|    608|    {
  938|    608|        return begin == end;
  939|    608|    }
  940|    608|}
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1988|    304|    {
 1989|    304|        return !codepoint.empty();
 1990|    304|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|    304|        : m_fptr([](storage fn,
  743|    304|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    304|              cvref<T> obj = *get<T>(fn);
  745|    304|              if constexpr (std::is_void_v<R>) {
  746|    304|                  obj(static_cast<decltype(args)>(args)...);
  747|    304|              }
  748|    304|              else {
  749|    304|                  return obj(static_cast<decltype(args)>(args)...);
  750|    304|              }
  751|    304|          }),
  752|    304|          m_storage(std::addressof(f))
  753|    304|    {
  754|    304|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|    304|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    304|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    304|              else {
  749|    304|                  return obj(static_cast<decltype(args)>(args)...);
  750|    304|              }
  751|    304|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|    304|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    304|        else if constexpr (std::is_object_v<T>) {
  688|    304|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    304|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|    304|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    304|            return detail::is_cp_space(cp);
 2238|    304|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    304|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    304|        {
  662|    304|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|    304|{
  951|    304|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 304]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|    304|    return eof_error::good;
  955|    304|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2512|  1.24k|    {
 2513|  1.24k|        return m_current;
 2514|  1.24k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2516|  1.24k|    {
 2517|  1.24k|        return m_count;
 2518|  1.24k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6062|  6.66k|    {
 6063|  6.66k|        const bool need_skipped_width =
 6064|  6.66k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 1.23k, False: 5.43k]
  |  Branch (6064:33): [True: 0, False: 5.43k]
  ------------------
 6065|  6.66k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|  6.66k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 16, False: 6.64k]
  ------------------
 6069|  6.66k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 4.77k, False: 1.87k]
  ------------------
 6070|  4.79k|            return skip_fill(rng, specs.precision, specs.fill,
 6071|  4.79k|                             need_skipped_width);
 6072|  4.79k|        }
 6073|  1.87k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 1.81k, False: 52]
  |  Branch (6073:56): [True: 128, False: 1.69k]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|    128|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 128]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|    256|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|    128|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    128|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    128|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 128]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    128|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|    256|                            make_eof_scan_error));
 6084|       |
 6085|    256|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 112, False: 16]
  ------------------
 6086|    112|                return result_type{
 6087|    112|                    it,
 6088|    112|                    calculate_text_width(make_contiguous_buffer(
 6089|    112|                                             ranges::subrange{rng.begin(), it})
 6090|    112|                                             .view())};
 6091|    112|            }
 6092|     16|            return result_type{it, 0};
 6093|    256|        }
 6094|       |
 6095|  1.74k|        return result_type{rng.begin(), 0};
 6096|  1.87k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6104|    264|    {
 6105|    264|        const bool need_skipped_width =
 6106|    264|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 140, False: 124]
  |  Branch (6106:33): [True: 38, False: 86]
  ------------------
 6107|    264|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|    264|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 6, False: 258]
  ------------------
 6110|    264|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 258]
  ------------------
 6111|      6|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 6]
  ------------------
 6112|      6|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      6|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      6|                             specs.fill, need_skipped_width);
 6117|      6|        }
 6118|    258|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 246, False: 12]
  ------------------
 6119|    258|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 246, False: 0]
  ------------------
 6120|    258|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 140, False: 106]
  |  Branch (6120:35): [True: 140, False: 0]
  ------------------
 6121|    246|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 38, False: 68]
  ------------------
 6122|    178|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 38, False: 0]
  ------------------
 6123|    178|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 38, False: 140]
  ------------------
 6124|     38|                const auto initial_width =
 6125|     38|                    specs.precision - prefix_width - value_width;
 6126|     38|                auto max_width_view = take_width(rng, initial_width);
 6127|     38|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|     38|                                  .transform_error(make_eof_scan_error));
 6129|     38|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|     38|            }
 6131|    280|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|    140|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    140|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    140|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 140]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    140|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    140|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|    280|                            make_eof_scan_error));
 6133|       |
 6134|    280|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 140, False: 0]
  ------------------
 6135|    140|                return result_type{
 6136|    140|                    it,
 6137|    140|                    calculate_text_width(make_contiguous_buffer(
 6138|    140|                                             ranges::subrange{rng.begin(), it})
 6139|    140|                                             .view())};
 6140|    140|            }
 6141|      0|            return result_type{it, 0};
 6142|    280|        }
 6143|     80|        return result_type{rng.begin(), 0};
 6144|    258|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6214|  2.23k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.23k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.23k|            auto rd = make_reader<T, char_type>();
 6220|  2.23k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.23k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.18k, False: 54]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.18k|    }
  ------------------
 6221|     54|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.23k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|     54|    {
 6150|     54|        const bool need_skipped_width =
 6151|     54|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 14, False: 40]
  |  Branch (6151:33): [True: 38, False: 2]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|     54|        auto it = rng.begin();
 6155|     54|        std::ptrdiff_t prefix_width = 0;
 6156|     54|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 38, False: 16]
  ------------------
 6157|     38|            auto max_width_view = take_width(rng, specs.precision);
 6158|     38|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|     38|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|     38|            it = prefix_result.first.base();
 6161|     38|            prefix_width = prefix_result.second;
 6162|     38|        }
 6163|     16|        else {
 6164|     16|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|     16|            std::tie(it, prefix_width) = prefix_result;
 6166|     16|        }
 6167|     54|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|     54|        std::ptrdiff_t value_width = 0;
 6171|     54|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 38, False: 16]
  ------------------
 6172|     38|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 38]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|     38|            const auto initial_width = specs.precision - prefix_width;
 6180|     38|            auto max_width_view =
 6181|     38|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|     38|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 38, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     38|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|     16|        else {
 6187|     16|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     16|    }                                                  \
  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6214|  2.23k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.23k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.23k|            auto rd = make_reader<T, char_type>();
 6220|  2.23k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.23k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.18k, False: 54]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.18k|    }
  ------------------
 6221|     54|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.23k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|     54|    {
 6150|     54|        const bool need_skipped_width =
 6151|     54|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 14, False: 40]
  |  Branch (6151:33): [True: 38, False: 2]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|     54|        auto it = rng.begin();
 6155|     54|        std::ptrdiff_t prefix_width = 0;
 6156|     54|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 38, False: 16]
  ------------------
 6157|     38|            auto max_width_view = take_width(rng, specs.precision);
 6158|     38|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|     38|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|     38|            it = prefix_result.first.base();
 6161|     38|            prefix_width = prefix_result.second;
 6162|     38|        }
 6163|     16|        else {
 6164|     16|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|     16|            std::tie(it, prefix_width) = prefix_result;
 6166|     16|        }
 6167|     54|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|     54|        std::ptrdiff_t value_width = 0;
 6171|     54|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 38, False: 16]
  ------------------
 6172|     38|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 38]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|     38|            const auto initial_width = specs.precision - prefix_width;
 6180|     38|            auto max_width_view =
 6181|     38|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|     38|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 38, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     38|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|     16|        else {
 6187|     16|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     16|    }                                                  \
  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6214|  2.23k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.23k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.23k|            auto rd = make_reader<T, char_type>();
 6220|  2.23k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.23k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.18k, False: 54]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.18k|    }
  ------------------
 6221|     54|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.23k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5780|  2.23k|    {
 5781|  2.23k|        reader_error_handler eh{};
 5782|  2.23k|        detail::check_pointer_type_specs(specs, eh);
 5783|  2.23k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.18k, False: 54]
  |  |  ------------------
  ------------------
 5784|  2.18k|            return detail::unexpected_scan_error(
 5785|  2.18k|                scan_error::invalid_format_string, eh.m_msg);
 5786|  2.18k|        }
 5787|     54|        return {};
 5788|  2.23k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6149|     54|    {
 6150|     54|        const bool need_skipped_width =
 6151|     54|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 14, False: 40]
  |  Branch (6151:33): [True: 38, False: 2]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|     54|        auto it = rng.begin();
 6155|     54|        std::ptrdiff_t prefix_width = 0;
 6156|     54|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 38, False: 16]
  ------------------
 6157|     38|            auto max_width_view = take_width(rng, specs.precision);
 6158|     38|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|     38|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|     38|            it = prefix_result.first.base();
 6161|     38|            prefix_width = prefix_result.second;
 6162|     38|        }
 6163|     16|        else {
 6164|     16|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|     16|            std::tie(it, prefix_width) = prefix_result;
 6166|     16|        }
 6167|     54|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|     54|        std::ptrdiff_t value_width = 0;
 6171|     54|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 38, False: 16]
  ------------------
 6172|     38|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 38]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|     38|            const auto initial_width = specs.precision - prefix_width;
 6180|     38|            auto max_width_view =
 6181|     38|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|     38|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 38, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     38|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|     16|        else {
 6187|     16|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     16|    }                                                  \
  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5810|     38|    {
 5811|     38|        SCN_UNUSED(specs);
  ------------------
  |  |  915|     38|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5812|     38|        return read_default(range, value, loc);
 5813|     38|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5793|     38|    {
 5794|     38|        detail::format_specs specs{};
 5795|     38|        specs.type = detail::presentation_type::int_hex;
 5796|       |
 5797|     38|        std::uintptr_t intvalue{};
 5798|     38|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 38, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     38|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5799|      0|                                                                intvalue, loc));
 5800|      0|        value = reinterpret_cast<void*>(intvalue);
 5801|      0|        return result;
 5802|     38|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5810|     16|    {
 5811|     16|        SCN_UNUSED(specs);
  ------------------
  |  |  915|     16|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5812|     16|        return read_default(range, value, loc);
 5813|     16|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6214|  2.23k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.23k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.23k|            auto rd = make_reader<T, char_type>();
 6220|  2.23k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.23k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.16k, False: 66]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.16k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.16k|    }
  ------------------
 6221|     66|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.23k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3144|  2.23k|    {
 3145|  2.23k|        reader_error_handler eh{};
 3146|  2.23k|        get_derived().check_specs_impl(specs, eh);
 3147|  2.23k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.16k, False: 66]
  |  |  ------------------
  ------------------
 3148|  2.16k|            return detail::unexpected_scan_error(
 3149|  2.16k|                scan_error::invalid_format_string, eh.m_msg);
 3150|  2.16k|        }
 3151|     66|        return {};
 3152|  2.23k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3156|  2.23k|    {
 3157|  2.23k|        return static_cast<Derived&>(*this);
 3158|  2.23k|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5523|  2.23k|    {
 5524|  2.23k|        detail::check_bool_type_specs(specs, eh);
 5525|  2.23k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|     66|    {
 6150|     66|        const bool need_skipped_width =
 6151|     66|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 14, False: 52]
  |  Branch (6151:33): [True: 42, False: 10]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|     66|        auto it = rng.begin();
 6155|     66|        std::ptrdiff_t prefix_width = 0;
 6156|     66|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 42, False: 24]
  ------------------
 6157|     42|            auto max_width_view = take_width(rng, specs.precision);
 6158|     42|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     42|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     42|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     42|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 42]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     42|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     42|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|     42|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|     42|            it = prefix_result.first.base();
 6161|     42|            prefix_width = prefix_result.second;
 6162|     42|        }
 6163|     24|        else {
 6164|     24|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|     24|            std::tie(it, prefix_width) = prefix_result;
 6166|     24|        }
 6167|     66|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|     66|        std::ptrdiff_t value_width = 0;
 6171|     66|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 42, False: 24]
  ------------------
 6172|     42|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 42]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|     42|            const auto initial_width = specs.precision - prefix_width;
 6180|     42|            auto max_width_view =
 6181|     42|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|     42|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     42|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     42|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     42|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 42, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     42|    }                                                  \
  |  |  |  | 3939|     42|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|     24|        else {
 6187|     24|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 24, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     24|    }                                                  \
  |  | 3939|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5542|     42|    {
 5543|     42|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5544|       |
 5545|     42|#if !SCN_DISABLE_LOCALE
 5546|     42|        if (specs.localized) {
  ------------------
  |  Branch (5546:13): [True: 0, False: 42]
  ------------------
 5547|      0|            return rd.read_localized(range, loc, value);
 5548|      0|        }
 5549|     42|#endif
 5550|       |
 5551|     42|        return rd.read_classic(range, value);
 5552|     42|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5555|     66|    {
 5556|     66|        SCN_GCC_COMPAT_PUSH
 5557|     66|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5558|       |
 5559|     66|        switch (specs.type) {
 5560|     12|            case detail::presentation_type::string:
  ------------------
  |  Branch (5560:13): [True: 12, False: 54]
  ------------------
 5561|     12|                return bool_reader_base::allow_text;
 5562|       |
 5563|      0|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5563:13): [True: 0, False: 66]
  ------------------
 5564|      0|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5564:13): [True: 0, False: 66]
  ------------------
 5565|      0|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5565:13): [True: 0, False: 66]
  ------------------
 5566|      0|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5566:13): [True: 0, False: 66]
  ------------------
 5567|      0|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5567:13): [True: 0, False: 66]
  ------------------
 5568|      0|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5568:13): [True: 0, False: 66]
  ------------------
 5569|      0|                return bool_reader_base::allow_numeric;
 5570|       |
 5571|     54|            default:
  ------------------
  |  Branch (5571:13): [True: 54, False: 12]
  ------------------
 5572|     54|                return bool_reader_base::allow_text |
 5573|     54|                       bool_reader_base::allow_numeric;
 5574|     66|        }
 5575|       |
 5576|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5577|     66|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5409|     38|    {
 5410|     38|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5410:18): [True: 0, False: 38]
  ------------------
 5411|      0|            value = false;
 5412|      0|            return *r;
 5413|      0|        }
 5414|     38|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5414:18): [True: 0, False: 38]
  ------------------
 5415|      0|            value = true;
 5416|      0|            return *r;
 5417|      0|        }
 5418|       |
 5419|     38|        return detail::unexpected_scan_error(
 5420|     38|            scan_error::invalid_scanned_value,
 5421|     38|            "Failed to read numeric boolean value: No match");
 5422|     38|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2245|     76|{
 2246|     76|    auto it = read_code_unit(range);
 2247|     76|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 76]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|     76|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|     76|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 76, False: 0]
  |  |  ------------------
  ------------------
 2252|     76|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|     76|        return unexpected(parse_error::error);
 2254|     76|    }
 2255|       |
 2256|      0|    return *it;
 2257|     76|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1955|     84|{
 1956|     84|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|     84|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     84|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|     84|    else {
 1967|     84|        auto it = range.begin();
 1968|     84|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 84]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|    462|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 378, False: 84]
  ------------------
 1973|    378|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 0, False: 378]
  ------------------
 1974|      0|                return unexpected(eof_error::eof);
 1975|      0|            }
 1976|    378|        }
 1977|       |
 1978|     84|        return it;
 1979|     84|    }
 1980|     84|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1095|     84|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|     84|    else {
 1116|     84|        return 0;
 1117|     84|    }
 1118|     84|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5380|     42|    {
 5381|     42|        scan_error err{scan_error::invalid_scanned_value,
 5382|     42|                       "Failed to read boolean"};
 5383|       |
 5384|     42|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5384:13): [True: 38, False: 4]
  ------------------
 5385|     38|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5385:22): [True: 0, False: 38]
  ------------------
 5386|      0|                return *r;
 5387|      0|            }
 5388|     38|            else {
 5389|     38|                err = r.error();
 5390|     38|            }
 5391|     38|        }
 5392|       |
 5393|     42|        if (m_options & allow_text) {
  ------------------
  |  Branch (5393:13): [True: 42, False: 0]
  ------------------
 5394|     42|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5394:22): [True: 0, False: 42]
  ------------------
 5395|      0|                return *r;
 5396|      0|            }
 5397|     42|            else {
 5398|     42|                err = r.error();
 5399|     42|            }
 5400|     42|        }
 5401|       |
 5402|     42|        return unexpected(err);
 5403|     42|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5427|     42|    {
 5428|     42|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5428:18): [True: 0, False: 42]
  ------------------
 5429|      0|            value = true;
 5430|      0|            return *r;
 5431|      0|        }
 5432|     42|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5432:18): [True: 0, False: 42]
  ------------------
 5433|      0|            value = false;
 5434|      0|            return *r;
 5435|      0|        }
 5436|       |
 5437|     42|        return detail::unexpected_scan_error(
 5438|     42|            scan_error::invalid_scanned_value,
 5439|     42|            "Failed to read textual boolean value: No match");
 5440|     42|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2293|     84|{
 2294|     84|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     84|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     84|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     84|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 84]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     84|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     84|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|     84|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|     84|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2301|       |            return unexpected(parse_error::error);
 2302|       |        }
 2303|       |        return it;
 2304|       |    }
 2305|     84|    else {
 2306|     84|        auto range_it = range.begin();
 2307|     84|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2307:28): [True: 84, False: 0]
  ------------------
 2308|     84|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  865|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 84, False: 0]
  |  |  ------------------
  ------------------
 2309|     84|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|     84|                return unexpected(parse_error::error);
 2311|     84|            }
 2312|     84|        }
 2313|      0|        return it;
 2314|     84|    }
 2315|     84|}
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5542|     24|    {
 5543|     24|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5544|       |
 5545|     24|#if !SCN_DISABLE_LOCALE
 5546|     24|        if (specs.localized) {
  ------------------
  |  Branch (5546:13): [True: 0, False: 24]
  ------------------
 5547|      0|            return rd.read_localized(range, loc, value);
 5548|      0|        }
 5549|     24|#endif
 5550|       |
 5551|     24|        return rd.read_classic(range, value);
 5552|     24|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 6214|  2.23k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.23k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.23k|            auto rd = make_reader<T, char_type>();
 6220|  2.23k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.23k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.18k, False: 54]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.18k|    }
  ------------------
 6221|     54|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.23k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|     54|    {
 6150|     54|        const bool need_skipped_width =
 6151|     54|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 14, False: 40]
  |  Branch (6151:33): [True: 38, False: 2]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|     54|        auto it = rng.begin();
 6155|     54|        std::ptrdiff_t prefix_width = 0;
 6156|     54|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 38, False: 16]
  ------------------
 6157|     38|            auto max_width_view = take_width(rng, specs.precision);
 6158|     38|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|     38|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|     38|            it = prefix_result.first.base();
 6161|     38|            prefix_width = prefix_result.second;
 6162|     38|        }
 6163|     16|        else {
 6164|     16|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|     16|            std::tie(it, prefix_width) = prefix_result;
 6166|     16|        }
 6167|     54|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|     54|        std::ptrdiff_t value_width = 0;
 6171|     54|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 38, False: 16]
  ------------------
 6172|     38|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 38]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|     38|            const auto initial_width = specs.precision - prefix_width;
 6180|     38|            auto max_width_view =
 6181|     38|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|     38|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|     38|            it = w_it.base();
 6184|     38|            value_width = initial_width - w_it.count();
 6185|     38|        }
 6186|     16|        else {
 6187|     16|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|     16|                                             specs, value, loc));
 6189|       |
 6190|     16|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 14, False: 2]
  ------------------
 6191|     14|                value_width = calculate_text_width(
 6192|     14|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|     14|                        .view());
 6194|     14|            }
 6195|     16|        }
 6196|       |
 6197|       |        // Read postfix
 6198|     54|        std::ptrdiff_t postfix_width = 0;
 6199|     54|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 54, False: 0]
  ------------------
 6200|     54|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|     54|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     54|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     54|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     54|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 54]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     54|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     54|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|     54|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|     54|                                 rd.skip_ws_before_read(), prefix_width,
 6203|     54|                                 value_width));
 6204|     54|            std::tie(it, postfix_width) = postfix_result;
 6205|     54|        }
 6206|       |
 6207|     54|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|     54|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     54|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 14, False: 40]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     14|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     14|    }
  ------------------
 6208|     54|            specs, prefix_width, value_width, postfix_width));
 6209|     40|        return it;
 6210|     54|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6214|  2.23k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.23k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.23k|            auto rd = make_reader<T, char_type>();
 6220|  2.23k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.23k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.18k, False: 54]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.18k|    }
  ------------------
 6221|     54|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.23k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|     54|    {
 6150|     54|        const bool need_skipped_width =
 6151|     54|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 14, False: 40]
  |  Branch (6151:33): [True: 38, False: 2]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|     54|        auto it = rng.begin();
 6155|     54|        std::ptrdiff_t prefix_width = 0;
 6156|     54|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 38, False: 16]
  ------------------
 6157|     38|            auto max_width_view = take_width(rng, specs.precision);
 6158|     38|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|     38|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|     38|            it = prefix_result.first.base();
 6161|     38|            prefix_width = prefix_result.second;
 6162|     38|        }
 6163|     16|        else {
 6164|     16|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|     16|            std::tie(it, prefix_width) = prefix_result;
 6166|     16|        }
 6167|     54|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|     54|        std::ptrdiff_t value_width = 0;
 6171|     54|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 38, False: 16]
  ------------------
 6172|     38|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 38]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|     38|            const auto initial_width = specs.precision - prefix_width;
 6180|     38|            auto max_width_view =
 6181|     38|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|     38|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     38|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     38|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     38|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 38, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     38|    }                                                  \
  |  |  |  | 3939|     38|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|     16|        else {
 6187|     16|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     16|    }                                                  \
  |  | 3939|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|      0|                                             specs, value, loc));
 6189|       |
 6190|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 0]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|      0|        }
 6196|       |
 6197|       |        // Read postfix
 6198|      0|        std::ptrdiff_t postfix_width = 0;
 6199|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 0, False: 0]
  ------------------
 6200|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6203|      0|                                 value_width));
 6204|      0|            std::tie(it, postfix_width) = postfix_result;
 6205|      0|        }
 6206|       |
 6207|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|      0|            specs, prefix_width, value_width, postfix_width));
 6209|      0|        return it;
 6210|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6214|  2.23k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.23k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.23k|            auto rd = make_reader<T, char_type>();
 6220|  2.23k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.23k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.23k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  2.23k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.23k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6149|  2.23k|    {
 6150|  2.23k|        const bool need_skipped_width =
 6151|  2.23k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 382, False: 1.85k]
  |  Branch (6151:33): [True: 48, False: 1.80k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  2.23k|        auto it = rng.begin();
 6155|  2.23k|        std::ptrdiff_t prefix_width = 0;
 6156|  2.23k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 48, False: 2.18k]
  ------------------
 6157|     48|            auto max_width_view = take_width(rng, specs.precision);
 6158|     48|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     48|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     48|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     48|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 48]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     48|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     48|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|     48|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|     48|            it = prefix_result.first.base();
 6161|     48|            prefix_width = prefix_result.second;
 6162|     48|        }
 6163|  2.18k|        else {
 6164|  2.18k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  2.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  2.18k|            std::tie(it, prefix_width) = prefix_result;
 6166|  2.18k|        }
 6167|  2.23k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  2.23k|        std::ptrdiff_t value_width = 0;
 6171|  2.23k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 48, False: 2.18k]
  ------------------
 6172|     48|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 48]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|     48|            const auto initial_width = specs.precision - prefix_width;
 6180|     48|            auto max_width_view =
 6181|     48|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|     48|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     48|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     48|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     48|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 46, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     46|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     46|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     46|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     46|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     46|    }                                                  \
  |  |  |  | 3939|     48|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      2|            it = w_it.base();
 6184|      2|            value_width = initial_width - w_it.count();
 6185|      2|        }
 6186|  2.18k|        else {
 6187|  2.18k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  2.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  2.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.10k, False: 78]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.10k|    }                                                  \
  |  | 3939|  2.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|     78|                                             specs, value, loc));
 6189|       |
 6190|     78|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 48, False: 30]
  ------------------
 6191|     48|                value_width = calculate_text_width(
 6192|     48|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|     48|                        .view());
 6194|     48|            }
 6195|     78|        }
 6196|       |
 6197|       |        // Read postfix
 6198|     80|        std::ptrdiff_t postfix_width = 0;
 6199|     80|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 70, False: 10]
  ------------------
 6200|     70|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|     70|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     70|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     70|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     70|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 70]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     70|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     70|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|     70|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|     70|                                 rd.skip_ws_before_read(), prefix_width,
 6203|     70|                                 value_width));
 6204|     70|            std::tie(it, postfix_width) = postfix_result;
 6205|     70|        }
 6206|       |
 6207|     80|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|     80|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 42, False: 38]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     42|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     42|    }
  ------------------
 6208|     80|            specs, prefix_width, value_width, postfix_width));
 6209|     38|        return it;
 6210|     80|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6214|  2.23k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.23k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.23k|            auto rd = make_reader<T, char_type>();
 6220|  2.23k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.23k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.23k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  2.23k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.23k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6149|  2.23k|    {
 6150|  2.23k|        const bool need_skipped_width =
 6151|  2.23k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 382, False: 1.85k]
  |  Branch (6151:33): [True: 48, False: 1.80k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  2.23k|        auto it = rng.begin();
 6155|  2.23k|        std::ptrdiff_t prefix_width = 0;
 6156|  2.23k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 48, False: 2.18k]
  ------------------
 6157|     48|            auto max_width_view = take_width(rng, specs.precision);
 6158|     48|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     48|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     48|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     48|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 48]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     48|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     48|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|     48|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|     48|            it = prefix_result.first.base();
 6161|     48|            prefix_width = prefix_result.second;
 6162|     48|        }
 6163|  2.18k|        else {
 6164|  2.18k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  2.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  2.18k|            std::tie(it, prefix_width) = prefix_result;
 6166|  2.18k|        }
 6167|  2.23k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  2.23k|        std::ptrdiff_t value_width = 0;
 6171|  2.23k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 48, False: 2.18k]
  ------------------
 6172|     48|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 48]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|     48|            const auto initial_width = specs.precision - prefix_width;
 6180|     48|            auto max_width_view =
 6181|     48|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|     48|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     48|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     48|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     48|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 46, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     46|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     46|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     46|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     46|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     46|    }                                                  \
  |  |  |  | 3939|     48|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      2|            it = w_it.base();
 6184|      2|            value_width = initial_width - w_it.count();
 6185|      2|        }
 6186|  2.18k|        else {
 6187|  2.18k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  2.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  2.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.10k, False: 78]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.10k|    }                                                  \
  |  | 3939|  2.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|     78|                                             specs, value, loc));
 6189|       |
 6190|     78|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 48, False: 30]
  ------------------
 6191|     48|                value_width = calculate_text_width(
 6192|     48|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|     48|                        .view());
 6194|     48|            }
 6195|     78|        }
 6196|       |
 6197|       |        // Read postfix
 6198|     80|        std::ptrdiff_t postfix_width = 0;
 6199|     80|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 70, False: 10]
  ------------------
 6200|     70|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|     70|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     70|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     70|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     70|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 70]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     70|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     70|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|     70|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|     70|                                 rd.skip_ws_before_read(), prefix_width,
 6203|     70|                                 value_width));
 6204|     70|            std::tie(it, postfix_width) = postfix_result;
 6205|     70|        }
 6206|       |
 6207|     80|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|     80|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 42, False: 38]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     42|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     42|    }
  ------------------
 6208|     80|            specs, prefix_width, value_width, postfix_width));
 6209|     38|        return it;
 6210|     80|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6214|  2.23k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  2.23k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  2.23k|            auto rd = make_reader<T, char_type>();
 6220|  2.23k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.23k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.23k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  2.23k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  2.23k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6149|  2.23k|    {
 6150|  2.23k|        const bool need_skipped_width =
 6151|  2.23k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 382, False: 1.85k]
  |  Branch (6151:33): [True: 48, False: 1.80k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  2.23k|        auto it = rng.begin();
 6155|  2.23k|        std::ptrdiff_t prefix_width = 0;
 6156|  2.23k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 48, False: 2.18k]
  ------------------
 6157|     48|            auto max_width_view = take_width(rng, specs.precision);
 6158|     48|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|     48|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     48|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     48|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 48]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     48|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     48|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|     48|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|     48|            it = prefix_result.first.base();
 6161|     48|            prefix_width = prefix_result.second;
 6162|     48|        }
 6163|  2.18k|        else {
 6164|  2.18k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  2.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  2.18k|            std::tie(it, prefix_width) = prefix_result;
 6166|  2.18k|        }
 6167|  2.23k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  2.23k|        std::ptrdiff_t value_width = 0;
 6171|  2.23k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 48, False: 2.18k]
  ------------------
 6172|     48|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 48]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|     48|            const auto initial_width = specs.precision - prefix_width;
 6180|     48|            auto max_width_view =
 6181|     48|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|     48|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|     48|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     48|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     48|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 46, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     46|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     46|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     46|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     46|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     46|    }                                                  \
  |  |  |  | 3939|     48|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      2|            it = w_it.base();
 6184|      2|            value_width = initial_width - w_it.count();
 6185|      2|        }
 6186|  2.18k|        else {
 6187|  2.18k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  2.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  2.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.10k, False: 78]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.10k|    }                                                  \
  |  | 3939|  2.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|     78|                                             specs, value, loc));
 6189|       |
 6190|     78|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 48, False: 30]
  ------------------
 6191|     48|                value_width = calculate_text_width(
 6192|     48|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|     48|                        .view());
 6194|     48|            }
 6195|     78|        }
 6196|       |
 6197|       |        // Read postfix
 6198|     80|        std::ptrdiff_t postfix_width = 0;
 6199|     80|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 70, False: 10]
  ------------------
 6200|     70|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|     70|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     70|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     70|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     70|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 70]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     70|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     70|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|     70|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|     70|                                 rd.skip_ws_before_read(), prefix_width,
 6203|     70|                                 value_width));
 6204|     70|            std::tie(it, postfix_width) = postfix_result;
 6205|     70|        }
 6206|       |
 6207|     80|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|     80|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 42, False: 38]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     42|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     42|    }
  ------------------
 6208|     80|            specs, prefix_width, value_width, postfix_width));
 6209|     38|        return it;
 6210|     80|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|     10|    {
 3532|     10|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|     10|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|     10|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 10]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|     20|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|     20|                parse_integer_digits_without_thsep(
 3551|     20|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|     20|                    prefix_result.parsed_base));
 3553|       |
 3554|     20|        auto buf = make_contiguous_buffer(
 3555|     20|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|     20|        SCN_TRY(result_it,
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|      0|                                    prefix_result.parsed_base));
 3559|       |
 3560|      0|        return ranges::next(prefix_result.iterator,
 3561|      0|                            ranges::distance(buf.view().begin(), result_it));
 3562|     20|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|     10|    {
 3532|     10|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|     10|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|     10|        if constexpr (!std::is_signed_v<T>) {
 3536|     10|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 0, False: 10]
  ------------------
 3537|      0|                return detail::unexpected_scan_error(
 3538|      0|                    scan_error::invalid_scanned_value,
 3539|      0|                    "Unexpected '-' sign when parsing an "
 3540|      0|                    "unsigned value");
 3541|      0|            }
 3542|     10|        }
 3543|       |
 3544|     10|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 10]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|     20|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|     20|                parse_integer_digits_without_thsep(
 3551|     20|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|     20|                    prefix_result.parsed_base));
 3553|       |
 3554|     20|        auto buf = make_contiguous_buffer(
 3555|     20|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|     20|        SCN_TRY(result_it,
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|      0|                                    prefix_result.parsed_base));
 3559|       |
 3560|      0|        return ranges::next(prefix_result.iterator,
 3561|      0|                            ranges::distance(buf.view().begin(), result_it));
 3562|     20|    }

LLVMFuzzerTestOneInput:
   68|    796|{
   69|    796|    scn::fuzz::run(data, size);
   70|    796|    return 0;
   71|    796|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|    796|{
   52|    796|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 796]
  |  Branch (52:35): [True: 0, False: 796]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|    796|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|    796|    run_for_source(sv);
   59|    796|    run_for_source(wsv_reinterpret);
   60|    796|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 796, False: 0]
  ------------------
   61|    796|        run_for_source(wsv_transcode);
   62|    796|    }
   63|    796|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|    796|{
   37|    796|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|    796|    run_for_type<char_type>(source);
   40|    796|    run_for_type<int>(source);
   41|    796|    run_for_type<unsigned>(source);
   42|    796|    run_for_type<double>(source);
   43|    796|    run_for_type<bool>(source);
   44|    796|    run_for_type<void*>(source);
   45|    796|    run_for_type<std::string>(source);
   46|    796|    run_for_type<std::wstring>(source);
   47|    796|    run_for_type<std::basic_string_view<char_type>>(source);
   48|    796|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|    796|{
   25|    796|    {
   26|    796|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|    796|    }
   28|    796|    {
   29|    796|        auto _ =
   30|    796|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|    796|    }
   32|    796|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|    796|{
   25|    796|    {
   26|    796|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|    796|    }
   28|    796|    {
   29|    796|        auto _ =
   30|    796|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|    796|    }
   32|    796|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|    796|{
   25|    796|    {
   26|    796|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|    796|    }
   28|    796|    {
   29|    796|        auto _ =
   30|    796|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|    796|    }
   32|    796|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|    796|{
   25|    796|    {
   26|    796|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|    796|    }
   28|    796|    {
   29|    796|        auto _ =
   30|    796|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|    796|    }
   32|    796|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|    796|{
   25|    796|    {
   26|    796|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|    796|    }
   28|    796|    {
   29|    796|        auto _ =
   30|    796|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|    796|    }
   32|    796|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|    796|{
   25|    796|    {
   26|    796|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|    796|    }
   28|    796|    {
   29|    796|        auto _ =
   30|    796|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|    796|    }
   32|    796|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|    796|{
   25|    796|    {
   26|    796|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|    796|    }
   28|    796|    {
   29|    796|        auto _ =
   30|    796|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|    796|    }
   32|    796|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|    796|{
   25|    796|    {
   26|    796|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|    796|    }
   28|    796|    {
   29|    796|        auto _ =
   30|    796|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|    796|    }
   32|    796|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|    796|{
   25|    796|    {
   26|    796|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|    796|    }
   28|    796|    {
   29|    796|        auto _ =
   30|    796|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|    796|    }
   32|    796|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  1.59k|{
   37|  1.59k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  1.59k|    run_for_type<char_type>(source);
   40|  1.59k|    run_for_type<int>(source);
   41|  1.59k|    run_for_type<unsigned>(source);
   42|  1.59k|    run_for_type<double>(source);
   43|  1.59k|    run_for_type<bool>(source);
   44|  1.59k|    run_for_type<void*>(source);
   45|  1.59k|    run_for_type<std::string>(source);
   46|  1.59k|    run_for_type<std::wstring>(source);
   47|  1.59k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  1.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  1.59k|{
   25|  1.59k|    {
   26|  1.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  1.59k|    }
   28|  1.59k|    {
   29|  1.59k|        auto _ =
   30|  1.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  1.59k|    }
   32|  1.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  1.59k|{
   25|  1.59k|    {
   26|  1.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  1.59k|    }
   28|  1.59k|    {
   29|  1.59k|        auto _ =
   30|  1.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  1.59k|    }
   32|  1.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  1.59k|{
   25|  1.59k|    {
   26|  1.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  1.59k|    }
   28|  1.59k|    {
   29|  1.59k|        auto _ =
   30|  1.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  1.59k|    }
   32|  1.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  1.59k|{
   25|  1.59k|    {
   26|  1.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  1.59k|    }
   28|  1.59k|    {
   29|  1.59k|        auto _ =
   30|  1.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  1.59k|    }
   32|  1.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  1.59k|{
   25|  1.59k|    {
   26|  1.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  1.59k|    }
   28|  1.59k|    {
   29|  1.59k|        auto _ =
   30|  1.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  1.59k|    }
   32|  1.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  1.59k|{
   25|  1.59k|    {
   26|  1.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  1.59k|    }
   28|  1.59k|    {
   29|  1.59k|        auto _ =
   30|  1.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  1.59k|    }
   32|  1.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  1.59k|{
   25|  1.59k|    {
   26|  1.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  1.59k|    }
   28|  1.59k|    {
   29|  1.59k|        auto _ =
   30|  1.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  1.59k|    }
   32|  1.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  1.59k|{
   25|  1.59k|    {
   26|  1.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  1.59k|    }
   28|  1.59k|    {
   29|  1.59k|        auto _ =
   30|  1.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  1.59k|    }
   32|  1.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  1.59k|{
   25|  1.59k|    {
   26|  1.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  1.59k|    }
   28|  1.59k|    {
   29|  1.59k|        auto _ =
   30|  1.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  1.59k|    }
   32|  1.59k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|    796|{
   52|    796|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|    796|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    796|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|    796|    string_buffer.resize(size);
   56|    796|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|    796|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|    796|    const auto wsv_reinterpret_size =
   61|    796|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 0, False: 796]
  ------------------
   62|    796|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|    796|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|    796|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|    796|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|    796|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|    796|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|    796|}

