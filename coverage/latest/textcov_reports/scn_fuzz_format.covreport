_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|    922|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  3.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  3.08M|{
 3807|  3.08M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  3.08M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  3.08M|    }
 3810|  3.08M|    else if constexpr (sizeof(U) == 2) {
 3811|  3.08M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  3.08M|    }
 3813|  3.08M|    else {
 3814|       |        // utf-32
 3815|  3.08M|        static_assert(sizeof(U) == 4);
 3816|  3.08M|        SCN_UNUSED(ch);
 3817|  3.08M|        return 1;
 3818|  3.08M|    }
 3819|  3.08M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  3.08M|{
 3771|  3.08M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  3.08M|    SCN_GCC_COMPAT_PUSH
 3774|  3.08M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  3.08M|    constexpr char lengths[] =
 3776|  3.08M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  3.08M|        "\1\1\1\1\1\1\1\1"
 3778|  3.08M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  3.08M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  3.08M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  3.08M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  3.08M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  3.08M|    SCN_GCC_COMPAT_POP
 3785|  3.08M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  2.84M|{
 4013|  2.84M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  2.84M|        return decode_utf8_code_point_exhaustive(input);
 4015|  2.84M|    }
 4016|  2.84M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  2.84M|        return decode_utf16_code_point_exhaustive(input);
 4018|  2.84M|    }
 4019|  2.84M|    else {
 4020|  2.84M|        SCN_EXPECT(input.size() == 1);
 4021|  2.84M|        auto cp = static_cast<char32_t>(input.front());
 4022|  2.84M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  2.84M|            return invalid_code_point;
 4024|  2.84M|        }
 4025|  2.84M|        return cp;
 4026|  2.84M|    }
 4027|  2.84M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  2.84M|{
 3826|  2.84M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  2.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  2.84M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  2.84M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  2.84M|    };
 3831|       |
 3832|  2.84M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 2.50M, False: 335k]
  ------------------
 3833|  2.50M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 84, False: 2.50M]
  ------------------
 3834|     84|            SCN_UNLIKELY_ATTR
 3835|     84|            return invalid_code_point;
 3836|     84|        }
 3837|  2.50M|        return static_cast<char32_t>(input[0]);
 3838|  2.50M|    }
 3839|       |
 3840|   335k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 301k, False: 34.1k]
  ------------------
 3841|   301k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 24, False: 301k]
  ------------------
 3842|     24|            SCN_UNLIKELY_ATTR
 3843|     24|            return invalid_code_point;
 3844|     24|        }
 3845|   301k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 4.65k, False: 296k]
  ------------------
 3846|  4.65k|            SCN_UNLIKELY_ATTR
 3847|  4.65k|            return invalid_code_point;
 3848|  4.65k|        }
 3849|       |
 3850|   296k|        char32_t cp{};
 3851|   296k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   296k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   296k|        return cp;
 3854|   301k|    }
 3855|       |
 3856|  34.1k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 29.2k, False: 4.92k]
  ------------------
 3857|  29.2k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 18, False: 29.1k]
  ------------------
 3858|     18|            SCN_UNLIKELY_ATTR
 3859|     18|            return invalid_code_point;
 3860|     18|        }
 3861|  29.1k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 3.19k, False: 26.0k]
  ------------------
 3862|  29.1k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 328, False: 25.6k]
  ------------------
 3863|  3.52k|            SCN_UNLIKELY_ATTR
 3864|  3.52k|            return invalid_code_point;
 3865|  3.52k|        }
 3866|       |
 3867|  25.6k|        char32_t cp{};
 3868|  25.6k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  25.6k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  25.6k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  25.6k|        return cp;
 3872|  29.1k|    }
 3873|       |
 3874|  4.92k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 4.92k, False: 0]
  ------------------
 3875|  4.92k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 4.92k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  4.92k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 523, False: 4.40k]
  ------------------
 3880|    523|            SCN_UNLIKELY_ATTR
 3881|    523|            return invalid_code_point;
 3882|    523|        }
 3883|  4.40k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 696, False: 3.70k]
  ------------------
 3884|  4.40k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 389, False: 3.31k]
  ------------------
 3885|  4.40k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 296, False: 3.02k]
  ------------------
 3886|  1.38k|            SCN_UNLIKELY_ATTR
 3887|  1.38k|            return invalid_code_point;
 3888|  1.38k|        }
 3889|       |
 3890|  3.02k|        char32_t cp{};
 3891|  3.02k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  3.02k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  3.02k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  3.02k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  3.02k|        return cp;
 3896|  4.40k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   367k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   367k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   367k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  1.20M|{
 3699|  1.20M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  1.20M|                                          decltype(first), decltype(last)> &&
 3701|  1.20M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  1.20M|        return {first, last};
 3703|  1.20M|    }
 3704|  1.20M|    else {
 3705|  1.20M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  1.20M|                                       to_address(first), to_address(last)))};
 3707|  1.20M|    }
 3708|  1.20M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  3.65M|{
  326|  3.65M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  3.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  3.65M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  3.65M|{
  304|  3.65M|    return p;
  305|  3.65M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|   758k|{
 3730|   758k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|   758k|                      typename std::basic_string_view<CharT>::iterator,
 3732|   758k|                      decltype(it)> &&
 3733|   758k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|   758k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|   758k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|   758k|        return it;
 3736|   758k|    }
 3737|   758k|    else {
 3738|   758k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|   758k|    }
 3740|   758k|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  4.70k|{
 8867|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.70k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.70k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5395|  9.41k|{
 5396|  9.41k|    detail::check_scan_arg_types<Args...>();
 5397|  9.41k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.41k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5134|  9.41k|{
 5135|  9.41k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  9.41k|                  "Scan argument types must be default constructible");
 5137|  9.41k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  9.41k|                  "Scan argument types must be Destructible");
 5139|  9.41k|    static_assert(
 5140|  9.41k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  9.41k|        "Scan argument types must not be references");
 5142|  9.41k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5348|  9.41k|    {
 5349|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  9.41k|    {
 5360|  9.41k|        return {detail::make_arg<
 5361|  9.41k|            kind, Context,
 5362|  9.41k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.41k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.41k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5169|  9.41k|{
 5170|  9.41k|    return make_value<Context>(value).ref_value;
 5171|  9.41k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5119|  9.41k|{
 5120|  9.41k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.41k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.41k|                                  needs_context_tag>) {
 5124|  9.41k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.41k|    }
 5126|  9.41k|    else {
 5127|  9.41k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.41k|            value, context_tag<Context>{}));
 5129|  9.41k|    }
 5130|  9.41k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4987|  9.41k|    {
 4988|  9.41k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4988:23): [Folded - Ignored]
  |  Branch (4988:23): [Folded - Ignored]
  ------------------
 4989|  9.41k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4989:23): [Folded - Ignored]
  ------------------
 4990|  9.41k|            return val;
 4991|  9.41k|        }
 4992|  9.41k|        else if constexpr (is_type_disabled<char_type>) {
 4993|  9.41k|            return unscannable_disabled{val};
 4994|  9.41k|        }
 4995|  9.41k|        else {
 4996|  9.41k|            SCN_UNUSED(val);
 4997|  9.41k|            return unscannable_char{};
 4998|  9.41k|        }
 4999|  9.41k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5088|  9.41k|{
 5089|  9.41k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  9.41k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  9.41k|    constexpr bool scannable_char =
 5093|  9.41k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  9.41k|    static_assert(scannable_char,
 5095|  9.41k|                  "Cannot scan an argument of an unsupported character "
 5096|  9.41k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  9.41k|    constexpr bool scannable_const =
 5099|  9.41k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  9.41k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  9.41k|    constexpr bool scannable_disabled =
 5103|  9.41k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  9.41k|    static_assert(scannable_disabled,
 5105|  9.41k|                  "Cannot scan an argument that has been disabled by "
 5106|  9.41k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  9.41k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  9.41k|    static_assert(
 5110|  9.41k|        scannable,
 5111|  9.41k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  9.41k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  9.41k|    return arg_value{arg};
 5115|  9.41k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4901|  9.41k|    {
 4902|  9.41k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  42.3k|{
 8654|  42.3k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  42.3k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|  42.3k|{
 8591|  42.3k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  42.3k|    auto result = vscan_impl(buffer, format, args);
 8594|  42.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.8k, False: 1.45k]
  |  |  ------------------
  ------------------
 8595|  40.8k|        return unexpected(result.error());
 8596|  40.8k|    }
 8597|  1.45k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  42.3k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4719|  84.6k|{
 4720|  84.6k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  84.6k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  84.6k|                  "\n"
 4724|  84.6k|                  "Unsupported range type given as input to a scanning "
 4725|  84.6k|                  "function.\n"
 4726|  84.6k|                  "A range needs to have a character type (value type) "
 4727|  84.6k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  84.6k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  84.6k|                  "to be included.\n"
 4730|  84.6k|                  "See the scnlib documentation for more details.");
 4731|  84.6k|    static_assert(
 4732|  84.6k|        !std::is_same_v<T, custom_char_traits>,
 4733|  84.6k|        "\n"
 4734|  84.6k|        "Unsupported range type given as input to a scanning "
 4735|  84.6k|        "function.\n"
 4736|  84.6k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  84.6k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  84.6k|        "not supported.");
 4739|  84.6k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  84.6k|                  "\n"
 4741|  84.6k|                  "Unsupported range type given as input to a scanning "
 4742|  84.6k|                  "function.\n"
 4743|  84.6k|                  "file_marker_found cannot be used as an "
 4744|  84.6k|                  "source range type to scn::scan.\n"
 4745|  84.6k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  84.6k|                  "and do not provide an explicit source range, "
 4747|  84.6k|                  "or use scn::scan with a FILE* directly.");
 4748|  84.6k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  84.6k|                  "\n"
 4750|  84.6k|                  "Unsupported range type given as input to a scanning "
 4751|  84.6k|                  "function.\n"
 4752|  84.6k|                  "In order to be scannable, a range needs to satisfy "
 4753|  84.6k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  84.6k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  84.6k|                  "\n"
 4756|  84.6k|                  "Unsupported range type given as input to a scanning "
 4757|  84.6k|                  "function.\n"
 4758|  84.6k|                  "A range needs to model forward_range and have a valid "
 4759|  84.6k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  84.6k|                  "Examples of scannable ranges are std::string, "
 4761|  84.6k|                  "std::string_view, "
 4762|  84.6k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  84.6k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  84.6k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  84.6k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|  84.6k|{
 4612|  84.6k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|  84.6k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|  84.6k|    }
 4616|  84.6k|    else {
 4617|  84.6k|        return invalid_char_type{};
 4618|  84.6k|    }
 4619|  84.6k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|   257k|    {
 1598|   257k|        return has_value();
 1599|   257k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|   514k|    {
  485|   514k|        return m_has_value;
  486|   514k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   253k|    {
 1604|   253k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   253k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   253k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   253k|        return this->get_unexpected().error();
 1606|   253k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   253k|    {
  468|   253k|        return m_unexpected;
  469|   253k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  1.50M|    {
  361|  1.50M|        return m_unexpected;
  362|  1.50M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|   849k|    {
  347|   849k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   849k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   849k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  81.7k|    {
 1476|  81.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  81.7k|    {
  447|  81.7k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|   880k|    {
  356|   880k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   880k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   880k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  84.6k|    {
 1177|  84.6k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  2.91k|{
 5923|  2.91k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  2.91k|                      ranges::iterator_t<SourceRange>>) {
 5925|  2.91k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  2.91k|    }
 5927|  2.91k|    else {
 5928|  2.91k|        auto it = ranges::begin(source);
 5929|  2.91k|        while (n > 0) {
 5930|  2.91k|            --n;
 5931|  2.91k|            ++it;
 5932|  2.91k|        }
 5933|  2.91k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  2.91k|    }
 5935|  2.91k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.91k|    {
 2724|  2.91k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.91k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.91k|    {
 2705|  2.91k|        return decay_copy(t.begin());
 2706|  2.91k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  48.1k|{
 1949|  48.1k|    return SCN_FWD(t);
  ------------------
  |  |  930|  48.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  48.1k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5909|  2.91k|{
 5910|  2.91k|    return ranges::end(source);
 5911|  2.91k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.91k|    {
 2781|  2.91k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.91k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.91k|    {
 2763|  2.91k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.91k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|   486k|    {
 3316|   486k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  4.25k|    {
 1653|  4.25k|        return value();
 1654|  4.25k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  4.25k|    {
 1627|  4.25k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.25k|        return this->get_value();
 1629|  4.25k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  4.25k|    {
  451|  4.25k|        return m_value;
  452|  4.25k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  2.91k|    {
 1430|  2.91k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  2.91k|    {
  437|  2.91k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7974|  9.41k|    {
 7975|  9.41k|        return m_str;
 7976|  9.41k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.41k|    {
 5426|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5378|  9.41k|    {
 5379|  9.41k|        return m_argptrs;
 5380|  9.41k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|  84.6k|    {
 5478|  84.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  9.41k|{
 8820|  9.41k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.20k, False: 210]
  |  |  ------------------
  ------------------
 8821|  9.20k|        return unexpected(result.error());
 8822|  9.20k|    }
 8823|    210|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    210|    static_cast<    \
  |  |  929|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    210|    static_cast<    \
  |  |  929|    210|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.41k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  84.6k|    {
 1598|  84.6k|        return has_value();
 1599|  84.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   169k|    {
  485|   169k|        return m_has_value;
  486|   169k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  81.7k|    {
 1604|  81.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  81.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  81.7k|        return this->get_unexpected().error();
 1606|  81.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  81.7k|    {
  468|  81.7k|        return m_unexpected;
  469|  81.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  9.20k|    {
 1476|  9.20k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  9.20k|    {
  447|  9.20k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.41k|    {
 1177|  9.41k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  2.91k|    {
 1653|  2.91k|        return value();
 1654|  2.91k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  2.91k|    {
 1627|  2.91k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.91k|        return this->get_value();
 1629|  2.91k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.91k|    {
  451|  2.91k|        return m_value;
  452|  2.91k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5829|    210|    {
 5830|    210|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  2.91k|    {
 5681|  2.91k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5615|    210|    {
 5616|    210|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|    210|    {
 1430|    210|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|    210|    {
  437|    210|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5373|  9.41k|    {
 5374|  9.41k|        return m_args;
 5375|  9.41k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  84.6k|{
 7691|  84.6k|    return s;
 7692|  84.6k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  84.6k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.41k|    {
 7971|  9.41k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  4.70k|{
 8934|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.70k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.70k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  42.3k|{
 8672|  42.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  42.3k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|  42.3k|{
 8607|  42.3k|#if !SCN_DISABLE_LOCALE
 8608|  42.3k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  42.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  42.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  42.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  42.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.8k, False: 1.45k]
  |  |  ------------------
  ------------------
 8615|  40.8k|        return unexpected(result.error());
 8616|  40.8k|    }
 8617|  1.45k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  42.3k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  4.70k|{
 8867|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.70k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.70k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5395|  9.41k|{
 5396|  9.41k|    detail::check_scan_arg_types<Args...>();
 5397|  9.41k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.41k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5134|  28.2k|{
 5135|  28.2k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  28.2k|                  "Scan argument types must be default constructible");
 5137|  28.2k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  28.2k|                  "Scan argument types must be Destructible");
 5139|  28.2k|    static_assert(
 5140|  28.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  28.2k|        "Scan argument types must not be references");
 5142|  28.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5348|  9.41k|    {
 5349|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  9.41k|    {
 5360|  9.41k|        return {detail::make_arg<
 5361|  9.41k|            kind, Context,
 5362|  9.41k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.41k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.41k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  9.41k|{
 5170|  9.41k|    return make_value<Context>(value).ref_value;
 5171|  9.41k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5119|  9.41k|{
 5120|  9.41k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.41k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.41k|                                  needs_context_tag>) {
 5124|  9.41k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.41k|    }
 5126|  9.41k|    else {
 5127|  9.41k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.41k|            value, context_tag<Context>{}));
 5129|  9.41k|    }
 5130|  9.41k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4958|  9.41k|    {                                                                        \
 4959|  9.41k|        return val;                                                          \
 4960|  9.41k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5088|  28.2k|{
 5089|  28.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  28.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  28.2k|    constexpr bool scannable_char =
 5093|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  28.2k|    static_assert(scannable_char,
 5095|  28.2k|                  "Cannot scan an argument of an unsupported character "
 5096|  28.2k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  28.2k|    constexpr bool scannable_const =
 5099|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  28.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  28.2k|    constexpr bool scannable_disabled =
 5103|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  28.2k|    static_assert(scannable_disabled,
 5105|  28.2k|                  "Cannot scan an argument that has been disabled by "
 5106|  28.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  28.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  28.2k|    static_assert(
 5110|  28.2k|        scannable,
 5111|  28.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  28.2k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  28.2k|    return arg_value{arg};
 5115|  28.2k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4901|  28.2k|    {
 4902|  28.2k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7974|  9.41k|    {
 7975|  9.41k|        return m_str;
 7976|  9.41k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.41k|    {
 5426|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5378|  9.41k|    {
 5379|  9.41k|        return m_argptrs;
 5380|  9.41k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  9.41k|{
 8820|  9.41k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.41k, False: 0]
  |  |  ------------------
  ------------------
 8821|  9.41k|        return unexpected(result.error());
 8822|  9.41k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.41k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  9.41k|    {
 1476|  9.41k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  9.41k|    {
  447|  9.41k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.41k|    {
 1177|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5373|  9.41k|    {
 5374|  9.41k|        return m_args;
 5375|  9.41k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.41k|    {
 7971|  9.41k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  4.70k|{
 8934|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.70k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.70k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  4.70k|{
 8867|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.70k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.70k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5395|  9.41k|{
 5396|  9.41k|    detail::check_scan_arg_types<Args...>();
 5397|  9.41k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.41k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5134|  28.2k|{
 5135|  28.2k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  28.2k|                  "Scan argument types must be default constructible");
 5137|  28.2k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  28.2k|                  "Scan argument types must be Destructible");
 5139|  28.2k|    static_assert(
 5140|  28.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  28.2k|        "Scan argument types must not be references");
 5142|  28.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5348|  9.41k|    {
 5349|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  9.41k|    {
 5360|  9.41k|        return {detail::make_arg<
 5361|  9.41k|            kind, Context,
 5362|  9.41k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.41k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.41k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  9.41k|{
 5170|  9.41k|    return make_value<Context>(value).ref_value;
 5171|  9.41k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5119|  9.41k|{
 5120|  9.41k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.41k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.41k|                                  needs_context_tag>) {
 5124|  9.41k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.41k|    }
 5126|  9.41k|    else {
 5127|  9.41k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.41k|            value, context_tag<Context>{}));
 5129|  9.41k|    }
 5130|  9.41k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4958|  9.41k|    {                                                                        \
 4959|  9.41k|        return val;                                                          \
 4960|  9.41k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5088|  28.2k|{
 5089|  28.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  28.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  28.2k|    constexpr bool scannable_char =
 5093|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  28.2k|    static_assert(scannable_char,
 5095|  28.2k|                  "Cannot scan an argument of an unsupported character "
 5096|  28.2k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  28.2k|    constexpr bool scannable_const =
 5099|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  28.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  28.2k|    constexpr bool scannable_disabled =
 5103|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  28.2k|    static_assert(scannable_disabled,
 5105|  28.2k|                  "Cannot scan an argument that has been disabled by "
 5106|  28.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  28.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  28.2k|    static_assert(
 5110|  28.2k|        scannable,
 5111|  28.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  28.2k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  28.2k|    return arg_value{arg};
 5115|  28.2k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4901|  28.2k|    {
 4902|  28.2k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7974|  9.41k|    {
 7975|  9.41k|        return m_str;
 7976|  9.41k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.41k|    {
 5426|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5378|  9.41k|    {
 5379|  9.41k|        return m_argptrs;
 5380|  9.41k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  9.41k|{
 8820|  9.41k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.41k, False: 0]
  |  |  ------------------
  ------------------
 8821|  9.41k|        return unexpected(result.error());
 8822|  9.41k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.41k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  9.41k|    {
 1476|  9.41k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  9.41k|    {
  447|  9.41k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.41k|    {
 1177|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5373|  9.41k|    {
 5374|  9.41k|        return m_args;
 5375|  9.41k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.41k|    {
 7971|  9.41k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  4.70k|{
 8934|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.70k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.70k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  4.70k|{
 8867|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.70k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.70k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  9.41k|{
 5396|  9.41k|    detail::check_scan_arg_types<Args...>();
 5397|  9.41k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.41k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  28.2k|{
 5135|  28.2k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  28.2k|                  "Scan argument types must be default constructible");
 5137|  28.2k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  28.2k|                  "Scan argument types must be Destructible");
 5139|  28.2k|    static_assert(
 5140|  28.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  28.2k|        "Scan argument types must not be references");
 5142|  28.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|  9.41k|    {
 5349|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  9.41k|    {
 5360|  9.41k|        return {detail::make_arg<
 5361|  9.41k|            kind, Context,
 5362|  9.41k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.41k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.41k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  9.41k|{
 5170|  9.41k|    return make_value<Context>(value).ref_value;
 5171|  9.41k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  9.41k|{
 5120|  9.41k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.41k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.41k|                                  needs_context_tag>) {
 5124|  9.41k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.41k|    }
 5126|  9.41k|    else {
 5127|  9.41k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.41k|            value, context_tag<Context>{}));
 5129|  9.41k|    }
 5130|  9.41k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  9.41k|    {                                                                        \
 4959|  9.41k|        return val;                                                          \
 4960|  9.41k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  28.2k|{
 5089|  28.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  28.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  28.2k|    constexpr bool scannable_char =
 5093|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  28.2k|    static_assert(scannable_char,
 5095|  28.2k|                  "Cannot scan an argument of an unsupported character "
 5096|  28.2k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  28.2k|    constexpr bool scannable_const =
 5099|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  28.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  28.2k|    constexpr bool scannable_disabled =
 5103|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  28.2k|    static_assert(scannable_disabled,
 5105|  28.2k|                  "Cannot scan an argument that has been disabled by "
 5106|  28.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  28.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  28.2k|    static_assert(
 5110|  28.2k|        scannable,
 5111|  28.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  28.2k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  28.2k|    return arg_value{arg};
 5115|  28.2k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  28.2k|    {
 4902|  28.2k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7974|  9.41k|    {
 7975|  9.41k|        return m_str;
 7976|  9.41k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.41k|    {
 5426|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  9.41k|    {
 5379|  9.41k|        return m_argptrs;
 5380|  9.41k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  9.41k|{
 8820|  9.41k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.41k, False: 0]
  |  |  ------------------
  ------------------
 8821|  9.41k|        return unexpected(result.error());
 8822|  9.41k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.41k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  9.41k|    {
 1476|  9.41k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  9.41k|    {
  447|  9.41k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.41k|    {
 1177|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  9.41k|    {
 5374|  9.41k|        return m_args;
 5375|  9.41k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.41k|    {
 7971|  9.41k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  4.70k|{
 8934|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.70k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.70k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  4.70k|{
 8867|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.70k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.70k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5395|  9.41k|{
 5396|  9.41k|    detail::check_scan_arg_types<Args...>();
 5397|  9.41k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.41k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5134|  28.2k|{
 5135|  28.2k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  28.2k|                  "Scan argument types must be default constructible");
 5137|  28.2k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  28.2k|                  "Scan argument types must be Destructible");
 5139|  28.2k|    static_assert(
 5140|  28.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  28.2k|        "Scan argument types must not be references");
 5142|  28.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5348|  9.41k|    {
 5349|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  9.41k|    {
 5360|  9.41k|        return {detail::make_arg<
 5361|  9.41k|            kind, Context,
 5362|  9.41k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.41k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.41k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  9.41k|{
 5170|  9.41k|    return make_value<Context>(value).ref_value;
 5171|  9.41k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5119|  9.41k|{
 5120|  9.41k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.41k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.41k|                                  needs_context_tag>) {
 5124|  9.41k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.41k|    }
 5126|  9.41k|    else {
 5127|  9.41k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.41k|            value, context_tag<Context>{}));
 5129|  9.41k|    }
 5130|  9.41k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4958|  9.41k|    {                                                                        \
 4959|  9.41k|        return val;                                                          \
 4960|  9.41k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5088|  28.2k|{
 5089|  28.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  28.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  28.2k|    constexpr bool scannable_char =
 5093|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  28.2k|    static_assert(scannable_char,
 5095|  28.2k|                  "Cannot scan an argument of an unsupported character "
 5096|  28.2k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  28.2k|    constexpr bool scannable_const =
 5099|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  28.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  28.2k|    constexpr bool scannable_disabled =
 5103|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  28.2k|    static_assert(scannable_disabled,
 5105|  28.2k|                  "Cannot scan an argument that has been disabled by "
 5106|  28.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  28.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  28.2k|    static_assert(
 5110|  28.2k|        scannable,
 5111|  28.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  28.2k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  28.2k|    return arg_value{arg};
 5115|  28.2k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4901|  28.2k|    {
 4902|  28.2k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7974|  9.41k|    {
 7975|  9.41k|        return m_str;
 7976|  9.41k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.41k|    {
 5426|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5378|  9.41k|    {
 5379|  9.41k|        return m_argptrs;
 5380|  9.41k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  9.41k|{
 8820|  9.41k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.41k, False: 0]
  |  |  ------------------
  ------------------
 8821|  9.41k|        return unexpected(result.error());
 8822|  9.41k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.41k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  9.41k|    {
 1476|  9.41k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  9.41k|    {
  447|  9.41k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.41k|    {
 1177|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5373|  9.41k|    {
 5374|  9.41k|        return m_args;
 5375|  9.41k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.41k|    {
 7971|  9.41k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  4.70k|{
 8934|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.70k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.70k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8866|  4.70k|{
 8867|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.70k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.70k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5395|  9.41k|{
 5396|  9.41k|    detail::check_scan_arg_types<Args...>();
 5397|  9.41k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.41k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5134|  28.2k|{
 5135|  28.2k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  28.2k|                  "Scan argument types must be default constructible");
 5137|  28.2k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  28.2k|                  "Scan argument types must be Destructible");
 5139|  28.2k|    static_assert(
 5140|  28.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  28.2k|        "Scan argument types must not be references");
 5142|  28.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5348|  9.41k|    {
 5349|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  9.41k|    {
 5360|  9.41k|        return {detail::make_arg<
 5361|  9.41k|            kind, Context,
 5362|  9.41k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.41k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.41k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  9.41k|{
 5170|  9.41k|    return make_value<Context>(value).ref_value;
 5171|  9.41k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5119|  9.41k|{
 5120|  9.41k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.41k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.41k|                                  needs_context_tag>) {
 5124|  9.41k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.41k|    }
 5126|  9.41k|    else {
 5127|  9.41k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.41k|            value, context_tag<Context>{}));
 5129|  9.41k|    }
 5130|  9.41k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4958|  9.41k|    {                                                                        \
 4959|  9.41k|        return val;                                                          \
 4960|  9.41k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5088|  28.2k|{
 5089|  28.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  28.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  28.2k|    constexpr bool scannable_char =
 5093|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  28.2k|    static_assert(scannable_char,
 5095|  28.2k|                  "Cannot scan an argument of an unsupported character "
 5096|  28.2k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  28.2k|    constexpr bool scannable_const =
 5099|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  28.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  28.2k|    constexpr bool scannable_disabled =
 5103|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  28.2k|    static_assert(scannable_disabled,
 5105|  28.2k|                  "Cannot scan an argument that has been disabled by "
 5106|  28.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  28.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  28.2k|    static_assert(
 5110|  28.2k|        scannable,
 5111|  28.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  28.2k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  28.2k|    return arg_value{arg};
 5115|  28.2k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4901|  28.2k|    {
 4902|  28.2k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7974|  9.41k|    {
 7975|  9.41k|        return m_str;
 7976|  9.41k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.41k|    {
 5426|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5378|  9.41k|    {
 5379|  9.41k|        return m_argptrs;
 5380|  9.41k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  9.41k|{
 8820|  9.41k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.41k, False: 0]
  |  |  ------------------
  ------------------
 8821|  9.41k|        return unexpected(result.error());
 8822|  9.41k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.41k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  9.41k|    {
 1476|  9.41k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  9.41k|    {
  447|  9.41k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.41k|    {
 1177|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5373|  9.41k|    {
 5374|  9.41k|        return m_args;
 5375|  9.41k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.41k|    {
 7971|  9.41k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8933|  4.70k|{
 8934|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.70k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.70k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8866|  4.70k|{
 8867|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.70k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.70k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  9.41k|{
 5396|  9.41k|    detail::check_scan_arg_types<Args...>();
 5397|  9.41k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.41k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|  28.2k|{
 5135|  28.2k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  28.2k|                  "Scan argument types must be default constructible");
 5137|  28.2k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  28.2k|                  "Scan argument types must be Destructible");
 5139|  28.2k|    static_assert(
 5140|  28.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  28.2k|        "Scan argument types must not be references");
 5142|  28.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  9.41k|    {
 5349|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  9.41k|    {
 5360|  9.41k|        return {detail::make_arg<
 5361|  9.41k|            kind, Context,
 5362|  9.41k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.41k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.41k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  9.41k|{
 5170|  9.41k|    return make_value<Context>(value).ref_value;
 5171|  9.41k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  9.41k|{
 5120|  9.41k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.41k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.41k|                                  needs_context_tag>) {
 5124|  9.41k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.41k|    }
 5126|  9.41k|    else {
 5127|  9.41k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.41k|            value, context_tag<Context>{}));
 5129|  9.41k|    }
 5130|  9.41k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  9.41k|    {                                                                        \
 4959|  9.41k|        return val;                                                          \
 4960|  9.41k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|  28.2k|{
 5089|  28.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  28.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  28.2k|    constexpr bool scannable_char =
 5093|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  28.2k|    static_assert(scannable_char,
 5095|  28.2k|                  "Cannot scan an argument of an unsupported character "
 5096|  28.2k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  28.2k|    constexpr bool scannable_const =
 5099|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  28.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  28.2k|    constexpr bool scannable_disabled =
 5103|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  28.2k|    static_assert(scannable_disabled,
 5105|  28.2k|                  "Cannot scan an argument that has been disabled by "
 5106|  28.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  28.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  28.2k|    static_assert(
 5110|  28.2k|        scannable,
 5111|  28.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  28.2k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  28.2k|    return arg_value{arg};
 5115|  28.2k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4901|  28.2k|    {
 4902|  28.2k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  9.41k|    {
 7975|  9.41k|        return m_str;
 7976|  9.41k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.41k|    {
 5426|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  9.41k|    {
 5379|  9.41k|        return m_argptrs;
 5380|  9.41k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  9.41k|{
 8820|  9.41k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.50k, False: 902]
  |  |  ------------------
  ------------------
 8821|  8.50k|        return unexpected(result.error());
 8822|  8.50k|    }
 8823|    902|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    902|    static_cast<    \
  |  |  929|    902|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    902|    static_cast<    \
  |  |  929|    902|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.41k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  8.50k|    {
 1476|  8.50k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  8.50k|    {
  626|  8.50k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  8.50k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  8.50k|    {
  689|  8.50k|        scn::detail::construct_at(unexpected_ptr(),
  690|  8.50k|                                  std::forward<Args>(args)...);
  691|  8.50k|        m_has_value = false;
  692|  8.50k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  53.9k|{
  392|  53.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  53.9k|        T(std::forward<Args>(args)...);
  394|  53.9k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  17.0k|    {
  718|  17.0k|        return reinterpret_cast<unexpected<E>*>(
  719|  17.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  17.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  17.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.41k|    {
 1177|  9.41k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    902|    {
 5830|    902|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.31k|    {
 5616|  1.31k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    902|    {
 1430|    902|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    902|    {
  616|    902|        construct(std::forward<Args>(args)...);
  617|    902|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    902|    {
  682|    902|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    902|        m_has_value = true;
  684|    902|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    902|{
  392|    902|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    902|        T(std::forward<Args>(args)...);
  394|    902|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|    902|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.80k|    {
  706|  1.80k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.80k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.80k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|  1.80k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  9.41k|    {
 5374|  9.41k|        return m_args;
 5375|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  9.41k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.41k|    {
 7971|  9.41k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  9.41k|    {
  631|  9.41k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 902, False: 8.50k]
  ------------------
  632|    902|            destroy_value();
  633|    902|        }
  634|  8.50k|        else {
  635|  8.50k|            destroy_unexpected();
  636|  8.50k|        }
  637|  9.41k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  9.41k|    {
  675|  9.41k|        return m_has_value;
  676|  9.41k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    902|    {
  696|    902|        scn::detail::destroy_at(value_ptr());
  697|    902|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    902|{
  398|    902|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    902|        for (auto& elem : *p) {
  400|    902|            scn::detail::destroy_at(&elem);
  401|    902|        }
  402|    902|    }
  403|    902|    else {
  404|    902|        p->~T();
  405|    902|    }
  406|    902|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  8.50k|    {
  700|  8.50k|        scn::detail::destroy_at(unexpected_ptr());
  701|  8.50k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  53.9k|{
  398|  53.9k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  53.9k|        for (auto& elem : *p) {
  400|  53.9k|            scn::detail::destroy_at(&elem);
  401|  53.9k|        }
  402|  53.9k|    }
  403|  53.9k|    else {
  404|  53.9k|        p->~T();
  405|  53.9k|    }
  406|  53.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8933|  4.70k|{
 8934|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.70k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.70k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8866|  4.70k|{
 8867|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.70k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.70k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  9.41k|{
 5396|  9.41k|    detail::check_scan_arg_types<Args...>();
 5397|  9.41k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.41k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  28.2k|{
 5135|  28.2k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  28.2k|                  "Scan argument types must be default constructible");
 5137|  28.2k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  28.2k|                  "Scan argument types must be Destructible");
 5139|  28.2k|    static_assert(
 5140|  28.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  28.2k|        "Scan argument types must not be references");
 5142|  28.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  9.41k|    {
 5349|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  9.41k|    {
 5360|  9.41k|        return {detail::make_arg<
 5361|  9.41k|            kind, Context,
 5362|  9.41k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.41k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.41k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  9.41k|{
 5170|  9.41k|    return make_value<Context>(value).ref_value;
 5171|  9.41k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  9.41k|{
 5120|  9.41k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.41k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.41k|                                  needs_context_tag>) {
 5124|  9.41k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.41k|    }
 5126|  9.41k|    else {
 5127|  9.41k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.41k|            value, context_tag<Context>{}));
 5129|  9.41k|    }
 5130|  9.41k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  9.41k|    {                                                                        \
 4959|  9.41k|        return val;                                                          \
 4960|  9.41k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  28.2k|{
 5089|  28.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  28.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  28.2k|    constexpr bool scannable_char =
 5093|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  28.2k|    static_assert(scannable_char,
 5095|  28.2k|                  "Cannot scan an argument of an unsupported character "
 5096|  28.2k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  28.2k|    constexpr bool scannable_const =
 5099|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  28.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  28.2k|    constexpr bool scannable_disabled =
 5103|  28.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  28.2k|    static_assert(scannable_disabled,
 5105|  28.2k|                  "Cannot scan an argument that has been disabled by "
 5106|  28.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  28.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  28.2k|    static_assert(
 5110|  28.2k|        scannable,
 5111|  28.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  28.2k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  28.2k|    return arg_value{arg};
 5115|  28.2k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4901|  28.2k|    {
 4902|  28.2k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  9.41k|    {
 7975|  9.41k|        return m_str;
 7976|  9.41k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.41k|    {
 5426|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  9.41k|    {
 5379|  9.41k|        return m_argptrs;
 5380|  9.41k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  9.41k|{
 8820|  9.41k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.50k, False: 902]
  |  |  ------------------
  ------------------
 8821|  8.50k|        return unexpected(result.error());
 8822|  8.50k|    }
 8823|    902|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    902|    static_cast<    \
  |  |  929|    902|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    902|    static_cast<    \
  |  |  929|    902|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.41k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  8.50k|    {
 1476|  8.50k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  8.50k|    {
  626|  8.50k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  8.50k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  8.50k|    {
  689|  8.50k|        scn::detail::construct_at(unexpected_ptr(),
  690|  8.50k|                                  std::forward<Args>(args)...);
  691|  8.50k|        m_has_value = false;
  692|  8.50k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  17.0k|    {
  718|  17.0k|        return reinterpret_cast<unexpected<E>*>(
  719|  17.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  17.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  17.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.41k|    {
 1177|  9.41k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    902|    {
 5830|    902|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.31k|    {
 5616|  1.31k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    902|    {
 1430|    902|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    902|    {
  616|    902|        construct(std::forward<Args>(args)...);
  617|    902|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    902|    {
  682|    902|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    902|        m_has_value = true;
  684|    902|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    902|{
  392|    902|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    902|        T(std::forward<Args>(args)...);
  394|    902|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|    902|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.80k|    {
  706|  1.80k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.80k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.80k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  1.80k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  9.41k|    {
 5374|  9.41k|        return m_args;
 5375|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  9.41k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.41k|    {
 7971|  9.41k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  9.41k|    {
  631|  9.41k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 902, False: 8.50k]
  ------------------
  632|    902|            destroy_value();
  633|    902|        }
  634|  8.50k|        else {
  635|  8.50k|            destroy_unexpected();
  636|  8.50k|        }
  637|  9.41k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  9.41k|    {
  675|  9.41k|        return m_has_value;
  676|  9.41k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    902|    {
  696|    902|        scn::detail::destroy_at(value_ptr());
  697|    902|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    902|{
  398|    902|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    902|        for (auto& elem : *p) {
  400|    902|            scn::detail::destroy_at(&elem);
  401|    902|        }
  402|    902|    }
  403|    902|    else {
  404|    902|        p->~T();
  405|    902|    }
  406|    902|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  8.50k|    {
  700|  8.50k|        scn::detail::destroy_at(unexpected_ptr());
  701|  8.50k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8933|  4.70k|{
 8934|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.70k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.70k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  4.70k|{
 8867|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  4.70k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  4.70k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|  9.41k|{
 5396|  9.41k|    detail::check_scan_arg_types<Args...>();
 5397|  9.41k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  9.41k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|  9.41k|{
 5135|  9.41k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  9.41k|                  "Scan argument types must be default constructible");
 5137|  9.41k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  9.41k|                  "Scan argument types must be Destructible");
 5139|  9.41k|    static_assert(
 5140|  9.41k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  9.41k|        "Scan argument types must not be references");
 5142|  9.41k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5348|  9.41k|    {
 5349|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  9.41k|    {
 5360|  9.41k|        return {detail::make_arg<
 5361|  9.41k|            kind, Context,
 5362|  9.41k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  9.41k|                                 typename Context::char_type>::value>(args)...};
 5364|  9.41k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|  9.41k|{
 5170|  9.41k|    return make_value<Context>(value).ref_value;
 5171|  9.41k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|  9.41k|{
 5120|  9.41k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.41k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.41k|                                  needs_context_tag>) {
 5124|  9.41k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.41k|    }
 5126|  9.41k|    else {
 5127|  9.41k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.41k|            value, context_tag<Context>{}));
 5129|  9.41k|    }
 5130|  9.41k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|  9.41k|    {                                                                        \
 4959|  9.41k|        return val;                                                          \
 4960|  9.41k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|  9.41k|{
 5089|  9.41k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  9.41k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  9.41k|    constexpr bool scannable_char =
 5093|  9.41k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  9.41k|    static_assert(scannable_char,
 5095|  9.41k|                  "Cannot scan an argument of an unsupported character "
 5096|  9.41k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  9.41k|    constexpr bool scannable_const =
 5099|  9.41k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  9.41k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  9.41k|    constexpr bool scannable_disabled =
 5103|  9.41k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  9.41k|    static_assert(scannable_disabled,
 5105|  9.41k|                  "Cannot scan an argument that has been disabled by "
 5106|  9.41k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  9.41k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  9.41k|    static_assert(
 5110|  9.41k|        scannable,
 5111|  9.41k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  9.41k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  9.41k|    return arg_value{arg};
 5115|  9.41k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4901|  9.41k|    {
 4902|  9.41k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7974|  9.41k|    {
 7975|  9.41k|        return m_str;
 7976|  9.41k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  9.41k|    {
 5426|  9.41k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|  9.41k|    {
 5379|  9.41k|        return m_argptrs;
 5380|  9.41k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  9.41k|{
 8820|  9.41k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.50k, False: 902]
  |  |  ------------------
  ------------------
 8821|  8.50k|        return unexpected(result.error());
 8822|  8.50k|    }
 8823|    902|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    902|    static_cast<    \
  |  |  929|    902|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    902|    static_cast<    \
  |  |  929|    902|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  9.41k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  8.50k|    {
 1476|  8.50k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  8.50k|    {
  447|  8.50k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.41k|    {
 1177|  9.41k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|    902|    {
 5830|    902|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|    902|    {
 5616|    902|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|    902|    {
 1430|    902|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|    902|    {
  437|    902|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|  9.41k|    {
 5374|  9.41k|        return m_args;
 5375|  9.41k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  9.41k|    {
 7971|  9.41k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  4.70k|{
 8934|  4.70k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  4.70k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  4.70k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  4.70k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5395|  18.8k|{
 5396|  18.8k|    detail::check_scan_arg_types<Args...>();
 5397|  18.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.8k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5134|  18.8k|{
 5135|  18.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  18.8k|                  "Scan argument types must be default constructible");
 5137|  18.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  18.8k|                  "Scan argument types must be Destructible");
 5139|  18.8k|    static_assert(
 5140|  18.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  18.8k|        "Scan argument types must not be references");
 5142|  18.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5348|  18.8k|    {
 5349|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  18.8k|    {
 5360|  18.8k|        return {detail::make_arg<
 5361|  18.8k|            kind, Context,
 5362|  18.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5169|  18.8k|{
 5170|  18.8k|    return make_value<Context>(value).ref_value;
 5171|  18.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5119|  18.8k|{
 5120|  18.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.8k|                                  needs_context_tag>) {
 5124|  18.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.8k|    }
 5126|  18.8k|    else {
 5127|  18.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.8k|            value, context_tag<Context>{}));
 5129|  18.8k|    }
 5130|  18.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4958|  18.8k|    {                                                                        \
 4959|  18.8k|        return val;                                                          \
 4960|  18.8k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5088|  18.8k|{
 5089|  18.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  18.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  18.8k|    constexpr bool scannable_char =
 5093|  18.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  18.8k|    static_assert(scannable_char,
 5095|  18.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  18.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  18.8k|    constexpr bool scannable_const =
 5099|  18.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  18.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  18.8k|    constexpr bool scannable_disabled =
 5103|  18.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  18.8k|    static_assert(scannable_disabled,
 5105|  18.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  18.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  18.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  18.8k|    static_assert(
 5110|  18.8k|        scannable,
 5111|  18.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  18.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  18.8k|    return arg_value{arg};
 5115|  18.8k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4901|  18.8k|    {
 4902|  18.8k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|  84.6k|{
 8591|  84.6k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  84.6k|    auto result = vscan_impl(buffer, format, args);
 8594|  84.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  84.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84.0k, False: 667]
  |  |  ------------------
  ------------------
 8595|  84.0k|        return unexpected(result.error());
 8596|  84.0k|    }
 8597|    667|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    667|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  84.6k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4719|   169k|{
 4720|   169k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   169k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   169k|                  "\n"
 4724|   169k|                  "Unsupported range type given as input to a scanning "
 4725|   169k|                  "function.\n"
 4726|   169k|                  "A range needs to have a character type (value type) "
 4727|   169k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   169k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   169k|                  "to be included.\n"
 4730|   169k|                  "See the scnlib documentation for more details.");
 4731|   169k|    static_assert(
 4732|   169k|        !std::is_same_v<T, custom_char_traits>,
 4733|   169k|        "\n"
 4734|   169k|        "Unsupported range type given as input to a scanning "
 4735|   169k|        "function.\n"
 4736|   169k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   169k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   169k|        "not supported.");
 4739|   169k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   169k|                  "\n"
 4741|   169k|                  "Unsupported range type given as input to a scanning "
 4742|   169k|                  "function.\n"
 4743|   169k|                  "file_marker_found cannot be used as an "
 4744|   169k|                  "source range type to scn::scan.\n"
 4745|   169k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   169k|                  "and do not provide an explicit source range, "
 4747|   169k|                  "or use scn::scan with a FILE* directly.");
 4748|   169k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   169k|                  "\n"
 4750|   169k|                  "Unsupported range type given as input to a scanning "
 4751|   169k|                  "function.\n"
 4752|   169k|                  "In order to be scannable, a range needs to satisfy "
 4753|   169k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   169k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   169k|                  "\n"
 4756|   169k|                  "Unsupported range type given as input to a scanning "
 4757|   169k|                  "function.\n"
 4758|   169k|                  "A range needs to model forward_range and have a valid "
 4759|   169k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   169k|                  "Examples of scannable ranges are std::string, "
 4761|   169k|                  "std::string_view, "
 4762|   169k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   169k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   169k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   169k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   169k|{
 4612|   169k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   169k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   169k|    }
 4616|   169k|    else {
 4617|   169k|        return invalid_char_type{};
 4618|   169k|    }
 4619|   169k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   168k|    {
 1476|   168k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   168k|    {
  447|   168k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   169k|    {
 1177|   169k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  1.33k|{
 5923|  1.33k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  1.33k|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.33k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  1.33k|    }
 5927|  1.33k|    else {
 5928|  1.33k|        auto it = ranges::begin(source);
 5929|  1.33k|        while (n > 0) {
 5930|  1.33k|            --n;
 5931|  1.33k|            ++it;
 5932|  1.33k|        }
 5933|  1.33k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  1.33k|    }
 5935|  1.33k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.33k|    {
 2724|  1.33k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.33k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.33k|    {
 2705|  1.33k|        return decay_copy(t.begin());
 2706|  1.33k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  18.0k|{
 1949|  18.0k|    return SCN_FWD(t);
  ------------------
  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  18.0k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5909|  1.33k|{
 5910|  1.33k|    return ranges::end(source);
 5911|  1.33k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.33k|    {
 2781|  1.33k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.33k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.33k|    {
 2763|  1.33k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.33k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|   290k|    {
 3316|   290k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.33k|    {
 1430|  1.33k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  1.33k|    {
  437|  1.33k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7974|  18.8k|    {
 7975|  18.8k|        return m_str;
 7976|  18.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.8k|    {
 5426|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5378|  18.8k|    {
 5379|  18.8k|        return m_argptrs;
 5380|  18.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   169k|    {
 5478|   169k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  18.8k|{
 8820|  18.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.7k, False: 92]
  |  |  ------------------
  ------------------
 8821|  18.7k|        return unexpected(result.error());
 8822|  18.7k|    }
 8823|     92|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     92|    static_cast<    \
  |  |  929|     92|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     92|    static_cast<    \
  |  |  929|     92|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.8k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   169k|    {
 1598|   169k|        return has_value();
 1599|   169k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   338k|    {
  485|   338k|        return m_has_value;
  486|   338k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   168k|    {
 1604|   168k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   168k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   168k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   168k|        return this->get_unexpected().error();
 1606|   168k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   168k|    {
  468|   168k|        return m_unexpected;
  469|   168k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  18.7k|    {
 1476|  18.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  18.7k|    {
  447|  18.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.8k|    {
 1177|  18.8k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  1.33k|    {
 1653|  1.33k|        return value();
 1654|  1.33k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.33k|    {
 1627|  1.33k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.33k|        return this->get_value();
 1629|  1.33k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.33k|    {
  451|  1.33k|        return m_value;
  452|  1.33k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5829|     92|    {
 5830|     92|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|  1.33k|    {
 5681|  1.33k|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5615|     92|    {
 5616|     92|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|     92|    {
 1430|     92|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|     92|    {
  437|     92|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5373|  18.8k|    {
 5374|  18.8k|        return m_args;
 5375|  18.8k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   169k|{
 7696|   169k|    return s;
 7697|   169k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   169k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  18.8k|    {
 7971|  18.8k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|  84.6k|{
 8607|  84.6k|#if !SCN_DISABLE_LOCALE
 8608|  84.6k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  84.6k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  84.6k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  84.6k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  84.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  84.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84.0k, False: 667]
  |  |  ------------------
  ------------------
 8615|  84.0k|        return unexpected(result.error());
 8616|  84.0k|    }
 8617|    667|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    667|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  84.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5395|  18.8k|{
 5396|  18.8k|    detail::check_scan_arg_types<Args...>();
 5397|  18.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5348|  18.8k|    {
 5349|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  18.8k|    {
 5360|  18.8k|        return {detail::make_arg<
 5361|  18.8k|            kind, Context,
 5362|  18.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  18.8k|{
 5170|  18.8k|    return make_value<Context>(value).ref_value;
 5171|  18.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5119|  18.8k|{
 5120|  18.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.8k|                                  needs_context_tag>) {
 5124|  18.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.8k|    }
 5126|  18.8k|    else {
 5127|  18.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.8k|            value, context_tag<Context>{}));
 5129|  18.8k|    }
 5130|  18.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4958|  18.8k|    {                                                                        \
 4959|  18.8k|        return val;                                                          \
 4960|  18.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7974|  18.8k|    {
 7975|  18.8k|        return m_str;
 7976|  18.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.8k|    {
 5426|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5378|  18.8k|    {
 5379|  18.8k|        return m_argptrs;
 5380|  18.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  18.8k|{
 8820|  18.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.8k, False: 0]
  |  |  ------------------
  ------------------
 8821|  18.8k|        return unexpected(result.error());
 8822|  18.8k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  18.8k|    {
 1476|  18.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  18.8k|    {
  447|  18.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.8k|    {
 1177|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5373|  18.8k|    {
 5374|  18.8k|        return m_args;
 5375|  18.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  18.8k|    {
 7971|  18.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5395|  18.8k|{
 5396|  18.8k|    detail::check_scan_arg_types<Args...>();
 5397|  18.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5348|  18.8k|    {
 5349|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  18.8k|    {
 5360|  18.8k|        return {detail::make_arg<
 5361|  18.8k|            kind, Context,
 5362|  18.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  18.8k|{
 5170|  18.8k|    return make_value<Context>(value).ref_value;
 5171|  18.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5119|  18.8k|{
 5120|  18.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.8k|                                  needs_context_tag>) {
 5124|  18.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.8k|    }
 5126|  18.8k|    else {
 5127|  18.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.8k|            value, context_tag<Context>{}));
 5129|  18.8k|    }
 5130|  18.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4958|  18.8k|    {                                                                        \
 4959|  18.8k|        return val;                                                          \
 4960|  18.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7974|  18.8k|    {
 7975|  18.8k|        return m_str;
 7976|  18.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.8k|    {
 5426|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5378|  18.8k|    {
 5379|  18.8k|        return m_argptrs;
 5380|  18.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  18.8k|{
 8820|  18.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.8k, False: 0]
  |  |  ------------------
  ------------------
 8821|  18.8k|        return unexpected(result.error());
 8822|  18.8k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  18.8k|    {
 1476|  18.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  18.8k|    {
  447|  18.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.8k|    {
 1177|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5373|  18.8k|    {
 5374|  18.8k|        return m_args;
 5375|  18.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  18.8k|    {
 7971|  18.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|  18.8k|{
 5396|  18.8k|    detail::check_scan_arg_types<Args...>();
 5397|  18.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|  18.8k|    {
 5349|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  18.8k|    {
 5360|  18.8k|        return {detail::make_arg<
 5361|  18.8k|            kind, Context,
 5362|  18.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  18.8k|{
 5170|  18.8k|    return make_value<Context>(value).ref_value;
 5171|  18.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|  18.8k|{
 5120|  18.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.8k|                                  needs_context_tag>) {
 5124|  18.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.8k|    }
 5126|  18.8k|    else {
 5127|  18.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.8k|            value, context_tag<Context>{}));
 5129|  18.8k|    }
 5130|  18.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|  18.8k|    {                                                                        \
 4959|  18.8k|        return val;                                                          \
 4960|  18.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7974|  18.8k|    {
 7975|  18.8k|        return m_str;
 7976|  18.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.8k|    {
 5426|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|  18.8k|    {
 5379|  18.8k|        return m_argptrs;
 5380|  18.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  18.8k|{
 8820|  18.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.8k, False: 0]
  |  |  ------------------
  ------------------
 8821|  18.8k|        return unexpected(result.error());
 8822|  18.8k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  18.8k|    {
 1476|  18.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  18.8k|    {
  447|  18.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.8k|    {
 1177|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|  18.8k|    {
 5374|  18.8k|        return m_args;
 5375|  18.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  18.8k|    {
 7971|  18.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5395|  18.8k|{
 5396|  18.8k|    detail::check_scan_arg_types<Args...>();
 5397|  18.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5348|  18.8k|    {
 5349|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  18.8k|    {
 5360|  18.8k|        return {detail::make_arg<
 5361|  18.8k|            kind, Context,
 5362|  18.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  18.8k|{
 5170|  18.8k|    return make_value<Context>(value).ref_value;
 5171|  18.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5119|  18.8k|{
 5120|  18.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.8k|                                  needs_context_tag>) {
 5124|  18.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.8k|    }
 5126|  18.8k|    else {
 5127|  18.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.8k|            value, context_tag<Context>{}));
 5129|  18.8k|    }
 5130|  18.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4958|  18.8k|    {                                                                        \
 4959|  18.8k|        return val;                                                          \
 4960|  18.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7974|  18.8k|    {
 7975|  18.8k|        return m_str;
 7976|  18.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.8k|    {
 5426|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5378|  18.8k|    {
 5379|  18.8k|        return m_argptrs;
 5380|  18.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  18.8k|{
 8820|  18.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.8k, False: 0]
  |  |  ------------------
  ------------------
 8821|  18.8k|        return unexpected(result.error());
 8822|  18.8k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  18.8k|    {
 1476|  18.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  18.8k|    {
  447|  18.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.8k|    {
 1177|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5373|  18.8k|    {
 5374|  18.8k|        return m_args;
 5375|  18.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  18.8k|    {
 7971|  18.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5395|  18.8k|{
 5396|  18.8k|    detail::check_scan_arg_types<Args...>();
 5397|  18.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5348|  18.8k|    {
 5349|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  18.8k|    {
 5360|  18.8k|        return {detail::make_arg<
 5361|  18.8k|            kind, Context,
 5362|  18.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  18.8k|{
 5170|  18.8k|    return make_value<Context>(value).ref_value;
 5171|  18.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5119|  18.8k|{
 5120|  18.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.8k|                                  needs_context_tag>) {
 5124|  18.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.8k|    }
 5126|  18.8k|    else {
 5127|  18.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.8k|            value, context_tag<Context>{}));
 5129|  18.8k|    }
 5130|  18.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4958|  18.8k|    {                                                                        \
 4959|  18.8k|        return val;                                                          \
 4960|  18.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7974|  18.8k|    {
 7975|  18.8k|        return m_str;
 7976|  18.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.8k|    {
 5426|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5378|  18.8k|    {
 5379|  18.8k|        return m_argptrs;
 5380|  18.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  18.8k|{
 8820|  18.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.8k, False: 0]
  |  |  ------------------
  ------------------
 8821|  18.8k|        return unexpected(result.error());
 8822|  18.8k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  18.8k|    {
 1476|  18.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  18.8k|    {
  447|  18.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.8k|    {
 1177|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5373|  18.8k|    {
 5374|  18.8k|        return m_args;
 5375|  18.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  18.8k|    {
 7971|  18.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  18.8k|{
 5396|  18.8k|    detail::check_scan_arg_types<Args...>();
 5397|  18.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  18.8k|    {
 5349|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  18.8k|    {
 5360|  18.8k|        return {detail::make_arg<
 5361|  18.8k|            kind, Context,
 5362|  18.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  18.8k|{
 5170|  18.8k|    return make_value<Context>(value).ref_value;
 5171|  18.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  18.8k|{
 5120|  18.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.8k|                                  needs_context_tag>) {
 5124|  18.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.8k|    }
 5126|  18.8k|    else {
 5127|  18.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.8k|            value, context_tag<Context>{}));
 5129|  18.8k|    }
 5130|  18.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  18.8k|    {                                                                        \
 4959|  18.8k|        return val;                                                          \
 4960|  18.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  18.8k|    {
 7975|  18.8k|        return m_str;
 7976|  18.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.8k|    {
 5426|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  18.8k|    {
 5379|  18.8k|        return m_argptrs;
 5380|  18.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  18.8k|{
 8820|  18.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.4k, False: 414]
  |  |  ------------------
  ------------------
 8821|  18.4k|        return unexpected(result.error());
 8822|  18.4k|    }
 8823|    414|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    414|    static_cast<    \
  |  |  929|    414|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    414|    static_cast<    \
  |  |  929|    414|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  18.4k|    {
 1476|  18.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  18.4k|    {
  626|  18.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  18.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  18.4k|    {
  689|  18.4k|        scn::detail::construct_at(unexpected_ptr(),
  690|  18.4k|                                  std::forward<Args>(args)...);
  691|  18.4k|        m_has_value = false;
  692|  18.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  36.8k|    {
  718|  36.8k|        return reinterpret_cast<unexpected<E>*>(
  719|  36.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  36.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  36.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.8k|    {
 1177|  18.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    414|    {
 5830|    414|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    414|    {
 1430|    414|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    414|    {
  616|    414|        construct(std::forward<Args>(args)...);
  617|    414|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    414|    {
  682|    414|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    414|        m_has_value = true;
  684|    414|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    414|{
  392|    414|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    414|        T(std::forward<Args>(args)...);
  394|    414|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|    414|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    828|    {
  706|    828|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    828|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    828|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|    828|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  18.8k|    {
 5374|  18.8k|        return m_args;
 5375|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  18.8k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  18.8k|    {
 7971|  18.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  18.8k|    {
  631|  18.8k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 414, False: 18.4k]
  ------------------
  632|    414|            destroy_value();
  633|    414|        }
  634|  18.4k|        else {
  635|  18.4k|            destroy_unexpected();
  636|  18.4k|        }
  637|  18.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  18.8k|    {
  675|  18.8k|        return m_has_value;
  676|  18.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    414|    {
  696|    414|        scn::detail::destroy_at(value_ptr());
  697|    414|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    414|{
  398|    414|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    414|        for (auto& elem : *p) {
  400|    414|            scn::detail::destroy_at(&elem);
  401|    414|        }
  402|    414|    }
  403|    414|    else {
  404|    414|        p->~T();
  405|    414|    }
  406|    414|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  18.4k|    {
  700|  18.4k|        scn::detail::destroy_at(unexpected_ptr());
  701|  18.4k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  18.8k|{
 5396|  18.8k|    detail::check_scan_arg_types<Args...>();
 5397|  18.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  18.8k|    {
 5349|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  18.8k|    {
 5360|  18.8k|        return {detail::make_arg<
 5361|  18.8k|            kind, Context,
 5362|  18.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  18.8k|{
 5170|  18.8k|    return make_value<Context>(value).ref_value;
 5171|  18.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  18.8k|{
 5120|  18.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.8k|                                  needs_context_tag>) {
 5124|  18.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.8k|    }
 5126|  18.8k|    else {
 5127|  18.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.8k|            value, context_tag<Context>{}));
 5129|  18.8k|    }
 5130|  18.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  18.8k|    {                                                                        \
 4959|  18.8k|        return val;                                                          \
 4960|  18.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  18.8k|    {
 7975|  18.8k|        return m_str;
 7976|  18.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.8k|    {
 5426|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  18.8k|    {
 5379|  18.8k|        return m_argptrs;
 5380|  18.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  18.8k|{
 8820|  18.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.4k, False: 414]
  |  |  ------------------
  ------------------
 8821|  18.4k|        return unexpected(result.error());
 8822|  18.4k|    }
 8823|    414|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    414|    static_cast<    \
  |  |  929|    414|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    414|    static_cast<    \
  |  |  929|    414|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  18.4k|    {
 1476|  18.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  18.4k|    {
  626|  18.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  18.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  18.4k|    {
  689|  18.4k|        scn::detail::construct_at(unexpected_ptr(),
  690|  18.4k|                                  std::forward<Args>(args)...);
  691|  18.4k|        m_has_value = false;
  692|  18.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  36.8k|    {
  718|  36.8k|        return reinterpret_cast<unexpected<E>*>(
  719|  36.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  36.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  36.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.8k|    {
 1177|  18.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    414|    {
 5830|    414|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    414|    {
 1430|    414|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    414|    {
  616|    414|        construct(std::forward<Args>(args)...);
  617|    414|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    414|    {
  682|    414|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    414|        m_has_value = true;
  684|    414|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    414|{
  392|    414|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    414|        T(std::forward<Args>(args)...);
  394|    414|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|    414|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    828|    {
  706|    828|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    828|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    828|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|    828|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  18.8k|    {
 5374|  18.8k|        return m_args;
 5375|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  18.8k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  18.8k|    {
 7971|  18.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  18.8k|    {
  631|  18.8k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 414, False: 18.4k]
  ------------------
  632|    414|            destroy_value();
  633|    414|        }
  634|  18.4k|        else {
  635|  18.4k|            destroy_unexpected();
  636|  18.4k|        }
  637|  18.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  18.8k|    {
  675|  18.8k|        return m_has_value;
  676|  18.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    414|    {
  696|    414|        scn::detail::destroy_at(value_ptr());
  697|    414|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    414|{
  398|    414|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    414|        for (auto& elem : *p) {
  400|    414|            scn::detail::destroy_at(&elem);
  401|    414|        }
  402|    414|    }
  403|    414|    else {
  404|    414|        p->~T();
  405|    414|    }
  406|    414|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  18.4k|    {
  700|  18.4k|        scn::detail::destroy_at(unexpected_ptr());
  701|  18.4k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|  18.8k|{
 5396|  18.8k|    detail::check_scan_arg_types<Args...>();
 5397|  18.8k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.8k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|  18.8k|{
 5135|  18.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  18.8k|                  "Scan argument types must be default constructible");
 5137|  18.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  18.8k|                  "Scan argument types must be Destructible");
 5139|  18.8k|    static_assert(
 5140|  18.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  18.8k|        "Scan argument types must not be references");
 5142|  18.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5348|  18.8k|    {
 5349|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  18.8k|    {
 5360|  18.8k|        return {detail::make_arg<
 5361|  18.8k|            kind, Context,
 5362|  18.8k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.8k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|  18.8k|{
 5170|  18.8k|    return make_value<Context>(value).ref_value;
 5171|  18.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|  18.8k|{
 5120|  18.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.8k|                                  needs_context_tag>) {
 5124|  18.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.8k|    }
 5126|  18.8k|    else {
 5127|  18.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.8k|            value, context_tag<Context>{}));
 5129|  18.8k|    }
 5130|  18.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|  18.8k|    {                                                                        \
 4959|  18.8k|        return val;                                                          \
 4960|  18.8k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|  18.8k|{
 5089|  18.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  18.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  18.8k|    constexpr bool scannable_char =
 5093|  18.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  18.8k|    static_assert(scannable_char,
 5095|  18.8k|                  "Cannot scan an argument of an unsupported character "
 5096|  18.8k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  18.8k|    constexpr bool scannable_const =
 5099|  18.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  18.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  18.8k|    constexpr bool scannable_disabled =
 5103|  18.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  18.8k|    static_assert(scannable_disabled,
 5105|  18.8k|                  "Cannot scan an argument that has been disabled by "
 5106|  18.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  18.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  18.8k|    static_assert(
 5110|  18.8k|        scannable,
 5111|  18.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  18.8k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  18.8k|    return arg_value{arg};
 5115|  18.8k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4901|  18.8k|    {
 4902|  18.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7974|  18.8k|    {
 7975|  18.8k|        return m_str;
 7976|  18.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.8k|    {
 5426|  18.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|  18.8k|    {
 5379|  18.8k|        return m_argptrs;
 5380|  18.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  18.8k|{
 8820|  18.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.4k, False: 414]
  |  |  ------------------
  ------------------
 8821|  18.4k|        return unexpected(result.error());
 8822|  18.4k|    }
 8823|    414|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    414|    static_cast<    \
  |  |  929|    414|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    414|    static_cast<    \
  |  |  929|    414|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  18.4k|    {
 1476|  18.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  18.4k|    {
  447|  18.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.8k|    {
 1177|  18.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|    414|    {
 5830|    414|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|    414|    {
 5616|    414|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|    414|    {
 1430|    414|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|    414|    {
  437|    414|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|  18.8k|    {
 5374|  18.8k|        return m_args;
 5375|  18.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  18.8k|    {
 7971|  18.8k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|   482k|    {
 3568|   482k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   482k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|   482k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  2.09M|    {
 3574|  2.09M|        return m_code == good;
 3575|  2.09M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|  67.2k|    {
 3585|  67.2k|        return m_code;
 3586|  67.2k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6180|  3.75k|    {
 6181|  3.75k|        return m_size;
 6182|  3.75k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6221|  4.11k|    {
 6222|  4.11k|        SCN_GCC_COMPAT_PUSH
 6223|  4.11k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6224|  4.11k|        switch (type) {
 6225|  1.78k|            case presentation_type::none:
  ------------------
  |  Branch (6225:13): [True: 1.78k, False: 2.32k]
  ------------------
 6226|  1.78k|                return 10;
 6227|     74|            case presentation_type::int_generic:
  ------------------
  |  Branch (6227:13): [True: 74, False: 4.03k]
  ------------------
 6228|     74|                return 0;
 6229|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6229:13): [True: 0, False: 4.11k]
  ------------------
 6230|      0|                return arbitrary_base;
 6231|       |
 6232|     38|            case presentation_type::int_binary:
  ------------------
  |  Branch (6232:13): [True: 38, False: 4.07k]
  ------------------
 6233|     38|                return 2;
 6234|     66|            case presentation_type::int_octal:
  ------------------
  |  Branch (6234:13): [True: 66, False: 4.04k]
  ------------------
 6235|     66|                return 8;
 6236|     40|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6236:13): [True: 40, False: 4.07k]
  ------------------
 6237|     84|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6237:13): [True: 44, False: 4.06k]
  ------------------
 6238|     84|                return 10;
 6239|  2.06k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6239:13): [True: 2.06k, False: 2.05k]
  ------------------
 6240|  2.06k|                return 16;
 6241|       |
 6242|      0|            default:
  ------------------
  |  Branch (6242:13): [True: 0, False: 4.11k]
  ------------------
 6243|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6244|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6245|  4.11k|        }
 6246|  4.11k|        SCN_GCC_COMPAT_POP
 6247|  4.11k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  73.2k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6262|  8.16k|    {
 6263|  8.16k|        m_specs.align = align;
 6264|  8.16k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|    368|    {
 6272|    368|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|    368|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|    368|            m_specs.localized = true;
 6274|    368|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|    368|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  11.6k|    {
 6282|  11.6k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 11.6k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  11.6k|        m_specs.width = width;
 6289|  11.6k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6291|  8.54k|    {
 6292|  8.54k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6292:13): [True: 86, False: 8.46k]
  ------------------
 6293|       |            // clang-format off
 6294|     86|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6295|       |            // clang-format on
 6296|     86|        }
 6297|       |
 6298|  8.46k|        m_specs.precision = prec;
 6299|  8.46k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  75.4k|    {
 6303|  75.4k|        m_specs.type = type;
 6304|  75.4k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6307|  1.10M|    {
 6308|  1.10M|        const auto cp_value = static_cast<unsigned>(cp);
 6309|  1.10M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  1.10M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 950k, False: 150k]
  |  |  ------------------
  ------------------
 6310|   950k|            m_specs.charset_literals[cp_value / 8] |=
 6311|   950k|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6312|   950k|        }
 6313|   150k|        else {
 6314|   150k|            m_specs.charset_has_nonascii = true;
 6315|   150k|        }
 6316|  1.10M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  9.15k|    {
 6320|  9.15k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  9.15k|        const auto end_value = static_cast<unsigned>(end);
 6322|  9.15k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  9.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  9.15k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  9.15k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.84k, False: 4.31k]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  4.84k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  4.84k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|   320k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 315k, False: 4.84k]
  ------------------
 6329|   315k|                m_specs.charset_literals[v / 8] |=
 6330|   315k|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|   315k|            }
 6332|  4.84k|        }
 6333|  4.31k|        else {
 6334|  4.31k|            m_specs.charset_has_nonascii = true;
 6335|  4.31k|        }
 6336|  9.15k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6339|  2.63k|    {
 6340|  2.63k|        m_specs.charset_is_inverted = true;
 6341|  2.63k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6358|  43.1k|    {
 6359|  43.1k|        m_specs.regexp_flags = flags;
 6360|  43.1k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  10.3k|    {
 6365|  10.3k|        SCN_UNLIKELY_ATTR
 6366|  10.3k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  10.3k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  1.19M|    {
 6376|  1.19M|        return static_cast<bool>(m_error);
 6377|  1.19M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|  67.2k|{
 3609|  67.2k|    return a.code() == b;
 3610|  67.2k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|  67.2k|{
 3613|  67.2k|    return !(a == b);
 3614|  67.2k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3907|   105k|{
 3908|   105k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3909|       |
 3910|   105k|    const auto is_trailing_code_unit = [](char ch) {
 3911|   105k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|   105k|    };
 3913|       |
 3914|   105k|    if (input.size() == 1) {
  ------------------
  |  Branch (3914:9): [True: 93.0k, False: 12.8k]
  ------------------
 3915|  93.0k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|  93.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  93.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3916|  93.0k|        return static_cast<char32_t>(input[0]);
 3917|  93.0k|    }
 3918|       |
 3919|  12.8k|    if (input.size() == 2) {
  ------------------
  |  Branch (3919:9): [True: 11.9k, False: 872]
  ------------------
 3920|  11.9k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3921|  11.9k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3922|       |
 3923|  11.9k|        char32_t cp{};
 3924|  11.9k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3925|  11.9k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3926|  11.9k|        return cp;
 3927|  11.9k|    }
 3928|       |
 3929|    872|    if (input.size() == 3) {
  ------------------
  |  Branch (3929:9): [True: 748, False: 124]
  ------------------
 3930|    748|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|    748|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    748|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3931|    748|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    748|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    748|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3932|    748|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    748|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    748|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3933|       |
 3934|    748|        char32_t cp{};
 3935|    748|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3936|    748|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3937|    748|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3938|    748|        return cp;
 3939|    748|    }
 3940|       |
 3941|    124|    if (input.size() == 4) {
  ------------------
  |  Branch (3941:9): [True: 124, False: 0]
  ------------------
 3942|    124|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|    124|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3944|    124|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3945|    124|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3946|    124|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3947|       |
 3948|    124|        char32_t cp{};
 3949|    124|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3950|    124|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3951|    124|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3952|    124|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3953|    124|        return cp;
 3954|    124|    }
 3955|       |
 3956|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3957|       |    // gcc 7 thinks we'll get here, even when we won't
 3958|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3959|      0|#endif
 3960|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3961|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6110|  62.4k|{
 6111|  62.4k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6112|  62.4k|                                    static_cast<unsigned>(b));
 6113|  62.4k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6115|  5.40k|{
 6116|  5.40k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6117|  5.40k|                                    static_cast<unsigned>(b));
 6118|  5.40k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6130|  5.40k|{
 6131|  5.40k|    return a = a | b;
 6132|  5.40k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|    928|{
 7063|    928|    switch (type) {
 7064|    100|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 100, False: 828]
  ------------------
 7065|    100|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 928]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 928]
  ------------------
 7069|     92|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 92, False: 836]
  ------------------
 7070|     92|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 928]
  ------------------
 7071|     92|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 928]
  ------------------
 7072|     92|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 928]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 928]
  ------------------
 7076|     92|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 92, False: 836]
  ------------------
 7077|     92|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 928]
  ------------------
 7078|     92|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 928]
  ------------------
 7079|     92|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|     92|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 92, False: 836]
  ------------------
 7082|     92|            return arg_type_category::pointer;
 7083|     92|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 92, False: 836]
  ------------------
 7084|     92|            return arg_type_category::boolean;
 7085|     50|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 50, False: 878]
  ------------------
 7086|     92|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 42, False: 886]
  ------------------
 7087|     92|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 928]
  ------------------
 7088|     92|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 928]
  ------------------
 7091|     92|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 92, False: 836]
  ------------------
 7092|     92|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 928]
  ------------------
 7093|     92|            return arg_type_category::floating;
 7094|       |
 7095|     50|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 50, False: 878]
  ------------------
 7096|    142|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 92, False: 836]
  ------------------
 7097|    184|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 42, False: 886]
  ------------------
 7098|    276|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 92, False: 836]
  ------------------
 7099|    276|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 928]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 928]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|    928|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|    928|            SCN_CLANG_POP
 7110|    928|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|    928|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  1.19k|{
 3654|  1.19k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.19k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7148|  14.9k|{
 7149|  14.9k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.8k, False: 2.08k]
  |  |  ------------------
  ------------------
 7150|  12.8k|        return handler.on_error("Invalid type specifier for integer type");
 7151|  12.8k|    }
 7152|  2.08k|    if (specs.localized) {
  ------------------
  |  Branch (7152:9): [True: 112, False: 1.97k]
  ------------------
 7153|    112|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 104]
  |  |  ------------------
  ------------------
 7154|       |            // clang-format off
 7155|      8|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7156|       |            // clang-format on
 7157|      8|            return;
 7158|      8|        }
 7159|    104|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 104]
  |  |  ------------------
  ------------------
 7160|       |            // clang-format off
 7161|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7162|       |            // clang-format on
 7163|      0|        }
 7164|    104|    }
 7165|  2.08k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|     52|{
 1949|     52|    return SCN_FWD(t);
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|     52|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.09k|{
 3654|  2.09k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.09k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  7.49k|{
 7193|  7.49k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 6.57k, False: 916]
  ------------------
 7194|  7.49k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 128, False: 6.44k]
  ------------------
 7195|  6.57k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 6.34k, False: 100]
  ------------------
 7196|  6.47k|        SCN_UNLIKELY_ATTR
 7197|  6.47k|        return handler.on_error("Invalid type specifier for float type");
 7198|  6.47k|    }
 7199|  7.49k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  484|  28.5k|    {
  485|  28.5k|        return m_has_value;
  486|  28.5k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1597|  14.2k|    {
 1598|  14.2k|        return has_value();
 1599|  14.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  450|  14.2k|    {
  451|  14.2k|        return m_value;
  452|  14.2k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1626|  14.2k|    {
 1627|  14.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  14.2k|        return this->get_value();
 1629|  14.2k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1662|  14.2k|    {
 1663|  14.2k|        return std::move(value());
 1664|  14.2k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3653|  6.66k|{
 3654|  6.66k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  6.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  6.66k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3653|  4.84k|{
 3654|  4.84k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  4.84k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3653|    168|{
 3654|    168|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    168|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3653|     78|{
 3654|     78|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     78|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     78|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  1.04k|{
 3654|  1.04k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.04k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  22.2k|{
 7205|  22.2k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 2.67k, False: 19.5k]
  ------------------
 7206|  22.2k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 780, False: 18.7k]
  ------------------
 7207|  22.2k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 3.69k, False: 15.0k]
  ------------------
 7208|  22.2k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 13.5k, False: 1.50k]
  ------------------
 7209|  22.2k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 750, False: 756]
  ------------------
 7210|  21.4k|        return;
 7211|  21.4k|    }
 7212|    756|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 156, False: 600]
  ------------------
 7213|    156|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 144]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|     12|        }
 7218|    144|        return;
 7219|    156|    }
 7220|    600|    SCN_UNLIKELY_ATTR
 7221|    600|    handler.on_error("Invalid type specifier for string");
 7222|    600|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3653|  4.37k|{
 3654|  4.37k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  4.37k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3653|     40|{
 3654|     40|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     40|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     40|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7238|  7.49k|{
 7239|  7.49k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7239:9): [True: 6.57k, False: 916]
  ------------------
 7240|  7.49k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7240:9): [True: 6.30k, False: 276]
  ------------------
 7241|  7.49k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7241:9): [True: 6.27k, False: 30]
  ------------------
 7242|  7.49k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7242:9): [True: 6.24k, False: 22]
  ------------------
 7243|  7.49k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7243:9): [True: 6.23k, False: 18]
  ------------------
 7244|  7.49k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7244:9): [True: 6.21k, False: 16]
  ------------------
 7245|  7.49k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7245:9): [True: 6.18k, False: 26]
  ------------------
 7246|  7.49k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7246:9): [True: 6.17k, False: 16]
  ------------------
 7247|  6.17k|        SCN_UNLIKELY_ATTR
 7248|  6.17k|        return handler.on_error("Invalid type specifier for boolean");
 7249|  6.17k|    }
 7250|  7.49k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7170|  7.41k|{
 7171|  7.41k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7171:9): [True: 6.42k, False: 988]
  ------------------
 7172|  7.41k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7172:9): [True: 0, False: 988]
  ------------------
 7173|  6.42k|        SCN_UNLIKELY_ATTR
 7174|  6.42k|        return handler.on_error("Invalid type specifier for character type");
 7175|  6.42k|    }
 7176|  7.41k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7227|  7.41k|{
 7228|  7.41k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7228:9): [True: 6.52k, False: 892]
  ------------------
 7229|  7.41k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7229:9): [True: 6.51k, False: 10]
  ------------------
 7230|  6.51k|        SCN_UNLIKELY_ATTR
 7231|  6.51k|        return handler.on_error("Invalid type specifier for pointer");
 7232|  6.51k|    }
 7233|  7.41k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA79_KcEEEDaDpOT_:
 3653|     88|{
 3654|     88|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     88|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  69.6k|{
 3715|  69.6k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  69.6k|                                          const CharT*, const CharT*>) {
 3717|  69.6k|        return {first, last};
 3718|  69.6k|    }
 3719|  69.6k|    else {
 3720|  69.6k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  69.6k|    }
 3722|  69.6k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   461k|{
 3715|   461k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   461k|                                          const CharT*, const CharT*>) {
 3717|   461k|        return {first, last};
 3718|   461k|    }
 3719|   461k|    else {
 3720|   461k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   461k|    }
 3722|   461k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  1.08M|    {
 3330|  1.08M|        return m_iterator;
 3331|  1.08M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  1.12M|    {
 3334|  1.12M|        return m_sentinel;
 3335|  1.12M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|   440k|    {
 3330|   440k|        return m_iterator;
 3331|   440k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  1.08M|    {
 3334|  1.08M|        return m_sentinel;
 3335|  1.08M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|   132k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    174|{
 1211|    174|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    174|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  2.13k|    {
  361|  2.13k|        return m_unexpected;
  362|  2.13k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3653|  5.16k|{
 3654|  5.16k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  5.16k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|  27.4k|    {
  347|  27.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  27.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  27.4k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  75.4k|    {
 1476|  75.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  76.4k|    {
  447|  76.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   104k|    {
 1177|   104k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  26.3k|    {
 1430|  26.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  26.3k|    {
  437|  26.3k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   105k|    {
 1598|   105k|        return has_value();
 1599|   105k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   207k|    {
  485|   207k|        return m_has_value;
  486|   207k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  75.4k|    {
 1604|  75.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  75.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  75.4k|        return this->get_unexpected().error();
 1606|  75.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  75.4k|    {
  468|  75.4k|        return m_unexpected;
  469|  75.4k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  18.9k|    {
 1663|  18.9k|        return std::move(value());
 1664|  18.9k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  27.0k|    {
 1627|  27.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  27.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  27.0k|        return this->get_value();
 1629|  27.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  27.0k|    {
  451|  27.0k|        return m_value;
  452|  27.0k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  43.6k|    {
 1476|  43.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  44.4k|    {
  447|  44.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  64.5k|    {
 1177|  64.5k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  19.7k|    {
 1430|  19.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  19.7k|    {
  437|  19.7k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  65.3k|    {
 1598|  65.3k|        return has_value();
 1599|  65.3k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|   128k|    {
  485|   128k|        return m_has_value;
  486|   128k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  43.6k|    {
 1604|  43.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  43.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  43.6k|        return this->get_unexpected().error();
 1606|  43.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  43.6k|    {
  468|  43.6k|        return m_unexpected;
  469|  43.6k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  15.5k|    {
 1663|  15.5k|        return std::move(value());
 1664|  15.5k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  19.2k|    {
 1627|  19.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  19.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  19.2k|        return this->get_value();
 1629|  19.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  19.2k|    {
  451|  19.2k|        return m_value;
  452|  19.2k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  8.32k|    {
 1837|  8.32k|        return detail::transform_error_impl(std::move(*this),
 1838|  8.32k|                                            std::forward<F>(f));
 1839|  8.32k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  8.32k|{
 1323|  8.32k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  8.32k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  8.32k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  8.32k|            return result(*std::forward<Exp>(exp));
 1327|  8.32k|        }
 1328|       |
 1329|  8.32k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  8.32k|        return result(unexpect, monostate{});
 1331|  8.32k|    }
 1332|  8.32k|    else {
 1333|  8.32k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  8.32k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.32k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.32k, False: 0]
  |  |  ------------------
  ------------------
 1335|  8.32k|                   ? result(*std::forward<Exp>(exp))
 1336|  8.32k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  8.32k|    }
 1340|  8.32k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  64.0k|    {
  485|  64.0k|        return m_has_value;
  486|  64.0k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  10.2k|    {
 1663|  10.2k|        return std::move(value());
 1664|  10.2k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  29.0k|    {
 1627|  29.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  29.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  29.0k|        return this->get_value();
 1629|  29.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  29.0k|    {
  451|  29.0k|        return m_value;
  452|  29.0k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|    104|    {
 1614|    104|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    104|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    104|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    104|        return std::move(this->get_unexpected().error());
 1616|    104|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    104|    {
  468|    104|        return m_unexpected;
  469|    104|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|    934|    {
 1486|    934|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|   375k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6186|  2.12k|    {
 6187|  2.12k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  2.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|  2.12k|        CharT r{};
 6189|  2.12k|        std::memcpy(&r, m_data, m_size);
 6190|  2.12k|        return r;
 6191|  2.12k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|  1.10k|    {
  347|  1.10k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.10k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.10k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  1.27k|    {
  356|  1.27k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.27k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.27k|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6195|    724|    {
 6196|    724|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6197|    724|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2961|     52|    {
 2962|     52|        return fn::impl(std::forward<T>(t));
 2963|     52|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2952|     52|    {
 2953|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|     52|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|     52|    {
 2930|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|     52|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2895|     52|    {
 2896|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|     52|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|    174|    {
  347|    174|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    174|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|    174|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|      8|    {
  347|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  17.6k|    {
  361|  17.6k|        return m_unexpected;
  362|  17.6k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  3.48k|    {
  356|  3.48k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.48k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.48k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  26.9k|    {
  347|  26.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  26.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  26.9k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  26.9k|    {
  361|  26.9k|        return m_unexpected;
  362|  26.9k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  26.9k|    {
  356|  26.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  26.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  26.9k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    688|{
 1211|    688|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    688|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  2.79k|    {
  347|  2.79k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.79k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|  1.08k|{
 1211|  1.08k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  1.08k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  7.79k|{
  326|  7.79k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  7.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  7.79k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  58.9k|    {
 3346|  58.9k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  58.9k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    442|    {
 1476|    442|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    442|    {
  447|    442|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  34.8k|    {
 1177|  34.8k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  34.4k|    {
 1430|  34.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  34.4k|    {
  437|  34.4k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  24.5k|    {
 1598|  24.5k|        return has_value();
 1599|  24.5k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  18.8k|    {
 1653|  18.8k|        return value();
 1654|  18.8k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  6.26k|    {
 1430|  6.26k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  6.26k|    {
  437|  6.26k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.60k|    {
 1177|  6.60k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    338|    {
 1476|    338|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    338|    {
  447|    338|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1597|  4.18k|    {
 1598|  4.18k|        return has_value();
 1599|  4.18k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  11.6k|    {
  485|  11.6k|        return m_has_value;
  486|  11.6k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1652|  2.67k|    {
 1653|  2.67k|        return value();
 1654|  2.67k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  4.77k|    {
 1627|  4.77k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.77k|        return this->get_value();
 1629|  4.77k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  4.77k|    {
  451|  4.77k|        return m_value;
  452|  4.77k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    174|    {
 1476|    174|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|    174|    {
  447|    174|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.51k|    {
 1177|  3.51k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  3.34k|    {
 1430|  3.34k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  3.34k|    {
  437|  3.34k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    706|    {
 1837|    706|        return detail::transform_error_impl(std::move(*this),
 1838|    706|                                            std::forward<F>(f));
 1839|    706|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    706|{
 1323|    706|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    706|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    706|        if (SCN_LIKELY(exp.has_value())) {
 1326|    706|            return result(*std::forward<Exp>(exp));
 1327|    706|        }
 1328|       |
 1329|    706|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    706|        return result(unexpect, monostate{});
 1331|    706|    }
 1332|    706|    else {
 1333|    706|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    706|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    706|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 706, False: 0]
  |  |  ------------------
  ------------------
 1335|    706|                   ? result(*std::forward<Exp>(exp))
 1336|    706|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    706|    }
 1340|    706|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  2.10k|    {
 1663|  2.10k|        return std::move(value());
 1664|  2.10k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|  2.05k|    {
 1430|  2.05k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  2.05k|    {
  437|  2.05k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.03k|    {
 1177|  7.03k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1613|    316|    {
 1614|    316|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    316|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    316|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    316|        return std::move(this->get_unexpected().error());
 1616|    316|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    316|    {
  468|    316|        return m_unexpected;
  469|    316|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.29k|    {
 1486|  1.29k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  4.38k|    {
  447|  4.38k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.51k|    {
 2724|  1.51k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.51k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.51k|    {
 2705|  1.51k|        return decay_copy(t.begin());
 2706|  1.51k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1948|  3.29k|{
 1949|  3.29k|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.29k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3329|  1.51k|    {
 3330|  1.51k|        return m_iterator;
 3331|  1.51k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.51k|    {
 2781|  1.51k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.51k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.51k|    {
 2763|  1.51k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.51k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3333|  1.51k|    {
 3334|  1.51k|        return m_sentinel;
 3335|  1.51k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|  1.51k|    {
 3316|  1.51k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  3.51k|    {
 1598|  3.51k|        return has_value();
 1599|  3.51k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  7.03k|    {
  485|  7.03k|        return m_has_value;
  486|  7.03k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1603|    174|    {
 1604|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    174|        return this->get_unexpected().error();
 1606|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  3.34k|    {
 1663|  3.34k|        return std::move(value());
 1664|  3.34k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  3.34k|    {
 1627|  3.34k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.34k|        return this->get_value();
 1629|  3.34k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.34k|    {
  451|  3.34k|        return m_value;
  452|  3.34k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.4k|    {
 1177|  18.4k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  18.4k|    {
 1430|  18.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  18.4k|    {
  437|  18.4k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  18.4k|    {
 1598|  18.4k|        return has_value();
 1599|  18.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  36.9k|    {
  485|  36.9k|        return m_has_value;
  486|  36.9k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  18.4k|    {
 1663|  18.4k|        return std::move(value());
 1664|  18.4k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  18.4k|    {
 1627|  18.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  18.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  18.4k|        return this->get_value();
 1629|  18.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  18.4k|    {
  451|  18.4k|        return m_value;
  452|  18.4k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  3.09k|    {
 1476|  3.09k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    576|    {
 1476|    576|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    892|    {
  447|    892|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.36k|    {
 1177|  6.36k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  4.07k|    {
 1476|  4.07k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  4.07k|    {
  447|  4.07k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1597|  5.85k|    {
 1598|  5.85k|        return has_value();
 1599|  5.85k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  11.4k|    {
  485|  11.4k|        return m_has_value;
  486|  11.4k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1603|  2.14k|    {
 1604|  2.14k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.14k|        return this->get_unexpected().error();
 1606|  2.14k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  2.92k|    {
  468|  2.92k|        return m_unexpected;
  469|  2.92k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|  1.05k|    {
 1430|  1.05k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|  1.05k|    {
  437|  1.05k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.05k|    {
 1177|  1.05k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.39k|    {
 1627|  1.39k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.39k|        return this->get_value();
 1629|  1.39k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.39k|    {
  451|  1.39k|        return m_value;
  452|  1.39k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    792|    {
 1598|    792|        return has_value();
 1599|    792|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  2.10k|    {
  485|  2.10k|        return m_has_value;
  486|  2.10k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    792|    {
 1177|    792|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|  1.05k|    {
 1663|  1.05k|        return std::move(value());
 1664|  1.05k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|  1.05k|    {
 1627|  1.05k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.05k|        return this->get_value();
 1629|  1.05k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|  1.05k|    {
  451|  1.05k|        return m_value;
  452|  1.05k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|  55.9k|    {
 3334|  55.9k|        return m_sentinel;
 3335|  55.9k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.71k|    {
 1837|  1.71k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.71k|                                            std::forward<F>(f));
 1839|  1.71k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  1.71k|{
 1323|  1.71k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.71k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.71k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.71k|            return result(*std::forward<Exp>(exp));
 1327|  1.71k|        }
 1328|       |
 1329|  1.71k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.71k|        return result(unexpect, monostate{});
 1331|  1.71k|    }
 1332|  1.71k|    else {
 1333|  1.71k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.71k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.71k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.39k, False: 316]
  |  |  ------------------
  ------------------
 1335|  1.71k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.71k|                   : result(unexpect,
 1337|    316|                            trivial_invoke(std::forward<F>(f),
 1338|    316|                                           std::forward<Exp>(exp).error()));
 1339|  1.71k|    }
 1340|  1.71k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|  1.39k|    {
 1430|  1.39k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.39k|    {
  437|  1.39k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    316|    {
 1486|    316|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.39k|    {
 1663|  1.39k|        return std::move(value());
 1664|  1.39k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|  69.9k|    {
 3330|  69.9k|        return m_iterator;
 3331|  69.9k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|    792|    {
 1430|    792|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    792|    {
  437|    792|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    792|    {
 1837|    792|        return detail::transform_error_impl(std::move(*this),
 1838|    792|                                            std::forward<F>(f));
 1839|    792|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|    792|{
 1323|    792|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    792|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    792|        if (SCN_LIKELY(exp.has_value())) {
 1326|    792|            return result(*std::forward<Exp>(exp));
 1327|    792|        }
 1328|       |
 1329|    792|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    792|        return result(unexpect, monostate{});
 1331|    792|    }
 1332|    792|    else {
 1333|    792|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    792|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    792|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 792, False: 0]
  |  |  ------------------
  ------------------
 1335|    792|                   ? result(*std::forward<Exp>(exp))
 1336|    792|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    792|    }
 1340|    792|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.58k|    {
  485|  1.58k|        return m_has_value;
  486|  1.58k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|    792|    {
 1663|    792|        return std::move(value());
 1664|    792|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|    792|    {
 1627|    792|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    792|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    792|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    792|        return this->get_value();
 1629|    792|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    792|    {
  451|    792|        return m_value;
  452|    792|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|    792|    {
 1430|    792|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    792|    {
  437|    792|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    792|    {
 1177|    792|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    792|    {
 1598|    792|        return has_value();
 1599|    792|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.58k|    {
  485|  1.58k|        return m_has_value;
  486|  1.58k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|    792|    {
 1663|    792|        return std::move(value());
 1664|    792|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|    792|    {
 1627|    792|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    792|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    792|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    792|        return this->get_value();
 1629|    792|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    792|    {
  451|    792|        return m_value;
  452|    792|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    772|    {
 1837|    772|        return detail::transform_error_impl(std::move(*this),
 1838|    772|                                            std::forward<F>(f));
 1839|    772|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|    772|{
 1323|    772|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    772|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    772|        if (SCN_LIKELY(exp.has_value())) {
 1326|    772|            return result(*std::forward<Exp>(exp));
 1327|    772|        }
 1328|       |
 1329|    772|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    772|        return result(unexpect, monostate{});
 1331|    772|    }
 1332|    772|    else {
 1333|    772|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    772|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    772|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 772]
  |  |  ------------------
  ------------------
 1335|    772|                   ? result(*std::forward<Exp>(exp))
 1336|    772|                   : result(unexpect,
 1337|    772|                            trivial_invoke(std::forward<F>(f),
 1338|    772|                                           std::forward<Exp>(exp).error()));
 1339|    772|    }
 1340|    772|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1613|    772|    {
 1614|    772|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    772|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    772|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    772|        return std::move(this->get_unexpected().error());
 1616|    772|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|  1.29k|    {
 3648|  1.29k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|  27.6k|    {
 3316|  27.6k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|     20|    {
 1476|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  625|     20|    {
  626|     20|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|     20|    {
  689|     20|        scn::detail::construct_at(unexpected_ptr(),
  690|     20|                                  std::forward<Args>(args)...);
  691|     20|        m_has_value = false;
  692|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     60|    {
  718|     60|        return reinterpret_cast<unexpected<E>*>(
  719|     60|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     60|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     60|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     20|    {
 1177|     20|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1597|     20|    {
 1598|     20|        return has_value();
 1599|     20|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     60|    {
  675|     60|        return m_has_value;
  676|     60|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1603|     20|    {
 1604|     20|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     20|        return this->get_unexpected().error();
 1606|     20|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     20|    {
  658|     20|        return *unexpected_ptr();
  659|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  630|     20|    {
  631|     20|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 20]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     20|        else {
  635|     20|            destroy_unexpected();
  636|     20|        }
  637|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     20|    {
  700|     20|        scn::detail::destroy_at(unexpected_ptr());
  701|     20|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1597|  7.29k|    {
 1598|  7.29k|        return has_value();
 1599|  7.29k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  14.0k|    {
  485|  14.0k|        return m_has_value;
  486|  14.0k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1603|  4.12k|    {
 1604|  4.12k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.12k|        return this->get_unexpected().error();
 1606|  4.12k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  4.12k|    {
  468|  4.12k|        return m_unexpected;
  469|  4.12k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|  2.05k|    {
 1663|  2.05k|        return std::move(value());
 1664|  2.05k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|  2.64k|    {
 1627|  2.64k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.64k|        return this->get_value();
 1629|  2.64k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.64k|    {
  451|  2.64k|        return m_value;
  452|  2.64k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.02k|    {
 1476|  1.02k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.12k|    {
  447|  1.12k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  14.1k|    {
 1177|  14.1k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  11.1k|    {
 1476|  11.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  11.1k|    {
  447|  11.1k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  15.0k|    {
 1598|  15.0k|        return has_value();
 1599|  15.0k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  23.4k|    {
  485|  23.4k|        return m_has_value;
  486|  23.4k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  5.57k|    {
 1604|  5.57k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.57k|        return this->get_unexpected().error();
 1606|  5.57k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.57k|    {
  468|  5.57k|        return m_unexpected;
  469|  5.57k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  3.62k|    {
 1430|  3.62k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  3.62k|    {
  437|  3.62k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.62k|    {
 1177|  3.62k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.90k|    {
 1627|  1.90k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.90k|        return this->get_value();
 1629|  1.90k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.90k|    {
  451|  1.90k|        return m_value;
  452|  1.90k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.71k|    {
 1598|  2.71k|        return has_value();
 1599|  2.71k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  7.24k|    {
  485|  7.24k|        return m_has_value;
  486|  7.24k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.71k|    {
 1177|  2.71k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.62k|    {
 1663|  3.62k|        return std::move(value());
 1664|  3.62k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.62k|    {
 1627|  3.62k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.62k|        return this->get_value();
 1629|  3.62k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.62k|    {
  451|  3.62k|        return m_value;
  452|  3.62k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  43.9k|    {
 3221|  43.9k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 1.62k, False: 42.3k]
  ------------------
 3222|  43.9k|                   ? nullptr
 3223|  43.9k|                   : std::addressof(*ranges::begin(derived()));
 3224|  43.9k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  43.9k|    {
 3005|  43.9k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  43.9k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  43.9k|    {
 2978|  43.9k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  43.9k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  43.9k|    {
 3339|  43.9k|        return m_iterator == m_sentinel;
 3340|  43.9k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  86.2k|    {
 3180|  86.2k|        return static_cast<D&>(*this);
 3181|  86.2k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  42.3k|    {
 2724|  42.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  42.3k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  42.3k|    {
 2705|  42.3k|        return decay_copy(t.begin());
 2706|  42.3k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.90k|    {
 1430|  1.90k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.90k|    {
  437|  1.90k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  2.71k|    {
 1430|  2.71k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.71k|    {
  437|  2.71k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.71k|    {
 1837|  2.71k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.71k|                                            std::forward<F>(f));
 1839|  2.71k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  2.71k|{
 1323|  2.71k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.71k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.71k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.71k|            return result(*std::forward<Exp>(exp));
 1327|  2.71k|        }
 1328|       |
 1329|  2.71k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.71k|        return result(unexpect, monostate{});
 1331|  2.71k|    }
 1332|  2.71k|    else {
 1333|  2.71k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.71k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.71k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.71k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.71k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.71k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.71k|    }
 1340|  2.71k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.42k|    {
  485|  5.42k|        return m_has_value;
  486|  5.42k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.71k|    {
 1663|  2.71k|        return std::move(value());
 1664|  2.71k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.71k|    {
 1627|  2.71k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.71k|        return this->get_value();
 1629|  2.71k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.71k|    {
  451|  2.71k|        return m_value;
  452|  2.71k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  2.71k|    {
 1430|  2.71k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.71k|    {
  437|  2.71k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.71k|    {
 1177|  2.71k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|  2.71k|    {
 1598|  2.71k|        return has_value();
 1599|  2.71k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.42k|    {
  485|  5.42k|        return m_has_value;
  486|  5.42k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.71k|    {
 1663|  2.71k|        return std::move(value());
 1664|  2.71k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.71k|    {
 1627|  2.71k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.71k|        return this->get_value();
 1629|  2.71k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.71k|    {
  451|  2.71k|        return m_value;
  452|  2.71k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1475|     28|    {
 1476|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  625|     28|    {
  626|     28|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|     28|    {
  689|     28|        scn::detail::construct_at(unexpected_ptr(),
  690|     28|                                  std::forward<Args>(args)...);
  691|     28|        m_has_value = false;
  692|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     84|    {
  718|     84|        return reinterpret_cast<unexpected<E>*>(
  719|     84|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     84|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     84|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     28|    {
 1177|     28|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|     28|    {
 1598|     28|        return has_value();
 1599|     28|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     84|    {
  675|     84|        return m_has_value;
  676|     84|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|     28|    {
 1604|     28|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     28|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     28|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     28|        return this->get_unexpected().error();
 1606|     28|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     28|    {
  658|     28|        return *unexpected_ptr();
  659|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|     28|    {
  631|     28|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 28]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     28|        else {
  635|     28|            destroy_unexpected();
  636|     28|        }
  637|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     28|    {
  700|     28|        scn::detail::destroy_at(unexpected_ptr());
  701|     28|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  29.8k|    {
 2855|  29.8k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  29.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  29.8k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  29.8k|    {
 2836|  29.8k|        return t.data();
 2837|  29.8k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   253k|    {
 1476|   253k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   253k|    {
  447|   253k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   257k|    {
 1177|   257k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  4.25k|    {
 1430|  4.25k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  4.25k|    {
  437|  4.25k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  2.49k|{
 1211|  2.49k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  2.49k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    260|    {
 1837|    260|        return detail::transform_error_impl(std::move(*this),
 1838|    260|                                            std::forward<F>(f));
 1839|    260|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    260|{
 1323|    260|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    260|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    260|        if (SCN_LIKELY(exp.has_value())) {
 1326|    260|            return result(*std::forward<Exp>(exp));
 1327|    260|        }
 1328|       |
 1329|    260|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    260|        return result(unexpect, monostate{});
 1331|    260|    }
 1332|    260|    else {
 1333|    260|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    260|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    260|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 260, False: 0]
  |  |  ------------------
  ------------------
 1335|    260|                   ? result(*std::forward<Exp>(exp))
 1336|    260|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    260|    }
 1340|    260|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    260|    {
 1430|    260|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    260|    {
  437|    260|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    260|    {
 1177|    260|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    260|    {
 1598|    260|        return has_value();
 1599|    260|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    520|    {
  485|    520|        return m_has_value;
  486|    520|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    260|    {
 1663|    260|        return std::move(value());
 1664|    260|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    260|    {
 1627|    260|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    260|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    260|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    260|        return this->get_value();
 1629|    260|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    260|    {
  451|    260|        return m_value;
  452|    260|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1822|    520|    {
 1823|    520|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    520|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    520|{
 1323|    520|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    520|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    520|        if (SCN_LIKELY(exp.has_value())) {
 1326|    520|            return result(*std::forward<Exp>(exp));
 1327|    520|        }
 1328|       |
 1329|    520|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    520|        return result(unexpect, monostate{});
 1331|    520|    }
 1332|    520|    else {
 1333|    520|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    520|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    520|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 520]
  |  |  ------------------
  ------------------
 1335|    520|                   ? result(*std::forward<Exp>(exp))
 1336|    520|                   : result(unexpect,
 1337|    520|                            trivial_invoke(std::forward<F>(f),
 1338|    520|                                           std::forward<Exp>(exp).error()));
 1339|    520|    }
 1340|    520|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1652|    588|    {
 1653|    588|        return value();
 1654|    588|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|      4|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    256|    {
 2724|    256|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    256|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    256|    {
 2705|    256|        return decay_copy(t.begin());
 2706|    256|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    238|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    910|    {
 1837|    910|        return detail::transform_error_impl(std::move(*this),
 1838|    910|                                            std::forward<F>(f));
 1839|    910|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|    910|{
 1323|    910|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    910|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    910|        if (SCN_LIKELY(exp.has_value())) {
 1326|    910|            return result(*std::forward<Exp>(exp));
 1327|    910|        }
 1328|       |
 1329|    910|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    910|        return result(unexpect, monostate{});
 1331|    910|    }
 1332|    910|    else {
 1333|    910|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    910|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    910|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 910, False: 0]
  |  |  ------------------
  ------------------
 1335|    910|                   ? result(*std::forward<Exp>(exp))
 1336|    910|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    910|    }
 1340|    910|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|    910|    {
 1430|    910|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|    910|    {
  437|    910|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    910|    {
 1177|    910|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    910|    {
 1598|    910|        return has_value();
 1599|    910|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.82k|    {
  485|  1.82k|        return m_has_value;
  486|  1.82k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|    910|    {
 1663|    910|        return std::move(value());
 1664|    910|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|    910|    {
 1627|    910|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    910|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    910|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    910|        return this->get_value();
 1629|    910|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    910|    {
  451|    910|        return m_value;
  452|    910|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|    934|    {
 1823|    934|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    934|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|    934|{
 1323|    934|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    934|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    934|        if (SCN_LIKELY(exp.has_value())) {
 1326|    934|            return result(*std::forward<Exp>(exp));
 1327|    934|        }
 1328|       |
 1329|    934|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    934|        return result(unexpect, monostate{});
 1331|    934|    }
 1332|    934|    else {
 1333|    934|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    934|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    934|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 934]
  |  |  ------------------
  ------------------
 1335|    934|                   ? result(*std::forward<Exp>(exp))
 1336|    934|                   : result(unexpect,
 1337|    934|                            trivial_invoke(std::forward<F>(f),
 1338|    934|                                           std::forward<Exp>(exp).error()));
 1339|    934|    }
 1340|    934|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|    934|    {
 3648|    934|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  8.07k|    {
 1653|  8.07k|        return value();
 1654|  8.07k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|  2.59k|{
 6697|  2.59k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  2.59k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  2.59k|    auto start = begin;
 6701|  2.59k|    ++begin;
 6702|       |
 6703|  2.59k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.59k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  2.59k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 330, False: 2.26k]
  ------------------
 6710|    330|        handler.on_charset_inverted();
 6711|    330|        ++begin;
 6712|    330|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    330|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 6, False: 324]
  ------------------
 6719|      6|            handler.on_charset_single(char32_t{']'});
 6720|      6|            ++begin;
 6721|      6|        }
 6722|    330|    }
 6723|  2.26k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 2.26k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|   364k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 364k, False: 0]
  ------------------
 6728|   364k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   364k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 364k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|   364k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 2.59k, False: 362k]
  ------------------
 6733|  2.59k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  2.59k|        }
 6735|       |
 6736|   362k|        parse_presentation_set_literal(begin, end, handler);
 6737|   362k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  2.59k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|   362k|{
 6661|   362k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|   362k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|   362k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|   362k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 362k, False: 0]
  |  Branch (6668:25): [True: 2.43k, False: 359k]
  |  Branch (6668:49): [True: 2.43k, False: 0]
  ------------------
 6669|   362k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 2.35k, False: 78]
  ------------------
 6670|  2.35k|        ++begin;
 6671|       |
 6672|  2.35k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  2.35k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  2.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.35k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  2.35k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  2.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.35k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  2.35k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  2.35k|        return;
 6686|  2.35k|    }
 6687|       |
 6688|   359k|    handler.on_charset_single(cp_first);
 6689|   359k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|   364k|{
 6637|   364k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   364k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|   364k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|   364k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|   728k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 364k]
  |  |  |  Branch (859:45): [True: 0, False: 364k]
  |  |  |  Branch (859:45): [True: 0, False: 364k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|   364k|    const auto cp =
 6646|   364k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|   364k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   364k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 364k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|   364k|    begin += len;
 6653|   364k|    return cp;
 6654|   364k|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  14.2k|    {
 1177|  14.2k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1429|  14.2k|    {
 1430|  14.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  436|  14.2k|    {
  437|  14.2k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  11.6k|    {
 6252|  11.6k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  11.6k|                charset_string_size};
 6254|  11.6k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1429|    588|    {
 1430|    588|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  436|    588|    {
  437|    588|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  1.57k|    {
 1430|  1.57k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.57k|    {
  437|  1.57k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4032|   105k|{
 4033|   105k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4033:19): [Folded - Ignored]
  ------------------
 4034|   105k|        return decode_utf8_code_point_exhaustive_valid(input);
 4035|   105k|    }
 4036|   105k|    else if constexpr (sizeof(CharT) == 2) {
 4037|   105k|        return decode_utf16_code_point_exhaustive_valid(input);
 4038|   105k|    }
 4039|   105k|    else {
 4040|   105k|        SCN_EXPECT(input.size() == 1);
 4041|   105k|        return static_cast<char32_t>(input.front());
 4042|   105k|    }
 4043|   105k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3910|  13.8k|    const auto is_trailing_code_unit = [](char ch) {
 3911|  13.8k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|  13.8k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6186|    904|    {
 6187|    904|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|    904|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    904|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|    904|        CharT r{};
 6189|    904|        std::memcpy(&r, m_data, m_size);
 6190|    904|        return r;
 6191|    904|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|   584k|{
 3807|   584k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|   584k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|   584k|    }
 3810|   584k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|   584k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|   584k|    }
 3813|   584k|    else {
 3814|       |        // utf-32
 3815|   584k|        static_assert(sizeof(U) == 4);
 3816|   584k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   584k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|   584k|        return 1;
 3818|   584k|    }
 3819|   584k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   566k|{
 4013|   566k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|   566k|        return decode_utf8_code_point_exhaustive(input);
 4015|   566k|    }
 4016|   566k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|   566k|        return decode_utf16_code_point_exhaustive(input);
 4018|   566k|    }
 4019|   566k|    else {
 4020|   566k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   566k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   566k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   566k|        auto cp = static_cast<char32_t>(input.front());
 4022|   566k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   566k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.0k, False: 496k]
  |  |  ------------------
  ------------------
 4023|  70.0k|            return invalid_code_point;
 4024|  70.0k|        }
 4025|   496k|        return cp;
 4026|   566k|    }
 4027|   566k|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  49.0k|{
 3699|  49.0k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  49.0k|                                          decltype(first), decltype(last)> &&
 3701|  49.0k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  49.0k|        return {first, last};
 3703|  49.0k|    }
 3704|  49.0k|    else {
 3705|  49.0k|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  49.0k|                                       to_address(first), to_address(last)))};
 3707|  49.0k|    }
 3708|  49.0k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   153k|{
  326|   153k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   153k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   154k|{
  304|   154k|    return p;
  305|   154k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  6.84k|{
 3730|  6.84k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  6.84k|                      typename std::basic_string_view<CharT>::iterator,
 3732|  6.84k|                      decltype(it)> &&
 3733|  6.84k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  6.84k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  6.84k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  6.84k|        return it;
 3736|  6.84k|    }
 3737|  6.84k|    else {
 3738|  6.84k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  6.84k|    }
 3740|  6.84k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.08k|{
  326|  1.08k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.08k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  19.0k|    {
 3346|  19.0k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  19.0k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    124|    {
 1476|    124|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    124|    {
  447|    124|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.1k|    {
 1177|  18.1k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  18.0k|    {
 1430|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  18.0k|    {
  437|  18.0k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  5.03k|    {
 1598|  5.03k|        return has_value();
 1599|  5.03k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  31.2k|    {
  485|  31.2k|        return m_has_value;
  486|  31.2k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  12.9k|    {
 1627|  12.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  12.9k|        return this->get_value();
 1629|  12.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  12.9k|    {
  451|  12.9k|        return m_value;
  452|  12.9k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  1.51k|    {
 1430|  1.51k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.51k|    {
  437|  1.51k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.66k|    {
 1177|  1.66k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    144|    {
 1476|    144|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    144|    {
  447|    144|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1597|    716|    {
 1598|    716|        return has_value();
 1599|    716|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  2.60k|    {
  485|  2.60k|        return m_has_value;
  486|  2.60k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|    800|    {
 1627|    800|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    800|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    800|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    800|        return this->get_value();
 1629|    800|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|    800|    {
  451|    800|        return m_value;
  452|    800|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.26k|    {
 1177|  1.26k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  1.26k|    {
 1430|  1.26k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  1.26k|    {
  437|  1.26k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    224|    {
 1837|    224|        return detail::transform_error_impl(std::move(*this),
 1838|    224|                                            std::forward<F>(f));
 1839|    224|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    224|{
 1323|    224|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    224|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    224|        if (SCN_LIKELY(exp.has_value())) {
 1326|    224|            return result(*std::forward<Exp>(exp));
 1327|    224|        }
 1328|       |
 1329|    224|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    224|        return result(unexpect, monostate{});
 1331|    224|    }
 1332|    224|    else {
 1333|    224|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    224|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    224|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 224, False: 0]
  |  |  ------------------
  ------------------
 1335|    224|                   ? result(*std::forward<Exp>(exp))
 1336|    224|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    224|    }
 1340|    224|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|    800|    {
 1663|    800|        return std::move(value());
 1664|    800|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|    662|    {
 1430|    662|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|    662|    {
  437|    662|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.58k|    {
 1177|  2.58k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1613|    144|    {
 1614|    144|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    144|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    144|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    144|        return std::move(this->get_unexpected().error());
 1616|    144|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    144|    {
  468|    144|        return m_unexpected;
  469|    144|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    522|    {
 1486|    522|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  1.78k|    {
  447|  1.78k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    346|    {
 2724|    346|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    346|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    346|    {
 2705|    346|        return decay_copy(t.begin());
 2706|    346|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1948|    790|{
 1949|    790|    return SCN_FWD(t);
  ------------------
  |  |  930|    790|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|    790|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3329|    346|    {
 3330|    346|        return m_iterator;
 3331|    346|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    346|    {
 2781|    346|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    346|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    346|    {
 2763|    346|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    346|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3333|    346|    {
 3334|    346|        return m_sentinel;
 3335|    346|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|    346|    {
 3316|    346|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  1.26k|    {
 1598|  1.26k|        return has_value();
 1599|  1.26k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.52k|    {
  485|  2.52k|        return m_has_value;
  486|  2.52k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.26k|    {
 1663|  1.26k|        return std::move(value());
 1664|  1.26k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.26k|    {
 1627|  1.26k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.26k|        return this->get_value();
 1629|  1.26k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.26k|    {
  451|  1.26k|        return m_value;
  452|  1.26k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.5k|    {
 1177|  10.5k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  10.5k|    {
 1430|  10.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  10.5k|    {
  437|  10.5k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  8.03k|    {
 1837|  8.03k|        return detail::transform_error_impl(std::move(*this),
 1838|  8.03k|                                            std::forward<F>(f));
 1839|  8.03k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  8.03k|{
 1323|  8.03k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  8.03k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  8.03k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  8.03k|            return result(*std::forward<Exp>(exp));
 1327|  8.03k|        }
 1328|       |
 1329|  8.03k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  8.03k|        return result(unexpect, monostate{});
 1331|  8.03k|    }
 1332|  8.03k|    else {
 1333|  8.03k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  8.03k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.03k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.03k, False: 0]
  |  |  ------------------
  ------------------
 1335|  8.03k|                   ? result(*std::forward<Exp>(exp))
 1336|  8.03k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  8.03k|    }
 1340|  8.03k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  12.9k|    {
 1663|  12.9k|        return std::move(value());
 1664|  12.9k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|    124|    {
 1614|    124|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    124|        return std::move(this->get_unexpected().error());
 1616|    124|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    124|    {
  468|    124|        return m_unexpected;
  469|    124|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|    836|    {
 1486|    836|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  10.5k|    {
 1598|  10.5k|        return has_value();
 1599|  10.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  21.0k|    {
  485|  21.0k|        return m_has_value;
  486|  21.0k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  10.5k|    {
 1663|  10.5k|        return std::move(value());
 1664|  10.5k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  10.5k|    {
 1627|  10.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  10.5k|        return this->get_value();
 1629|  10.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  10.5k|    {
  451|  10.5k|        return m_value;
  452|  10.5k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  1.25k|    {
 1476|  1.25k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    248|    {
 1476|    248|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    392|    {
  447|    392|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.71k|    {
 1177|  2.71k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  1.74k|    {
 1476|  1.74k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  1.74k|    {
  447|  1.74k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1597|  2.50k|    {
 1598|  2.50k|        return has_value();
 1599|  2.50k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  4.81k|    {
  485|  4.81k|        return m_has_value;
  486|  4.81k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1603|    902|    {
 1604|    902|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    902|        return this->get_unexpected().error();
 1606|    902|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  1.21k|    {
  468|  1.21k|        return m_unexpected;
  469|  1.21k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|    446|    {
 1430|    446|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    446|    {
  437|    446|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    446|    {
 1177|    446|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|    576|    {
 1627|    576|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    576|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    576|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    576|        return this->get_value();
 1629|    576|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|    576|    {
  451|    576|        return m_value;
  452|    576|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    342|    {
 1598|    342|        return has_value();
 1599|    342|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|    892|    {
  485|    892|        return m_has_value;
  486|    892|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    342|    {
 1177|    342|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|    446|    {
 1663|    446|        return std::move(value());
 1664|    446|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|    446|    {
 1627|    446|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    446|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    446|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    446|        return this->get_value();
 1629|    446|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|    446|    {
  451|    446|        return m_value;
  452|    446|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|  19.1k|    {
 3334|  19.1k|        return m_sentinel;
 3335|  19.1k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    720|    {
 1837|    720|        return detail::transform_error_impl(std::move(*this),
 1838|    720|                                            std::forward<F>(f));
 1839|    720|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    720|{
 1323|    720|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    720|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    720|        if (SCN_LIKELY(exp.has_value())) {
 1326|    720|            return result(*std::forward<Exp>(exp));
 1327|    720|        }
 1328|       |
 1329|    720|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    720|        return result(unexpect, monostate{});
 1331|    720|    }
 1332|    720|    else {
 1333|    720|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    720|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    720|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 576, False: 144]
  |  |  ------------------
  ------------------
 1335|    720|                   ? result(*std::forward<Exp>(exp))
 1336|    720|                   : result(unexpect,
 1337|    144|                            trivial_invoke(std::forward<F>(f),
 1338|    144|                                           std::forward<Exp>(exp).error()));
 1339|    720|    }
 1340|    720|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|    576|    {
 1430|    576|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|    576|    {
  437|    576|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    144|    {
 1486|    144|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|    576|    {
 1663|    576|        return std::move(value());
 1664|    576|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|  21.0k|    {
 3330|  21.0k|        return m_iterator;
 3331|  21.0k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|    342|    {
 1430|    342|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    342|    {
  437|    342|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    342|    {
 1837|    342|        return detail::transform_error_impl(std::move(*this),
 1838|    342|                                            std::forward<F>(f));
 1839|    342|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|    342|{
 1323|    342|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    342|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    342|        if (SCN_LIKELY(exp.has_value())) {
 1326|    342|            return result(*std::forward<Exp>(exp));
 1327|    342|        }
 1328|       |
 1329|    342|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    342|        return result(unexpect, monostate{});
 1331|    342|    }
 1332|    342|    else {
 1333|    342|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    342|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    342|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 342, False: 0]
  |  |  ------------------
  ------------------
 1335|    342|                   ? result(*std::forward<Exp>(exp))
 1336|    342|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    342|    }
 1340|    342|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|    684|    {
  485|    684|        return m_has_value;
  486|    684|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|    342|    {
 1663|    342|        return std::move(value());
 1664|    342|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|    342|    {
 1627|    342|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    342|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    342|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    342|        return this->get_value();
 1629|    342|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    342|    {
  451|    342|        return m_value;
  452|    342|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|    342|    {
 1430|    342|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    342|    {
  437|    342|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    342|    {
 1177|    342|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    342|    {
 1598|    342|        return has_value();
 1599|    342|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    684|    {
  485|    684|        return m_has_value;
  486|    684|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|    342|    {
 1663|    342|        return std::move(value());
 1664|    342|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|    342|    {
 1627|    342|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    342|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    342|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    342|        return this->get_value();
 1629|    342|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    342|    {
  451|    342|        return m_value;
  452|    342|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    314|    {
 1837|    314|        return detail::transform_error_impl(std::move(*this),
 1838|    314|                                            std::forward<F>(f));
 1839|    314|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|    314|{
 1323|    314|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    314|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    314|        if (SCN_LIKELY(exp.has_value())) {
 1326|    314|            return result(*std::forward<Exp>(exp));
 1327|    314|        }
 1328|       |
 1329|    314|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    314|        return result(unexpect, monostate{});
 1331|    314|    }
 1332|    314|    else {
 1333|    314|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    314|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    314|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 314]
  |  |  ------------------
  ------------------
 1335|    314|                   ? result(*std::forward<Exp>(exp))
 1336|    314|                   : result(unexpect,
 1337|    314|                            trivial_invoke(std::forward<F>(f),
 1338|    314|                                           std::forward<Exp>(exp).error()));
 1339|    314|    }
 1340|    314|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1613|    314|    {
 1614|    314|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    314|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    314|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    314|        return std::move(this->get_unexpected().error());
 1616|    314|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|    522|    {
 3648|    522|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|  7.26k|    {
 3316|  7.26k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_LPv0ELSN_0EEEONS0_10unexpectedIT_EE:
 1475|     28|    {
 1476|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  625|     28|    {
  626|     28|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  688|     28|    {
  689|     28|        scn::detail::construct_at(unexpected_ptr(),
  690|     28|                                  std::forward<Args>(args)...);
  691|     28|        m_has_value = false;
  692|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     84|    {
  718|     84|        return reinterpret_cast<unexpected<E>*>(
  719|     84|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     84|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     84|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     28|    {
 1177|     28|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     28|    {
 1598|     28|        return has_value();
 1599|     28|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|     84|    {
  675|     84|        return m_has_value;
  676|     84|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     28|    {
 1604|     28|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     28|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     28|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     28|        return this->get_unexpected().error();
 1606|     28|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     28|    {
  658|     28|        return *unexpected_ptr();
  659|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     28|    {
  631|     28|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 28]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     28|        else {
  635|     28|            destroy_unexpected();
  636|     28|        }
  637|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     28|    {
  700|     28|        scn::detail::destroy_at(unexpected_ptr());
  701|     28|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1597|  2.68k|    {
 1598|  2.68k|        return has_value();
 1599|  2.68k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.16k|    {
  485|  5.16k|        return m_has_value;
  486|  5.16k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1603|  1.67k|    {
 1604|  1.67k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.67k|        return this->get_unexpected().error();
 1606|  1.67k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.67k|    {
  468|  1.67k|        return m_unexpected;
  469|  1.67k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|    662|    {
 1663|    662|        return std::move(value());
 1664|    662|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|    800|    {
 1627|    800|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    800|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    800|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    800|        return this->get_value();
 1629|    800|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|    800|    {
  451|    800|        return m_value;
  452|    800|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    952|    {
 1476|    952|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.07k|    {
  447|  1.07k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.0k|    {
 1177|  16.0k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  10.0k|    {
 1476|  10.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  10.0k|    {
  447|  10.0k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  16.9k|    {
 1598|  16.9k|        return has_value();
 1599|  16.9k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  27.8k|    {
  485|  27.8k|        return m_has_value;
  486|  27.8k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  5.11k|    {
 1604|  5.11k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.11k|        return this->get_unexpected().error();
 1606|  5.11k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.11k|    {
  468|  5.11k|        return m_unexpected;
  469|  5.11k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  3.33k|    {
 1430|  3.33k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  3.33k|    {
  437|  3.33k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.33k|    {
 1177|  3.33k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  4.96k|    {
 1627|  4.96k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.96k|        return this->get_value();
 1629|  4.96k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  4.96k|    {
  451|  4.96k|        return m_value;
  452|  4.96k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.50k|    {
 1598|  2.50k|        return has_value();
 1599|  2.50k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  6.66k|    {
  485|  6.66k|        return m_has_value;
  486|  6.66k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.50k|    {
 1177|  2.50k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.33k|    {
 1663|  3.33k|        return std::move(value());
 1664|  3.33k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.33k|    {
 1627|  3.33k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.33k|        return this->get_value();
 1629|  3.33k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.33k|    {
  451|  3.33k|        return m_value;
  452|  3.33k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  5.08k|    {
 1837|  5.08k|        return detail::transform_error_impl(std::move(*this),
 1838|  5.08k|                                            std::forward<F>(f));
 1839|  5.08k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  5.08k|{
 1323|  5.08k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  5.08k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  5.08k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  5.08k|            return result(*std::forward<Exp>(exp));
 1327|  5.08k|        }
 1328|       |
 1329|  5.08k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  5.08k|        return result(unexpect, monostate{});
 1331|  5.08k|    }
 1332|  5.08k|    else {
 1333|  5.08k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  5.08k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  5.08k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.96k, False: 124]
  |  |  ------------------
  ------------------
 1335|  5.08k|                   ? result(*std::forward<Exp>(exp))
 1336|  5.08k|                   : result(unexpect,
 1337|    124|                            trivial_invoke(std::forward<F>(f),
 1338|    124|                                           std::forward<Exp>(exp).error()));
 1339|  5.08k|    }
 1340|  5.08k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  4.96k|    {
 1430|  4.96k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  4.96k|    {
  437|  4.96k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    124|    {
 1486|    124|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  4.96k|    {
 1663|  4.96k|        return std::move(value());
 1664|  4.96k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  2.50k|    {
 1430|  2.50k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.50k|    {
  437|  2.50k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.50k|    {
 1837|  2.50k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.50k|                                            std::forward<F>(f));
 1839|  2.50k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  2.50k|{
 1323|  2.50k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.50k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.50k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.50k|            return result(*std::forward<Exp>(exp));
 1327|  2.50k|        }
 1328|       |
 1329|  2.50k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.50k|        return result(unexpect, monostate{});
 1331|  2.50k|    }
 1332|  2.50k|    else {
 1333|  2.50k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.50k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.50k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.50k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.50k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.50k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.50k|    }
 1340|  2.50k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.00k|    {
  485|  5.00k|        return m_has_value;
  486|  5.00k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.50k|    {
 1663|  2.50k|        return std::move(value());
 1664|  2.50k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.50k|    {
 1627|  2.50k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.50k|        return this->get_value();
 1629|  2.50k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.50k|    {
  451|  2.50k|        return m_value;
  452|  2.50k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  2.50k|    {
 1430|  2.50k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.50k|    {
  437|  2.50k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.50k|    {
 1177|  2.50k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|  2.50k|    {
 1598|  2.50k|        return has_value();
 1599|  2.50k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.00k|    {
  485|  5.00k|        return m_has_value;
  486|  5.00k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.50k|    {
 1663|  2.50k|        return std::move(value());
 1664|  2.50k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.50k|    {
 1627|  2.50k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.50k|        return this->get_value();
 1629|  2.50k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.50k|    {
  451|  2.50k|        return m_value;
  452|  2.50k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|     28|    {
 1476|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  625|     28|    {
  626|     28|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|     28|    {
  689|     28|        scn::detail::construct_at(unexpected_ptr(),
  690|     28|                                  std::forward<Args>(args)...);
  691|     28|        m_has_value = false;
  692|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     84|    {
  718|     84|        return reinterpret_cast<unexpected<E>*>(
  719|     84|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     84|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     84|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     28|    {
 1177|     28|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     28|    {
 1598|     28|        return has_value();
 1599|     28|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|     84|    {
  675|     84|        return m_has_value;
  676|     84|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     28|    {
 1604|     28|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     28|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     28|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     28|        return this->get_unexpected().error();
 1606|     28|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     28|    {
  658|     28|        return *unexpected_ptr();
  659|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     28|    {
  631|     28|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 28]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     28|        else {
  635|     28|            destroy_unexpected();
  636|     28|        }
  637|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     28|    {
  700|     28|        scn::detail::destroy_at(unexpected_ptr());
  701|     28|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  10.8k|    {
 2855|  10.8k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  10.8k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  10.8k|    {
 2836|  10.8k|        return t.data();
 2837|  10.8k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  18.1k|    {
 3221|  18.1k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 2.79k, False: 15.3k]
  ------------------
 3222|  18.1k|                   ? nullptr
 3223|  18.1k|                   : std::addressof(*ranges::begin(derived()));
 3224|  18.1k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  18.1k|    {
 3005|  18.1k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  18.1k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  18.1k|    {
 2978|  18.1k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  18.1k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  18.1k|    {
 3339|  18.1k|        return m_iterator == m_sentinel;
 3340|  18.1k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  33.4k|    {
 3180|  33.4k|        return static_cast<D&>(*this);
 3181|  33.4k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  15.3k|    {
 2724|  15.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  15.3k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  15.3k|    {
 2705|  15.3k|        return decay_copy(t.begin());
 2706|  15.3k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    104|    {
 1837|    104|        return detail::transform_error_impl(std::move(*this),
 1838|    104|                                            std::forward<F>(f));
 1839|    104|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    104|{
 1323|    104|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    104|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    104|        if (SCN_LIKELY(exp.has_value())) {
 1326|    104|            return result(*std::forward<Exp>(exp));
 1327|    104|        }
 1328|       |
 1329|    104|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    104|        return result(unexpect, monostate{});
 1331|    104|    }
 1332|    104|    else {
 1333|    104|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    104|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    104|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 104, False: 0]
  |  |  ------------------
  ------------------
 1335|    104|                   ? result(*std::forward<Exp>(exp))
 1336|    104|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    104|    }
 1340|    104|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    104|    {
 1430|    104|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    104|    {
  437|    104|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    104|    {
 1177|    104|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    104|    {
 1598|    104|        return has_value();
 1599|    104|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    208|    {
  485|    208|        return m_has_value;
  486|    208|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    104|    {
 1663|    104|        return std::move(value());
 1664|    104|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    104|    {
 1627|    104|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    104|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    104|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    104|        return this->get_value();
 1629|    104|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    104|    {
  451|    104|        return m_value;
  452|    104|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1822|    208|    {
 1823|    208|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    208|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    208|{
 1323|    208|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    208|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    208|        if (SCN_LIKELY(exp.has_value())) {
 1326|    208|            return result(*std::forward<Exp>(exp));
 1327|    208|        }
 1328|       |
 1329|    208|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    208|        return result(unexpect, monostate{});
 1331|    208|    }
 1332|    208|    else {
 1333|    208|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    208|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    208|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 208]
  |  |  ------------------
  ------------------
 1335|    208|                   ? result(*std::forward<Exp>(exp))
 1336|    208|                   : result(unexpect,
 1337|    208|                            trivial_invoke(std::forward<F>(f),
 1338|    208|                                           std::forward<Exp>(exp).error()));
 1339|    208|    }
 1340|    208|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1652|    138|    {
 1653|    138|        return value();
 1654|    138|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|     98|    {
 2724|     98|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|     98|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|     98|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|     98|    {
 2705|     98|        return decay_copy(t.begin());
 2706|     98|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|     90|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    828|    {
 1837|    828|        return detail::transform_error_impl(std::move(*this),
 1838|    828|                                            std::forward<F>(f));
 1839|    828|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|    828|{
 1323|    828|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    828|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    828|        if (SCN_LIKELY(exp.has_value())) {
 1326|    828|            return result(*std::forward<Exp>(exp));
 1327|    828|        }
 1328|       |
 1329|    828|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    828|        return result(unexpect, monostate{});
 1331|    828|    }
 1332|    828|    else {
 1333|    828|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    828|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    828|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 828, False: 0]
  |  |  ------------------
  ------------------
 1335|    828|                   ? result(*std::forward<Exp>(exp))
 1336|    828|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    828|    }
 1340|    828|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|    828|    {
 1430|    828|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|    828|    {
  437|    828|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    828|    {
 1177|    828|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    828|    {
 1598|    828|        return has_value();
 1599|    828|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.65k|    {
  485|  1.65k|        return m_has_value;
  486|  1.65k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|    828|    {
 1663|    828|        return std::move(value());
 1664|    828|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|    828|    {
 1627|    828|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    828|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    828|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    828|        return this->get_value();
 1629|    828|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    828|    {
  451|    828|        return m_value;
  452|    828|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|    836|    {
 1823|    836|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    836|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|    836|{
 1323|    836|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    836|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    836|        if (SCN_LIKELY(exp.has_value())) {
 1326|    836|            return result(*std::forward<Exp>(exp));
 1327|    836|        }
 1328|       |
 1329|    836|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    836|        return result(unexpect, monostate{});
 1331|    836|    }
 1332|    836|    else {
 1333|    836|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    836|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    836|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 836]
  |  |  ------------------
  ------------------
 1335|    836|                   ? result(*std::forward<Exp>(exp))
 1336|    836|                   : result(unexpect,
 1337|    836|                            trivial_invoke(std::forward<F>(f),
 1338|    836|                                           std::forward<Exp>(exp).error()));
 1339|    836|    }
 1340|    836|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|    836|    {
 3648|    836|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  3.68k|    {
 1653|  3.68k|        return value();
 1654|  3.68k|    }
_ZN3scn2v36detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|    360|{
 6697|    360|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|    360|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|    360|    auto start = begin;
 6701|    360|    ++begin;
 6702|       |
 6703|    360|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|    360|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 156, False: 204]
  ------------------
 6710|    156|        handler.on_charset_inverted();
 6711|    156|        ++begin;
 6712|    156|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 156]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    156|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 6, False: 150]
  ------------------
 6719|      6|            handler.on_charset_single(char32_t{']'});
 6720|      6|            ++begin;
 6721|      6|        }
 6722|    156|    }
 6723|    204|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 204]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  3.71k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 3.71k, False: 0]
  ------------------
 6728|  3.71k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  3.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.71k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  3.71k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 360, False: 3.35k]
  ------------------
 6733|    360|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|    360|        }
 6735|       |
 6736|  3.35k|        parse_presentation_set_literal(begin, end, handler);
 6737|  3.35k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|    360|}
_ZN3scn2v36detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|  3.35k|{
 6661|  3.35k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  3.35k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  3.35k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  3.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.35k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  3.35k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 3.35k, False: 0]
  |  Branch (6668:25): [True: 240, False: 3.11k]
  |  Branch (6668:49): [True: 240, False: 0]
  ------------------
 6669|  3.35k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 234, False: 6]
  ------------------
 6670|    234|        ++begin;
 6671|       |
 6672|    234|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|    234|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 234]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|    234|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 234]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|    234|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|    234|        return;
 6686|    234|    }
 6687|       |
 6688|  3.12k|    handler.on_charset_single(cp_first);
 6689|  3.12k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|  3.58k|{
 6637|  3.58k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  3.58k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  3.58k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  7.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.58k]
  |  |  |  Branch (859:45): [True: 0, False: 3.58k]
  |  |  |  Branch (859:45): [True: 0, False: 3.58k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  3.58k|    const auto cp =
 6646|  3.58k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  3.58k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  3.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.58k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  3.58k|    begin += len;
 6653|  3.58k|    return cp;
 6654|  3.58k|}
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  5.61k|    {
 6252|  5.61k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  5.61k|                charset_string_size};
 6254|  5.61k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1429|    138|    {
 1430|    138|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  436|    138|    {
  437|    138|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|    300|    {
 1430|    300|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|    300|    {
  437|    300|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|  1.70k|{
 3654|  1.70k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.70k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  6.04k|    {
 2855|  6.04k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  6.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  6.04k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  6.04k|    {
 2836|  6.04k|        return t.data();
 2837|  6.04k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  84.6k|    {
 5466|  84.6k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  84.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 84.6k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  84.6k|        return static_cast<std::size_t>(m_desc &
 5471|  84.6k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  84.6k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|   138k|    {
 5491|   138k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   138k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  53.6k|    {
 5434|  53.6k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 53.6k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  53.6k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 53.5k]
  |  |  ------------------
  ------------------
 5442|     68|            return {};
 5443|     68|        }
 5444|       |
 5445|  53.5k|        const auto t = type(id);
 5446|  53.5k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.33k, False: 52.2k]
  |  |  ------------------
  ------------------
 5447|  1.33k|            return {};
 5448|  1.33k|        }
 5449|       |
 5450|  52.2k|        basic_scan_arg<Context> arg;
 5451|  52.2k|        arg.m_type = t;
 5452|  52.2k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 52.2k, False: 0]
  ------------------
 5453|  52.2k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  52.2k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  52.2k|        return arg;
 5459|  53.5k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  53.6k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  83.5k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  53.5k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  53.5k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  53.5k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  53.5k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  53.5k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  52.2k|    {
 5495|  52.2k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  52.2k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   103k|    {
 5247|   103k|        return m_type != detail::arg_type::none_type;
 5248|   103k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  5.63k|{
 8417|  5.63k|#define SCN_VISIT(Type)                                         \
 8418|  5.63k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  5.63k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  5.63k|    }                                                           \
 8421|  5.63k|    else {                                                      \
 8422|  5.63k|        return vis(monostate_val);                              \
 8423|  5.63k|    }
 8424|       |
 8425|  5.63k|    monostate monostate_val{};
 8426|       |
 8427|  5.63k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 5.63k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 5.63k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    626|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 626, False: 5.00k]
  ------------------
 8433|    626|            SCN_VISIT(int);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 5.63k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 5.63k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 5.63k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 5.63k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    626|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 626, False: 5.00k]
  ------------------
 8443|    626|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 5.63k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 5.63k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    626|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 626, False: 5.00k]
  ------------------
 8449|    626|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8450|    626|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 626, False: 5.00k]
  ------------------
 8451|    626|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8452|    626|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 626, False: 5.00k]
  ------------------
 8453|    626|            SCN_VISIT(char);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 5.63k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 5.63k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 5.63k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    626|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 626, False: 5.00k]
  ------------------
 8461|    626|            SCN_VISIT(double);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 5.63k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|    626|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 626, False: 5.00k]
  ------------------
 8465|    626|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8466|    626|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 626, False: 5.00k]
  ------------------
 8467|    626|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 5.63k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|    626|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 626, False: 5.00k]
  ------------------
 8471|    626|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    626|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    626|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    626|    }                                                           \
  |  | 8421|    626|    else {                                                      \
  |  | 8422|    626|        return vis(monostate_val);                              \
  |  | 8423|    626|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 5.63k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 5.63k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 5.63k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 5.63k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 5.63k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  5.63k|            SCN_CLANG_POP
 8495|  5.63k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.00k|    {
 1837|  2.00k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.00k|                                            std::forward<F>(f));
 1839|  2.00k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  2.00k|{
 1323|  2.00k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.00k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.00k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.00k|            return result(*std::forward<Exp>(exp));
 1327|  2.00k|        }
 1328|       |
 1329|  2.00k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.00k|        return result(unexpect, monostate{});
 1331|  2.00k|    }
 1332|  2.00k|    else {
 1333|  2.00k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.00k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.90k, False: 104]
  |  |  ------------------
  ------------------
 1335|  2.00k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.00k|                   : result(unexpect,
 1337|    104|                            trivial_invoke(std::forward<F>(f),
 1338|    104|                                           std::forward<Exp>(exp).error()));
 1339|  2.00k|    }
 1340|  2.00k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    104|    {
 1486|    104|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.90k|    {
 1663|  1.90k|        return std::move(value());
 1664|  1.90k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|  84.6k|    {
 5545|  84.6k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|  84.6k|    {
 8056|  84.6k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  84.6k|{
 7044|  84.6k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  84.6k|    handler.check_args_exhausted();
 7046|  84.6k|    return handler.get_error();
 7047|  84.6k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  84.6k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  84.6k|    auto begin = format.data();
 7013|  84.6k|    auto it = begin;
 7014|  84.6k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   194k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 187k, False: 6.78k]
  ------------------
 7017|   187k|        const auto ch = *it++;
 7018|   187k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 88.7k, False: 98.8k]
  ------------------
 7019|  88.7k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  88.7k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  88.7k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 76.9k, False: 11.7k]
  ------------------
 7023|  76.9k|                return;
 7024|  76.9k|            }
 7025|  88.7k|        }
 7026|  98.8k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 2.08k, False: 96.7k]
  ------------------
 7027|  2.08k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  3.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 906, False: 1.17k]
  |  |  |  Branch (859:45): [True: 330, False: 1.75k]
  |  |  |  Branch (859:45): [True: 576, False: 1.17k]
  |  |  ------------------
  ------------------
 7028|    906|                handler.on_error("Unmatched '}' in format string");
 7029|    906|                return;
 7030|    906|            }
 7031|       |
 7032|  1.17k|            handler.on_literal_text(begin, it);
 7033|  1.17k|            begin = ++it;
 7034|  1.17k|        }
 7035|   187k|    }
 7036|       |
 7037|  6.78k|    handler.on_literal_text(begin, end);
 7038|  6.78k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|  88.7k|{
 6942|  88.7k|    struct id_adapter {
 6943|  88.7k|        constexpr void operator()()
 6944|  88.7k|        {
 6945|  88.7k|            arg_id = handler.on_arg_id();
 6946|  88.7k|        }
 6947|  88.7k|        constexpr void operator()(std::size_t id)
 6948|  88.7k|        {
 6949|  88.7k|            arg_id = handler.on_arg_id(id);
 6950|  88.7k|        }
 6951|       |
 6952|  88.7k|        constexpr void on_error(const char* msg)
 6953|  88.7k|        {
 6954|  88.7k|            SCN_UNLIKELY_ATTR
 6955|  88.7k|            handler.on_error(msg);
 6956|  88.7k|        }
 6957|       |
 6958|  88.7k|        Handler& handler;
 6959|  88.7k|        std::size_t arg_id;
 6960|  88.7k|    };
 6961|       |
 6962|  88.7k|    ++begin;
 6963|  88.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  88.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 88.6k]
  |  |  ------------------
  ------------------
 6964|    110|        handler.on_error("Unexpected end of replacement field");
 6965|    110|        return begin;
 6966|    110|    }
 6967|       |
 6968|  88.6k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 5.60k, False: 83.0k]
  ------------------
 6969|  5.60k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  5.60k|    }
 6971|  83.0k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 5.39k, False: 77.6k]
  ------------------
 6972|  5.39k|        handler.on_literal_text(begin, begin + 1);
 6973|  5.39k|    }
 6974|  77.6k|    else {
 6975|  77.6k|        auto adapter = id_adapter{handler, 0};
 6976|  77.6k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  77.6k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  77.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 77.5k]
  |  |  ------------------
  ------------------
 6979|    110|            handler.on_error("Missing '}' in format string");
 6980|    110|            return begin;
 6981|    110|        }
 6982|       |
 6983|  77.5k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 140, False: 77.3k]
  ------------------
 6984|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    140|        }
 6986|  77.3k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 47.9k, False: 29.4k]
  ------------------
 6987|  47.9k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  47.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 47.8k]
  |  |  ------------------
  ------------------
 6988|     74|                handler.on_error("Unexpected end of replacement field");
 6989|     74|                return begin;
 6990|     74|            }
 6991|  47.8k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  47.8k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  95.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.06k, False: 44.8k]
  |  |  |  Branch (859:45): [True: 0, False: 47.8k]
  |  |  |  Branch (859:45): [True: 3.06k, False: 44.8k]
  |  |  ------------------
  ------------------
 6993|  3.06k|                handler.on_error("Unknown format specifier");
 6994|  3.06k|                return begin;
 6995|  3.06k|            }
 6996|  47.8k|        }
 6997|  29.4k|        else {
 6998|  29.4k|            SCN_UNLIKELY_ATTR
 6999|  29.4k|            handler.on_error("Missing '}' in format string");
 7000|  29.4k|            return begin;
 7001|  29.4k|        }
 7002|  77.5k|    }
 7003|  55.9k|    return begin + 1;
 7004|  88.6k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  53.6k|    {
 8039|  53.6k|        return m_args.get(id);
 8040|  53.6k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8043|  5.74k|    {
 8044|  5.74k|        return m_args;
 8045|  5.74k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  50.2k|    {
 8049|  50.2k|        return m_locale;
 8050|  50.2k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  51.6k|    {
 5566|  51.6k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 51.6k]
  |  |  ------------------
  ------------------
 5567|     42|            on_error(
 5568|     42|                "Cannot switch from manual to automatic argument indexing");
 5569|     42|            return 0;
 5570|     42|        }
 5571|       |
 5572|  51.6k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  51.6k|        do_check_arg_id(id);
 5574|  51.6k|        return id;
 5575|  51.6k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5589|    112|    {
 5590|    112|        return detail::handle_error(
 5591|    112|            scan_error{scan_error::invalid_format_string, msg});
 5592|    112|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  53.5k|{
 6054|  53.5k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  53.5k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  53.5k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  77.6k|{
 6443|  77.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  77.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  77.6k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 77.6k, False: 0]
  |  Branch (6444:26): [True: 31.5k, False: 46.0k]
  ------------------
 6445|  31.5k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|  31.5k|    }
 6447|       |
 6448|  46.0k|    handler();
 6449|  46.0k|    return begin;
 6450|  77.6k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|  31.5k|{
 6413|  31.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  31.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|  31.5k|    CharT c = *begin;
 6416|  31.5k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 29.1k, False: 2.42k]
  |  Branch (6416:27): [True: 166, False: 2.25k]
  ------------------
 6417|  29.3k|        handler.on_error("Invalid argument ID");
 6418|  29.3k|        return begin;
 6419|  29.3k|    }
 6420|       |
 6421|  2.25k|    int idx = 0;
 6422|  2.25k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 330, False: 1.92k]
  ------------------
 6423|    330|        idx = parse_simple_int(begin, end);
 6424|    330|    }
 6425|  1.92k|    else {
 6426|  1.92k|        ++begin;
 6427|  1.92k|    }
 6428|       |
 6429|  2.25k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 110, False: 2.14k]
  |  Branch (6429:26): [True: 2.00k, False: 140]
  |  Branch (6429:50): [True: 96, False: 1.91k]
  ------------------
 6430|    206|        handler.on_error("Invalid argument ID");
 6431|    206|        return begin;
 6432|    206|    }
 6433|  2.05k|    handler(idx);
 6434|       |
 6435|  2.05k|    return begin;
 6436|  2.25k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|  29.5k|        {
 6954|  29.5k|            SCN_UNLIKELY_ATTR
 6955|  29.5k|            handler.on_error(msg);
 6956|  29.5k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  10.0k|{
 6392|  10.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  10.0k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  10.0k|    unsigned long long value = 0;
 6396|  25.9k|    do {
 6397|  25.9k|        value *= 10;
 6398|  25.9k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  25.9k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 116, False: 25.7k]
  ------------------
 6400|  25.9k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|    116|            return -1;
 6402|    116|        }
 6403|  25.7k|        ++begin;
 6404|  25.7k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 25.4k, False: 312]
  |  Branch (6404:30): [True: 24.2k, False: 1.24k]
  |  Branch (6404:47): [True: 15.8k, False: 8.35k]
  ------------------
 6405|  9.91k|    return static_cast<int>(value);
 6406|  10.0k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|  2.05k|        {
 6949|  2.05k|            arg_id = handler.on_arg_id(id);
 6950|  2.05k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5578|  2.05k|    {
 5579|  2.05k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 1.98k]
  |  |  ------------------
  ------------------
 5580|     70|            on_error(
 5581|     70|                "Cannot switch from manual to automatic argument indexing");
 5582|     70|            return;
 5583|     70|        }
 5584|  1.98k|        m_next_arg_id = -1;
 5585|  1.98k|        do_check_arg_id(id);
 5586|  1.98k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  46.0k|        {
 6945|  46.0k|            arg_id = handler.on_arg_id();
 6946|  46.0k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  95.7k|    {
 5252|  95.7k|        return m_type;
 5253|  95.7k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  44.5k|    {
 5561|  44.5k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  44.5k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  92.4k|    {
 5550|  92.4k|        return m_format.data();
 5551|  92.4k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  47.8k|    {
 7122|  47.8k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  47.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  47.8k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  47.8k|{
 6858|  47.8k|    auto do_presentation = [&]() -> const CharT* {
 6859|  47.8k|        if (*begin == CharT{'['}) {
 6860|  47.8k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  47.8k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  47.8k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  47.8k|                return begin;
 6866|  47.8k|            }
 6867|  47.8k|            handler.on_character_set_string(set);
 6868|  47.8k|            return begin;
 6869|  47.8k|        }
 6870|  47.8k|        if (*begin == CharT{'/'}) {
 6871|  47.8k|            return parse_presentation_regex(begin, end, handler);
 6872|  47.8k|        }
 6873|  47.8k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  47.8k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  47.8k|            handler.on_error("Invalid type specifier in format string");
 6876|  47.8k|            return begin;
 6877|  47.8k|        }
 6878|  47.8k|        handler.on_type(type);
 6879|  47.8k|        return begin;
 6880|  47.8k|    };
 6881|       |
 6882|  47.8k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 46.7k, False: 1.11k]
  |  Branch (6882:28): [True: 2.26k, False: 44.5k]
  ------------------
 6883|  47.8k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 878, False: 1.38k]
  |  Branch (6883:36): [True: 826, False: 52]
  ------------------
 6884|    826|        return do_presentation();
 6885|    826|    }
 6886|       |
 6887|  47.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  47.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.0k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  47.0k|    begin = parse_align(begin, end, handler);
 6893|  47.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  47.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 46.9k]
  |  |  ------------------
  ------------------
 6894|    126|        handler.on_error("Unexpected end of format string");
 6895|    126|        return begin;
 6896|    126|    }
 6897|       |
 6898|  46.9k|    begin = parse_width(begin, end, handler);
 6899|  46.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  46.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 46.8k]
  |  |  ------------------
  ------------------
 6900|    120|        handler.on_error("Unexpected end of format string");
 6901|    120|        return begin;
 6902|    120|    }
 6903|       |
 6904|  46.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 6.30k, False: 40.5k]
  ------------------
 6905|  6.30k|        ++begin;
 6906|  6.30k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 6.27k]
  |  |  ------------------
  ------------------
 6907|     34|            handler.on_error("Unexpected end of format string");
 6908|     34|            return begin;
 6909|     34|        }
 6910|  6.27k|        begin = parse_precision(begin, end, handler);
 6911|  6.27k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 6.15k]
  |  |  ------------------
  ------------------
 6912|    114|            handler.on_error("Unexpected end of format string");
 6913|    114|            return begin;
 6914|    114|        }
 6915|  6.27k|    }
 6916|       |
 6917|  46.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 500, False: 46.1k]
  ------------------
 6918|    500|        handler.on_localized();
 6919|    500|        ++begin;
 6920|    500|    }
 6921|  46.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 46.6k]
  |  |  ------------------
  ------------------
 6922|     52|        handler.on_error("Unexpected end of format string");
 6923|     52|        return begin;
 6924|     52|    }
 6925|       |
 6926|  46.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 46.6k, False: 0]
  |  Branch (6926:25): [True: 41.9k, False: 4.66k]
  ------------------
 6927|  41.9k|        do_presentation();
 6928|  41.9k|    }
 6929|  46.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.95k, False: 44.6k]
  |  |  ------------------
  ------------------
 6930|  1.95k|        handler.on_error("Unexpected end of format string");
 6931|  1.95k|        return begin;
 6932|  1.95k|    }
 6933|       |
 6934|  44.6k|    return begin;
 6935|  46.6k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  2.26k|{
 6507|  2.26k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 824, False: 1.43k]
  |  Branch (6507:33): [True: 772, False: 52]
  ------------------
 6508|  2.26k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 268, False: 1.22k]
  |  Branch (6508:33): [True: 106, False: 162]
  ------------------
 6509|  2.26k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  42.7k|    auto do_presentation = [&]() -> const CharT* {
 6859|  42.7k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 10.4k, False: 32.3k]
  ------------------
 6860|  10.4k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  10.4k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 852, False: 9.58k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    852|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    852|                return begin;
 6866|    852|            }
 6867|  9.58k|            handler.on_character_set_string(set);
 6868|  9.58k|            return begin;
 6869|  10.4k|        }
 6870|  32.3k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 27.7k, False: 4.64k]
  ------------------
 6871|  27.7k|            return parse_presentation_regex(begin, end, handler);
 6872|  27.7k|        }
 6873|  4.64k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  4.64k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  4.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 602, False: 4.04k]
  |  |  ------------------
  ------------------
 6875|    602|            handler.on_error("Invalid type specifier in format string");
 6876|    602|            return begin;
 6877|    602|        }
 6878|  4.04k|        handler.on_type(type);
 6879|  4.04k|        return begin;
 6880|  4.64k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  10.4k|{
 6697|  10.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  10.4k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  10.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  10.4k|    auto start = begin;
 6701|  10.4k|    ++begin;
 6702|       |
 6703|  10.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 10.3k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     42|        return {};
 6708|     42|    }
 6709|  10.3k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 1.84k, False: 8.54k]
  ------------------
 6710|  1.84k|        handler.on_charset_inverted();
 6711|  1.84k|        ++begin;
 6712|  1.84k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.81k]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     34|            return {};
 6717|     34|        }
 6718|  1.81k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 52, False: 1.76k]
  ------------------
 6719|     52|            handler.on_charset_single(char32_t{']'});
 6720|     52|            ++begin;
 6721|     52|        }
 6722|  1.81k|    }
 6723|  8.54k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 8.50k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  1.10M|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 1.10M, False: 484]
  ------------------
 6728|  1.10M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 258, False: 1.10M]
  |  |  ------------------
  ------------------
 6729|    258|            break;
 6730|    258|        }
 6731|       |
 6732|  1.10M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 9.58k, False: 1.09M]
  ------------------
 6733|  9.58k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  9.58k|        }
 6735|       |
 6736|  1.09M|        parse_presentation_set_literal(begin, end, handler);
 6737|  1.09M|    }
 6738|       |
 6739|    742|    SCN_UNLIKELY_ATTR
 6740|    742|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    742|    return {};
 6742|  10.3k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  1.09M|{
 6661|  1.09M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  1.09M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  1.09M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 136, False: 1.09M]
  |  |  ------------------
  ------------------
 6665|    136|        return;
 6666|    136|    }
 6667|       |
 6668|  1.09M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 1.09M, False: 188]
  |  Branch (6668:25): [True: 8.49k, False: 1.08M]
  |  Branch (6668:49): [True: 8.45k, False: 34]
  ------------------
 6669|  1.09M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 8.18k, False: 268]
  ------------------
 6670|  8.18k|        ++begin;
 6671|       |
 6672|  8.18k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  8.18k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  8.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 8.11k]
  |  |  ------------------
  ------------------
 6674|     70|            return;
 6675|     70|        }
 6676|       |
 6677|  8.11k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  8.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 8.08k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     34|            return;
 6682|     34|        }
 6683|       |
 6684|  8.08k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  8.08k|        return;
 6686|  8.11k|    }
 6687|       |
 6688|  1.08M|    handler.on_charset_single(cp_first);
 6689|  1.08M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  1.10M|{
 6637|  1.10M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  1.10M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  1.10M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 1.10M]
  |  |  |  Branch (859:45): [True: 88, False: 1.10M]
  |  |  |  Branch (859:45): [True: 26, False: 1.10M]
  |  |  ------------------
  ------------------
 6641|    114|        handler.on_error("Invalid encoding in format string");
 6642|    114|        return invalid_code_point;
 6643|    114|    }
 6644|       |
 6645|  1.10M|    const auto cp =
 6646|  1.10M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  1.10M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92, False: 1.10M]
  |  |  ------------------
  ------------------
 6648|     92|        handler.on_error("Invalid encoding in format string");
 6649|     92|        return invalid_code_point;
 6650|     92|    }
 6651|       |
 6652|  1.10M|    begin += len;
 6653|  1.10M|    return cp;
 6654|  1.10M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  9.58k|    {
 6346|  9.58k|        m_specs.charset_string_data = fmt.data();
 6347|  9.58k|        m_specs.charset_string_size = fmt.size();
 6348|  9.58k|        on_type(presentation_type::string_set);
 6349|  9.58k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  27.7k|{
 6749|  27.7k|#if !SCN_DISABLE_REGEX
 6750|  27.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  27.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  27.7k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  27.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|  27.7k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  55.4k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|  27.7k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|  27.7k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|  27.7k|        return begin;
 6757|  27.7k|    }
 6758|       |
 6759|  27.7k|    auto start = begin;
 6760|  27.7k|    ++begin;
 6761|       |
 6762|  27.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  27.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 27.6k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  27.6k|    handler.on_type(presentation_type::regex);
 6768|  3.68M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 3.68M, False: 176]
  ------------------
 6769|  3.68M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 38.2k, False: 3.64M]
  ------------------
 6770|  38.2k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 27.4k, False: 10.7k]
  ------------------
 6771|  27.4k|                break;
 6772|  27.4k|            }
 6773|  10.7k|            else {
 6774|  10.7k|                handler.on_type(presentation_type::regex_escaped);
 6775|  10.7k|            }
 6776|  38.2k|        }
 6777|  3.68M|    }
 6778|  27.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 176, False: 27.4k]
  |  |  ------------------
  ------------------
 6779|    176|        handler.on_error("Unexpected end of regex in format string");
 6780|    176|        return begin;
 6781|    176|    }
 6782|       |
 6783|  27.4k|    auto regex_end = begin;
 6784|  27.4k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  27.4k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 27.4k]
  |  |  ------------------
  ------------------
 6786|     34|        handler.on_error("Invalid (empty) regex in format string");
 6787|     34|        return begin;
 6788|     34|    }
 6789|  27.4k|    handler.on_regex_pattern(regex_pattern);
 6790|  27.4k|    ++begin;
 6791|       |
 6792|  27.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 27.4k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  27.4k|    regex_flags flags{regex_flags::none};
 6798|  27.4k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  27.4k|        {{'m', regex_flags::multiline},
 6800|  27.4k|         {'s', regex_flags::singleline},
 6801|  27.4k|         {'i', regex_flags::nocase},
 6802|  27.4k|         {'n', regex_flags::nocapture}}};
 6803|  30.9k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 30.9k, False: 58]
  ------------------
 6804|  30.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 27.2k, False: 3.69k]
  ------------------
 6805|  27.2k|            break;
 6806|  27.2k|        }
 6807|  3.69k|        bool found_flag = false;
 6808|  9.49k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 9.49k, False: 88]
  ------------------
 6809|  9.49k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 5.89k, False: 3.60k]
  ------------------
 6810|  5.89k|                continue;
 6811|  5.89k|            }
 6812|  3.60k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 34, False: 3.56k]
  ------------------
 6813|     34|                handler.on_error("Flag set multiple times in regex");
 6814|     34|                return begin;
 6815|     34|            }
 6816|  3.56k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  3.56k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 48, False: 3.52k]
  ------------------
 6818|       |                // clang-format off
 6819|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     48|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  3.56k|#endif
 6830|  3.56k|            flags |= flag.second;
 6831|  3.56k|            found_flag = true;
 6832|  3.56k|            break;
 6833|  3.60k|        }
 6834|  3.65k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 88, False: 3.56k]
  ------------------
 6835|     88|            handler.on_error("Invalid flag in regex");
 6836|     88|            return begin;
 6837|     88|        }
 6838|  3.65k|    }
 6839|  27.3k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  27.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 27.2k]
  |  |  ------------------
  ------------------
 6842|     58|        handler.on_error("Unexpected end of regex in format string");
 6843|     58|        return begin;
 6844|     58|    }
 6845|       |
 6846|  27.2k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  27.3k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  27.4k|    {
 6354|  27.4k|        m_specs.charset_string_data = pattern.data();
 6355|  27.4k|        m_specs.charset_string_size = pattern.size();
 6356|  27.4k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  4.64k|{
 6455|  4.64k|    switch (type) {
 6456|    106|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 106, False: 4.53k]
  ------------------
 6457|    158|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 52, False: 4.59k]
  ------------------
 6458|    158|            return presentation_type::int_binary;
 6459|    108|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 108, False: 4.53k]
  ------------------
 6460|    108|            return presentation_type::int_decimal;
 6461|    178|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 178, False: 4.46k]
  ------------------
 6462|    178|            return presentation_type::int_generic;
 6463|     70|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 70, False: 4.57k]
  ------------------
 6464|     70|            return presentation_type::int_unsigned_decimal;
 6465|    196|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 196, False: 4.44k]
  ------------------
 6466|    196|            return presentation_type::int_octal;
 6467|    116|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 116, False: 4.52k]
  ------------------
 6468|    168|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 4.59k]
  ------------------
 6469|    168|            return presentation_type::int_hex;
 6470|     34|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 34, False: 4.60k]
  ------------------
 6471|     68|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 34, False: 4.60k]
  ------------------
 6472|     68|            return presentation_type::int_arbitrary_base;
 6473|    106|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 106, False: 4.53k]
  ------------------
 6474|    194|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 88, False: 4.55k]
  ------------------
 6475|    194|            return presentation_type::float_hex;
 6476|     70|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 70, False: 4.57k]
  ------------------
 6477|    140|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 70, False: 4.57k]
  ------------------
 6478|    140|            return presentation_type::float_scientific;
 6479|    232|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 232, False: 4.41k]
  ------------------
 6480|    338|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 106, False: 4.53k]
  ------------------
 6481|    338|            return presentation_type::float_fixed;
 6482|    132|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 132, False: 4.51k]
  ------------------
 6483|    190|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 58, False: 4.58k]
  ------------------
 6484|    190|            return presentation_type::float_general;
 6485|  1.78k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 1.78k, False: 2.86k]
  ------------------
 6486|  1.78k|            return presentation_type::string;
 6487|    340|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 340, False: 4.30k]
  ------------------
 6488|    340|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 4.60k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     78|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 78, False: 4.56k]
  ------------------
 6492|     78|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 4.64k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 4.64k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    602|        default:
  ------------------
  |  Branch (6499:9): [True: 602, False: 4.04k]
  ------------------
 6500|    602|            return presentation_type::none;
 6501|  4.64k|    }
 6502|  4.64k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|  47.0k|{
 6532|  47.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  47.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  47.0k|    auto check_align = [](wchar_t ch) {
 6535|  47.0k|        switch (ch) {
 6536|  47.0k|            case L'<':
 6537|  47.0k|                return align_type::left;
 6538|  47.0k|            case L'>':
 6539|  47.0k|                return align_type::right;
 6540|  47.0k|            case L'^':
 6541|  47.0k|                return align_type::center;
 6542|  47.0k|            default:
 6543|  47.0k|                return align_type::none;
 6544|  47.0k|        }
 6545|  47.0k|    };
 6546|       |
 6547|  47.0k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  47.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  94.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 47.0k]
  |  |  |  Branch (859:45): [True: 38, False: 47.0k]
  |  |  |  Branch (859:45): [True: 4, False: 47.0k]
  |  |  ------------------
  ------------------
 6549|  47.0k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|     42|        handler.on_error("Invalid encoding in fill character");
 6551|     42|        return begin;
 6552|     42|    }
 6553|       |
 6554|  47.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  47.0k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  47.0k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  47.0k|    const auto begin_before_fill = begin;
 6559|  47.0k|    begin += potential_fill_len;
 6560|       |
 6561|  47.0k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 1.07k, False: 45.9k]
  ------------------
 6562|  1.07k|        return begin_before_fill;
 6563|  1.07k|    }
 6564|       |
 6565|  45.9k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  45.9k|    const auto begin_after_fill = begin;
 6567|  45.9k|    ++begin;
 6568|       |
 6569|  45.9k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 44.6k, False: 1.30k]
  ------------------
 6570|  44.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  44.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60, False: 44.5k]
  |  |  ------------------
  ------------------
 6571|     60|            handler.on_error("Invalid fill character '{' in format string");
 6572|     60|            return begin;
 6573|     60|        }
 6574|  44.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 7.77k, False: 36.8k]
  ------------------
 6575|  7.77k|            return begin_before_fill;
 6576|  7.77k|        }
 6577|  44.5k|    }
 6578|       |
 6579|  38.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 34.6k, False: 3.43k]
  ------------------
 6580|  34.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 2.73k, False: 31.9k]
  ------------------
 6581|  2.73k|            handler.on_align(potential_align_on_fill);
 6582|  2.73k|            return begin_after_fill;
 6583|  2.73k|        }
 6584|  31.9k|        return begin_before_fill;
 6585|  34.6k|    }
 6586|       |
 6587|  3.43k|    handler.on_fill(potential_fill);
 6588|  3.43k|    handler.on_align(potential_align_after_fill);
 6589|  3.43k|    return begin;
 6590|  38.1k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  47.0k|{
 6514|  47.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  47.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  47.0k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  47.0k|        return 1;
 6517|  47.0k|    }
 6518|  47.0k|    else {
 6519|  47.0k|        const auto lengths =
 6520|  47.0k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  47.0k|            "\3\4";
 6522|  47.0k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  47.0k|        return len;
 6524|  47.0k|    }
 6525|  47.0k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  92.9k|    auto check_align = [](wchar_t ch) {
 6535|  92.9k|        switch (ch) {
 6536|  1.30k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 1.30k, False: 91.6k]
  ------------------
 6537|  1.30k|                return align_type::left;
 6538|    940|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 940, False: 92.0k]
  ------------------
 6539|    940|                return align_type::right;
 6540|  4.90k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 4.90k, False: 88.0k]
  ------------------
 6541|  4.90k|                return align_type::center;
 6542|  85.8k|            default:
  ------------------
  |  Branch (6542:13): [True: 85.8k, False: 7.15k]
  ------------------
 6543|  85.8k|                return align_type::none;
 6544|  92.9k|        }
 6545|  92.9k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|  3.43k|    {
 6268|  3.43k|        m_specs.fill = fill;
 6269|  3.43k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|  3.43k|    {
 6149|  3.43k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  3.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|  3.43k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  3.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|  3.43k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|  8.80k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6152:32): [True: 5.37k, False: 3.43k]
  ------------------
 6153|  5.37k|                SCN_GCC_PUSH
 6154|  5.37k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|  5.37k|                m_data[i] = s[i];
 6156|  5.37k|                SCN_GCC_POP
 6157|  5.37k|            }
 6158|  3.43k|            m_size = static_cast<unsigned char>(s.size());
 6159|  3.43k|        }
 6160|  3.43k|        else if constexpr (sizeof(CharT) == 2) {
 6161|  3.43k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|  3.43k|            m_data[1] =
 6163|  3.43k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|  3.43k|            if (s.size() == 1) {
 6165|  3.43k|                return;
 6166|  3.43k|            }
 6167|  3.43k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|  3.43k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|  3.43k|        }
 6170|  3.43k|        else {
 6171|  3.43k|            const auto front = static_cast<unsigned>(s.front());
 6172|  3.43k|            m_data[0] = static_cast<char>(front);
 6173|  3.43k|            m_data[1] = static_cast<char>(front >> 8);
 6174|  3.43k|            m_data[2] = static_cast<char>(front >> 16);
 6175|  3.43k|            m_data[3] = static_cast<char>(front >> 24);
 6176|  3.43k|        }
 6177|  3.43k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|  46.9k|{
 6597|  46.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  46.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  46.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 13.7k, False: 33.1k]
  |  Branch (6599:33): [True: 3.49k, False: 10.2k]
  ------------------
 6600|  3.49k|        int width = parse_simple_int(begin, end);
 6601|  3.49k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  3.49k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.46k, False: 34]
  |  |  ------------------
  ------------------
 6602|  3.46k|            handler.on_width(width);
 6603|  3.46k|        }
 6604|     34|        else {
 6605|     34|            handler.on_error("Invalid field width");
 6606|     34|            return begin;
 6607|     34|        }
 6608|  3.49k|    }
 6609|  46.9k|    return begin;
 6610|  46.9k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6616|  6.27k|{
 6617|  6.27k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  6.27k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 6.23k, False: 34]
  |  Branch (6619:33): [True: 6.20k, False: 34]
  ------------------
 6620|  6.20k|        int prec = parse_simple_int(begin, end);
 6621|  6.20k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  6.20k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.15k, False: 48]
  |  |  ------------------
  ------------------
 6622|  6.15k|            handler.on_precision(prec);
 6623|  6.15k|        }
 6624|     48|        else {
 6625|     48|            handler.on_error("Invalid field precision");
 6626|     48|            return begin;
 6627|     48|        }
 6628|  6.20k|    }
 6629|  6.22k|    return begin;
 6630|  6.27k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|    500|    {
 7127|    500|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    500|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 450, False: 50]
  ------------------
 7129|    500|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 400, False: 50]
  ------------------
 7130|    500|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 350, False: 50]
  ------------------
 7131|    500|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 300, False: 50]
  ------------------
 7132|    300|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    300|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    300|        }
 7137|       |
 7138|    200|        Handler::on_localized();
 7139|    200|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  44.4k|{
 8417|  44.4k|#define SCN_VISIT(Type)                                         \
 8418|  44.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  44.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  44.4k|    }                                                           \
 8421|  44.4k|    else {                                                      \
 8422|  44.4k|        return vis(monostate_val);                              \
 8423|  44.4k|    }
 8424|       |
 8425|  44.4k|    monostate monostate_val{};
 8426|       |
 8427|  44.4k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 44.4k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 44.4k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  4.96k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 4.96k, False: 39.4k]
  ------------------
 8433|  4.96k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  4.96k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  4.96k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.96k|    }                                                           \
  |  | 8421|  4.96k|    else {                                                      \
  |  | 8422|  4.96k|        return vis(monostate_val);                              \
  |  | 8423|  4.96k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 44.4k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 44.4k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 44.4k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 44.4k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  4.96k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 4.96k, False: 39.4k]
  ------------------
 8443|  4.96k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  4.96k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  4.96k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.96k|    }                                                           \
  |  | 8421|  4.96k|    else {                                                      \
  |  | 8422|  4.96k|        return vis(monostate_val);                              \
  |  | 8423|  4.96k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 44.4k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 44.4k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  4.92k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 4.92k, False: 39.5k]
  ------------------
 8449|  4.92k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  4.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  4.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.92k|    }                                                           \
  |  | 8421|  4.92k|    else {                                                      \
  |  | 8422|  4.92k|        return vis(monostate_val);                              \
  |  | 8423|  4.92k|    }
  ------------------
 8450|  4.96k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 4.96k, False: 39.4k]
  ------------------
 8451|  4.96k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  4.96k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  4.96k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.96k|    }                                                           \
  |  | 8421|  4.96k|    else {                                                      \
  |  | 8422|  4.96k|        return vis(monostate_val);                              \
  |  | 8423|  4.96k|    }
  ------------------
 8452|  4.92k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 4.92k, False: 39.5k]
  ------------------
 8453|  4.92k|            SCN_VISIT(char);
  ------------------
  |  | 8418|  4.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  4.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.92k|    }                                                           \
  |  | 8421|  4.92k|    else {                                                      \
  |  | 8422|  4.92k|        return vis(monostate_val);                              \
  |  | 8423|  4.92k|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 44.4k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 44.4k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 44.4k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  4.96k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 4.96k, False: 39.4k]
  ------------------
 8461|  4.96k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  4.96k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  4.96k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.96k|    }                                                           \
  |  | 8421|  4.96k|    else {                                                      \
  |  | 8422|  4.96k|        return vis(monostate_val);                              \
  |  | 8423|  4.96k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 44.4k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  4.92k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 4.92k, False: 39.5k]
  ------------------
 8465|  4.92k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  4.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  4.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.92k|    }                                                           \
  |  | 8421|  4.92k|    else {                                                      \
  |  | 8422|  4.92k|        return vis(monostate_val);                              \
  |  | 8423|  4.92k|    }
  ------------------
 8466|  4.92k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 4.92k, False: 39.5k]
  ------------------
 8467|  4.92k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  4.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  4.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.92k|    }                                                           \
  |  | 8421|  4.92k|    else {                                                      \
  |  | 8422|  4.92k|        return vis(monostate_val);                              \
  |  | 8423|  4.92k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 44.4k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  4.92k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 4.92k, False: 39.5k]
  ------------------
 8471|  4.92k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  4.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  4.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.92k|    }                                                           \
  |  | 8421|  4.92k|    else {                                                      \
  |  | 8422|  4.92k|        return vis(monostate_val);                              \
  |  | 8423|  4.92k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 44.4k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 44.4k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 44.4k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 44.4k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 44.4k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  44.4k|            SCN_CLANG_POP
 8495|  44.4k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  10.9k|    {
 3330|  10.9k|        return m_iterator;
 3331|  10.9k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|  1.88k|    {
 1430|  1.88k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.88k|    {
  437|  1.88k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.10k|    {
 1177|  2.10k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  6.30k|    {
 3334|  6.30k|        return m_sentinel;
 3335|  6.30k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|    226|    {
 1476|    226|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    226|    {
  447|    226|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  5.06k|    {
 3316|  5.06k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1597|    230|    {
 1598|    230|        return has_value();
 1599|    230|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.16k|    {
  485|  4.16k|        return m_has_value;
  486|  4.16k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEERT_v:
 1652|    178|    {
 1653|    178|        return value();
 1654|    178|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.88k|    {
 1627|  1.88k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.88k|        return this->get_value();
 1629|  1.88k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.88k|    {
  451|  1.88k|        return m_value;
  452|  1.88k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  1.87k|    {
 1837|  1.87k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.87k|                                            std::forward<F>(f));
 1839|  1.87k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|  1.87k|{
 1323|  1.87k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.87k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.87k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.87k|            return result(*std::forward<Exp>(exp));
 1327|  1.87k|        }
 1328|       |
 1329|  1.87k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.87k|        return result(unexpect, monostate{});
 1331|  1.87k|    }
 1332|  1.87k|    else {
 1333|  1.87k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.87k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.87k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.70k, False: 174]
  |  |  ------------------
  ------------------
 1335|  1.87k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.87k|                   : result(unexpect,
 1337|    174|                            trivial_invoke(std::forward<F>(f),
 1338|    174|                                           std::forward<Exp>(exp).error()));
 1339|  1.87k|    }
 1340|  1.87k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.70k|    {
 1663|  1.70k|        return std::move(value());
 1664|  1.70k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.70k|    {
 1430|  1.70k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.70k|    {
  437|  1.70k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.87k|    {
 1177|  1.87k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1613|    174|    {
 1614|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    174|        return std::move(this->get_unexpected().error());
 1616|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1485|    174|    {
 1486|    174|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    174|    {
  447|    174|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  1.87k|    {
 1598|  1.87k|        return has_value();
 1599|  1.87k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.75k|    {
  485|  3.75k|        return m_has_value;
  486|  3.75k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1603|    174|    {
 1604|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    174|        return this->get_unexpected().error();
 1606|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.70k|    {
 1663|  1.70k|        return std::move(value());
 1664|  1.70k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.70k|    {
 1627|  1.70k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.70k|        return this->get_value();
 1629|  1.70k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.70k|    {
  451|  1.70k|        return m_value;
  452|  1.70k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   169k|    {
 5466|   169k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 169k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   169k|        return static_cast<std::size_t>(m_desc &
 5471|   169k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   169k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|   199k|    {
 5491|   199k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   199k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  29.9k|    {
 5434|  29.9k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.9k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  29.9k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 29.8k]
  |  |  ------------------
  ------------------
 5442|     68|            return {};
 5443|     68|        }
 5444|       |
 5445|  29.8k|        const auto t = type(id);
 5446|  29.8k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.14k, False: 28.7k]
  |  |  ------------------
  ------------------
 5447|  1.14k|            return {};
 5448|  1.14k|        }
 5449|       |
 5450|  28.7k|        basic_scan_arg<Context> arg;
 5451|  28.7k|        arg.m_type = t;
 5452|  28.7k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 28.7k, False: 0]
  ------------------
 5453|  28.7k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  28.7k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  28.7k|        return arg;
 5459|  29.8k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  29.9k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  29.8k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  29.8k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  29.8k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  29.8k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  29.8k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  28.7k|    {
 5495|  28.7k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  28.7k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  56.9k|    {
 5247|  56.9k|        return m_type != detail::arg_type::none_type;
 5248|  56.9k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  4.44k|{
 8417|  4.44k|#define SCN_VISIT(Type)                                         \
 8418|  4.44k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  4.44k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  4.44k|    }                                                           \
 8421|  4.44k|    else {                                                      \
 8422|  4.44k|        return vis(monostate_val);                              \
 8423|  4.44k|    }
 8424|       |
 8425|  4.44k|    monostate monostate_val{};
 8426|       |
 8427|  4.44k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 4.44k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 4.44k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    494|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 494, False: 3.95k]
  ------------------
 8433|    494|            SCN_VISIT(int);
  ------------------
  |  | 8418|    494|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    494|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    494|    }                                                           \
  |  | 8421|    494|    else {                                                      \
  |  | 8422|    494|        return vis(monostate_val);                              \
  |  | 8423|    494|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 4.44k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 4.44k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 4.44k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 4.44k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    494|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 494, False: 3.95k]
  ------------------
 8443|    494|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    494|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    494|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    494|    }                                                           \
  |  | 8421|    494|    else {                                                      \
  |  | 8422|    494|        return vis(monostate_val);                              \
  |  | 8423|    494|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 4.44k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 4.44k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    494|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 494, False: 3.95k]
  ------------------
 8449|    494|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    494|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    494|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    494|    }                                                           \
  |  | 8421|    494|    else {                                                      \
  |  | 8422|    494|        return vis(monostate_val);                              \
  |  | 8423|    494|    }
  ------------------
 8450|    494|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 494, False: 3.95k]
  ------------------
 8451|    494|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    494|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    494|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    494|    }                                                           \
  |  | 8421|    494|    else {                                                      \
  |  | 8422|    494|        return vis(monostate_val);                              \
  |  | 8423|    494|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 4.44k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|    494|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 494, False: 3.95k]
  ------------------
 8455|    494|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|    494|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    494|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    494|    }                                                           \
  |  | 8421|    494|    else {                                                      \
  |  | 8422|    494|        return vis(monostate_val);                              \
  |  | 8423|    494|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 4.44k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 4.44k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    494|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 494, False: 3.95k]
  ------------------
 8461|    494|            SCN_VISIT(double);
  ------------------
  |  | 8418|    494|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    494|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    494|    }                                                           \
  |  | 8421|    494|    else {                                                      \
  |  | 8422|    494|        return vis(monostate_val);                              \
  |  | 8423|    494|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 4.44k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 4.44k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|    494|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 494, False: 3.95k]
  ------------------
 8467|    494|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    494|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    494|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    494|    }                                                           \
  |  | 8421|    494|    else {                                                      \
  |  | 8422|    494|        return vis(monostate_val);                              \
  |  | 8423|    494|    }
  ------------------
 8468|    494|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 494, False: 3.95k]
  ------------------
 8469|    494|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|    494|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    494|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    494|    }                                                           \
  |  | 8421|    494|    else {                                                      \
  |  | 8422|    494|        return vis(monostate_val);                              \
  |  | 8423|    494|    }
  ------------------
 8470|    494|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 494, False: 3.95k]
  ------------------
 8471|    494|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    494|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    494|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    494|    }                                                           \
  |  | 8421|    494|    else {                                                      \
  |  | 8422|    494|        return vis(monostate_val);                              \
  |  | 8423|    494|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 4.44k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 4.44k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 4.44k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 4.44k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 4.44k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  4.44k|            SCN_CLANG_POP
 8495|  4.44k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   169k|    {
 5545|   169k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   169k|    {
 8056|   169k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   169k|{
 7044|   169k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   169k|    handler.check_args_exhausted();
 7046|   169k|    return handler.get_error();
 7047|   169k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   169k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   169k|    auto begin = format.data();
 7013|   169k|    auto it = begin;
 7014|   169k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   348M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 348M, False: 57.2k]
  ------------------
 7017|   348M|        const auto ch = *it++;
 7018|   348M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 30.5k, False: 348M]
  ------------------
 7019|  30.5k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  30.5k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  30.5k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 27.1k, False: 3.43k]
  ------------------
 7023|  27.1k|                return;
 7024|  27.1k|            }
 7025|  30.5k|        }
 7026|   348M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 88.3k, False: 348M]
  ------------------
 7027|  88.3k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.0k, False: 3.36k]
  |  |  |  Branch (859:45): [True: 202, False: 88.1k]
  |  |  |  Branch (859:45): [True: 84.8k, False: 3.36k]
  |  |  ------------------
  ------------------
 7028|  85.0k|                handler.on_error("Unmatched '}' in format string");
 7029|  85.0k|                return;
 7030|  85.0k|            }
 7031|       |
 7032|  3.36k|            handler.on_literal_text(begin, it);
 7033|  3.36k|            begin = ++it;
 7034|  3.36k|        }
 7035|   348M|    }
 7036|       |
 7037|  57.2k|    handler.on_literal_text(begin, end);
 7038|  57.2k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|  30.5k|{
 6942|  30.5k|    struct id_adapter {
 6943|  30.5k|        constexpr void operator()()
 6944|  30.5k|        {
 6945|  30.5k|            arg_id = handler.on_arg_id();
 6946|  30.5k|        }
 6947|  30.5k|        constexpr void operator()(std::size_t id)
 6948|  30.5k|        {
 6949|  30.5k|            arg_id = handler.on_arg_id(id);
 6950|  30.5k|        }
 6951|       |
 6952|  30.5k|        constexpr void on_error(const char* msg)
 6953|  30.5k|        {
 6954|  30.5k|            SCN_UNLIKELY_ATTR
 6955|  30.5k|            handler.on_error(msg);
 6956|  30.5k|        }
 6957|       |
 6958|  30.5k|        Handler& handler;
 6959|  30.5k|        std::size_t arg_id;
 6960|  30.5k|    };
 6961|       |
 6962|  30.5k|    ++begin;
 6963|  30.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 30.5k]
  |  |  ------------------
  ------------------
 6964|     52|        handler.on_error("Unexpected end of replacement field");
 6965|     52|        return begin;
 6966|     52|    }
 6967|       |
 6968|  30.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 4.41k, False: 26.0k]
  ------------------
 6969|  4.41k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  4.41k|    }
 6971|  26.0k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 106, False: 25.9k]
  ------------------
 6972|    106|        handler.on_literal_text(begin, begin + 1);
 6973|    106|    }
 6974|  25.9k|    else {
 6975|  25.9k|        auto adapter = id_adapter{handler, 0};
 6976|  25.9k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  25.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  25.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 25.8k]
  |  |  ------------------
  ------------------
 6979|    120|            handler.on_error("Missing '}' in format string");
 6980|    120|            return begin;
 6981|    120|        }
 6982|       |
 6983|  25.8k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 142, False: 25.7k]
  ------------------
 6984|    142|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    142|        }
 6986|  25.7k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 25.4k, False: 314]
  ------------------
 6987|  25.4k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 25.3k]
  |  |  ------------------
  ------------------
 6988|     50|                handler.on_error("Unexpected end of replacement field");
 6989|     50|                return begin;
 6990|     50|            }
 6991|  25.3k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  25.3k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.24k, False: 23.1k]
  |  |  |  Branch (859:45): [True: 0, False: 25.3k]
  |  |  |  Branch (859:45): [True: 2.24k, False: 23.1k]
  |  |  ------------------
  ------------------
 6993|  2.24k|                handler.on_error("Unknown format specifier");
 6994|  2.24k|                return begin;
 6995|  2.24k|            }
 6996|  25.3k|        }
 6997|    314|        else {
 6998|    314|            SCN_UNLIKELY_ATTR
 6999|    314|            handler.on_error("Missing '}' in format string");
 7000|    314|            return begin;
 7001|    314|        }
 7002|  25.8k|    }
 7003|  27.7k|    return begin + 1;
 7004|  30.5k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|  29.9k|    {
 8039|  29.9k|        return m_args.get(id);
 8040|  29.9k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8043|  4.56k|    {
 8044|  4.56k|        return m_args;
 8045|  4.56k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|  27.3k|    {
 8049|  27.3k|        return m_locale;
 8050|  27.3k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|  29.7k|    {
 5566|  29.7k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32, False: 29.6k]
  |  |  ------------------
  ------------------
 5567|     32|            on_error(
 5568|     32|                "Cannot switch from manual to automatic argument indexing");
 5569|     32|            return 0;
 5570|     32|        }
 5571|       |
 5572|  29.6k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  29.6k|        do_check_arg_id(id);
 5574|  29.6k|        return id;
 5575|  29.7k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5589|    112|    {
 5590|    112|        return detail::handle_error(
 5591|    112|            scan_error{scan_error::invalid_format_string, msg});
 5592|    112|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|  29.8k|{
 6054|  29.8k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  29.8k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  29.8k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  25.9k|{
 6443|  25.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  25.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  25.9k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 25.9k, False: 0]
  |  Branch (6444:26): [True: 694, False: 25.2k]
  ------------------
 6445|    694|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|    694|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|    694|    }
 6447|       |
 6448|  25.2k|    handler();
 6449|  25.2k|    return begin;
 6450|  25.9k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|    694|{
 6413|    694|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    694|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    694|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|    694|    CharT c = *begin;
 6416|    694|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 86, False: 608]
  |  Branch (6416:27): [True: 162, False: 446]
  ------------------
 6417|    248|        handler.on_error("Invalid argument ID");
 6418|    248|        return begin;
 6419|    248|    }
 6420|       |
 6421|    446|    int idx = 0;
 6422|    446|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 278, False: 168]
  ------------------
 6423|    278|        idx = parse_simple_int(begin, end);
 6424|    278|    }
 6425|    168|    else {
 6426|    168|        ++begin;
 6427|    168|    }
 6428|       |
 6429|    446|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 120, False: 326]
  |  Branch (6429:26): [True: 184, False: 142]
  |  Branch (6429:50): [True: 66, False: 118]
  ------------------
 6430|    186|        handler.on_error("Invalid argument ID");
 6431|    186|        return begin;
 6432|    186|    }
 6433|    260|    handler(idx);
 6434|       |
 6435|    260|    return begin;
 6436|    446|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|    434|        {
 6954|    434|            SCN_UNLIKELY_ATTR
 6955|    434|            handler.on_error(msg);
 6956|    434|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  10.8k|{
 6392|  10.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  10.8k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  10.8k|    unsigned long long value = 0;
 6396|  12.9k|    do {
 6397|  12.9k|        value *= 10;
 6398|  12.9k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  12.9k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 64, False: 12.9k]
  ------------------
 6400|  12.9k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|     64|            return -1;
 6402|     64|        }
 6403|  12.9k|        ++begin;
 6404|  12.9k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 12.6k, False: 308]
  |  Branch (6404:30): [True: 6.84k, False: 5.76k]
  |  Branch (6404:47): [True: 2.09k, False: 4.75k]
  ------------------
 6405|  10.8k|    return static_cast<int>(value);
 6406|  10.8k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|    260|        {
 6949|    260|            arg_id = handler.on_arg_id(id);
 6950|    260|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5578|    260|    {
 5579|    260|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80, False: 180]
  |  |  ------------------
  ------------------
 5580|     80|            on_error(
 5581|     80|                "Cannot switch from manual to automatic argument indexing");
 5582|     80|            return;
 5583|     80|        }
 5584|    180|        m_next_arg_id = -1;
 5585|    180|        do_check_arg_id(id);
 5586|    180|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  25.2k|        {
 6945|  25.2k|            arg_id = handler.on_arg_id();
 6946|  25.2k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  50.7k|    {
 5252|  50.7k|        return m_type;
 5253|  50.7k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|  22.7k|    {
 5561|  22.7k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  22.7k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  48.0k|    {
 5550|  48.0k|        return m_format.data();
 5551|  48.0k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  25.3k|    {
 7122|  25.3k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  25.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  25.3k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|  25.3k|{
 6858|  25.3k|    auto do_presentation = [&]() -> const CharT* {
 6859|  25.3k|        if (*begin == CharT{'['}) {
 6860|  25.3k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  25.3k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  25.3k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  25.3k|                return begin;
 6866|  25.3k|            }
 6867|  25.3k|            handler.on_character_set_string(set);
 6868|  25.3k|            return begin;
 6869|  25.3k|        }
 6870|  25.3k|        if (*begin == CharT{'/'}) {
 6871|  25.3k|            return parse_presentation_regex(begin, end, handler);
 6872|  25.3k|        }
 6873|  25.3k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  25.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  25.3k|            handler.on_error("Invalid type specifier in format string");
 6876|  25.3k|            return begin;
 6877|  25.3k|        }
 6878|  25.3k|        handler.on_type(type);
 6879|  25.3k|        return begin;
 6880|  25.3k|    };
 6881|       |
 6882|  25.3k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 24.4k, False: 932]
  |  Branch (6882:28): [True: 2.57k, False: 21.8k]
  ------------------
 6883|  25.3k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 248, False: 2.32k]
  |  Branch (6883:36): [True: 214, False: 34]
  ------------------
 6884|    214|        return do_presentation();
 6885|    214|    }
 6886|       |
 6887|  25.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.1k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  25.1k|    begin = parse_align(begin, end, handler);
 6893|  25.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 25.0k]
  |  |  ------------------
  ------------------
 6894|    102|        handler.on_error("Unexpected end of format string");
 6895|    102|        return begin;
 6896|    102|    }
 6897|       |
 6898|  25.0k|    begin = parse_width(begin, end, handler);
 6899|  25.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  25.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 24.9k]
  |  |  ------------------
  ------------------
 6900|     98|        handler.on_error("Unexpected end of format string");
 6901|     98|        return begin;
 6902|     98|    }
 6903|       |
 6904|  24.9k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 2.51k, False: 22.4k]
  ------------------
 6905|  2.51k|        ++begin;
 6906|  2.51k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.47k]
  |  |  ------------------
  ------------------
 6907|     34|            handler.on_error("Unexpected end of format string");
 6908|     34|            return begin;
 6909|     34|        }
 6910|  2.47k|        begin = parse_precision(begin, end, handler);
 6911|  2.47k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 2.36k]
  |  |  ------------------
  ------------------
 6912|    116|            handler.on_error("Unexpected end of format string");
 6913|    116|            return begin;
 6914|    116|        }
 6915|  2.47k|    }
 6916|       |
 6917|  24.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 428, False: 24.3k]
  ------------------
 6918|    428|        handler.on_localized();
 6919|    428|        ++begin;
 6920|    428|    }
 6921|  24.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  24.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 24.7k]
  |  |  ------------------
  ------------------
 6922|     52|        handler.on_error("Unexpected end of format string");
 6923|     52|        return begin;
 6924|     52|    }
 6925|       |
 6926|  24.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 24.7k, False: 0]
  |  Branch (6926:25): [True: 20.9k, False: 3.77k]
  ------------------
 6927|  20.9k|        do_presentation();
 6928|  20.9k|    }
 6929|  24.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  24.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.61k, False: 23.1k]
  |  |  ------------------
  ------------------
 6930|  1.61k|        handler.on_error("Unexpected end of format string");
 6931|  1.61k|        return begin;
 6932|  1.61k|    }
 6933|       |
 6934|  23.1k|    return begin;
 6935|  24.7k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  2.57k|{
 6507|  2.57k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 212, False: 2.36k]
  |  Branch (6507:33): [True: 178, False: 34]
  ------------------
 6508|  2.57k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 140, False: 2.25k]
  |  Branch (6508:33): [True: 70, False: 70]
  ------------------
 6509|  2.57k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  21.1k|    auto do_presentation = [&]() -> const CharT* {
 6859|  21.1k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 2.18k, False: 18.9k]
  ------------------
 6860|  2.18k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  2.18k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 580, False: 1.60k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    580|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    580|                return begin;
 6866|    580|            }
 6867|  1.60k|            handler.on_character_set_string(set);
 6868|  1.60k|            return begin;
 6869|  2.18k|        }
 6870|  18.9k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 16.1k, False: 2.82k]
  ------------------
 6871|  16.1k|            return parse_presentation_regex(begin, end, handler);
 6872|  16.1k|        }
 6873|  2.82k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  2.82k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  2.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 342, False: 2.47k]
  |  |  ------------------
  ------------------
 6875|    342|            handler.on_error("Invalid type specifier in format string");
 6876|    342|            return begin;
 6877|    342|        }
 6878|  2.47k|        handler.on_type(type);
 6879|  2.47k|        return begin;
 6880|  2.82k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  2.18k|{
 6697|  2.18k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  2.18k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  2.18k|    auto start = begin;
 6701|  2.18k|    ++begin;
 6702|       |
 6703|  2.18k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.15k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     34|        return {};
 6708|     34|    }
 6709|  2.15k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 786, False: 1.36k]
  ------------------
 6710|    786|        handler.on_charset_inverted();
 6711|    786|        ++begin;
 6712|    786|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    786|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 752]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     34|            return {};
 6717|     34|        }
 6718|    752|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 52, False: 700]
  ------------------
 6719|     52|            handler.on_charset_single(char32_t{']'});
 6720|     52|            ++begin;
 6721|     52|        }
 6722|    752|    }
 6723|  1.36k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 1.33k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  16.3k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 16.0k, False: 314]
  ------------------
 6728|  16.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 164, False: 15.8k]
  |  |  ------------------
  ------------------
 6729|    164|            break;
 6730|    164|        }
 6731|       |
 6732|  15.8k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 1.60k, False: 14.2k]
  ------------------
 6733|  1.60k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  1.60k|        }
 6735|       |
 6736|  14.2k|        parse_presentation_set_literal(begin, end, handler);
 6737|  14.2k|    }
 6738|       |
 6739|    478|    SCN_UNLIKELY_ATTR
 6740|    478|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    478|    return {};
 6742|  2.08k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  14.2k|{
 6661|  14.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  14.2k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  14.2k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 14.1k]
  |  |  ------------------
  ------------------
 6665|    128|        return;
 6666|    128|    }
 6667|       |
 6668|  14.1k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 14.0k, False: 88]
  |  Branch (6668:25): [True: 1.22k, False: 12.8k]
  |  Branch (6668:49): [True: 1.19k, False: 34]
  ------------------
 6669|  14.1k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 1.14k, False: 52]
  ------------------
 6670|  1.14k|        ++begin;
 6671|       |
 6672|  1.14k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  1.14k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.10k]
  |  |  ------------------
  ------------------
 6674|     34|            return;
 6675|     34|        }
 6676|       |
 6677|  1.10k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.07k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     34|            return;
 6682|     34|        }
 6683|       |
 6684|  1.07k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  1.07k|        return;
 6686|  1.10k|    }
 6687|       |
 6688|  12.9k|    handler.on_charset_single(cp_first);
 6689|  12.9k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  15.4k|{
 6637|  15.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  15.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  15.4k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  15.4k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.4k]
  |  |  |  Branch (859:45): [True: 0, False: 15.4k]
  |  |  |  Branch (859:45): [True: 0, False: 15.4k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  15.4k|    const auto cp =
 6646|  15.4k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  15.4k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162, False: 15.2k]
  |  |  ------------------
  ------------------
 6648|    162|        handler.on_error("Invalid encoding in format string");
 6649|    162|        return invalid_code_point;
 6650|    162|    }
 6651|       |
 6652|  15.2k|    begin += len;
 6653|  15.2k|    return cp;
 6654|  15.4k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  1.60k|    {
 6346|  1.60k|        m_specs.charset_string_data = fmt.data();
 6347|  1.60k|        m_specs.charset_string_size = fmt.size();
 6348|  1.60k|        on_type(presentation_type::string_set);
 6349|  1.60k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  16.1k|{
 6749|  16.1k|#if !SCN_DISABLE_REGEX
 6750|  16.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  16.1k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|  16.1k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  32.3k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|  16.1k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|  16.1k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|  16.1k|        return begin;
 6757|  16.1k|    }
 6758|       |
 6759|  16.1k|    auto start = begin;
 6760|  16.1k|    ++begin;
 6761|       |
 6762|  16.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 16.1k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  16.1k|    handler.on_type(presentation_type::regex);
 6768|   998k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 997k, False: 118]
  ------------------
 6769|   997k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 19.1k, False: 978k]
  ------------------
 6770|  19.1k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 16.0k, False: 3.14k]
  ------------------
 6771|  16.0k|                break;
 6772|  16.0k|            }
 6773|  3.14k|            else {
 6774|  3.14k|                handler.on_type(presentation_type::regex_escaped);
 6775|  3.14k|            }
 6776|  19.1k|        }
 6777|   997k|    }
 6778|  16.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118, False: 16.0k]
  |  |  ------------------
  ------------------
 6779|    118|        handler.on_error("Unexpected end of regex in format string");
 6780|    118|        return begin;
 6781|    118|    }
 6782|       |
 6783|  16.0k|    auto regex_end = begin;
 6784|  16.0k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  16.0k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 15.9k]
  |  |  ------------------
  ------------------
 6786|     34|        handler.on_error("Invalid (empty) regex in format string");
 6787|     34|        return begin;
 6788|     34|    }
 6789|  15.9k|    handler.on_regex_pattern(regex_pattern);
 6790|  15.9k|    ++begin;
 6791|       |
 6792|  15.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 15.9k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  15.9k|    regex_flags flags{regex_flags::none};
 6798|  15.9k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  15.9k|        {{'m', regex_flags::multiline},
 6800|  15.9k|         {'s', regex_flags::singleline},
 6801|  15.9k|         {'i', regex_flags::nocase},
 6802|  15.9k|         {'n', regex_flags::nocapture}}};
 6803|  17.7k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 17.7k, False: 44]
  ------------------
 6804|  17.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 15.8k, False: 1.92k]
  ------------------
 6805|  15.8k|            break;
 6806|  15.8k|        }
 6807|  1.92k|        bool found_flag = false;
 6808|  5.16k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 5.16k, False: 54]
  ------------------
 6809|  5.16k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 3.30k, False: 1.86k]
  ------------------
 6810|  3.30k|                continue;
 6811|  3.30k|            }
 6812|  1.86k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 34, False: 1.83k]
  ------------------
 6813|     34|                handler.on_error("Flag set multiple times in regex");
 6814|     34|                return begin;
 6815|     34|            }
 6816|  1.83k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  1.83k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 40, False: 1.79k]
  ------------------
 6818|       |                // clang-format off
 6819|     40|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     40|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  1.83k|#endif
 6830|  1.83k|            flags |= flag.second;
 6831|  1.83k|            found_flag = true;
 6832|  1.83k|            break;
 6833|  1.86k|        }
 6834|  1.88k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 54, False: 1.83k]
  ------------------
 6835|     54|            handler.on_error("Invalid flag in regex");
 6836|     54|            return begin;
 6837|     54|        }
 6838|  1.88k|    }
 6839|  15.8k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  15.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 15.8k]
  |  |  ------------------
  ------------------
 6842|     44|        handler.on_error("Unexpected end of regex in format string");
 6843|     44|        return begin;
 6844|     44|    }
 6845|       |
 6846|  15.8k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  15.8k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  15.9k|    {
 6354|  15.9k|        m_specs.charset_string_data = pattern.data();
 6355|  15.9k|        m_specs.charset_string_size = pattern.size();
 6356|  15.9k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|  2.82k|{
 6455|  2.82k|    switch (type) {
 6456|     88|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 88, False: 2.73k]
  ------------------
 6457|    122|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 34, False: 2.78k]
  ------------------
 6458|    122|            return presentation_type::int_binary;
 6459|    106|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 106, False: 2.71k]
  ------------------
 6460|    106|            return presentation_type::int_decimal;
 6461|    160|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 160, False: 2.66k]
  ------------------
 6462|    160|            return presentation_type::int_generic;
 6463|    124|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 124, False: 2.69k]
  ------------------
 6464|    124|            return presentation_type::int_unsigned_decimal;
 6465|    106|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 106, False: 2.71k]
  ------------------
 6466|    106|            return presentation_type::int_octal;
 6467|     88|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 88, False: 2.73k]
  ------------------
 6468|    140|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 2.76k]
  ------------------
 6469|    140|            return presentation_type::int_hex;
 6470|     34|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 34, False: 2.78k]
  ------------------
 6471|     74|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 40, False: 2.78k]
  ------------------
 6472|     74|            return presentation_type::int_arbitrary_base;
 6473|    150|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 150, False: 2.67k]
  ------------------
 6474|    238|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 88, False: 2.73k]
  ------------------
 6475|    238|            return presentation_type::float_hex;
 6476|     70|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 70, False: 2.75k]
  ------------------
 6477|    104|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 34, False: 2.78k]
  ------------------
 6478|    104|            return presentation_type::float_scientific;
 6479|     52|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 52, False: 2.76k]
  ------------------
 6480|    140|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 88, False: 2.73k]
  ------------------
 6481|    140|            return presentation_type::float_fixed;
 6482|     34|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 34, False: 2.78k]
  ------------------
 6483|    104|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 70, False: 2.75k]
  ------------------
 6484|    104|            return presentation_type::float_general;
 6485|    754|        case 's':
  ------------------
  |  Branch (6485:9): [True: 754, False: 2.06k]
  ------------------
 6486|    754|            return presentation_type::string;
 6487|    196|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 196, False: 2.62k]
  ------------------
 6488|    196|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 2.78k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     76|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 76, False: 2.74k]
  ------------------
 6492|     76|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 2.82k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 2.82k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    342|        default:
  ------------------
  |  Branch (6499:9): [True: 342, False: 2.47k]
  ------------------
 6500|    342|            return presentation_type::none;
 6501|  2.82k|    }
 6502|  2.82k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  25.1k|{
 6532|  25.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  25.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  25.1k|    auto check_align = [](wchar_t ch) {
 6535|  25.1k|        switch (ch) {
 6536|  25.1k|            case L'<':
 6537|  25.1k|                return align_type::left;
 6538|  25.1k|            case L'>':
 6539|  25.1k|                return align_type::right;
 6540|  25.1k|            case L'^':
 6541|  25.1k|                return align_type::center;
 6542|  25.1k|            default:
 6543|  25.1k|                return align_type::none;
 6544|  25.1k|        }
 6545|  25.1k|    };
 6546|       |
 6547|  25.1k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  25.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.1k]
  |  |  |  Branch (859:45): [True: 0, False: 25.1k]
  |  |  |  Branch (859:45): [True: 0, False: 25.1k]
  |  |  ------------------
  ------------------
 6549|  25.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  25.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  25.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  25.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  25.1k|    const auto begin_before_fill = begin;
 6559|  25.1k|    begin += potential_fill_len;
 6560|       |
 6561|  25.1k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 932, False: 24.2k]
  ------------------
 6562|    932|        return begin_before_fill;
 6563|    932|    }
 6564|       |
 6565|  24.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  24.2k|    const auto begin_after_fill = begin;
 6567|  24.2k|    ++begin;
 6568|       |
 6569|  24.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 24.2k, False: 0]
  ------------------
 6570|  24.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 24.1k]
  |  |  ------------------
  ------------------
 6571|     42|            handler.on_error("Invalid fill character '{' in format string");
 6572|     42|            return begin;
 6573|     42|        }
 6574|  24.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 1.50k, False: 22.6k]
  ------------------
 6575|  1.50k|            return begin_before_fill;
 6576|  1.50k|        }
 6577|  24.1k|    }
 6578|       |
 6579|  22.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 21.7k, False: 870]
  ------------------
 6580|  21.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 1.12k, False: 20.6k]
  ------------------
 6581|  1.12k|            handler.on_align(potential_align_on_fill);
 6582|  1.12k|            return begin_after_fill;
 6583|  1.12k|        }
 6584|  20.6k|        return begin_before_fill;
 6585|  21.7k|    }
 6586|       |
 6587|    870|    handler.on_fill(potential_fill);
 6588|    870|    handler.on_align(potential_align_after_fill);
 6589|    870|    return begin;
 6590|  22.6k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|  25.1k|{
 6514|  25.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  25.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  25.1k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  25.1k|        return 1;
 6517|  25.1k|    }
 6518|  25.1k|    else {
 6519|  25.1k|        const auto lengths =
 6520|  25.1k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  25.1k|            "\3\4";
 6522|  25.1k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  25.1k|        return len;
 6524|  25.1k|    }
 6525|  25.1k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  49.3k|    auto check_align = [](wchar_t ch) {
 6535|  49.3k|        switch (ch) {
 6536|    932|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 932, False: 48.4k]
  ------------------
 6537|    932|                return align_type::left;
 6538|    230|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 230, False: 49.1k]
  ------------------
 6539|    230|                return align_type::right;
 6540|  1.26k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 1.26k, False: 48.0k]
  ------------------
 6541|  1.26k|                return align_type::center;
 6542|  46.9k|            default:
  ------------------
  |  Branch (6542:13): [True: 46.9k, False: 2.42k]
  ------------------
 6543|  46.9k|                return align_type::none;
 6544|  49.3k|        }
 6545|  49.3k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|    870|    {
 6268|    870|        m_specs.fill = fill;
 6269|    870|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|    870|    {
 6149|    870|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|    870|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    870|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|    870|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|    870|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    870|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|    870|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|    870|            for (size_t i = 0; i < s.size(); ++i) {
 6153|    870|                SCN_GCC_PUSH
 6154|    870|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|    870|                m_data[i] = s[i];
 6156|    870|                SCN_GCC_POP
 6157|    870|            }
 6158|    870|            m_size = static_cast<unsigned char>(s.size());
 6159|    870|        }
 6160|    870|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6160:28): [Folded - Ignored]
  ------------------
 6161|    870|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|    870|            m_data[1] =
 6163|    870|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|    870|            if (s.size() == 1) {
 6165|    870|                return;
 6166|    870|            }
 6167|    870|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|    870|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|    870|        }
 6170|    870|        else {
 6171|    870|            const auto front = static_cast<unsigned>(s.front());
 6172|    870|            m_data[0] = static_cast<char>(front);
 6173|    870|            m_data[1] = static_cast<char>(front >> 8);
 6174|    870|            m_data[2] = static_cast<char>(front >> 16);
 6175|    870|            m_data[3] = static_cast<char>(front >> 24);
 6176|    870|        }
 6177|    870|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  25.0k|{
 6597|  25.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  25.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  25.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 11.9k, False: 13.0k]
  |  Branch (6599:33): [True: 8.22k, False: 3.77k]
  ------------------
 6600|  8.22k|        int width = parse_simple_int(begin, end);
 6601|  8.22k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  8.22k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.18k, False: 36]
  |  |  ------------------
  ------------------
 6602|  8.18k|            handler.on_width(width);
 6603|  8.18k|        }
 6604|     36|        else {
 6605|     36|            handler.on_error("Invalid field width");
 6606|     36|            return begin;
 6607|     36|        }
 6608|  8.22k|    }
 6609|  25.0k|    return begin;
 6610|  25.0k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6616|  2.47k|{
 6617|  2.47k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  2.47k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 2.44k, False: 34]
  |  Branch (6619:33): [True: 2.39k, False: 52]
  ------------------
 6620|  2.39k|        int prec = parse_simple_int(begin, end);
 6621|  2.39k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  2.39k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.39k, False: 0]
  |  |  ------------------
  ------------------
 6622|  2.39k|            handler.on_precision(prec);
 6623|  2.39k|        }
 6624|      0|        else {
 6625|      0|            handler.on_error("Invalid field precision");
 6626|      0|            return begin;
 6627|      0|        }
 6628|  2.39k|    }
 6629|  2.47k|    return begin;
 6630|  2.47k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|    428|    {
 7127|    428|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    428|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 386, False: 42]
  ------------------
 7129|    428|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 344, False: 42]
  ------------------
 7130|    428|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 302, False: 42]
  ------------------
 7131|    428|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 260, False: 42]
  ------------------
 7132|    260|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    260|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    260|        }
 7137|       |
 7138|    168|        Handler::on_localized();
 7139|    168|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  22.5k|{
 8417|  22.5k|#define SCN_VISIT(Type)                                         \
 8418|  22.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  22.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  22.5k|    }                                                           \
 8421|  22.5k|    else {                                                      \
 8422|  22.5k|        return vis(monostate_val);                              \
 8423|  22.5k|    }
 8424|       |
 8425|  22.5k|    monostate monostate_val{};
 8426|       |
 8427|  22.5k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 22.5k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 22.5k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  2.53k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 2.53k, False: 20.0k]
  ------------------
 8433|  2.53k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  2.53k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.53k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.53k|    }                                                           \
  |  | 8421|  2.53k|    else {                                                      \
  |  | 8422|  2.53k|        return vis(monostate_val);                              \
  |  | 8423|  2.53k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 22.5k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 22.5k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 22.5k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 22.5k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  2.53k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 2.53k, False: 20.0k]
  ------------------
 8443|  2.53k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  2.53k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.53k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.53k|    }                                                           \
  |  | 8421|  2.53k|    else {                                                      \
  |  | 8422|  2.53k|        return vis(monostate_val);                              \
  |  | 8423|  2.53k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 22.5k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 22.5k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  2.49k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 2.49k, False: 20.0k]
  ------------------
 8449|  2.49k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  2.49k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.49k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.49k|    }                                                           \
  |  | 8421|  2.49k|    else {                                                      \
  |  | 8422|  2.49k|        return vis(monostate_val);                              \
  |  | 8423|  2.49k|    }
  ------------------
 8450|  2.53k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 2.53k, False: 20.0k]
  ------------------
 8451|  2.53k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  2.53k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.53k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.53k|    }                                                           \
  |  | 8421|  2.53k|    else {                                                      \
  |  | 8422|  2.53k|        return vis(monostate_val);                              \
  |  | 8423|  2.53k|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 22.5k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|  2.49k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 2.49k, False: 20.0k]
  ------------------
 8455|  2.49k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  2.49k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.49k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.49k|    }                                                           \
  |  | 8421|  2.49k|    else {                                                      \
  |  | 8422|  2.49k|        return vis(monostate_val);                              \
  |  | 8423|  2.49k|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 22.5k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 22.5k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  2.53k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 2.53k, False: 20.0k]
  ------------------
 8461|  2.53k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  2.53k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.53k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.53k|    }                                                           \
  |  | 8421|  2.53k|    else {                                                      \
  |  | 8422|  2.53k|        return vis(monostate_val);                              \
  |  | 8423|  2.53k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 22.5k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 22.5k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  2.49k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 2.49k, False: 20.0k]
  ------------------
 8467|  2.49k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  2.49k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.49k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.49k|    }                                                           \
  |  | 8421|  2.49k|    else {                                                      \
  |  | 8422|  2.49k|        return vis(monostate_val);                              \
  |  | 8423|  2.49k|    }
  ------------------
 8468|  2.49k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 2.49k, False: 20.0k]
  ------------------
 8469|  2.49k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  2.49k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.49k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.49k|    }                                                           \
  |  | 8421|  2.49k|    else {                                                      \
  |  | 8422|  2.49k|        return vis(monostate_val);                              \
  |  | 8423|  2.49k|    }
  ------------------
 8470|  2.49k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 2.49k, False: 20.0k]
  ------------------
 8471|  2.49k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  2.49k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.49k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.49k|    }                                                           \
  |  | 8421|  2.49k|    else {                                                      \
  |  | 8422|  2.49k|        return vis(monostate_val);                              \
  |  | 8423|  2.49k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 22.5k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 22.5k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 22.5k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 22.5k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 22.5k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  22.5k|            SCN_CLANG_POP
 8495|  22.5k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  2.68k|    {
 3330|  2.68k|        return m_iterator;
 3331|  2.68k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|    670|    {
 1430|    670|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|    670|    {
  437|    670|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    670|    {
 1177|    670|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  1.34k|    {
 3334|  1.34k|        return m_sentinel;
 3335|  1.34k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  1.34k|    {
 3316|  1.34k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.34k|    {
  485|  1.34k|        return m_has_value;
  486|  1.34k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|    670|    {
 1627|    670|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    670|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    670|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    670|        return this->get_value();
 1629|    670|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    670|    {
  451|    670|        return m_value;
  452|    670|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|    670|    {
 1837|    670|        return detail::transform_error_impl(std::move(*this),
 1838|    670|                                            std::forward<F>(f));
 1839|    670|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|    670|{
 1323|    670|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    670|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    670|        if (SCN_LIKELY(exp.has_value())) {
 1326|    670|            return result(*std::forward<Exp>(exp));
 1327|    670|        }
 1328|       |
 1329|    670|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    670|        return result(unexpect, monostate{});
 1331|    670|    }
 1332|    670|    else {
 1333|    670|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    670|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    670|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 670, False: 0]
  |  |  ------------------
  ------------------
 1335|    670|                   ? result(*std::forward<Exp>(exp))
 1336|    670|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    670|    }
 1340|    670|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|    670|    {
 1663|    670|        return std::move(value());
 1664|    670|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    670|    {
 1430|    670|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|    670|    {
  437|    670|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    670|    {
 1177|    670|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|    670|    {
 1598|    670|        return has_value();
 1599|    670|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.34k|    {
  485|  1.34k|        return m_has_value;
  486|  1.34k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|    670|    {
 1663|    670|        return std::move(value());
 1664|    670|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|    670|    {
 1627|    670|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    670|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    670|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    670|        return this->get_value();
 1629|    670|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    670|    {
  451|    670|        return m_value;
  452|    670|    }

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.41k|{
   89|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.41k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.41k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  84.6k|{
   44|  84.6k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  84.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  84.6k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.41k|{
  127|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.41k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.41k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  84.6k|{
   60|  84.6k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  84.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  84.6k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.41k|{
   89|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.41k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.41k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.41k|{
  127|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.41k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.41k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.41k|{
   89|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.41k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.41k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.41k|{
  127|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.41k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.41k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.41k|{
   89|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.41k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.41k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.41k|{
  127|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.41k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.41k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.41k|{
   89|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.41k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.41k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.41k|{
  127|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.41k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.41k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.41k|{
   89|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.41k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.41k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.41k|{
  127|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.41k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.41k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  9.41k|{
   89|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.41k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.41k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  9.41k|{
  127|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.41k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.41k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  9.41k|{
   89|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.41k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.41k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  9.41k|{
  127|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.41k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.41k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.41k|{
   89|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.41k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.41k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.41k|{
  127|  9.41k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.41k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.41k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.41k|    static_cast<    \
  |  |  929|  9.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.41k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   127k|{
  653|   127k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   127k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    174|{
  659|    174|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    174|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 87, False: 87]
  ------------------
  661|    174|                    : std::locale{};
  662|    174|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    886|{
 1221|    886|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    886|                                  m_nan_payload_buffer, value);
 1223|    886|    value = this->setsign(value);
 1224|    886|    return n;
 1225|    886|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    820|{
 1221|    820|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    820|                                  m_nan_payload_buffer, value);
 1223|    820|    value = this->setsign(value);
 1224|    820|    return n;
 1225|    820|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     22|{
 1461|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 22, False: 0]
  ------------------
 1467|     22|        SCN_UNLIKELY_ATTR
 1468|     22|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     22|                                     "Invalid integer value");
 1470|     22|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    894|{
 1461|    894|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    894|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    894|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    894|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    894|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 894, False: 0]
  ------------------
 1467|    894|        SCN_UNLIKELY_ATTR
 1468|    894|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    894|                                     "Invalid integer value");
 1470|    894|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    844|{
 1461|    844|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    844|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    844|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    844|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    844|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    844|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    844|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    844|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    844|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    844|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    844|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    844|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    844|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 844, False: 0]
  ------------------
 1467|    844|        SCN_UNLIKELY_ATTR
 1468|    844|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    844|                                     "Invalid integer value");
 1470|    844|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    894|{
 1461|    894|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    894|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    894|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    894|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    894|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 894, False: 0]
  ------------------
 1467|    894|        SCN_UNLIKELY_ATTR
 1468|    894|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    894|                                     "Invalid integer value");
 1470|    894|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    824|{
 1461|    824|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    824|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    824|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    824|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    824|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    824|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    824|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    824|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    824|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    824|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    824|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    824|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    824|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 824, False: 0]
  ------------------
 1467|    824|        SCN_UNLIKELY_ATTR
 1468|    824|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    824|                                     "Invalid integer value");
 1470|    824|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    876|{
 1461|    876|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    876|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    876|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    876|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    876|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    876|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    876|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    876|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    876|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    876|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    876|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    876|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    876|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 876, False: 0]
  ------------------
 1467|    876|        SCN_UNLIKELY_ATTR
 1468|    876|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    876|                                     "Invalid integer value");
 1470|    876|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    806|{
 1461|    806|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    806|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    806|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    806|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    806|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    806|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    806|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    806|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    806|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    806|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    806|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    806|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    806|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 806, False: 0]
  ------------------
 1467|    806|        SCN_UNLIKELY_ATTR
 1468|    806|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    806|                                     "Invalid integer value");
 1470|    806|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  42.3k|{
 2184|  42.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  42.3k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  84.6k|{
 2208|  84.6k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  84.6k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  3.51k|{
  194|  3.51k|    return find_classic_impl(
  195|  3.51k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  3.51k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  3.51k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  21.2k|{
  202|  21.2k|    return find_classic_impl(
  203|  21.2k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  21.2k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  21.2k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    224|{
  673|    224|    return e;
  674|    224|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  42.3k|{
 2141|  42.3k|    return vscan_internal(source, format, args);
 2142|  42.3k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|  84.6k|{
 2161|  84.6k|    return vscan_internal(source, format, args);
 2162|  84.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.51k|{
  118|  3.51k|    auto it = source.begin();
  119|       |
  120|  12.1k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 9.39k, False: 2.76k]
  ------------------
  121|  9.39k|        auto sv =
  122|  9.39k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  9.39k|                .substr(0, 8);
  124|       |
  125|  9.39k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.94k, False: 6.44k]
  ------------------
  126|  2.94k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.94k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.94k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 444, False: 2.50k]
  ------------------
  129|    444|                break;
  130|    444|            }
  131|  2.50k|            continue;
  132|  2.94k|        }
  133|       |
  134|  25.7k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 19.5k, False: 6.13k]
  ------------------
  135|  19.5k|            auto tmp =
  136|  19.5k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  19.5k|            auto res = get_next_code_point(tmp);
  138|  19.5k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 306, False: 19.2k]
  ------------------
  139|    306|                return it;
  140|    306|            }
  141|  19.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  19.2k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  19.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  19.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  19.2k|        }
  145|  6.44k|    }
  146|       |
  147|  3.21k|    return detail::make_string_view_iterator(source, it);
  148|  3.51k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  29.6k|{
  105|  29.6k|    static_assert(sizeof(*source.data()) == 1);
  106|  29.6k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  29.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  29.6k|    uint64_t word{};
  108|  29.6k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  29.6k|    return has_byte_greater(word, 127) != 0;
  111|  29.6k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  17.3k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  19.5k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  21.2k|{
  118|  21.2k|    auto it = source.begin();
  119|       |
  120|  26.7k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 20.2k, False: 6.46k]
  ------------------
  121|  20.2k|        auto sv =
  122|  20.2k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  20.2k|                .substr(0, 8);
  124|       |
  125|  20.2k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 9.78k, False: 10.4k]
  ------------------
  126|  9.78k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  9.78k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  9.78k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 7.99k, False: 1.78k]
  ------------------
  129|  7.99k|                break;
  130|  7.99k|            }
  131|  1.78k|            continue;
  132|  9.78k|        }
  133|       |
  134|  20.2k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 16.5k, False: 3.69k]
  ------------------
  135|  16.5k|            auto tmp =
  136|  16.5k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  16.5k|            auto res = get_next_code_point(tmp);
  138|  16.5k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 6.80k, False: 9.78k]
  ------------------
  139|  6.80k|                return it;
  140|  6.80k|            }
  141|  9.78k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  9.78k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  9.78k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  9.78k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  9.78k|        }
  145|  10.4k|    }
  146|       |
  147|  14.4k|    return detail::make_string_view_iterator(source, it);
  148|  21.2k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  19.0k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  16.5k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    886|{
 1138|    886|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 886]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    886|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 886]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    886|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 886]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    886|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 886]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    886|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    886|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    886|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    886|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 8, False: 878]
  ------------------
 1185|      8|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 1186|      8|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|      8|                                         "Invalid floating-point digit");
 1188|      8|        }
 1189|      8|    }
 1190|    878|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    878|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 878, False: 0]
  |  |  ------------------
  ------------------
 1191|    878|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    878|                                     "Invalid floating-point digit");
 1193|    878|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    820|{
 1138|    820|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 820]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    820|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 820]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    820|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 820]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    820|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 820]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    820|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    820|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    820|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    820|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 12, False: 808]
  ------------------
 1185|     12|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 1186|     12|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     12|                                         "Invalid floating-point digit");
 1188|     12|        }
 1189|     12|    }
 1190|    808|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    808|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 808, False: 0]
  |  |  ------------------
  ------------------
 1191|    808|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    808|                                     "Invalid floating-point digit");
 1193|    808|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  84.6k|{
 1625|  84.6k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 84.3k, False: 378]
  ------------------
 1626|  84.3k|        return false;
 1627|  84.3k|    }
 1628|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 252]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|  84.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  84.6k|    {
 1903|  84.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   254k|    {
 1722|   254k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 254k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   254k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  84.6k|    {
 1853|  84.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  84.6k|{
 2038|  84.6k|    const auto beg = handler.get_ctx().begin();
 2039|  84.6k|    detail::parse_format_string<false>(format, handler);
 2040|  84.6k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  84.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 81.7k, False: 2.90k]
  |  |  ------------------
  ------------------
 2041|  81.7k|        return unexpected(handler.error);
 2042|  81.7k|    }
 2043|  2.90k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  84.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   415k|    {
 2022|   415k|        return ctx.get();
 2023|   415k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   415k|    {
 1857|   415k|        return contiguous_ctx;
 1858|   415k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   102k|    {
 1907|   134k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 37.1k, False: 97.7k]
  ------------------
 1908|  37.1k|            auto it = get_ctx().begin();
 1909|  37.1k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.05k, False: 36.0k]
  ------------------
 1910|  1.05k|                SCN_UNLIKELY_ATTR
 1911|  1.05k|                return on_error("Unexpected end of source");
 1912|  1.05k|            }
 1913|       |
 1914|  36.0k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|  36.0k|                    detail::make_string_view_from_pointers(begin, end));
 1916|  36.0k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 2.30k, False: 33.7k]
  ------------------
 1917|  2.30k|                SCN_UNLIKELY_ATTR
 1918|  2.30k|                return on_error("Invalid encoding in format string");
 1919|  2.30k|            }
 1920|  33.7k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 6.04k, False: 27.7k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  6.04k|                get_ctx().advance_to(
 1923|  6.04k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  6.04k|                auto begin_it = impl::read_while_classic_space(
 1926|  6.04k|                    detail::make_string_view_from_pointers(
 1927|  6.04k|                        detail::to_address(after_space_it),
 1928|  6.04k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  6.04k|                begin = detail::to_address(begin_it) - 1;
 1931|  6.04k|                continue;
 1932|  6.04k|            }
 1933|       |
 1934|  27.7k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 978, False: 26.7k]
  ------------------
 1935|    978|                SCN_UNLIKELY_ATTR
 1936|    978|                return on_error("Unexpected literal character in source");
 1937|    978|            }
 1938|  26.7k|            get_ctx().advance_to(ranges::next(it));
 1939|  26.7k|        }
 1940|   102k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1971|  5.74k|    {
 1972|  5.74k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  5.74k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  5.74k|        on_visit_scan_arg(
 1976|  5.74k|            impl::default_arg_reader<context_type>{
 1977|  5.74k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  5.74k|            arg);
 1979|  5.74k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  53.6k|{
 1681|  53.6k|    auto arg = ctx.arg(id);
 1682|  53.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.39k, False: 52.2k]
  |  |  ------------------
  ------------------
 1683|  1.39k|        handler.on_error("Failed to find argument with ID");
 1684|  1.39k|    }
 1685|  53.6k|    return arg;
 1686|  53.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  83.5k|    {
 1797|  83.5k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  83.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.60k, False: 80.9k]
  |  |  ------------------
  ------------------
 1798|  2.60k|            on_error("Invalid out-of-range argument ID");
 1799|  2.60k|            return;
 1800|  2.60k|        }
 1801|       |
 1802|  80.9k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 80.8k]
  |  |  ------------------
  ------------------
 1803|     98|            return on_error("Argument with this ID has already been scanned");
 1804|     98|        }
 1805|       |
 1806|  80.8k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  80.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 80.8k, False: 0]
  |  |  ------------------
  ------------------
 1807|  80.8k|            visited_args_lower64 |= (1ull << id);
 1808|  80.8k|            return;
 1809|  80.8k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  80.9k|    {
 1782|  80.9k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.9k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  80.9k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  80.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 80.9k, False: 0]
  |  |  ------------------
  ------------------
 1788|  80.9k|            return (visited_args_lower64 >> id) & 1ull;
 1789|  80.9k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  80.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  5.74k|    {
 1956|  5.74k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 126, False: 5.61k]
  |  Branch (1956:23): [True: 0, False: 5.61k]
  ------------------
 1957|    126|            SCN_UNLIKELY_ATTR
 1958|    126|            return;
 1959|    126|        }
 1960|       |
 1961|  5.61k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  5.61k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.87k, False: 1.74k]
  |  |  ------------------
  ------------------
 1963|  3.87k|            on_error(r.error());
 1964|  3.87k|        }
 1965|  1.74k|        else {
 1966|  1.74k|            get_ctx().advance_to(*r);
 1967|  1.74k|        }
 1968|  5.61k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  67.2k|    {
 1766|  67.2k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 67.2k, False: 0]
  |  |  ------------------
  ------------------
 1767|  67.2k|            error = err;
 1768|  67.2k|        }
 1769|  67.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  51.6k|    {
 1944|  51.6k|        return parse_ctx.next_arg_id();
 1945|  51.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1947|  2.05k|    {
 1948|  2.05k|        parse_ctx.check_arg_id(id);
 1949|  2.05k|        return id;
 1950|  2.05k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  47.8k|    {
 1985|  47.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  47.8k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  47.8k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 47.8k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  47.8k|        auto specs = detail::format_specs{};
 1998|  47.8k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  47.8k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  47.8k|            arg.type()};
 2001|       |
 2002|  47.8k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  47.8k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.40k, False: 45.4k]
  |  Branch (2003:29): [True: 690, False: 44.7k]
  ------------------
 2004|  3.09k|            SCN_UNLIKELY_ATTR
 2005|  3.09k|            on_error("Missing '}' in format string");
 2006|  3.09k|            return parse_ctx.begin();
 2007|  3.09k|        }
 2008|  44.7k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  44.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 250, False: 44.5k]
  |  |  ------------------
  ------------------
 2009|    250|            return parse_ctx.begin();
 2010|    250|        }
 2011|  44.5k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  44.5k|        on_visit_scan_arg(
 2014|  44.5k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  44.5k|                                           get_ctx().locale()},
 2016|  44.5k|            arg);
 2017|  44.5k|        return parse_ctx.begin();
 2018|  44.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  47.8k|    {
 1701|  47.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  44.5k|    {
 1956|  44.5k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 96, False: 44.4k]
  |  Branch (1956:23): [True: 0, False: 44.4k]
  ------------------
 1957|     96|            SCN_UNLIKELY_ATTR
 1958|     96|            return;
 1959|     96|        }
 1960|       |
 1961|  44.4k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  44.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  44.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  44.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.6k, False: 4.75k]
  |  |  ------------------
  ------------------
 1963|  39.6k|            on_error(r.error());
 1964|  39.6k|        }
 1965|  4.75k|        else {
 1966|  4.75k|            get_ctx().advance_to(*r);
 1967|  4.75k|        }
 1968|  44.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   398k|    {
 1761|   398k|        SCN_UNLIKELY_ATTR
 1762|   398k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   398k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   254k|    {
 1729|   254k|        {
 1730|   254k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 254k]
  ------------------
 1731|   254k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 254k]
  ------------------
 1732|   254k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   254k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   254k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 173k, False: 80.8k]
  ------------------
 1736|   173k|                return on_error("Argument list not exhausted");
 1737|   173k|            }
 1738|   254k|        }
 1739|       |
 1740|  80.8k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 80.8k, False: 0]
  ------------------
 1741|  80.8k|            return;
 1742|  80.8k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   254k|    {
 1777|   254k|        return error;
 1778|   254k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|   450k|    {
 1773|   450k|        return static_cast<bool>(error);
 1774|   450k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  84.6k|{
 2053|  84.6k|    const auto argcount = args.size();
 2054|  84.6k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 84.6k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|  84.6k|    auto handler = format_handler<true, CharT>{
 2060|  84.6k|        ranges::subrange<const CharT*>{source.data(),
 2061|  84.6k|                                       source.data() + source.size()},
 2062|  84.6k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  84.6k|    static_cast<    \
  |  |  929|  84.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  84.6k|    static_cast<    \
  |  |  929|  84.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  84.6k|    return vscan_parse_format_string(format, handler);
 2064|  84.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   169k|{
 2053|   169k|    const auto argcount = args.size();
 2054|   169k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 169k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   169k|    auto handler = format_handler<true, CharT>{
 2060|   169k|        ranges::subrange<const CharT*>{source.data(),
 2061|   169k|                                       source.data() + source.size()},
 2062|   169k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   169k|    static_cast<    \
  |  |  929|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   169k|    static_cast<    \
  |  |  929|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   169k|    return vscan_parse_format_string(format, handler);
 2064|   169k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   169k|{
 1625|   169k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 158k, False: 11.3k]
  ------------------
 1626|   158k|        return false;
 1627|   158k|    }
 1628|  11.3k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 11.1k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   169k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   169k|    {
 1903|   169k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   169k|    {
 1853|   169k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   169k|{
 2038|   169k|    const auto beg = handler.get_ctx().begin();
 2039|   169k|    detail::parse_format_string<false>(format, handler);
 2040|   169k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 168k, False: 1.32k]
  |  |  ------------------
  ------------------
 2041|   168k|        return unexpected(handler.error);
 2042|   168k|    }
 2043|  1.32k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   169k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  1.56M|    {
 2022|  1.56M|        return ctx.get();
 2023|  1.56M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.56M|    {
 1857|  1.56M|        return contiguous_ctx;
 1858|  1.56M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  91.2k|    {
 1907|   476k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 443k, False: 32.8k]
  ------------------
 1908|   443k|            auto it = get_ctx().begin();
 1909|   443k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 396, False: 443k]
  ------------------
 1910|    396|                SCN_UNLIKELY_ATTR
 1911|    396|                return on_error("Unexpected end of source");
 1912|    396|            }
 1913|       |
 1914|   443k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   443k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   443k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 56.5k, False: 386k]
  ------------------
 1917|  56.5k|                SCN_UNLIKELY_ATTR
 1918|  56.5k|                return on_error("Invalid encoding in format string");
 1919|  56.5k|            }
 1920|   386k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 2.23k, False: 384k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  2.23k|                get_ctx().advance_to(
 1923|  2.23k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  2.23k|                auto begin_it = impl::read_while_classic_space(
 1926|  2.23k|                    detail::make_string_view_from_pointers(
 1927|  2.23k|                        detail::to_address(after_space_it),
 1928|  2.23k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  2.23k|                begin = detail::to_address(begin_it) - 1;
 1931|  2.23k|                continue;
 1932|  2.23k|            }
 1933|       |
 1934|   384k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 1.39k, False: 383k]
  ------------------
 1935|  1.39k|                SCN_UNLIKELY_ATTR
 1936|  1.39k|                return on_error("Unexpected literal character in source");
 1937|  1.39k|            }
 1938|   383k|            get_ctx().advance_to(ranges::next(it));
 1939|   383k|        }
 1940|  91.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1971|  4.56k|    {
 1972|  4.56k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  4.56k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  4.56k|        on_visit_scan_arg(
 1976|  4.56k|            impl::default_arg_reader<context_type>{
 1977|  4.56k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  4.56k|            arg);
 1979|  4.56k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  29.9k|{
 1681|  29.9k|    auto arg = ctx.arg(id);
 1682|  29.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.21k, False: 28.7k]
  |  |  ------------------
  ------------------
 1683|  1.21k|        handler.on_error("Failed to find argument with ID");
 1684|  1.21k|    }
 1685|  29.9k|    return arg;
 1686|  29.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  4.56k|    {
 1956|  4.56k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 132, False: 4.42k]
  |  Branch (1956:23): [True: 0, False: 4.42k]
  ------------------
 1957|    132|            SCN_UNLIKELY_ATTR
 1958|    132|            return;
 1959|    132|        }
 1960|       |
 1961|  4.42k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  4.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  4.42k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.18k, False: 1.24k]
  |  |  ------------------
  ------------------
 1963|  3.18k|            on_error(r.error());
 1964|  3.18k|        }
 1965|  1.24k|        else {
 1966|  1.24k|            get_ctx().advance_to(*r);
 1967|  1.24k|        }
 1968|  4.42k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  29.7k|    {
 1944|  29.7k|        return parse_ctx.next_arg_id();
 1945|  29.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1947|    260|    {
 1948|    260|        parse_ctx.check_arg_id(id);
 1949|    260|        return id;
 1950|    260|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  25.3k|    {
 1985|  25.3k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  25.3k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  25.3k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 25.3k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  25.3k|        auto specs = detail::format_specs{};
 1998|  25.3k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  25.3k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  25.3k|            arg.type()};
 2001|       |
 2002|  25.3k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  25.3k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.01k, False: 23.3k]
  |  Branch (2003:29): [True: 356, False: 22.9k]
  ------------------
 2004|  2.37k|            SCN_UNLIKELY_ATTR
 2005|  2.37k|            on_error("Missing '}' in format string");
 2006|  2.37k|            return parse_ctx.begin();
 2007|  2.37k|        }
 2008|  22.9k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 244, False: 22.7k]
  |  |  ------------------
  ------------------
 2009|    244|            return parse_ctx.begin();
 2010|    244|        }
 2011|  22.7k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  22.7k|        on_visit_scan_arg(
 2014|  22.7k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  22.7k|                                           get_ctx().locale()},
 2016|  22.7k|            arg);
 2017|  22.7k|        return parse_ctx.begin();
 2018|  22.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  25.3k|    {
 1701|  25.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  22.7k|    {
 1956|  22.7k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 154, False: 22.5k]
  |  Branch (1956:23): [True: 0, False: 22.5k]
  ------------------
 1957|    154|            SCN_UNLIKELY_ATTR
 1958|    154|            return;
 1959|    154|        }
 1960|       |
 1961|  22.5k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  22.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  22.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.4k, False: 2.13k]
  |  |  ------------------
  ------------------
 1963|  20.4k|            on_error(r.error());
 1964|  20.4k|        }
 1965|  2.13k|        else {
 1966|  2.13k|            get_ctx().advance_to(*r);
 1967|  2.13k|        }
 1968|  22.5k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  4.70k|{
 1363|  4.70k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  4.70k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  4.70k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  4.70k|            std::u32string tmp;
 1368|  4.70k|            transcode_to_string_impl_to32(src, tmp);
 1369|  4.70k|            return transcode_to_string_impl_32to16<false>(
 1370|  4.70k|                std::u32string_view{tmp}, dest);
 1371|  4.70k|        }
 1372|  4.70k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  4.70k|            return transcode_to_string_impl_to32(src, dest);
 1374|  4.70k|        }
 1375|  4.70k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  4.70k|{
 1256|  4.70k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  4.70k|    auto it = src.begin();
 1259|   560k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 555k, False: 4.70k]
  ------------------
 1260|   555k|        auto res = get_next_code_point(
 1261|   555k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   555k|                                                                 src.end()));
 1263|   555k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.9k, False: 540k]
  |  |  ------------------
  ------------------
 1264|  14.9k|            dest.push_back(DestCharT{0xfffd});
 1265|  14.9k|        }
 1266|   540k|        else {
 1267|   540k|            dest.push_back(res.value);
 1268|   540k|        }
 1269|   555k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   555k|    }
 1271|  4.70k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   665k|{
 1169|   665k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   665k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   665k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   665k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   665k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   665k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.2k, False: 651k]
  |  |  ------------------
  ------------------
 1173|  13.2k|        return {get_start_for_next_code_point(input),
 1174|  13.2k|                detail::invalid_code_point};
 1175|  13.2k|    }
 1176|   651k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   651k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 949, False: 650k]
  |  |  ------------------
  ------------------
 1177|    949|        return {input.end(), detail::invalid_code_point};
 1178|    949|    }
 1179|       |
 1180|   650k|    return {input.begin() + len,
 1181|   650k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   651k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  13.2k|{
 1155|  13.2k|    auto it = input.begin();
 1156|  48.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 46.9k, False: 1.29k]
  ------------------
 1157|  46.9k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 12.0k, False: 34.9k]
  ------------------
 1158|  12.0k|            break;
 1159|  12.0k|        }
 1160|  46.9k|    }
 1161|  13.2k|    return it;
 1162|  13.2k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  43.3k|    {
  809|  43.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  43.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  43.3k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  15.6k|    {
  823|  15.6k|        return a.m_code == b.m_code;
  824|  15.6k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  39.1k|    {
 2931|  39.1k|        SCN_UNLIKELY_ATTR
 2932|  39.1k|        m_msg = msg;
 2933|  39.1k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  67.0k|    {
 2936|  67.0k|        return m_msg == nullptr;
 2937|  67.0k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|    982|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4989|   362k|    {
 4990|   362k|        on_charset_range(cp, cp + 1);
 4991|   362k|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4994|   365k|    {
 4995|   365k|        if (end <= 127) {
  ------------------
  |  Branch (4995:13): [True: 187k, False: 178k]
  ------------------
 4996|   187k|            return;
 4997|   187k|        }
 4998|       |
 4999|  32.5M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4999:25): [True: 32.5M, False: 176k]
  ------------------
 5000|       |            // TODO: check for overlap
 5001|  32.5M|            if (elem.first == end) {
  ------------------
  |  Branch (5001:17): [True: 522, False: 32.5M]
  ------------------
 5002|    522|                elem.first = begin;
 5003|    522|                return;
 5004|    522|            }
 5005|       |
 5006|  32.5M|            if (elem.second == begin) {
  ------------------
  |  Branch (5006:17): [True: 1.02k, False: 32.5M]
  ------------------
 5007|  1.02k|                elem.second = end;
 5008|  1.02k|                return;
 5009|  1.02k|            }
 5010|  32.5M|        }
 5011|       |
 5012|   176k|        extra_ranges.push_back(std::make_pair(begin, end));
 5013|   176k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5016|    486|    {
 5017|       |        // no-op
 5018|    486|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5031|   371k|    {
 5032|   371k|        return static_cast<bool>(err);
 5033|   371k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5349|  1.28k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  36.3k|{
  458|  36.3k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  36.3k|        static_cast<unsigned char>(ch))];
  460|  36.3k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   261k|{
  469|   261k|    return static_cast<unsigned char>(ch) <= 127;
  470|   261k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  1.39k|{
  474|  1.39k|#if WCHAR_MIN < 0
  475|  1.39k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 1.38k, False: 12]
  |  Branch (475:23): [True: 1.38k, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  1.39k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   281k|{
  483|   281k|    return cp <= 127;
  484|   281k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  29.6k|{
  539|  29.6k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  29.6k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  45.6k|{
  784|  45.6k|    return e != eof_error::good;
  785|  45.6k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    174|{
  798|    174|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    174|    return scan_error{scan_error::end_of_range, "EOF"};
  800|    174|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    696|{
  845|    696|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    696|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    696|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    696|    return parse_error::eof;
  847|    696|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.58k|{
  854|  3.58k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.58k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.58k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 74, False: 3.51k]
  ------------------
  859|     74|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     74|    }
  861|       |
  862|  3.51k|    return scan_error{code, msg};
  863|  3.58k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.58k|{
  868|  3.58k|    return [code, msg](parse_error err) {
  869|  3.58k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.58k|    };
  871|  3.58k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   577k|{
 1200|       |    // Pattern_White_Space property
 1201|   577k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 166k, False: 411k]
  |  Branch (1201:27): [True: 8.79k, False: 157k]
  ------------------
 1202|   577k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 4.41k, False: 564k]
  ------------------
 1203|   577k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 4.78k, False: 559k]
  ------------------
 1204|   577k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 1.65k, False: 558k]
  ------------------
 1205|   577k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 3.26k, False: 554k]
  ------------------
 1206|   577k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 1.22k, False: 553k]
  ------------------
 1207|   577k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 90, False: 553k]
  ------------------
 1208|   577k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  3.67k|{
 2220|  3.67k|    unsigned char running_diff{0};
 2221|  12.8k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 9.15k, False: 3.67k]
  ------------------
 2222|  9.15k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  9.15k|    }
 2224|  3.67k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 3.67k]
  |  Branch (2224:33): [True: 0, False: 3.67k]
  ------------------
 2225|  3.67k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   105k|{
 2303|   105k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 21.2k, False: 84.3k]
  ------------------
 2304|   105k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 222, False: 21.0k]
  ------------------
 2305|  21.2k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 72, False: 20.9k]
  ------------------
 2306|  21.2k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 72, False: 20.8k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  21.2k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 10.0k, False: 10.8k]
  |  Branch (2308:27): [True: 1.39k, False: 8.61k]
  |  Branch (2308:43): [True: 564, False: 834]
  ------------------
 2309|  21.2k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 8.61k, False: 11.7k]
  |  Branch (2309:27): [True: 276, False: 8.33k]
  ------------------
 2310|  21.2k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 8.30k, False: 11.7k]
  |  Branch (2310:27): [True: 108, False: 8.19k]
  ------------------
 2311|  21.2k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 8.19k, False: 11.7k]
  |  Branch (2311:27): [True: 462, False: 7.73k]
  ------------------
 2312|  21.2k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 7.73k, False: 11.7k]
  |  Branch (2312:27): [True: 214, False: 7.51k]
  ------------------
 2313|  21.2k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 7.51k, False: 11.7k]
  |  Branch (2313:27): [True: 206, False: 7.31k]
  ------------------
 2314|  21.2k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 7.31k, False: 11.7k]
  |  Branch (2314:27): [True: 80, False: 7.23k]
  ------------------
 2315|  21.2k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 7.05k, False: 11.9k]
  |  Branch (2315:28): [True: 222, False: 6.82k]
  ------------------
 2316|  21.2k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 6.82k, False: 11.9k]
  |  Branch (2316:28): [True: 446, False: 6.38k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  21.2k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 6.53k, False: 11.7k]
  |  Branch (2318:28): [True: 78, False: 6.45k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  21.2k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 6.45k, False: 11.7k]
  |  Branch (2320:28): [True: 72, False: 6.38k]
  ------------------
 2321|  3.09k|        return 2;
 2322|  3.09k|    }
 2323|   102k|    return 1;
 2324|   105k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|  61.2k|{
 2328|  61.2k|    return calculate_text_width_for_fmt_v10(cp);
 2329|  61.2k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    208|{
 2343|    208|    return calculate_text_width_for_fmt_v10(cp);
 2344|    208|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  14.8k|{
 3123|  14.8k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  14.8k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  6.62k|{
 3127|  6.62k|#if WCHAR_MIN < 0
 3128|  6.62k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 6.62k, False: 0]
  |  Branch (3128:20): [True: 6.62k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  6.62k|        return char_to_int(static_cast<char>(ch));
 3133|  6.62k|    }
 3134|      0|    return 255;
 3135|  6.62k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4270|  14.2k|{
 4271|  14.2k|    std::regex_constants::syntax_option_type result{};
 4272|  14.2k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4272:9): [True: 348, False: 13.9k]
  ------------------
 4273|    348|#if SCN_HAS_STD_REGEX_MULTILINE
 4274|    348|        result |= std::regex_constants::multiline;
 4275|       |#else
 4276|       |        return unexpected_scan_error(
 4277|       |            scan_error::invalid_format_string,
 4278|       |            "/m flag for regex isn't supported by regex backend");
 4279|       |#endif
 4280|    348|    }
 4281|  14.2k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4281:9): [True: 0, False: 14.2k]
  ------------------
 4282|  14.2k|        detail::regex_flags::none) {
 4283|      0|        return unexpected_scan_error(
 4284|      0|            scan_error::invalid_format_string,
 4285|      0|            "/s flag for regex isn't supported by regex backend");
 4286|      0|    }
 4287|  14.2k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4287:9): [True: 1.34k, False: 12.9k]
  ------------------
 4288|  1.34k|        result |= std::regex_constants::icase;
 4289|  1.34k|    }
 4290|  14.2k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4290:9): [True: 12, False: 14.2k]
  ------------------
 4291|     12|        result |= std::regex_constants::nosubs;
 4292|     12|    }
 4293|  14.2k|    return result;
 4294|  14.2k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4637|    570|{
 4638|    570|    std::string result{pattern};
 4639|  4.11k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4639:24): [True: 3.54k, False: 570]
  ------------------
 4640|  3.54k|        result.replace(n, 2, "/");
 4641|  3.54k|        ++n;
 4642|  3.54k|    }
 4643|    570|    return result;
 4644|    570|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4646|    180|{
 4647|    180|    std::wstring result{pattern};
 4648|  1.15k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4648:24): [True: 978, False: 180]
  ------------------
 4649|    978|        result.replace(n, 2, L"/");
 4650|    978|        ++n;
 4651|    978|    }
 4652|    180|    return result;
 4653|    180|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  7.91k|{
 6008|  7.91k|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 2.02k, False: 5.89k]
  ------------------
 6009|  2.02k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 926, False: 1.10k]
  ------------------
 6010|    926|            return {scan_error::invalid_scanned_value,
 6011|    926|                    "Scanned value too narrow, width did not exceed what "
 6012|    926|                    "was specified in the format string"};
 6013|    926|        }
 6014|  2.02k|    }
 6015|  6.99k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 1.78k, False: 5.20k]
  ------------------
 6016|  1.78k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 102, False: 1.68k]
  ------------------
 6017|    102|            return {scan_error::invalid_scanned_value,
 6018|    102|                    "Scanned value too wide, width exceeded the specified "
 6019|    102|                    "precision"};
 6020|    102|        }
 6021|  1.78k|    }
 6022|  6.89k|    return {};
 6023|  6.99k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  43.8k|    {
  304|  43.8k|        ranges::advance(x, n);
  305|  43.8k|        return x;
  306|  43.8k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  43.8k|    {
  268|  43.8k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  43.8k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  78.8k|    {
  151|  78.8k|        i += n;
  152|  78.8k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  57.0k|    {
  108|  57.0k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  57.0k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  57.0k|    {
   87|  57.0k|        return s - i;
   88|  57.0k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  5.99k|    {
  304|  5.99k|        ranges::advance(x, n);
  305|  5.99k|        return x;
  306|  5.99k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  5.99k|    {
  268|  5.99k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.99k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  5.99k|    {
  151|  5.99k|        i += n;
  152|  5.99k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.45k|    {
  108|  3.45k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.45k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.45k|    {
   87|  3.45k|        return s - i;
   88|  3.45k|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5623|  4.92k|    {
 5624|  4.92k|        reader_error_handler eh{};
 5625|  4.92k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  4.92k|            detail::check_code_point_type_specs(specs, eh);
 5627|  4.92k|        }
 5628|  4.92k|        else {
 5629|  4.92k|            detail::check_char_type_specs(specs, eh);
 5630|  4.92k|        }
 5631|  4.92k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.37k, False: 552]
  |  |  ------------------
  ------------------
 5632|  4.37k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  4.37k|        }
 5634|    552|        return {};
 5635|  4.92k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  23.3k|    {
  763|  23.3k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  23.3k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  3.30k|    {
  754|  3.30k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  7.23k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.23k|              cvref<T> obj = *get<T>(fn);
  745|  7.23k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.23k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.23k|              }
  748|  7.23k|              else {
  749|  7.23k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.23k|              }
  751|  7.23k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  7.23k|    {
  684|  7.23k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.23k|            return static_cast<T*>(s.m_cp);
  686|  7.23k|        }
  687|  7.23k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.23k|            return static_cast<T*>(s.m_p);
  689|  7.23k|        }
  690|  7.23k|        else {
  691|  7.23k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.23k|        }
  693|  7.23k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  3.30k|        {
  662|  3.30k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|   636k|    {
  763|   636k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   636k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   636k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  16.8k|    {
  754|  16.8k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|   292k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   292k|              cvref<T> obj = *get<T>(fn);
  745|   292k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   292k|                  obj(static_cast<decltype(args)>(args)...);
  747|   292k|              }
  748|   292k|              else {
  749|   292k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   292k|              }
  751|   292k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   292k|    {
  684|   292k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   292k|            return static_cast<T*>(s.m_cp);
  686|   292k|        }
  687|   292k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   292k|            return static_cast<T*>(s.m_p);
  689|   292k|        }
  690|   292k|        else {
  691|   292k|            return reinterpret_cast<T*>(s.m_fp);
  692|   292k|        }
  693|   292k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  16.8k|        {
  662|  16.8k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5618|  1.67k|    {
 5619|  1.67k|        return false;
 5620|  1.67k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.58k|    return [code, msg](parse_error err) {
  869|  3.58k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.58k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|     64|    {
 1780|     64|        auto stdloc = loc.get<std::locale>();
 1781|     64|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     64|        grouping = numpunct.grouping();
 1783|     64|        thousands_sep =
 1784|     64|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 64]
  ------------------
 1785|     64|        decimal_point = numpunct.decimal_point();
 1786|     64|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|     88|{
 1717|     88|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 88, False: 0]
  ------------------
 1718|     88|        return std::use_facet<Facet>(stdloc);
 1719|     88|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     88|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  22.7k|{
 2349|  22.7k|    size_t count{0};
 2350|  22.7k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  22.7k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  22.7k|    });
 2353|  22.7k|    return count;
 2354|  22.7k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  22.7k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  22.7k|    auto it = input.begin();
 1448|  60.0k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 37.3k, False: 22.7k]
  ------------------
 1449|  37.3k|        auto res = get_next_code_point(
 1450|  37.3k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  37.3k|        cb(res.value);
 1452|  37.3k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  37.3k|    }
 1454|  22.7k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  44.1k|    {
  763|  44.1k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  44.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  44.1k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  22.7k|    {
  754|  22.7k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  37.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  37.3k|              cvref<T> obj = *get<T>(fn);
  745|  37.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  37.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  37.3k|              }
  748|  37.3k|              else {
  749|  37.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  37.3k|              }
  751|  37.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  37.3k|    {
  684|  37.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  37.3k|            return static_cast<T*>(s.m_cp);
  686|  37.3k|        }
  687|  37.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  37.3k|            return static_cast<T*>(s.m_p);
  689|  37.3k|        }
  690|  37.3k|        else {
  691|  37.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  37.3k|        }
  693|  37.3k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  37.3k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  37.3k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  37.3k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  22.7k|        {
  662|  22.7k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  3.65k|    {
 1582|  3.65k|        return m_view;
 1583|  3.65k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  3.85k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|  3.53k|    {
 2421|  3.53k|        return m_multibyte_left;
 2422|  3.53k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|  97.8k|    {
 2426|  97.8k|        return *m_current;
 2427|  97.8k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   108k|    {
 2435|   108k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   108k|        _increment_current();
 2437|   108k|        return *this;
 2438|   108k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   108k|    {
 2668|   108k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 60.0k, False: 48.6k]
  ------------------
 2669|  60.0k|            auto cplen = _get_cp_length_at_current();
 2670|  60.0k|            m_multibyte_left = cplen - 1;
 2671|  60.0k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  60.0k|        }
 2673|  48.6k|        else {
 2674|  48.6k|            --m_multibyte_left;
 2675|  48.6k|        }
 2676|       |
 2677|   108k|        ++m_current;
 2678|   108k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|  60.0k|    {
 2639|  60.0k|        return static_cast<difference_type>(
 2640|  60.0k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  60.0k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|  60.0k|    {
 2645|  60.0k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  60.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 534, False: 59.5k]
  |  |  ------------------
  ------------------
 2646|    534|            return 0;
 2647|    534|        }
 2648|       |
 2649|  59.5k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 40.7k, False: 18.7k]
  ------------------
 2650|  40.7k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  40.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  40.7k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  40.7k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  40.7k|        }
 2654|       |
 2655|  18.7k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  18.7k|                                           cplen);
 2657|  18.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  18.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 18.3k]
  |  |  ------------------
  ------------------
 2658|    332|            return 0;
 2659|    332|        }
 2660|       |
 2661|  18.3k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  18.3k|        return static_cast<difference_type>(
 2663|  18.3k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  18.7k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  21.0k|{
 1857|  21.0k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  21.0k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  21.0k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  21.0k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 442, False: 20.6k]
  ------------------
 1862|    442|            return unexpected(eof_error::eof);
 1863|    442|        }
 1864|       |
 1865|  20.6k|        return ranges::next(range.begin(), count);
 1866|  21.0k|    }
 1867|  21.0k|    else {
 1868|  21.0k|        auto it = range.begin();
 1869|  21.0k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  21.0k|            return ranges::next(it, count);
 1871|  21.0k|        }
 1872|       |
 1873|  21.0k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  21.0k|            if (it == range.end()) {
 1875|  21.0k|                return unexpected(eof_error::eof);
 1876|  21.0k|            }
 1877|  21.0k|        }
 1878|       |
 1879|  21.0k|        return it;
 1880|  21.0k|    }
 1881|  21.0k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  62.8k|    {
 2531|  62.8k|        return !(a == b);
 2532|  62.8k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  70.3k|    {
 2523|  70.3k|        return a.m_current == b.m_current;
 2524|  70.3k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2429|  8.09k|    {
 2430|  8.09k|        return *m_current;
 2431|  8.09k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.16k|    {
  268|  1.16k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.16k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.16k|    {
  161|  1.16k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.16k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.16k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.16k|        else {
  169|  1.16k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.16k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.16k|        }
  173|  1.16k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|  20.2k|    {
 1890|  20.2k|        return !codepoint.empty();
 1891|  20.2k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  1.51k|{
 1683|  1.51k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.51k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.51k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.51k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  1.51k|    }
 1688|  1.51k|    else {
 1689|  1.51k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  1.51k|    }
 1691|  1.51k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EELPv0EEEOT_:
 1536|  1.51k|    {
 1537|  1.51k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  1.51k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  1.51k|    {
 1621|  1.51k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.51k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.51k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.51k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.51k|            m_storage.reset();
 1627|  1.51k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.51k|        }
 1629|  1.51k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.51k|                                          std::basic_string<CharT>>) {
 1631|  1.51k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.51k|            m_view = string_view_type{*m_storage};
 1633|  1.51k|        }
 1634|  1.51k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.51k|                                          typename detail::basic_scan_buffer<
 1636|  1.51k|                                              value_t>::forward_iterator> &&
 1637|  1.51k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.51k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.51k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.51k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.51k|                             detail::to_address(end_seg.end()))) {
 1642|  1.51k|                auto& str = m_storage.emplace();
 1643|  1.51k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.51k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.51k|                m_view = string_view_type{str};
 1646|  1.51k|                return;
 1647|  1.51k|            }
 1648|       |
 1649|  1.51k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.51k|                                                            end_seg.data());
 1651|  1.51k|            m_storage.reset();
 1652|  1.51k|        }
 1653|  1.51k|        else {
 1654|  1.51k|            auto& str = m_storage.emplace();
 1655|  1.51k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|  1.51k|                str.reserve(range.size());
 1657|  1.51k|            }
 1658|  1.51k|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|  1.51k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.51k|                          std::back_inserter(str));
 1661|  1.51k|            }
 1662|  1.51k|            else {
 1663|  1.51k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.51k|                     ++it) {
 1665|  1.51k|                    str.push_back(*it);
 1666|  1.51k|                }
 1667|  1.51k|            }
 1668|  1.51k|            m_view = string_view_type{str};
 1669|  1.51k|        }
 1670|  1.51k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|  19.0k|    {
 2382|  19.0k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   107k|    {
 2413|   107k|        return m_current;
 2414|   107k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  7.56k|    {
 2832|  7.56k|        return take_width_view{r, n};
 2833|  7.56k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|  7.56k|    {
 2801|  7.56k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  7.56k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5662|    278|    {
 5663|    278|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 246, False: 32]
  ------------------
 5664|    278|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 32]
  ------------------
 5665|    246|            return read_default(range, value, loc);
 5666|    246|        }
 5667|       |
 5668|     32|        reader_impl_for_int<CharT> reader{};
 5669|     32|        signed char tmp_value{};
 5670|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     32|        value = static_cast<signed char>(value);
 5672|     32|        return ret;
 5673|    278|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5644|    246|    {
 5645|    246|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    246|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    246|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    246|            return code_unit_reader<char>{}.read(range, value);
 5648|    246|        }
 5649|    246|        else {
 5650|    246|            SCN_UNUSED(range);
 5651|    246|            SCN_EXPECT(false);
 5652|    246|            SCN_UNREACHABLE;
 5653|    246|        }
 5654|    246|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5563|    246|    {
 5564|    246|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    246|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    246|        ch = *range.begin();
 5566|    246|        return it;
 5567|    246|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.82k|{
 1846|  1.82k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.82k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.82k|    return ranges::next(range.begin());
 1851|  1.82k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  1.82k|{
  950|  1.82k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.82k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.82k|    return eof_error::good;
  954|  1.82k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  1.82k|{
  944|  1.82k|    return is_range_eof(r.begin(), r.end());
  945|  1.82k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  22.1k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  22.1k|    {
  937|  22.1k|        return begin == end;
  938|  22.1k|    }
  939|  22.1k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   101k|        {
 2770|   101k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 3.53k, False: 98.0k]
  |  Branch (2770:39): [True: 830, False: 2.70k]
  ------------------
 2771|   101k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 948, False: 99.8k]
  ------------------
 2772|   101k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|  55.2k|    {
 2816|  55.2k|        return sentinel<true>{m_base.get().end()};
 2817|  55.2k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|  93.3k|    {
 2717|  93.3k|        return view;
 2718|  93.3k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|  55.2k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.86k|    {
  296|  1.86k|        ++x;
  297|  1.86k|        return x;
  298|  1.86k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  19.0k|    {
 2810|  19.0k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  19.0k|                                      m_count};
 2812|  19.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     32|    {
 3539|     32|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     32|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     32|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 32]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     32|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 32]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     32|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3565|     32|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    792|{
 3326|    792|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    792|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    792|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    792|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    792|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 792]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    792|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    792|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    792|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    792|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    792|        parse_integer_base_prefix(
 3331|    792|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    792|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 792]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    792|    else {
 3343|    792|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 792]
  |  Branch (3343:13): [True: 792, False: 0]
  ------------------
 3344|    792|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 792, False: 0]
  ------------------
 3345|    792|            digits_begin_it = base_prefix_begin_it;
 3346|    792|        }
 3347|    792|    }
 3348|       |
 3349|    792|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 792, False: 0]
  ------------------
 3350|    792|        sign = sign_type::plus_sign;
 3351|    792|    }
 3352|    792|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    792|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    792|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  1.05k|{
 3141|  1.05k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.05k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.05k, False: 0]
  ------------------
 3143|  1.05k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.05k, False: 0]
  ------------------
 3144|  1.05k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.05k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.05k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  1.05k|{
 2272|  1.05k|    auto it = read_code_unit(range);
 2273|  1.05k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.05k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  2.10k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.10k, False: 1.05k]
  ------------------
 2278|  2.10k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 2.10k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  2.10k|    }
 2282|       |
 2283|  1.05k|    return unexpected(parse_error::error);
 2284|  1.05k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    792|{
 3293|    792|    switch (base) {
 3294|     14|        case 2:
  ------------------
  |  Branch (3294:9): [True: 14, False: 778]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     14|                    false};
 3298|       |
 3299|     14|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 14, False: 778]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     14|            bool zero_parsed = false;
 3302|     14|            auto it = apply_opt(
 3303|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     14|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    254|        case 16:
  ------------------
  |  Branch (3307:9): [True: 254, False: 538]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    254|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    254|                    false};
 3311|       |
 3312|     20|        case 0:
  ------------------
  |  Branch (3312:9): [True: 20, False: 772]
  ------------------
 3313|       |            // detect base
 3314|     20|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    490|        default:
  ------------------
  |  Branch (3316:9): [True: 490, False: 302]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    490|            return {range.begin(), base, false};
 3319|    792|    }
 3320|    792|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    282|{
 2291|    282|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 282, False: 0]
  ------------------
 2292|    282|        return range.begin();
 2293|    282|    }
 2294|      0|    return *result;
 2295|    282|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     34|{
 3244|     34|    return read_matching_string_classic_nocase(range, "0b");
 3245|     34|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  1.10k|{
 2231|  1.10k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.10k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.10k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.10k|        if (range.size() < str.size()) {
 2236|  1.10k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.10k|        }
 2238|  1.10k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.10k|            return unexpected(parse_error::error);
 2240|  1.10k|        }
 2241|  1.10k|        return ranges::next(range.begin(), str.size());
 2242|  1.10k|    }
 2243|  1.10k|    else {
 2244|  1.10k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.10k|            if (ch < 'A' || ch > 'Z') {
 2246|  1.10k|                return ch;
 2247|  1.10k|            }
 2248|  1.10k|            return static_cast<char_type>(ch +
 2249|  1.10k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.10k|        };
 2251|       |
 2252|  1.10k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 182, False: 922]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    182|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    182|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    182|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    182|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    182|    }                                                  \
  |  |  |  | 3671|  1.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    922|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    922|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    922|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    922|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    922|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 922, False: 0]
  |  |  ------------------
  ------------------
 2257|    922|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    922|                    return ascii_tolower(a) ==
 2259|    922|                           static_cast<detail::char_t<Range>>(b);
 2260|    922|                }))) {
 2261|    922|            return unexpected(parse_error::error);
 2262|    922|        }
 2263|       |
 2264|      0|        return it;
 2265|    922|    }
 2266|  1.10k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  3.67k|{
 1857|  3.67k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  3.67k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  3.67k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  3.67k|        if (sz < count) {
 1862|  3.67k|            return unexpected(eof_error::eof);
 1863|  3.67k|        }
 1864|       |
 1865|  3.67k|        return ranges::next(range.begin(), count);
 1866|  3.67k|    }
 1867|  3.67k|    else {
 1868|  3.67k|        auto it = range.begin();
 1869|  3.67k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 3.67k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  13.4k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 10.0k, False: 3.46k]
  ------------------
 1874|  10.0k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 204, False: 9.81k]
  ------------------
 1875|    204|                return unexpected(eof_error::eof);
 1876|    204|            }
 1877|  10.0k|        }
 1878|       |
 1879|  3.46k|        return it;
 1880|  3.67k|    }
 1881|  3.67k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  3.67k|{
 1095|  3.67k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  3.67k|        return r.size();
 1097|  3.67k|    }
 1098|  3.67k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  3.67k|                           ranges::const_iterator_t<Range>,
 1100|  3.67k|                           typename detail::basic_scan_buffer<
 1101|  3.67k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  3.67k|        if constexpr (ranges::common_range<Range>) {
 1103|  3.67k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  3.67k|        }
 1105|  3.67k|        else {
 1106|  3.67k|            if (r.begin().stores_parent()) {
 1107|  3.67k|                return static_cast<size_t>(
 1108|  3.67k|                    r.begin().parent()->chars_available() -
 1109|  3.67k|                    r.begin().position());
 1110|  3.67k|            }
 1111|  3.67k|            return r.begin().contiguous_segment().size();
 1112|  3.67k|        }
 1113|  3.67k|    }
 1114|  3.67k|    else {
 1115|  3.67k|        return 0;
 1116|  3.67k|    }
 1117|  3.67k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|    922|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    922|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 42, False: 880]
  |  Branch (2245:29): [True: 880, False: 0]
  ------------------
 2246|    922|                return ch;
 2247|    922|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    922|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     34|{
 2146|     34|    auto it = read_code_unit(range);
 2147|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2152|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     34|        return unexpected(parse_error::error);
 2154|     34|    }
 2155|       |
 2156|      0|    return *it;
 2157|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     34|{
 1846|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     34|    return ranges::next(range.begin());
 1851|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  20.3k|{
  944|  20.3k|    return is_range_eof(r.begin(), r.end());
  945|  20.3k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    274|{
 3251|    274|    return read_matching_string_classic_nocase(range, "0x");
 3252|    274|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     20|{
 3274|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 20]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 20]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     20|    {
 3281|     20|        bool zero_parsed{false};
 3282|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 20]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     20|    }
 3286|     20|    return {range.begin(), 10, false};
 3287|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    772|{
 3360|    772|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    772|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    772|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    772|            return unexpected_scan_error(
 3365|    772|                scan_error::invalid_scanned_value,
 3366|    772|                "Failed to parse integer: No digits found");
 3367|    772|        }
 3368|    772|        return range.end();
 3369|    772|    }
 3370|    772|    else {
 3371|    772|        return read_while1_code_unit(range,
 3372|    772|                                     [&](char_type ch) noexcept {
 3373|    772|                                         return char_to_int(ch) < base;
 3374|    772|                                     })
 3375|    772|            .transform_error(map_parse_error_to_scan_error(
 3376|    772|                scan_error::invalid_scanned_value,
 3377|    772|                "Failed to parse integer: No digits found"));
 3378|    772|    }
 3379|    772|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  1.03k|{
 1996|  1.03k|    auto it = read_while_code_unit(range, pred);
 1997|  1.03k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.03k, False: 0]
  ------------------
 1998|  1.03k|        return unexpected(parse_error::error);
 1999|  1.03k|    }
 2000|      0|    return it;
 2001|  1.03k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  1.03k|{
 1976|  1.03k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.03k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  1.03k|{
 1957|  1.03k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.03k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.03k|    }
 1960|  1.03k|    else {
 1961|  1.03k|        auto first = range.begin();
 1962|  1.03k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.03k, False: 0]
  ------------------
 1963|  1.03k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.03k, False: 0]
  ------------------
 1964|  1.03k|                return first;
 1965|  1.03k|            }
 1966|  1.03k|        }
 1967|      0|        return first;
 1968|  1.03k|    }
 1969|  1.03k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  54.3k|        {
 2781|  54.3k|            return !(y == x);
 2782|  54.3k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_:
  753|    772|    {
  754|    772|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|    772|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    772|              cvref<T> obj = *get<T>(fn);
  745|    772|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    772|                  obj(static_cast<decltype(args)>(args)...);
  747|    772|              }
  748|    772|              else {
  749|    772|                  return obj(static_cast<decltype(args)>(args)...);
  750|    772|              }
  751|    772|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    772|    {
  684|    772|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    772|            return static_cast<T*>(s.m_cp);
  686|    772|        }
  687|    772|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    772|            return static_cast<T*>(s.m_p);
  689|    772|        }
  690|    772|        else {
  691|    772|            return reinterpret_cast<T*>(s.m_fp);
  692|    772|        }
  693|    772|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3372|    772|                                     [&](char_type ch) noexcept {
 3373|    772|                                         return char_to_int(ch) < base;
 3374|    772|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_LPv0EEEPSP_:
  661|    772|        {
  662|    772|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     20|{
 3390|     20|    std::basic_string<CharT> output;
 3391|     20|    std::string thsep_indices;
 3392|     20|    auto it = range.begin();
 3393|     20|    bool digit_matched = false;
 3394|     20|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 20, False: 0]
  ------------------
 3395|     20|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 20]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     20|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 20, False: 0]
  ------------------
 3400|     20|            break;
 3401|     20|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     20|    }
 3407|     20|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3408|     20|        return unexpected_scan_error(
 3409|     20|            scan_error::invalid_scanned_value,
 3410|     20|            "Failed to parse integer: No digits found");
 3411|     20|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     20|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   103k|    {
 2417|   103k|        return m_count;
 2418|   103k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5662|    268|    {
 5663|    268|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 246, False: 22]
  ------------------
 5664|    268|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 22]
  ------------------
 5665|    246|            return read_default(range, value, loc);
 5666|    246|        }
 5667|       |
 5668|     22|        reader_impl_for_int<CharT> reader{};
 5669|     22|        signed char tmp_value{};
 5670|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     22|        value = static_cast<signed char>(value);
 5672|     22|        return ret;
 5673|    268|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5644|    872|    {
 5645|    872|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    872|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    872|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    872|            return code_unit_reader<char>{}.read(range, value);
 5648|    872|        }
 5649|    872|        else {
 5650|    872|            SCN_UNUSED(range);
 5651|    872|            SCN_EXPECT(false);
 5652|    872|            SCN_UNREACHABLE;
 5653|    872|        }
 5654|    872|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5563|    872|    {
 5564|    872|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    872|        ch = *range.begin();
 5566|    872|        return it;
 5567|    872|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.36k|{
 1846|  6.36k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.36k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.36k|    return ranges::next(range.begin());
 1851|  6.36k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  21.3k|{
  950|  21.3k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.3k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  21.3k|    return eof_error::good;
  954|  21.3k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   289k|{
  944|   289k|    return is_range_eof(r.begin(), r.end());
  945|   289k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   326k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   326k|    {
  937|   326k|        return begin == end;
  938|   326k|    }
  939|   326k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  33.1k|    {
  296|  33.1k|        ++x;
  297|  33.1k|        return x;
  298|  33.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|     22|    {
 3539|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     22|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 22]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 22]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3565|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|     22|                    parse_integer_digits_without_thsep(
 3567|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|     22|                        prefix_result.parsed_base));
 3569|       |
 3570|     22|            auto buf = make_contiguous_buffer(
 3571|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|     22|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.71k|{
 3326|  2.71k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  2.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.71k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.71k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.71k|        parse_integer_base_prefix(
 3331|  2.71k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.71k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.71k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.71k|    else {
 3343|  2.71k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.71k]
  ------------------
 3344|  2.71k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.71k, False: 0]
  ------------------
 3345|  2.71k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.71k|        }
 3347|  2.71k|    }
 3348|       |
 3349|  2.71k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.71k, False: 0]
  ------------------
 3350|  2.71k|        sign = sign_type::plus_sign;
 3351|  2.71k|    }
 3352|  2.71k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.71k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.71k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.62k|{
 3141|  3.62k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.62k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.62k, False: 0]
  ------------------
 3143|  3.62k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.62k, False: 0]
  ------------------
 3144|  3.62k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.62k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.62k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.62k|{
 2272|  3.62k|    auto it = read_code_unit(range);
 2273|  3.62k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.62k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.24k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.24k, False: 3.62k]
  ------------------
 2278|  7.24k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.24k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.24k|    }
 2282|       |
 2283|  3.62k|    return unexpected(parse_error::error);
 2284|  3.62k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.71k|{
 3293|  2.71k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 2.70k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     30|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 30, False: 2.68k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     30|            bool zero_parsed = false;
 3302|     30|            auto it = apply_opt(
 3303|     30|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     30|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    888|        case 16:
  ------------------
  |  Branch (3307:9): [True: 888, False: 1.82k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    888|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    888|                    false};
 3311|       |
 3312|     16|        case 0:
  ------------------
  |  Branch (3312:9): [True: 16, False: 2.69k]
  ------------------
 3313|       |            // detect base
 3314|     16|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.77k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.77k, False: 940]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.77k|            return {range.begin(), base, false};
 3319|  2.71k|    }
 3320|  2.71k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    924|{
 2291|    924|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 924, False: 0]
  ------------------
 2292|    924|        return range.begin();
 2293|    924|    }
 2294|      0|    return *result;
 2295|    924|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     22|{
 3244|     22|    return read_matching_string_classic_nocase(range, "0b");
 3245|     22|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.67k|{
 2231|  3.67k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.67k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.67k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.67k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 3.67k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  3.67k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 3.67k, False: 0]
  ------------------
 2239|  3.67k|            return unexpected(parse_error::error);
 2240|  3.67k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  3.67k|    }
 2243|  3.67k|    else {
 2244|  3.67k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.67k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.67k|                return ch;
 2247|  3.67k|            }
 2248|  3.67k|            return static_cast<char_type>(ch +
 2249|  3.67k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.67k|        };
 2251|       |
 2252|  3.67k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  3.67k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.67k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.67k|        if (SCN_UNLIKELY(!std::equal(
 2257|  3.67k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.67k|                    return ascii_tolower(a) ==
 2259|  3.67k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.67k|                }))) {
 2261|  3.67k|            return unexpected(parse_error::error);
 2262|  3.67k|        }
 2263|       |
 2264|  3.67k|        return it;
 2265|  3.67k|    }
 2266|  3.67k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     46|{
 3258|     46|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 46]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     46|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 46]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     46|    return unexpected(parse_error::error);
 3268|     46|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.86k|{
 2146|  1.86k|    auto it = read_code_unit(range);
 2147|  1.86k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.86k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.86k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.86k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.86k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.86k|        return unexpected(parse_error::error);
 2154|  1.86k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.86k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    904|{
 3251|    904|    return read_matching_string_classic_nocase(range, "0x");
 3252|    904|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     16|{
 3274|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 16]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 16]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     16|    {
 3281|     16|        bool zero_parsed{false};
 3282|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 16]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     16|    }
 3286|     16|    return {range.begin(), 10, false};
 3287|     16|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.68k|{
 3360|  2.68k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.68k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.68k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.68k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.68k|        return range.end();
 3369|  2.68k|    }
 3370|  2.68k|    else {
 3371|  2.68k|        return read_while1_code_unit(range,
 3372|  2.68k|                                     [&](char_type ch) noexcept {
 3373|  2.68k|                                         return char_to_int(ch) < base;
 3374|  2.68k|                                     })
 3375|  2.68k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.68k|                scan_error::invalid_scanned_value,
 3377|  2.68k|                "Failed to parse integer: No digits found"));
 3378|  2.68k|    }
 3379|  2.68k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     28|{
 3390|     28|    std::basic_string<CharT> output;
 3391|     28|    std::string thsep_indices;
 3392|     28|    auto it = range.begin();
 3393|     28|    bool digit_matched = false;
 3394|     28|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 28, False: 0]
  ------------------
 3395|     28|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 28]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     28|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 28, False: 0]
  ------------------
 3400|     28|            break;
 3401|     28|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     28|    }
 3407|     28|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 3408|     28|        return unexpected_scan_error(
 3409|     28|            scan_error::invalid_scanned_value,
 3410|     28|            "Failed to parse integer: No digits found");
 3411|     28|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     28|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  13.2k|{
 1683|  13.2k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  13.2k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  13.2k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  13.2k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  13.2k|    }
 1688|  13.2k|    else {
 1689|  13.2k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  13.2k|    }
 1691|  13.2k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  13.2k|    {
 1490|  13.2k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  59.8k|    {
 1503|  59.8k|        return sv;
 1504|  59.8k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|  1.83k|{
 5951|  1.83k|    using char_type = detail::char_t<Range>;
 5952|  1.83k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  1.83k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 1.47k, False: 356]
  ------------------
 5955|  1.47k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  1.47k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  1.47k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 1.34k, False: 128]
  ------------------
 5959|  1.34k|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|  1.34k|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 142, False: 1.20k]
  ------------------
 5962|    142|                auto prefix_width =
 5963|    142|                    static_cast<std::ptrdiff_t>(
 5964|    142|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    142|                    ranges::distance(range.begin(), it);
 5966|    142|                return result_type{it, prefix_width};
 5967|    142|            }
 5968|  1.20k|            return result_type{it, 0};
 5969|  1.34k|        }
 5970|       |
 5971|    128|        auto max_width_view = take_width(range, max_width);
 5972|    128|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    128|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 128, False: 0]
  ------------------
 5975|    128|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    128|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    128|    }
 5979|       |
 5980|    356|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    356|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 188, False: 168]
  ------------------
 5982|    188|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|    188|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 52, False: 136]
  ------------------
 5985|     52|            auto prefix_width =
 5986|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|     52|            return result_type{it, prefix_width};
 5989|     52|        }
 5990|    136|        return result_type{it, 0};
 5991|    188|    }
 5992|       |
 5993|    168|    auto max_width_view = take_width(range, max_width);
 5994|    168|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    168|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 168, False: 0]
  ------------------
 5997|    168|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    168|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    168|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.53k|{
 1976|  1.53k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.53k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  1.74k|{
 1957|  1.74k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.74k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.74k|    }
 1960|  1.74k|    else {
 1961|  1.74k|        auto first = range.begin();
 1962|  1.74k|        for (; first != range.end(); ++first) {
 1963|  1.74k|            if (pred(*first)) {
 1964|  1.74k|                return first;
 1965|  1.74k|            }
 1966|  1.74k|        }
 1967|  1.74k|        return first;
 1968|  1.74k|    }
 1969|  1.74k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  1.47k|    {
  754|  1.47k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  1.89k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.89k|              cvref<T> obj = *get<T>(fn);
  745|  1.89k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.89k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.89k|              }
  748|  1.89k|              else {
  749|  1.89k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.89k|              }
  751|  1.89k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  1.89k|    {
  684|  1.89k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.89k|            return static_cast<T*>(s.m_cp);
  686|  1.89k|        }
  687|  1.89k|        else if constexpr (std::is_object_v<T>) {
  688|  1.89k|            return static_cast<T*>(s.m_p);
  689|  1.89k|        }
  690|  1.89k|        else {
  691|  1.89k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.89k|        }
  693|  1.89k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  1.89k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  1.47k|        {
  667|  1.47k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    284|{
 1976|    284|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    284|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    524|{
 1957|    524|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    524|        return std::find_if(range.begin(), range.end(), pred);
 1959|    524|    }
 1960|    524|    else {
 1961|    524|        auto first = range.begin();
 1962|  8.24k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 7.97k, False: 262]
  ------------------
 1963|  7.97k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 262, False: 7.71k]
  ------------------
 1964|    262|                return first;
 1965|    262|            }
 1966|  7.97k|        }
 1967|    262|        return first;
 1968|    524|    }
 1969|    524|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    188|{
 2037|    188|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    188|    auto it = range.begin();
 2040|    328|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 328, False: 0]
  ------------------
 2041|    328|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    328|                                           needle.size());
 2043|    328|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 6, False: 322]
  ------------------
 2044|      6|            return it;
 2045|      6|        }
 2046|    322|        static_assert(
 2047|    322|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    322|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 182, False: 140]
  ------------------
 2049|    182|            return it;
 2050|    182|        }
 2051|    140|        it = *r;
 2052|    140|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    168|{
 2037|    168|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    168|    auto it = range.begin();
 2040|    296|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 266, False: 30]
  ------------------
 2041|    266|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    266|                                           needle.size());
 2043|    266|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 22, False: 244]
  ------------------
 2044|     22|            return it;
 2045|     22|        }
 2046|    244|        static_assert(
 2047|    244|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    244|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 116, False: 128]
  ------------------
 2049|    116|            return it;
 2050|    116|        }
 2051|    128|        it = *r;
 2052|    128|    }
 2053|     30|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     30|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     30|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|     30|    return it;
 2055|     30|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    460|{
 2951|    460|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 460]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    460|    return read_while_classic_space(range);
 2962|    460|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    460|{
 2117|    460|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    460|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    460|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    460|        auto buf = make_contiguous_buffer(range);
 2121|    460|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    460|        return ranges::next(range.begin(),
 2123|    460|                            ranges::distance(buf.view().begin(), it));
 2124|    460|    }
 2125|    460|    else {
 2126|    460|        auto it = range.begin();
 2127|       |
 2128|    460|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    460|            auto seg = get_contiguous_beginning(range);
 2130|    460|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    460|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 460]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|    460|            ranges::advance(it, seg.size());
 2135|    460|        }
 2136|       |
 2137|    460|        return read_while_code_point(
 2138|    460|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    460|    }
 2140|    460|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  1.16k|{
 1039|  1.16k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  1.16k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  1.16k|        return r;
 1042|  1.16k|    }
 1043|  1.16k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  1.16k|                           ranges::const_iterator_t<Range>,
 1045|  1.16k|                           typename detail::basic_scan_buffer<
 1046|  1.16k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  1.16k|        if constexpr (ranges::common_range<Range>) {
 1048|  1.16k|            auto seg = r.begin().contiguous_segment();
 1049|  1.16k|            auto dist =
 1050|  1.16k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  1.16k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  1.16k|        }
 1053|  1.16k|        else {
 1054|  1.16k|            return r.begin().contiguous_segment();
 1055|  1.16k|        }
 1056|  1.16k|    }
 1057|  1.16k|    else {
 1058|  1.16k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.16k|    }
 1060|  1.16k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    652|{
 2082|    652|    return read_until_code_point(range, std::not_fn(pred));
 2083|    652|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|    790|{
 2061|    790|    auto it = range.begin();
 2062|  12.3k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 12.1k, False: 224]
  ------------------
 2063|  12.1k|        const auto val =
 2064|  12.1k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  12.1k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  12.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.1k, False: 964]
  |  |  ------------------
  ------------------
 2066|  11.1k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  11.1k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  11.1k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 566, False: 10.6k]
  ------------------
 2069|    566|                return it;
 2070|    566|            }
 2071|  11.1k|        }
 2072|  11.5k|        it = val.iterator;
 2073|  11.5k|    }
 2074|       |
 2075|    224|    return it;
 2076|    790|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  20.2k|{
 1899|  20.2k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  20.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  20.2k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  20.2k|    auto it = range.begin();
 1903|  20.2k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  20.2k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 18.2k]
  |  |  ------------------
  ------------------
 1906|  2.00k|        ++it;
 1907|  2.00k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  2.00k|        return {it, {}};
 1909|  2.00k|    }
 1910|       |
 1911|  18.2k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 15.6k, False: 2.67k]
  ------------------
 1912|  15.6k|        ++it;
 1913|  15.6k|        return {it, string_type(1, *range.begin())};
 1914|  15.6k|    }
 1915|       |
 1916|  2.67k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  2.67k|    return {it, string_type{range.begin(), it}};
 1918|  18.2k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  2.00k|{
 1155|  2.00k|    auto it = input.begin();
 1156|  2.78k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 2.66k, False: 126]
  ------------------
 1157|  2.66k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.87k, False: 784]
  ------------------
 1158|  1.87k|            break;
 1159|  1.87k|        }
 1160|  2.66k|    }
 1161|  2.00k|    return it;
 1162|  2.00k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  2.67k|    {
  283|  2.67k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  2.67k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  2.67k|    {
  227|  2.67k|        constexpr iter_difference_t<I> zero{0};
  228|  2.67k|        iter_difference_t<I> counter{0};
  229|       |
  230|  2.67k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 2.67k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  2.67k|        else {
  237|  9.18k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 6.60k, False: 2.58k]
  |  Branch (237:34): [True: 6.51k, False: 90]
  ------------------
  238|  6.51k|                ++i;
  239|  6.51k|                ++counter;
  240|  6.51k|            }
  241|  2.67k|        }
  242|       |
  243|  2.67k|        return counter;
  244|  2.67k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    460|    {
  754|    460|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  1.21k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.21k|              cvref<T> obj = *get<T>(fn);
  745|  1.21k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.21k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.21k|              }
  748|  1.21k|              else {
  749|  1.21k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.21k|              }
  751|  1.21k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  1.21k|    {
  684|  1.21k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.21k|            return static_cast<T*>(s.m_cp);
  686|  1.21k|        }
  687|  1.21k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.21k|            return static_cast<T*>(s.m_p);
  689|  1.21k|        }
  690|  1.21k|        else {
  691|  1.21k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.21k|        }
  693|  1.21k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  1.21k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    460|        {
  662|    460|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  6.82k|{
 2951|  6.82k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 6.65k, False: 178]
  ------------------
 2952|  6.65k|        auto it = read_while_classic_space(range);
 2953|  6.65k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  6.65k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.65k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  6.65k|        return it;
 2959|  6.65k|    }
 2960|       |
 2961|    178|    return read_while_classic_space(range);
 2962|  6.82k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  12.8k|{
 2117|  12.8k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  12.8k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  12.8k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  12.8k|        auto buf = make_contiguous_buffer(range);
 2121|  12.8k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  12.8k|        return ranges::next(range.begin(),
 2123|  12.8k|                            ranges::distance(buf.view().begin(), it));
 2124|  12.8k|    }
 2125|  12.8k|    else {
 2126|  12.8k|        auto it = range.begin();
 2127|       |
 2128|  12.8k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  12.8k|            auto seg = get_contiguous_beginning(range);
 2130|  12.8k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  12.8k|                seg_it != seg.end()) {
 2132|  12.8k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  12.8k|            }
 2134|  12.8k|            ranges::advance(it, seg.size());
 2135|  12.8k|        }
 2136|       |
 2137|  12.8k|        return read_while_code_point(
 2138|  12.8k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  12.8k|    }
 2140|  12.8k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  15.6k|{
 1683|  15.6k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  15.6k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  15.6k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  15.6k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  15.6k|    }
 1688|  15.6k|    else {
 1689|  15.6k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  15.6k|    }
 1691|  15.6k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  15.6k|    {
 1490|  15.6k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  9.92k|    {
 3040|  9.92k|        reader_error_handler eh{};
 3041|  9.92k|        get_derived().check_specs_impl(specs, eh);
 3042|  9.92k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  9.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.76k, False: 1.15k]
  |  |  ------------------
  ------------------
 3043|  8.76k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  8.76k|        }
 3045|  1.15k|        return {};
 3046|  9.92k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  9.92k|    {
 3051|  9.92k|        return static_cast<Derived&>(*this);
 3052|  9.92k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  9.92k|    {
 3485|  9.92k|        detail::check_int_type_specs(specs, eh);
 3486|  9.92k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  2.40k|    {
 3035|  2.40k|        return true;
 3036|  2.40k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    264|    {
 3539|    264|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    264|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    264|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 264]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    264|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 264]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    264|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    264|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 254, False: 10]
  |  |  ------------------
  ------------------
 3565|    254|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 254, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    254|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    254|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    254|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    254|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    254|    }                                                  \
  |  |  |  | 3671|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     10|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     10|            localized_number_formatting_options<CharT>{loc};
 3586|     10|#endif
 3587|       |
 3588|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    282|    {
 3539|    282|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    282|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    282|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 282]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    282|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 282]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    282|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    282|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 268, False: 14]
  |  |  ------------------
  ------------------
 3565|    268|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    268|                    parse_integer_digits_without_thsep(
 3567|    268|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    268|                        prefix_result.parsed_base));
 3569|       |
 3570|    268|            auto buf = make_contiguous_buffer(
 3571|    268|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    268|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 268, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    268|    }                                                  \
  |  |  |  | 3671|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    268|        }
 3580|       |
 3581|     14|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     14|            localized_number_formatting_options<CharT>{loc};
 3586|     14|#endif
 3587|       |
 3588|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    264|    {
 3539|    264|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    264|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    264|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 264]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    264|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 264]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    264|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    264|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 254, False: 10]
  |  |  ------------------
  ------------------
 3565|    254|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 254, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    254|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    254|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    254|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    254|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    254|    }                                                  \
  |  |  |  | 3671|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     10|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     10|            localized_number_formatting_options<CharT>{loc};
 3586|     10|#endif
 3587|       |
 3588|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    282|    {
 3539|    282|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    282|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    282|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 282]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    282|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 282]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    282|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    282|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 268, False: 14]
  |  |  ------------------
  ------------------
 3565|    268|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    268|                    parse_integer_digits_without_thsep(
 3567|    268|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    268|                        prefix_result.parsed_base));
 3569|       |
 3570|    268|            auto buf = make_contiguous_buffer(
 3571|    268|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    268|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 268, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    268|    }                                                  \
  |  |  |  | 3671|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    268|        }
 3580|       |
 3581|     14|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     14|            localized_number_formatting_options<CharT>{loc};
 3586|     14|#endif
 3587|       |
 3588|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    232|    {
 3539|    232|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    232|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    232|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    232|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    232|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 232]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    232|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    232|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    232|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    232|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 232]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    232|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 232]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    232|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    232|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 232, False: 0]
  |  |  ------------------
  ------------------
 3565|    232|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    232|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    232|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    232|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    232|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    232|    }                                                  \
  |  |  |  | 3671|    232|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    876|    {
 3539|    876|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    876|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    876|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    876|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 876]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    876|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    876|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    876|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    876|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 876]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    876|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 876]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    876|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    876|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 876, False: 0]
  |  |  ------------------
  ------------------
 3565|    876|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    876|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    876|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    876|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 876]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    876|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    876|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    876|                    parse_integer_digits_without_thsep(
 3567|    876|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    876|                        prefix_result.parsed_base));
 3569|       |
 3570|    876|            auto buf = make_contiguous_buffer(
 3571|    876|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    876|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    876|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    876|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    876|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 876, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    876|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    876|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    876|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    876|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    876|    }                                                  \
  |  |  |  | 3671|    876|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    876|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  4.96k|    {
 3040|  4.96k|        reader_error_handler eh{};
 3041|  4.96k|        get_derived().check_specs_impl(specs, eh);
 3042|  4.96k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.38k, False: 574]
  |  |  ------------------
  ------------------
 3043|  4.38k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.38k|        }
 3045|    574|        return {};
 3046|  4.96k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  4.96k|    {
 3051|  4.96k|        return static_cast<Derived&>(*this);
 3052|  4.96k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  4.96k|    {
 4145|  4.96k|        detail::check_float_type_specs(specs, eh);
 4146|  4.96k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.20k|    {
 3035|  1.20k|        return true;
 3036|  1.20k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|    544|    {
 4217|    544|        unsigned options{};
 4218|    544|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 16, False: 528]
  ------------------
 4219|     16|            options |= float_reader_base::allow_thsep;
 4220|     16|        }
 4221|       |
 4222|    544|        SCN_GCC_COMPAT_PUSH
 4223|    544|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    544|        switch (specs.type) {
 4226|     30|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 30, False: 514]
  ------------------
 4227|     30|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 4, False: 540]
  ------------------
 4230|      4|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     12|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 12, False: 532]
  ------------------
 4233|     12|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      8|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 8, False: 536]
  ------------------
 4236|      8|                return options | float_reader_base::allow_scientific |
 4237|      8|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    490|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 490, False: 54]
  ------------------
 4240|    490|                return options | float_reader_base::allow_scientific |
 4241|    490|                       float_reader_base::allow_fixed |
 4242|    490|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 544]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    544|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    544|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    544|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|    544|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.17k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  2.34k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|    886|    {
 4057|    886|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 886, False: 0]
  ------------------
 4058|    886|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 886, False: 0]
  ------------------
 4059|    886|            return;
 4060|    886|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|    736|    {
 1587|    736|        return m_storage.has_value();
 1588|    736|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    368|    {
 1592|    368|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    368|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    368|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    368|        return *m_storage;
 1594|    368|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    260|    {
  763|    260|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    260|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    260|    {
 3705|    260|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    260|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    260|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    260|        auto it = sign_result.first;
 3708|    260|        m_sign = sign_result.second;
 3709|       |
 3710|    260|        auto digits_begin = it;
 3711|    260|        auto r = ranges::subrange{it, range.end()};
 3712|    260|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    260|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    260|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    260|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    260|                SCN_TRY_ASSIGN(
 3717|    260|                    it,
 3718|    260|                    do_read_source_impl(
 3719|    260|                        r,
 3720|    260|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    260|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    260|            }
 3723|    260|            else {
 3724|    260|                auto cb = [&](const auto& rr)
 3725|    260|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    260|                    auto res = read_all(rr);
 3727|    260|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    260|                        return unexpected_scan_error(
 3729|    260|                            scan_error::invalid_scanned_value,
 3730|    260|                            "Invalid float value");
 3731|    260|                    }
 3732|    260|                    return res;
 3733|    260|                };
 3734|    260|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    260|            }
 3736|    260|        }
 3737|    260|        else {
 3738|    260|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 260, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    260|    }                                                  \
  |  | 3671|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    260|    {
 4000|    260|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    260|        const bool allowed_nonhex =
 4002|    260|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    260|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    260|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 260, False: 0]
  |  Branch (4005:45): [True: 0, False: 260]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    260|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 260]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    260|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 260, False: 0]
  |  Branch (4014:45): [True: 0, False: 260]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    260|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 260]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    260|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 242, False: 18]
  |  Branch (4021:28): [True: 4, False: 238]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      4|            auto it = range.begin();
 4025|       |
 4026|      4|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 4]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      4|            else {
 4031|      4|                m_kind = float_kind::hex_without_prefix;
 4032|      4|            }
 4033|       |
 4034|      4|            return read_hex(ranges::subrange{it, range.end()});
 4035|      4|        }
 4036|    256|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 18, False: 238]
  |  Branch (4036:29): [True: 18, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     18|            m_kind = float_kind::generic;
 4040|     18|            return read_regular_float(range);
 4041|     18|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    238|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 238]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    238|        m_kind = float_kind::generic;
 4052|    238|        return read_regular(range);
 4053|    238|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    260|    {
 3811|    260|        auto it = range.begin();
 3812|    260|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 260, False: 0]
  ------------------
 3813|    260|            return unexpected(r.error());
 3814|    260|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    260|    {
 3834|    260|        auto it = range.begin();
 3835|    260|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 260, False: 0]
  ------------------
 3836|    260|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    260|                scan_error::invalid_scanned_value,
 3838|    260|                "Invalid floating-point NaN value"));
 3839|    260|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    242|    {
 3804|    242|        return read_matching_string_classic_nocase(range, "0x");
 3805|    242|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      4|    {
 3904|      4|        auto it = range.begin();
 3905|       |
 3906|      4|        std::ptrdiff_t digits_count = 0;
 3907|      4|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      4|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 3909|      4|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      4|                scan_error::invalid_scanned_value,
 3911|      4|                "Invalid hexadecimal floating-point value"));
 3912|      4|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      4|    {
 3789|      4|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      4|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      4|        return read_while1_code_unit(
 3798|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      4|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|      4|    {
  754|      4|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      4|    {
  684|      4|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      4|            return static_cast<T*>(s.m_cp);
  686|      4|        }
  687|      4|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      4|            return static_cast<T*>(s.m_p);
  689|      4|        }
  690|      4|        else {
  691|      4|            return reinterpret_cast<T*>(s.m_fp);
  692|      4|        }
  693|      4|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3798|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|      4|        {
  662|      4|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    256|    {
 3944|    256|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    256|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 242, False: 14]
  |  Branch (3945:50): [True: 0, False: 242]
  ------------------
 3946|       |
 3947|    256|        auto it = ranges::begin(range);
 3948|    256|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    256|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    256|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 256, False: 0]
  |  |  ------------------
  ------------------
 3952|    256|            return r.transform_error(
 3953|    256|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    256|                                              "Invalid floating-point value"));
 3955|    256|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    256|    {
 3774|    256|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256]
  |  |  |  Branch (859:45): [True: 0, False: 256]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    256|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    256|        return read_while1_code_unit(
 3783|    256|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    256|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|    256|    {
  754|    256|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|    256|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    256|              cvref<T> obj = *get<T>(fn);
  745|    256|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    256|                  obj(static_cast<decltype(args)>(args)...);
  747|    256|              }
  748|    256|              else {
  749|    256|                  return obj(static_cast<decltype(args)>(args)...);
  750|    256|              }
  751|    256|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    256|    {
  684|    256|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    256|            return static_cast<T*>(s.m_cp);
  686|    256|        }
  687|    256|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    256|            return static_cast<T*>(s.m_p);
  689|    256|        }
  690|    256|        else {
  691|    256|            return reinterpret_cast<T*>(s.m_fp);
  692|    256|        }
  693|    256|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3783|    256|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|    256|        {
  662|    256|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    252|    {
 3665|    252|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    252|        return read_source_impl(range);
 3671|    252|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    910|    {
  763|    910|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    910|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    910|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    910|    {
 3705|    910|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    910|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    910|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    910|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 910]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    910|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    910|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    910|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    910|        auto it = sign_result.first;
 3708|    910|        m_sign = sign_result.second;
 3709|       |
 3710|    910|        auto digits_begin = it;
 3711|    910|        auto r = ranges::subrange{it, range.end()};
 3712|    910|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    910|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    910|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 910]
  |  |  |  Branch (859:45): [True: 0, False: 910]
  |  |  |  Branch (859:45): [True: 0, False: 910]
  |  |  ------------------
  ------------------
 3715|    910|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    910|            else {
 3724|    910|                auto cb = [&](const auto& rr)
 3725|    910|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    910|                    auto res = read_all(rr);
 3727|    910|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    910|                        return unexpected_scan_error(
 3729|    910|                            scan_error::invalid_scanned_value,
 3730|    910|                            "Invalid float value");
 3731|    910|                    }
 3732|    910|                    return res;
 3733|    910|                };
 3734|    910|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|    910|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    910|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 24, False: 886]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     24|    }                                                  \
  |  | 3671|    910|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    910|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    886|            }
 3736|    910|        }
 3737|    886|        else {
 3738|    886|            SCN_TRY_ASSIGN(
 3739|    886|                it,
 3740|    886|                do_read_source_impl(
 3741|    886|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    886|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    886|        }
 3744|       |
 3745|    886|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    886|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    886|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    886|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 886, False: 0]
  |  Branch (3747:48): [True: 886, False: 0]
  ------------------
 3748|    886|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 886, False: 0]
  ------------------
 3749|    886|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 886, False: 0]
  ------------------
 3750|    886|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    886|        }
 3752|       |
 3753|    886|        handle_separators();
 3754|       |
 3755|    886|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 886]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    886|        return it;
 3768|    886|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    910|    {
 3811|    910|        auto it = range.begin();
 3812|    910|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 910, False: 0]
  ------------------
 3813|    910|            return unexpected(r.error());
 3814|    910|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    910|    {
 3834|    910|        auto it = range.begin();
 3835|    910|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 910, False: 0]
  ------------------
 3836|    910|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    910|                scan_error::invalid_scanned_value,
 3838|    910|                "Invalid floating-point NaN value"));
 3839|    910|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    886|    {
 3804|    886|        return read_matching_string_classic_nocase(range, "0x");
 3805|    886|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     24|{
 1996|     24|    auto it = read_while_code_unit(range, pred);
 1997|     24|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 24, False: 0]
  ------------------
 1998|     24|        return unexpected(parse_error::error);
 1999|     24|    }
 2000|      0|    return it;
 2001|     24|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     24|    {
 3944|     24|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     24|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 8, False: 16]
  |  Branch (3945:50): [True: 4, False: 4]
  ------------------
 3946|       |
 3947|     24|        auto it = ranges::begin(range);
 3948|     24|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     24|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     24|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3952|     24|            return r.transform_error(
 3953|     24|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     24|                                              "Invalid floating-point value"));
 3955|     24|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     24|    {
 3774|     24|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24]
  |  |  |  Branch (859:45): [True: 0, False: 24]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     24|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     24|        return read_while1_code_unit(
 3783|     24|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     24|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     24|    {
  754|     24|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     24|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     24|              cvref<T> obj = *get<T>(fn);
  745|     24|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     24|                  obj(static_cast<decltype(args)>(args)...);
  747|     24|              }
  748|     24|              else {
  749|     24|                  return obj(static_cast<decltype(args)>(args)...);
  750|     24|              }
  751|     24|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     24|    {
  684|     24|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     24|            return static_cast<T*>(s.m_cp);
  686|     24|        }
  687|     24|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     24|            return static_cast<T*>(s.m_p);
  689|     24|        }
  690|     24|        else {
  691|     24|            return reinterpret_cast<T*>(s.m_fp);
  692|     24|        }
  693|     24|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|     24|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     24|        {
  662|     24|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    910|    {
 4000|    910|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    910|        const bool allowed_nonhex =
 4002|    910|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    910|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    910|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 910, False: 0]
  |  Branch (4005:45): [True: 0, False: 910]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    910|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 910]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    910|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 910, False: 0]
  |  Branch (4014:45): [True: 0, False: 910]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    910|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 910]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    910|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 886, False: 24]
  |  Branch (4021:28): [True: 8, False: 878]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      8|            auto it = range.begin();
 4025|       |
 4026|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 8]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      8|            else {
 4031|      8|                m_kind = float_kind::hex_without_prefix;
 4032|      8|            }
 4033|       |
 4034|      8|            return read_hex(ranges::subrange{it, range.end()});
 4035|      8|        }
 4036|    902|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 24, False: 878]
  |  Branch (4036:29): [True: 24, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     24|            m_kind = float_kind::generic;
 4040|     24|            return read_regular_float(range);
 4041|     24|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    878|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    878|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 878]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    878|        m_kind = float_kind::generic;
 4052|    878|        return read_regular(range);
 4053|    878|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    886|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    886|                    auto res = read_all(rr);
 3727|    886|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    886|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 886]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    886|                    return res;
 3733|    886|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    886|{
 1839|    886|    return ranges::next(range.begin(), range.end());
 1840|    886|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    886|    {
  313|    886|        ranges::advance(x, bound);
  314|    886|        return x;
  315|    886|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    886|    {
  275|    886|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    886|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    952|    {
  190|    952|        i = std::move(bound);
  191|    952|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|    886|    {
 1577|    886|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    886|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    886|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|    886|    {
 1621|    886|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    886|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    886|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    886|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    886|            m_storage.reset();
 1627|    886|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    886|        }
 1629|    886|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    886|                                          std::basic_string<CharT>>) {
 1631|    886|            m_storage.emplace(SCN_FWD(range));
 1632|    886|            m_view = string_view_type{*m_storage};
 1633|    886|        }
 1634|    886|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    886|                                          typename detail::basic_scan_buffer<
 1636|    886|                                              value_t>::forward_iterator> &&
 1637|    886|                           ranges::common_range<Range>) {
 1638|    886|            auto beg_seg = range.begin().contiguous_segment();
 1639|    886|            auto end_seg = range.end().contiguous_segment();
 1640|    886|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    886|                             detail::to_address(end_seg.end()))) {
 1642|    886|                auto& str = m_storage.emplace();
 1643|    886|                str.reserve(range.end().position() - range.begin().position());
 1644|    886|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    886|                m_view = string_view_type{str};
 1646|    886|                return;
 1647|    886|            }
 1648|       |
 1649|    886|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    886|                                                            end_seg.data());
 1651|    886|            m_storage.reset();
 1652|    886|        }
 1653|    886|        else {
 1654|    886|            auto& str = m_storage.emplace();
 1655|    886|            if constexpr (ranges::sized_range<Range>) {
 1656|    886|                str.reserve(range.size());
 1657|    886|            }
 1658|    886|            if constexpr (ranges::common_range<Range>) {
 1659|    886|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    886|                          std::back_inserter(str));
 1661|    886|            }
 1662|    886|            else {
 1663|    886|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    886|                     ++it) {
 1665|    886|                    str.push_back(*it);
 1666|    886|                }
 1667|    886|            }
 1668|    886|            m_view = string_view_type{str};
 1669|    886|        }
 1670|    886|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    902|    {
 3665|    902|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    902|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 902]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    902|        return read_source_impl(range);
 3671|    902|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    886|    {
 3691|    886|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    886|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    886|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    886|        const std::ptrdiff_t sign_len =
 3694|    886|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 886]
  ------------------
 3695|       |
 3696|    886|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|    886|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    886|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    886|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    886|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 886, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    886|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    886|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    886|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    886|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    886|    }                                                  \
  |  |  |  | 3671|    886|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    886|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    260|    {
 4170|    260|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    260|#if !SCN_DISABLE_LOCALE
 4173|    260|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 252]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    252|#endif
 4182|       |
 4183|    252|        return read_impl<Range>(
 4184|    252|            range, rd,
 4185|    252|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    252|                return r.read_source(SCN_FWD(args)...);
 4187|    252|            },
 4188|    252|            value);
 4189|    260|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    260|    {
 4206|    260|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    260|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 260, False: 0]
  |  |  ------------------
  ------------------
 4208|    260|            return unexpected(r.error());
 4209|    260|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    252|    {
  754|    252|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    252|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    252|              cvref<T> obj = *get<T>(fn);
  745|    252|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    252|                  obj(static_cast<decltype(args)>(args)...);
  747|    252|              }
  748|    252|              else {
  749|    252|                  return obj(static_cast<decltype(args)>(args)...);
  750|    252|              }
  751|    252|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    252|    {
  684|    252|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    252|            return static_cast<T*>(s.m_cp);
  686|    252|        }
  687|    252|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    252|            return static_cast<T*>(s.m_p);
  689|    252|        }
  690|    252|        else {
  691|    252|            return reinterpret_cast<T*>(s.m_fp);
  692|    252|        }
  693|    252|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    252|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    252|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    252|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  661|    252|        {
  662|    252|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    284|    {
 4170|    284|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    284|#if !SCN_DISABLE_LOCALE
 4173|    284|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 276]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    276|#endif
 4182|       |
 4183|    276|        return read_impl<Range>(
 4184|    276|            range, rd,
 4185|    276|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    276|                return r.read_source(SCN_FWD(args)...);
 4187|    276|            },
 4188|    276|            value);
 4189|    284|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    910|    {
 4206|    910|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    910|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 886]
  |  |  ------------------
  ------------------
 4208|     24|            return unexpected(r.error());
 4209|     24|        }
 4210|       |
 4211|    886|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|    886|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    886|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    886|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    886|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 886, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    886|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    886|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    886|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    886|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    886|    }                                                  \
  |  |  |  | 3671|    886|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    886|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    276|    {
  754|    276|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    276|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    276|              cvref<T> obj = *get<T>(fn);
  745|    276|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    276|                  obj(static_cast<decltype(args)>(args)...);
  747|    276|              }
  748|    276|              else {
  749|    276|                  return obj(static_cast<decltype(args)>(args)...);
  750|    276|              }
  751|    276|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    276|    {
  684|    276|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    276|            return static_cast<T*>(s.m_cp);
  686|    276|        }
  687|    276|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    276|            return static_cast<T*>(s.m_p);
  689|    276|        }
  690|    276|        else {
  691|    276|            return reinterpret_cast<T*>(s.m_fp);
  692|    276|        }
  693|    276|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    276|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    276|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    276|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    276|        {
  662|    276|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|  5.54k|{
 5809|  5.54k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  5.54k|        return reader_impl_for_bool<CharT>{};
 5811|  5.54k|    }
 5812|  5.54k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  5.54k|        return reader_impl_for_char<CharT>{};
 5814|  5.54k|    }
 5815|  5.54k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  5.54k|        return reader_impl_for_wchar<CharT>{};
 5817|  5.54k|    }
 5818|  5.54k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  5.54k|        return reader_impl_for_code_point<CharT>{};
 5820|  5.54k|    }
 5821|  5.54k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  5.54k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  5.54k|        return reader_impl_for_string<CharT>{};
 5824|  5.54k|    }
 5825|  5.54k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  5.54k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  5.54k|        return reader_impl_for_string<CharT>{};
 5828|  5.54k|    }
 5829|  5.54k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  5.54k|                       std::is_same_v<T, wregex_matches>) {
 5831|  5.54k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  5.54k|    }
 5833|  5.54k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  5.54k|        return reader_impl_for_voidptr<CharT>{};
 5835|  5.54k|    }
 5836|  5.54k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  5.54k|        return reader_impl_for_float<CharT>{};
 5838|  5.54k|    }
 5839|  5.54k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  5.54k|                       !std::is_same_v<T, wchar_t> &&
 5841|  5.54k|                       !std::is_same_v<T, char32_t> &&
 5842|  5.54k|                       !std::is_same_v<T, bool>) {
 5843|  5.54k|        return reader_impl_for_int<CharT>{};
 5844|  5.54k|    }
 5845|  5.54k|    else {
 5846|  5.54k|        return reader_impl_for_monostate<CharT>{};
 5847|  5.54k|    }
 5848|  5.54k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|  16.6k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  14.7k|    {
 3040|  14.7k|        reader_error_handler eh{};
 3041|  14.7k|        get_derived().check_specs_impl(specs, eh);
 3042|  14.7k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 378, False: 14.3k]
  |  |  ------------------
  ------------------
 3043|    378|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    378|        }
 3045|  14.3k|        return {};
 3046|  14.7k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  14.7k|    {
 3051|  14.7k|        return static_cast<Derived&>(*this);
 3052|  14.7k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  14.7k|    {
 5210|  14.7k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  14.7k|        SCN_GCC_PUSH
 5213|  14.7k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  14.7k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  14.7k|        SCN_CLANG_PUSH
 5217|  14.7k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  14.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  14.7k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 372, False: 14.3k]
  ------------------
 5221|  1.48k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.48k, False: 13.2k]
  ------------------
 5222|  1.48k|                m_type = reader_type::word;
 5223|  1.48k|                break;
 5224|       |
 5225|    552|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 552, False: 14.2k]
  ------------------
 5226|    552|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 108, False: 444]
  ------------------
 5227|    552|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 222, False: 222]
  ------------------
 5228|    330|                    m_type = reader_type::custom_word;
 5229|    330|                }
 5230|    222|                else {
 5231|    222|                    m_type = reader_type::word;
 5232|    222|                }
 5233|    552|                break;
 5234|      0|            }
 5235|       |
 5236|    102|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 102, False: 14.6k]
  ------------------
 5237|    102|                m_type = reader_type::character;
 5238|    102|                break;
 5239|       |
 5240|  3.18k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 3.18k, False: 11.5k]
  ------------------
 5241|  3.18k|                m_type = reader_type::character_set;
 5242|  3.18k|                break;
 5243|       |
 5244|  8.50k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 8.50k, False: 6.26k]
  ------------------
 5245|  8.50k|                m_type = reader_type::regex;
 5246|  8.50k|                break;
 5247|       |
 5248|    570|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 570, False: 14.1k]
  ------------------
 5249|    570|                m_type = reader_type::regex_escaped;
 5250|    570|                break;
 5251|  14.7k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  14.7k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|  19.8k|    {
 5259|  19.8k|        return m_type == reader_type::word;
 5260|  19.8k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  9.62k|{
 1132|  9.62k|    auto it = src.begin();
 1133|   445k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 437k, False: 7.88k]
  ------------------
 1134|   437k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   437k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.12k, False: 436k]
  ------------------
 1136|  1.12k|            return false;
 1137|  1.12k|        }
 1138|   436k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 228, False: 436k]
  ------------------
 1139|    228|            return false;
 1140|    228|        }
 1141|   436k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   436k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   436k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 390, False: 436k]
  ------------------
 1144|    390|            return false;
 1145|    390|        }
 1146|   436k|        it += len;
 1147|   436k|    }
 1148|  7.88k|    return true;
 1149|  9.62k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    368|{
 2993|    368|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    368|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 368, False: 0]
  ------------------
 2995|    368|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    368|    static_cast<    \
  |  |  929|    368|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    368|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    368|    }
 3001|    368|    else {
 3002|    368|        return transcode_impl(source.view(), dest);
 3003|    368|    }
 3004|       |
 3005|    368|    return {};
 3006|    368|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  3.17k|        {
 5103|  3.17k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 576, False: 2.59k]
  ------------------
 5104|    576|                return {};
 5105|    576|            }
 5106|       |
 5107|  2.59k|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|  2.59k|            auto it = detail::to_address(charset_string.begin());
 5109|  2.59k|            auto set = detail::parse_presentation_set(
 5110|  2.59k|                it, detail::to_address(charset_string.end()), nonascii);
 5111|  2.59k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  2.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.59k]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|  2.59k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  2.59k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|  2.59k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  2.59k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|  2.59k|            std::sort(nonascii.extra_ranges.begin(),
 5118|  2.59k|                      nonascii.extra_ranges.end());
 5119|  2.59k|            return {};
 5120|  2.59k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|   277k|        {
 5138|   277k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 36.1k, False: 241k]
  ------------------
 5139|  36.1k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  36.1k|            }
 5141|       |
 5142|   241k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|   277k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  36.1k|        {
 5086|       |            // TODO: binary search?
 5087|  36.1k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 36.1k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  36.1k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  36.1k|            return std::find_if(
 5093|  36.1k|                       nonascii.extra_ranges.begin(),
 5094|  36.1k|                       nonascii.extra_ranges.end(),
 5095|  36.1k|                       [cp_val](const auto& pair) noexcept {
 5096|  36.1k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  36.1k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  36.1k|                       }) != nonascii.extra_ranges.end();
 5099|  36.1k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  7.50M|                       [cp_val](const auto& pair) noexcept {
 5096|  7.50M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 7.50M, False: 2.53k]
  ------------------
 5097|  7.50M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 35.3k, False: 7.46M]
  ------------------
 5098|  7.50M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|   248k|        {
 5076|   248k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   248k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   248k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|   248k|            const auto val =
 5078|   248k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|   248k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|   248k|                    (val % 8)) &
 5081|   248k|                   1u;
 5082|   248k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  8.80k|        {
 5129|  8.80k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 1.63k, False: 7.17k]
  ------------------
 5130|  1.63k|                return false;
 5131|  1.63k|            }
 5132|       |
 5133|  7.17k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  8.80k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  3.17k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    554|    {
 5277|    554|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    554|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    554|        return read_impl(range, specs, value);
 5279|    554|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    554|    {
 5295|    554|        SCN_CLANG_PUSH
 5296|    554|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    554|        switch (m_type) {
 5299|    236|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 236, False: 318]
  ------------------
 5300|    236|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 58, False: 496]
  ------------------
 5303|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     58|                                                                   value);
 5305|       |
 5306|     32|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 32, False: 522]
  ------------------
 5307|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    208|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 208, False: 346]
  ------------------
 5310|    208|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    208|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 552]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|     18|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 18, False: 536]
  ------------------
 5320|     18|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     18|                    range,
 5322|     18|                    get_unescaped_regex_pattern(
 5323|     18|                        specs.charset_string<SourceCharT>()),
 5324|     18|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 554]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    554|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    554|        }
 5331|       |
 5332|    554|        SCN_CLANG_POP
 5333|    554|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    236|    {
 4820|    236|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    236|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    326|{
 4752|    326|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    326|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    326|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 110, False: 216]
  ------------------
 4756|    110|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    110|                                     "Invalid encoding in scanned string");
 4758|    110|    }
 4759|    216|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    216|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 216]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    216|    return SCN_MOVE(result);
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    216|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    708|{
 2088|    708|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    708|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    708|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    708|        auto buf = make_contiguous_buffer(range);
 2092|    708|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    708|        return ranges::next(range.begin(),
 2094|    708|                            ranges::distance(buf.view().begin(), it));
 2095|    708|    }
 2096|    708|    else {
 2097|    708|        auto it = range.begin();
 2098|       |
 2099|    708|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    708|            auto seg = get_contiguous_beginning(range);
 2101|    708|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    708|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 708]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|    708|            ranges::advance(it, seg.size());
 2106|    708|        }
 2107|       |
 2108|    708|        return read_until_code_point(
 2109|    708|            ranges::subrange{it, range.end()},
 2110|    708|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    708|    }
 2112|    708|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    708|{
 2061|    708|    auto it = range.begin();
 2062|  8.68k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 8.13k, False: 546]
  ------------------
 2063|  8.13k|        const auto val =
 2064|  8.13k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  8.13k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  8.13k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.09k, False: 1.03k]
  |  |  ------------------
  ------------------
 2066|  7.09k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  7.09k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  7.09k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 162, False: 6.93k]
  ------------------
 2069|    162|                return it;
 2070|    162|            }
 2071|  7.09k|        }
 2072|  7.97k|        it = val.iterator;
 2073|  7.97k|    }
 2074|       |
 2075|    546|    return it;
 2076|    708|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    708|    {
  754|    708|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  7.09k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.09k|              cvref<T> obj = *get<T>(fn);
  745|  7.09k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.09k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.09k|              }
  748|  7.09k|              else {
  749|  7.09k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.09k|              }
  751|  7.09k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  7.09k|    {
  684|  7.09k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.09k|            return static_cast<T*>(s.m_cp);
  686|  7.09k|        }
  687|  7.09k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.09k|            return static_cast<T*>(s.m_p);
  689|  7.09k|        }
  690|  7.09k|        else {
  691|  7.09k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.09k|        }
  693|  7.09k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  7.09k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    708|        {
  662|    708|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     58|    {
 4841|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 24]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     24|        return read_string_impl(
 4851|     24|            range,
 4852|     24|            read_until_code_units(
 4853|     24|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     24|            value);
 4855|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2006|     72|{
 2007|     72|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     72|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     72|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     72|                           needle.end());
 2012|     72|    }
 2013|     72|    else {
 2014|     72|        auto first = range.begin();
 2015|    402|        while (true) {
  ------------------
  |  Branch (2015:16): [Folded - Ignored]
  ------------------
 2016|    402|            auto it = first;
 2017|    522|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|    522|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2018:21): [True: 36, False: 486]
  ------------------
 2019|     36|                    return first;
 2020|     36|                }
 2021|    486|                if (it == range.end()) {
  ------------------
  |  Branch (2021:21): [True: 36, False: 450]
  ------------------
 2022|     36|                    return it;
 2023|     36|                }
 2024|    450|                if (*it != *needle_it) {
  ------------------
  |  Branch (2024:21): [True: 330, False: 120]
  ------------------
 2025|    330|                    break;
 2026|    330|                }
 2027|    450|            }
 2028|    330|            ++first;
 2029|    330|        }
 2030|     72|    }
 2031|     72|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     32|    {
 4947|     32|        return read_impl(
 4948|     32|            range,
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
 4952|     32|            detail::priority_tag<1>{});
 4953|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     32|    {
 4974|     32|        return read_cb(range);
 4975|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|     96|{
 1839|     96|    return ranges::next(range.begin(), range.end());
 1840|     96|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     96|    {
  313|     96|        ranges::advance(x, bound);
  314|     96|        return x;
  315|     96|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     96|    {
  275|     96|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     96|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     96|    {
  203|  1.96k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.86k, False: 96]
  ------------------
  204|  1.86k|            ++i;
  205|  1.86k|        }
  206|     96|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    208|    {
 5048|    208|        auto it = read_source_impl(range, {specs});
 5049|    208|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 196]
  |  |  ------------------
  ------------------
 5050|     12|            return unexpected(it.error());
 5051|     12|        }
 5052|       |
 5053|    196|        return read_string_impl(range, *it, value);
 5054|    208|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5152|    624|    {
 5153|    624|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    624|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    624|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    624|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 624]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    624|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    624|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 330, False: 294]
  ------------------
 5163|    330|            const auto cb = [&](char32_t cp) {
 5164|    330|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    330|            };
 5166|       |
 5167|    330|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 138, False: 192]
  ------------------
 5168|    138|                auto it = read_until_code_point(range, cb);
 5169|    138|                return check_nonempty(it, range);
 5170|    138|            }
 5171|    192|            auto it = read_while_code_point(range, cb);
 5172|    192|            return check_nonempty(it, range);
 5173|    330|        }
 5174|       |
 5175|    294|        const auto cb = [&](SourceCharT ch) {
 5176|    294|            return cb_wrapper.on_ascii_only(ch);
 5177|    294|        };
 5178|       |
 5179|    294|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 138, False: 156]
  ------------------
 5180|    138|            auto it = read_until_code_unit(range, cb);
 5181|    138|            return check_nonempty(it, range);
 5182|    138|        }
 5183|    156|        auto it = read_while_code_unit(range, cb);
 5184|    156|        return check_nonempty(it, range);
 5185|    294|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|    330|    {
  754|    330|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  9.97k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.97k|              cvref<T> obj = *get<T>(fn);
  745|  9.97k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.97k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.97k|              }
  748|  9.97k|              else {
  749|  9.97k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.97k|              }
  751|  9.97k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  9.97k|    {
  684|  9.97k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.97k|            return static_cast<T*>(s.m_cp);
  686|  9.97k|        }
  687|  9.97k|        else if constexpr (std::is_object_v<T>) {
  688|  9.97k|            return static_cast<T*>(s.m_p);
  689|  9.97k|        }
  690|  9.97k|        else {
  691|  9.97k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.97k|        }
  693|  9.97k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  9.97k|            const auto cb = [&](char32_t cp) {
 5164|  9.97k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  9.97k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|    330|        {
  667|    330|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5190|    624|    {
 5191|    624|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 36, False: 588]
  ------------------
 5192|     36|            return unexpected_scan_error(
 5193|     36|                scan_error::invalid_scanned_value,
 5194|     36|                "No characters matched in [character set]");
 5195|     36|        }
 5196|       |
 5197|    588|        return it;
 5198|    624|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_:
  753|    294|    {
  754|    294|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  5.31k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.31k|              cvref<T> obj = *get<T>(fn);
  745|  5.31k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.31k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.31k|              }
  748|  5.31k|              else {
  749|  5.31k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.31k|              }
  751|  5.31k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.31k|    {
  684|  5.31k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.31k|            return static_cast<T*>(s.m_cp);
  686|  5.31k|        }
  687|  5.31k|        else if constexpr (std::is_object_v<T>) {
  688|  5.31k|            return static_cast<T*>(s.m_p);
  689|  5.31k|        }
  690|  5.31k|        else {
  691|  5.31k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.31k|        }
  693|  5.31k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5175|  5.31k|        const auto cb = [&](SourceCharT ch) {
 5176|  5.31k|            return cb_wrapper.on_ascii_only(ch);
 5177|  5.31k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_LPv0EEEPKSL_:
  666|    294|        {
  667|    294|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    196|{
 4752|    196|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    196|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    196|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 44, False: 152]
  ------------------
 4756|     44|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     44|                                     "Invalid encoding in scanned string");
 4758|     44|    }
 4759|    152|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    152|    static_cast<    \
  |  |  929|    152|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    152|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 152]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    152|    return SCN_MOVE(result);
  ------------------
  |  |  928|    152|    static_cast<    \
  |  |  929|    152|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    152|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     20|    {
 4891|     20|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     20|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|     60|    {
 4913|     60|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    120|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|     60|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|     60|            return unexpected_scan_error(
 4916|     60|                scan_error::invalid_scanned_value,
 4917|     60|                "Regex backend doesn't support wide strings as input");
 4918|     60|        }
 4919|     60|        else {
 4920|     60|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 60, False: 0]
  ------------------
 4921|     60|                return unexpected_scan_error(
 4922|     60|                    scan_error::invalid_scanned_value,
 4923|     60|                    "Cannot use regex with a non-contiguous source "
 4924|     60|                    "range");
 4925|     60|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|     60|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|     60|{
  959|     60|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|     60|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|     60|        return true;
  962|     60|    }
  963|     60|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|     60|                           ranges::const_iterator_t<Range>,
  965|     60|                           typename detail::basic_scan_buffer<
  966|     60|                               detail::char_t<Range>>::forward_iterator>) {
  967|     60|        auto beg = r.begin();
  968|     60|        if (!beg.stores_parent()) {
  969|     60|            return true;
  970|     60|        }
  971|     60|        return beg.parent()->is_contiguous();
  972|     60|    }
  973|     60|    else {
  974|     60|        return false;
  975|     60|    }
  976|     60|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  4.21k|    {
 5277|  4.21k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.21k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.21k|        return read_impl(range, specs, value);
 5279|  4.21k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  4.21k|    {
 5295|  4.21k|        SCN_CLANG_PUSH
 5296|  4.21k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.21k|        switch (m_type) {
 5299|    310|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 310, False: 3.90k]
  ------------------
 5300|    310|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 52, False: 4.16k]
  ------------------
 5303|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     52|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.21k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    850|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 850, False: 3.36k]
  ------------------
 5310|    850|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    850|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  2.83k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2.83k, False: 1.38k]
  ------------------
 5315|  2.83k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  2.83k|                    range, specs.charset_string<SourceCharT>(),
 5317|  2.83k|                    specs.regexp_flags, value);
 5318|       |
 5319|    172|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 172, False: 4.04k]
  ------------------
 5320|    172|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    172|                    range,
 5322|    172|                    get_unescaped_regex_pattern(
 5323|    172|                        specs.charset_string<SourceCharT>()),
 5324|    172|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.21k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.21k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.21k|        }
 5331|       |
 5332|  4.21k|        SCN_CLANG_POP
 5333|  4.21k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    936|    {
 4820|    936|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    936|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    988|{
 4752|    988|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    988|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    988|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 316, False: 672]
  ------------------
 4756|    316|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    316|                                     "Invalid encoding in scanned string");
 4758|    316|    }
 4759|    672|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    672|    static_cast<    \
  |  |  929|    672|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    672|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    672|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 672]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    672|    return SCN_MOVE(result);
  ------------------
  |  |  928|    672|    static_cast<    \
  |  |  929|    672|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    672|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.60k|{
 3012|  1.60k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.60k|        dest.assign(source.view());
 3014|  1.60k|    }
 3015|  1.60k|    else {
 3016|  1.60k|        return transcode_impl(source.view(), dest);
 3017|  1.60k|    }
 3018|       |
 3019|  1.60k|    return {};
 3020|  1.60k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.80k|{
 2088|  2.80k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.80k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.80k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.80k|        auto buf = make_contiguous_buffer(range);
 2092|  2.80k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.80k|        return ranges::next(range.begin(),
 2094|  2.80k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.80k|    }
 2096|  2.80k|    else {
 2097|  2.80k|        auto it = range.begin();
 2098|       |
 2099|  2.80k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.80k|            auto seg = get_contiguous_beginning(range);
 2101|  2.80k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.80k|                seg_it != seg.end()) {
 2103|  2.80k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.80k|            }
 2105|  2.80k|            ranges::advance(it, seg.size());
 2106|  2.80k|        }
 2107|       |
 2108|  2.80k|        return read_until_code_point(
 2109|  2.80k|            ranges::subrange{it, range.end()},
 2110|  2.80k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.80k|    }
 2112|  2.80k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     52|    {
 4841|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 30, False: 22]
  ------------------
 4842|     30|            return read_string_impl(
 4843|     30|                range,
 4844|     30|                read_until_code_unit(
 4845|     30|                    range,
 4846|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     30|                        SourceCharT ch) { return ch == until; }),
 4848|     30|                value);
 4849|     30|        }
 4850|     22|        return read_string_impl(
 4851|     22|            range,
 4852|     22|            read_until_code_units(
 4853|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     22|            value);
 4855|     52|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|    442|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    442|                  obj(static_cast<decltype(args)>(args)...);
  747|    442|              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|    442|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    442|            return static_cast<T*>(s.m_cp);
  686|    442|        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    442|            return static_cast<T*>(s.m_p);
  689|    442|        }
  690|    442|        else {
  691|    442|            return reinterpret_cast<T*>(s.m_fp);
  692|    442|        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     66|{
 2007|     66|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     66|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     66|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     66|                           needle.end());
 2012|     66|    }
 2013|     66|    else {
 2014|     66|        auto first = range.begin();
 2015|     66|        while (true) {
 2016|     66|            auto it = first;
 2017|     66|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|     66|                if (needle_it == needle.end()) {
 2019|     66|                    return first;
 2020|     66|                }
 2021|     66|                if (it == range.end()) {
 2022|     66|                    return it;
 2023|     66|                }
 2024|     66|                if (*it != *needle_it) {
 2025|     66|                    break;
 2026|     66|                }
 2027|     66|            }
 2028|     66|            ++first;
 2029|     66|        }
 2030|     66|    }
 2031|     66|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    850|    {
 5048|    850|        auto it = read_source_impl(range, {specs});
 5049|    850|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 324, False: 526]
  |  |  ------------------
  ------------------
 5050|    324|            return unexpected(it.error());
 5051|    324|        }
 5052|       |
 5053|    526|        return read_string_impl(range, *it, value);
 5054|    850|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  2.55k|    {
 5153|  2.55k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  2.55k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  2.55k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.55k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  2.55k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  2.55k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 2.26k, False: 282]
  ------------------
 5163|  2.26k|            const auto cb = [&](char32_t cp) {
 5164|  2.26k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  2.26k|            };
 5166|       |
 5167|  2.26k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 192, False: 2.07k]
  ------------------
 5168|    192|                auto it = read_until_code_point(range, cb);
 5169|    192|                return check_nonempty(it, range);
 5170|    192|            }
 5171|  2.07k|            auto it = read_while_code_point(range, cb);
 5172|  2.07k|            return check_nonempty(it, range);
 5173|  2.26k|        }
 5174|       |
 5175|    282|        const auto cb = [&](SourceCharT ch) {
 5176|    282|            return cb_wrapper.on_ascii_only(ch);
 5177|    282|        };
 5178|       |
 5179|    282|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 120, False: 162]
  ------------------
 5180|    120|            auto it = read_until_code_unit(range, cb);
 5181|    120|            return check_nonempty(it, range);
 5182|    120|        }
 5183|    162|        auto it = read_while_code_unit(range, cb);
 5184|    162|        return check_nonempty(it, range);
 5185|    282|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  2.26k|{
 2061|  2.26k|    auto it = range.begin();
 2062|   268k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 268k, False: 168]
  ------------------
 2063|   268k|        const auto val =
 2064|   268k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   268k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   268k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 267k, False: 954]
  |  |  ------------------
  ------------------
 2066|   267k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   267k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   267k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.10k, False: 265k]
  ------------------
 2069|  2.10k|                return it;
 2070|  2.10k|            }
 2071|   267k|        }
 2072|   266k|        it = val.iterator;
 2073|   266k|    }
 2074|       |
 2075|    168|    return it;
 2076|  2.26k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   268k|{
 1899|   268k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   268k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   268k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   268k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   268k|    auto it = range.begin();
 1903|   268k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   268k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 954, False: 267k]
  |  |  ------------------
  ------------------
 1906|    954|        ++it;
 1907|    954|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|    954|        return {it, {}};
 1909|    954|    }
 1910|       |
 1911|   267k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 232k, False: 34.9k]
  ------------------
 1912|   232k|        ++it;
 1913|   232k|        return {it, string_type(1, *range.begin())};
 1914|   232k|    }
 1915|       |
 1916|  34.9k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  34.9k|    return {it, string_type{range.begin(), it}};
 1918|   267k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|    954|{
 1155|    954|    auto it = input.begin();
 1156|  1.51k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 1.46k, False: 48]
  ------------------
 1157|  1.46k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 906, False: 558]
  ------------------
 1158|    906|            break;
 1159|    906|        }
 1160|  1.46k|    }
 1161|    954|    return it;
 1162|    954|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  34.9k|    {
  283|  34.9k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  34.9k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  34.9k|    {
  212|  34.9k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 66, False: 34.9k]
  ------------------
  213|     66|            auto dist = bound - i;
  214|     66|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     66|            return dist;
  216|     66|        }
  217|  34.9k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  34.9k|        return n;
  219|  34.9k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|  69.9k|    {
  132|  69.9k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 69.9k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|  69.9k|        return t;
  136|  69.9k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|   268k|    {
 1890|   268k|        return !codepoint.empty();
 1891|   268k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  2.26k|    {
  754|  2.26k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|   267k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   267k|              cvref<T> obj = *get<T>(fn);
  745|   267k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   267k|                  obj(static_cast<decltype(args)>(args)...);
  747|   267k|              }
  748|   267k|              else {
  749|   267k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   267k|              }
  751|   267k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   267k|    {
  684|   267k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   267k|            return static_cast<T*>(s.m_cp);
  686|   267k|        }
  687|   267k|        else if constexpr (std::is_object_v<T>) {
  688|   267k|            return static_cast<T*>(s.m_p);
  689|   267k|        }
  690|   267k|        else {
  691|   267k|            return reinterpret_cast<T*>(s.m_fp);
  692|   267k|        }
  693|   267k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|   267k|            const auto cb = [&](char32_t cp) {
 5164|   267k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|   267k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  2.26k|        {
  667|  2.26k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  2.55k|    {
 5191|  2.55k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 972, False: 1.57k]
  ------------------
 5192|    972|            return unexpected_scan_error(
 5193|    972|                scan_error::invalid_scanned_value,
 5194|    972|                "No characters matched in [character set]");
 5195|    972|        }
 5196|       |
 5197|  1.57k|        return it;
 5198|  2.55k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  2.07k|{
 2082|  2.07k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.07k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    282|    {
  754|    282|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  3.49k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.49k|              cvref<T> obj = *get<T>(fn);
  745|  3.49k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.49k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.49k|              }
  748|  3.49k|              else {
  749|  3.49k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.49k|              }
  751|  3.49k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.49k|    {
  684|  3.49k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.49k|            return static_cast<T*>(s.m_cp);
  686|  3.49k|        }
  687|  3.49k|        else if constexpr (std::is_object_v<T>) {
  688|  3.49k|            return static_cast<T*>(s.m_p);
  689|  3.49k|        }
  690|  3.49k|        else {
  691|  3.49k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.49k|        }
  693|  3.49k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  3.49k|        const auto cb = [&](SourceCharT ch) {
 5176|  3.49k|            return cb_wrapper.on_ascii_only(ch);
 5177|  3.49k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    282|        {
  667|    282|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.04k|{
 4752|  1.04k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.04k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.04k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 112, False: 930]
  ------------------
 4756|    112|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    112|                                     "Invalid encoding in scanned string");
 4758|    112|    }
 4759|    930|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    930|    static_cast<    \
  |  |  929|    930|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    930|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 930]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    930|    return SCN_MOVE(result);
  ------------------
  |  |  928|    930|    static_cast<    \
  |  |  929|    930|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    930|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.00k|    {
 4891|  3.00k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.48k, False: 516]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.48k|    }                                                  \
  |  |  |  | 3671|  3.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    516|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    516|        return read_string_impl(range, it, value);
 4893|  3.00k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  9.01k|    {
 4913|  9.01k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  18.0k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  9.01k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  9.01k|            return unexpected_scan_error(
 4916|  9.01k|                scan_error::invalid_scanned_value,
 4917|  9.01k|                "Regex backend doesn't support wide strings as input");
 4918|  9.01k|        }
 4919|  9.01k|        else {
 4920|  9.01k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 9.01k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  9.01k|            auto input = get_as_contiguous(range);
 4928|  9.01k|            SCN_TRY(it,
  ------------------
  |  | 3672|  9.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.46k, False: 1.54k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.46k|    }                                                  \
  |  |  |  | 3671|  9.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  1.54k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  1.54k|            return ranges::next(range.begin(),
 4931|  1.54k|                                ranges::distance(input.begin(), it));
 4932|  9.01k|        }
 4933|  9.01k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  9.01k|{
  959|  9.01k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  9.01k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  9.01k|        return true;
  962|  9.01k|    }
  963|  9.01k|    else if constexpr (std::is_same_v<
  964|  9.01k|                           ranges::const_iterator_t<Range>,
  965|  9.01k|                           typename detail::basic_scan_buffer<
  966|  9.01k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  9.01k|        auto beg = r.begin();
  968|  9.01k|        if (!beg.stores_parent()) {
  969|  9.01k|            return true;
  970|  9.01k|        }
  971|  9.01k|        return beg.parent()->is_contiguous();
  972|  9.01k|    }
  973|  9.01k|    else {
  974|  9.01k|        return false;
  975|  9.01k|    }
  976|  9.01k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  9.01k|{
 1065|  9.01k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  9.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  9.01k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  9.01k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  9.01k|        return r;
 1070|  9.01k|    }
 1071|  9.01k|    else if constexpr (std::is_same_v<
 1072|  9.01k|                           ranges::const_iterator_t<Range>,
 1073|  9.01k|                           typename detail::basic_scan_buffer<
 1074|  9.01k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  9.01k|        if constexpr (ranges::common_range<Range>) {
 1076|  9.01k|            return detail::make_string_view_from_pointers(
 1077|  9.01k|                r.begin().to_contiguous_segment_iterator(),
 1078|  9.01k|                r.end().to_contiguous_segment_iterator());
 1079|  9.01k|        }
 1080|  9.01k|        else {
 1081|  9.01k|            return r.begin().contiguous_segment();
 1082|  9.01k|        }
 1083|  9.01k|    }
 1084|  9.01k|    else {
 1085|  9.01k|        SCN_EXPECT(false);
 1086|  9.01k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  9.01k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  9.01k|    }
 1090|  9.01k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  9.01k|{
  981|  9.01k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  9.01k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  9.01k|        return true;
  984|  9.01k|    }
  985|  9.01k|    else if constexpr (std::is_same_v<
  986|  9.01k|                           ranges::const_iterator_t<Range>,
  987|  9.01k|                           typename detail::basic_scan_buffer<
  988|  9.01k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  9.01k|        auto beg = r.begin();
  990|  9.01k|        if (beg.contiguous_segment().empty()) {
  991|  9.01k|            return false;
  992|  9.01k|        }
  993|  9.01k|        if constexpr (ranges::common_range<Range>) {
  994|  9.01k|            return beg.contiguous_segment().end() ==
  995|  9.01k|                   ranges::end(r).contiguous_segment().end();
  996|  9.01k|        }
  997|  9.01k|        else {
  998|  9.01k|            if (beg.stores_parent()) {
  999|  9.01k|                return beg.contiguous_segment().end() ==
 1000|  9.01k|                       beg.parent()->current_view().end();
 1001|  9.01k|            }
 1002|  9.01k|            return true;
 1003|  9.01k|        }
 1004|  9.01k|    }
 1005|  9.01k|    else {
 1006|  9.01k|        return false;
 1007|  9.01k|    }
 1008|  9.01k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  9.01k|{
 4346|  9.01k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  9.01k|                  ranges::borrowed_range<Input> &&
 4348|  9.01k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  9.01k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  9.01k|    std::basic_regex<CharT> re{};
 4352|  9.01k|    try {
 4353|  9.01k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  9.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.01k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  9.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  9.01k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  9.01k|                                     re_flags | std::regex_constants::nosubs};
 4356|  9.01k|    }
 4357|  9.01k|    catch (const std::regex_error& err) {
 4358|  4.55k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  4.55k|                                     "Invalid regex");
 4360|  4.55k|    }
 4361|       |
 4362|  4.45k|    std::match_results<const CharT*> matches{};
 4363|  4.45k|    try {
 4364|  4.45k|        bool found = std::regex_search(input.data(),
 4365|  4.45k|                                       input.data() + input.size(), matches, re,
 4366|  4.45k|                                       std::regex_constants::match_continuous);
 4367|  4.45k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 2.91k, False: 1.54k]
  |  Branch (4367:23): [True: 0, False: 1.54k]
  ------------------
 4368|  2.74k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  2.74k|                                         "Regular expression didn't match");
 4370|  2.74k|        }
 4371|  4.45k|    }
 4372|  4.45k|    catch (const std::regex_error& err) {
 4373|    162|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|    162|                                     "Regex matching failed with an error");
 4375|    162|    }
 4376|       |
 4377|  1.54k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  4.45k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5808|  5.54k|{
 5809|  5.54k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  5.54k|        return reader_impl_for_bool<CharT>{};
 5811|  5.54k|    }
 5812|  5.54k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  5.54k|        return reader_impl_for_char<CharT>{};
 5814|  5.54k|    }
 5815|  5.54k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  5.54k|        return reader_impl_for_wchar<CharT>{};
 5817|  5.54k|    }
 5818|  5.54k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  5.54k|        return reader_impl_for_code_point<CharT>{};
 5820|  5.54k|    }
 5821|  5.54k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  5.54k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  5.54k|        return reader_impl_for_string<CharT>{};
 5824|  5.54k|    }
 5825|  5.54k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  5.54k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  5.54k|        return reader_impl_for_string<CharT>{};
 5828|  5.54k|    }
 5829|  5.54k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  5.54k|                       std::is_same_v<T, wregex_matches>) {
 5831|  5.54k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  5.54k|    }
 5833|  5.54k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  5.54k|        return reader_impl_for_voidptr<CharT>{};
 5835|  5.54k|    }
 5836|  5.54k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  5.54k|        return reader_impl_for_float<CharT>{};
 5838|  5.54k|    }
 5839|  5.54k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  5.54k|                       !std::is_same_v<T, wchar_t> &&
 5841|  5.54k|                       !std::is_same_v<T, char32_t> &&
 5842|  5.54k|                       !std::is_same_v<T, bool>) {
 5843|  5.54k|        return reader_impl_for_int<CharT>{};
 5844|  5.54k|    }
 5845|  5.54k|    else {
 5846|  5.54k|        return reader_impl_for_monostate<CharT>{};
 5847|  5.54k|    }
 5848|  5.54k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    368|{
 2993|    368|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    368|        if (source.stores_allocated_string()) {
 2995|    368|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    368|        }
 2997|    368|        else {
 2998|    368|            dest.assign(source.view());
 2999|    368|        }
 3000|    368|    }
 3001|    368|    else {
 3002|    368|        return transcode_impl(source.view(), dest);
 3003|    368|    }
 3004|       |
 3005|      0|    return {};
 3006|    368|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  1.97k|{
 2968|  1.97k|    dst.clear();
 2969|  1.97k|    transcode_valid_to_string(src, dst);
 2970|  1.97k|    return {};
 2971|  1.97k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  1.97k|{
 1403|  1.97k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  1.97k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  1.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  1.97k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  1.97k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  1.97k|            std::u32string tmp;
 1410|  1.97k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  1.97k|            return transcode_to_string_impl_32to16<true>(
 1412|  1.97k|                std::u32string_view{tmp}, dest);
 1413|  1.97k|        }
 1414|  1.97k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  1.97k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  1.97k|        }
 1417|  1.97k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  1.97k|{
 1277|  1.97k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  1.97k|    auto it = src.begin();
 1280|   107k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 105k, False: 1.97k]
  ------------------
 1281|   105k|        auto res = get_next_code_point_valid(
 1282|   105k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   105k|                                                                 src.end()));
 1284|   105k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   105k|        dest.push_back(res.value);
 1286|   105k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   105k|    }
 1288|  1.97k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   105k|{
 1189|   105k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   105k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   105k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   105k|    return {input.begin() + len,
 1195|   105k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   105k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    554|    {
 5277|    554|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    554|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    554|        return read_impl(range, specs, value);
 5279|    554|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    554|    {
 5295|    554|        SCN_CLANG_PUSH
 5296|    554|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    554|        switch (m_type) {
 5299|    236|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 236, False: 318]
  ------------------
 5300|    236|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 58, False: 496]
  ------------------
 5303|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     58|                                                                   value);
 5305|       |
 5306|     32|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 32, False: 522]
  ------------------
 5307|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    208|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 208, False: 346]
  ------------------
 5310|    208|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    208|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 552]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|     18|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 18, False: 536]
  ------------------
 5320|     18|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     18|                    range,
 5322|     18|                    get_unescaped_regex_pattern(
 5323|     18|                        specs.charset_string<SourceCharT>()),
 5324|     18|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 554]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    554|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    554|        }
 5331|       |
 5332|    554|        SCN_CLANG_POP
 5333|    554|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    236|    {
 4820|    236|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    236|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    326|{
 4752|    326|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    326|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    326|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 110, False: 216]
  ------------------
 4756|    110|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    110|                                     "Invalid encoding in scanned string");
 4758|    110|    }
 4759|    216|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    216|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 216]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    216|    return SCN_MOVE(result);
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    216|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     58|    {
 4841|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 24]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     24|        return read_string_impl(
 4851|     24|            range,
 4852|     24|            read_until_code_units(
 4853|     24|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     24|            value);
 4855|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     32|    {
 4947|     32|        return read_impl(
 4948|     32|            range,
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
 4952|     32|            detail::priority_tag<1>{});
 4953|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     32|    {
 4974|     32|        return read_cb(range);
 4975|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     32|            [&](const auto& rng) {
 4950|     32|                return read_string_impl(rng, read_all(rng), value);
 4951|     32|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    208|    {
 5048|    208|        auto it = read_source_impl(range, {specs});
 5049|    208|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 196]
  |  |  ------------------
  ------------------
 5050|     12|            return unexpected(it.error());
 5051|     12|        }
 5052|       |
 5053|    196|        return read_string_impl(range, *it, value);
 5054|    208|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    196|{
 4752|    196|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    196|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    196|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 44, False: 152]
  ------------------
 4756|     44|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     44|                                     "Invalid encoding in scanned string");
 4758|     44|    }
 4759|    152|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    152|    static_cast<    \
  |  |  929|    152|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    152|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 152]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    152|    return SCN_MOVE(result);
  ------------------
  |  |  928|    152|    static_cast<    \
  |  |  929|    152|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    152|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     20|    {
 4891|     20|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     20|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  4.21k|    {
 5277|  4.21k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.21k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.21k|        return read_impl(range, specs, value);
 5279|  4.21k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  4.21k|    {
 5295|  4.21k|        SCN_CLANG_PUSH
 5296|  4.21k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.21k|        switch (m_type) {
 5299|    310|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 310, False: 3.90k]
  ------------------
 5300|    310|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 52, False: 4.16k]
  ------------------
 5303|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     52|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.21k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    850|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 850, False: 3.36k]
  ------------------
 5310|    850|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    850|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  2.83k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2.83k, False: 1.38k]
  ------------------
 5315|  2.83k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  2.83k|                    range, specs.charset_string<SourceCharT>(),
 5317|  2.83k|                    specs.regexp_flags, value);
 5318|       |
 5319|    172|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 172, False: 4.04k]
  ------------------
 5320|    172|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    172|                    range,
 5322|    172|                    get_unescaped_regex_pattern(
 5323|    172|                        specs.charset_string<SourceCharT>()),
 5324|    172|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.21k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.21k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.21k|        }
 5331|       |
 5332|  4.21k|        SCN_CLANG_POP
 5333|  4.21k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    936|    {
 4820|    936|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    936|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    988|{
 4752|    988|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    988|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    988|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 316, False: 672]
  ------------------
 4756|    316|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    316|                                     "Invalid encoding in scanned string");
 4758|    316|    }
 4759|    672|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    672|    static_cast<    \
  |  |  929|    672|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    672|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    672|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 672]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    672|    return SCN_MOVE(result);
  ------------------
  |  |  928|    672|    static_cast<    \
  |  |  929|    672|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    672|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.60k|{
 3012|  1.60k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.60k|        dest.assign(source.view());
 3014|  1.60k|    }
 3015|  1.60k|    else {
 3016|  1.60k|        return transcode_impl(source.view(), dest);
 3017|  1.60k|    }
 3018|       |
 3019|      0|    return {};
 3020|  1.60k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     52|    {
 4841|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 30, False: 22]
  ------------------
 4842|     30|            return read_string_impl(
 4843|     30|                range,
 4844|     30|                read_until_code_unit(
 4845|     30|                    range,
 4846|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     30|                        SourceCharT ch) { return ch == until; }),
 4848|     30|                value);
 4849|     30|        }
 4850|     22|        return read_string_impl(
 4851|     22|            range,
 4852|     22|            read_until_code_units(
 4853|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     22|            value);
 4855|     52|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|    442|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    442|                  obj(static_cast<decltype(args)>(args)...);
  747|    442|              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|    442|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    442|            return static_cast<T*>(s.m_cp);
  686|    442|        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    442|            return static_cast<T*>(s.m_p);
  689|    442|        }
  690|    442|        else {
  691|    442|            return reinterpret_cast<T*>(s.m_fp);
  692|    442|        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    850|    {
 5048|    850|        auto it = read_source_impl(range, {specs});
 5049|    850|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 324, False: 526]
  |  |  ------------------
  ------------------
 5050|    324|            return unexpected(it.error());
 5051|    324|        }
 5052|       |
 5053|    526|        return read_string_impl(range, *it, value);
 5054|    850|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.04k|{
 4752|  1.04k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.04k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.04k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 112, False: 930]
  ------------------
 4756|    112|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    112|                                     "Invalid encoding in scanned string");
 4758|    112|    }
 4759|    930|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    930|    static_cast<    \
  |  |  929|    930|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    930|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 930]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    930|    return SCN_MOVE(result);
  ------------------
  |  |  928|    930|    static_cast<    \
  |  |  929|    930|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    930|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.00k|    {
 4891|  3.00k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.48k, False: 516]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.48k|    }                                                  \
  |  |  |  | 3671|  3.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    516|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    516|        return read_string_impl(range, it, value);
 4893|  3.00k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|  5.54k|{
 5809|  5.54k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  5.54k|        return reader_impl_for_bool<CharT>{};
 5811|  5.54k|    }
 5812|  5.54k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  5.54k|        return reader_impl_for_char<CharT>{};
 5814|  5.54k|    }
 5815|  5.54k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  5.54k|        return reader_impl_for_wchar<CharT>{};
 5817|  5.54k|    }
 5818|  5.54k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  5.54k|        return reader_impl_for_code_point<CharT>{};
 5820|  5.54k|    }
 5821|  5.54k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  5.54k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  5.54k|        return reader_impl_for_string<CharT>{};
 5824|  5.54k|    }
 5825|  5.54k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  5.54k|                       std::is_same_v<T, std::wstring>) {
 5827|  5.54k|        return reader_impl_for_string<CharT>{};
 5828|  5.54k|    }
 5829|  5.54k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  5.54k|                       std::is_same_v<T, wregex_matches>) {
 5831|  5.54k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  5.54k|    }
 5833|  5.54k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  5.54k|        return reader_impl_for_voidptr<CharT>{};
 5835|  5.54k|    }
 5836|  5.54k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  5.54k|        return reader_impl_for_float<CharT>{};
 5838|  5.54k|    }
 5839|  5.54k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  5.54k|                       !std::is_same_v<T, wchar_t> &&
 5841|  5.54k|                       !std::is_same_v<T, char32_t> &&
 5842|  5.54k|                       !std::is_same_v<T, bool>) {
 5843|  5.54k|        return reader_impl_for_int<CharT>{};
 5844|  5.54k|    }
 5845|  5.54k|    else {
 5846|  5.54k|        return reader_impl_for_monostate<CharT>{};
 5847|  5.54k|    }
 5848|  5.54k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    554|    {
 5277|    554|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    554|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    554|        return read_impl(range, specs, value);
 5279|    554|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    554|    {
 5295|    554|        SCN_CLANG_PUSH
 5296|    554|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    554|        switch (m_type) {
 5299|    236|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 236, False: 318]
  ------------------
 5300|    236|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 58, False: 496]
  ------------------
 5303|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     58|                                                                   value);
 5305|       |
 5306|     32|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 32, False: 522]
  ------------------
 5307|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    208|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 208, False: 346]
  ------------------
 5310|    208|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    208|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 552]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|     18|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 18, False: 536]
  ------------------
 5320|     18|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     18|                    range,
 5322|     18|                    get_unescaped_regex_pattern(
 5323|     18|                        specs.charset_string<SourceCharT>()),
 5324|     18|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 554]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    554|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    554|        }
 5331|       |
 5332|    554|        SCN_CLANG_POP
 5333|    554|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    236|    {
 4827|    236|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    236|                                     value);
 4829|    236|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    326|{
 4773|    326|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    326|    auto src = [&]() {
 4776|    326|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    326|            return make_contiguous_buffer(
 4778|    326|                ranges::subrange{range.begin().base(), result.base()});
 4779|    326|        }
 4780|    326|        else {
 4781|    326|            return make_contiguous_buffer(
 4782|    326|                ranges::subrange{range.begin(), result});
 4783|    326|        }
 4784|    326|    }();
 4785|    326|    using src_type = decltype(src);
 4786|       |
 4787|    326|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    326|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    326|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    326|                                     "Cannot read a string_view from "
 4796|    326|                                     "this source range (would require "
 4797|    326|                                     "transcoding)");
 4798|    326|    }
 4799|    326|    else {
 4800|    326|        const auto view = src.view();
 4801|    326|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    326|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 110, False: 216]
  ------------------
 4804|    110|            return unexpected_scan_error(
 4805|    110|                scan_error::invalid_scanned_value,
 4806|    110|                "Invalid encoding in scanned string_view");
 4807|    110|        }
 4808|       |
 4809|    216|        return SCN_MOVE(result);
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    326|    }
 4811|    326|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    326|    auto src = [&]() {
 4776|    326|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    326|            return make_contiguous_buffer(
 4778|    326|                ranges::subrange{range.begin().base(), result.base()});
 4779|    326|        }
 4780|    326|        else {
 4781|    326|            return make_contiguous_buffer(
 4782|    326|                ranges::subrange{range.begin(), result});
 4783|    326|        }
 4784|    326|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     58|    {
 4863|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 24]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|     24|        return read_string_view_impl(
 4873|     24|            range,
 4874|     24|            read_until_code_units(
 4875|     24|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     24|            value);
 4877|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4869|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     32|    {
 4959|     32|        return read_impl(
 4960|     32|            range,
 4961|     32|            [&](const auto& rng) {
 4962|     32|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     32|            },
 4964|     32|            detail::priority_tag<1>{});
 4965|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     32|    {
 4974|     32|        return read_cb(range);
 4975|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     32|            [&](const auto& rng) {
 4962|     32|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     32|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5061|    208|    {
 5062|    208|        auto it = read_source_impl(range, {specs});
 5063|    208|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 196]
  |  |  ------------------
  ------------------
 5064|     12|            return unexpected(it.error());
 5065|     12|        }
 5066|       |
 5067|    196|        return read_string_view_impl(range, *it, value);
 5068|    208|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4772|    196|{
 4773|    196|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    196|    auto src = [&]() {
 4776|    196|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    196|            return make_contiguous_buffer(
 4778|    196|                ranges::subrange{range.begin().base(), result.base()});
 4779|    196|        }
 4780|    196|        else {
 4781|    196|            return make_contiguous_buffer(
 4782|    196|                ranges::subrange{range.begin(), result});
 4783|    196|        }
 4784|    196|    }();
 4785|    196|    using src_type = decltype(src);
 4786|       |
 4787|    196|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    196|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    196|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    196|                                     "Cannot read a string_view from "
 4796|    196|                                     "this source range (would require "
 4797|    196|                                     "transcoding)");
 4798|    196|    }
 4799|    196|    else {
 4800|    196|        const auto view = src.view();
 4801|    196|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    196|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 44, False: 152]
  ------------------
 4804|     44|            return unexpected_scan_error(
 4805|     44|                scan_error::invalid_scanned_value,
 4806|     44|                "Invalid encoding in scanned string_view");
 4807|     44|        }
 4808|       |
 4809|    152|        return SCN_MOVE(result);
  ------------------
  |  |  928|    152|    static_cast<    \
  |  |  929|    152|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    196|    }
 4811|    196|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4775|    196|    auto src = [&]() {
 4776|    196|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    196|            return make_contiguous_buffer(
 4778|    196|                ranges::subrange{range.begin().base(), result.base()});
 4779|    196|        }
 4780|    196|        else {
 4781|    196|            return make_contiguous_buffer(
 4782|    196|                ranges::subrange{range.begin(), result});
 4783|    196|        }
 4784|    196|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|     20|    {
 4902|     20|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|     20|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  4.21k|    {
 5277|  4.21k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.21k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.21k|        return read_impl(range, specs, value);
 5279|  4.21k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  4.21k|    {
 5295|  4.21k|        SCN_CLANG_PUSH
 5296|  4.21k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.21k|        switch (m_type) {
 5299|    310|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 310, False: 3.90k]
  ------------------
 5300|    310|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 52, False: 4.16k]
  ------------------
 5303|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     52|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.21k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    850|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 850, False: 3.36k]
  ------------------
 5310|    850|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    850|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  2.83k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2.83k, False: 1.38k]
  ------------------
 5315|  2.83k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  2.83k|                    range, specs.charset_string<SourceCharT>(),
 5317|  2.83k|                    specs.regexp_flags, value);
 5318|       |
 5319|    172|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 172, False: 4.04k]
  ------------------
 5320|    172|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    172|                    range,
 5322|    172|                    get_unescaped_regex_pattern(
 5323|    172|                        specs.charset_string<SourceCharT>()),
 5324|    172|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.21k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.21k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.21k|        }
 5331|       |
 5332|  4.21k|        SCN_CLANG_POP
 5333|  4.21k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    936|    {
 4827|    936|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    936|                                     value);
 4829|    936|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|    988|{
 4773|    988|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    988|    auto src = [&]() {
 4776|    988|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    988|            return make_contiguous_buffer(
 4778|    988|                ranges::subrange{range.begin().base(), result.base()});
 4779|    988|        }
 4780|    988|        else {
 4781|    988|            return make_contiguous_buffer(
 4782|    988|                ranges::subrange{range.begin(), result});
 4783|    988|        }
 4784|    988|    }();
 4785|    988|    using src_type = decltype(src);
 4786|       |
 4787|    988|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    988|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    988|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    988|                                     "Cannot read a string_view from "
 4796|    988|                                     "this source range (would require "
 4797|    988|                                     "transcoding)");
 4798|    988|    }
 4799|    988|    else {
 4800|    988|        const auto view = src.view();
 4801|    988|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    988|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 316, False: 672]
  ------------------
 4804|    316|            return unexpected_scan_error(
 4805|    316|                scan_error::invalid_scanned_value,
 4806|    316|                "Invalid encoding in scanned string_view");
 4807|    316|        }
 4808|       |
 4809|    672|        return SCN_MOVE(result);
  ------------------
  |  |  928|    672|    static_cast<    \
  |  |  929|    672|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    988|    }
 4811|    988|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|    988|    auto src = [&]() {
 4776|    988|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    988|            return make_contiguous_buffer(
 4778|    988|                ranges::subrange{range.begin().base(), result.base()});
 4779|    988|        }
 4780|    988|        else {
 4781|    988|            return make_contiguous_buffer(
 4782|    988|                ranges::subrange{range.begin(), result});
 4783|    988|        }
 4784|    988|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     52|    {
 4863|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 30, False: 22]
  ------------------
 4864|     30|            return read_string_view_impl(
 4865|     30|                range,
 4866|     30|                read_until_code_unit(
 4867|     30|                    range,
 4868|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     30|                        SourceCharT ch) { return ch == until; }),
 4870|     30|                value);
 4871|     30|        }
 4872|     22|        return read_string_view_impl(
 4873|     22|            range,
 4874|     22|            read_until_code_units(
 4875|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     22|            value);
 4877|     52|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES14_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|    442|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    442|                  obj(static_cast<decltype(args)>(args)...);
  747|    442|              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|    442|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    442|            return static_cast<T*>(s.m_cp);
  686|    442|        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    442|            return static_cast<T*>(s.m_p);
  689|    442|        }
  690|    442|        else {
  691|    442|            return reinterpret_cast<T*>(s.m_fp);
  692|    442|        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4869|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    850|    {
 5062|    850|        auto it = read_source_impl(range, {specs});
 5063|    850|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 324, False: 526]
  |  |  ------------------
  ------------------
 5064|    324|            return unexpected(it.error());
 5065|    324|        }
 5066|       |
 5067|    526|        return read_string_view_impl(range, *it, value);
 5068|    850|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  1.04k|{
 4773|  1.04k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.04k|    auto src = [&]() {
 4776|  1.04k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.04k|            return make_contiguous_buffer(
 4778|  1.04k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.04k|        }
 4780|  1.04k|        else {
 4781|  1.04k|            return make_contiguous_buffer(
 4782|  1.04k|                ranges::subrange{range.begin(), result});
 4783|  1.04k|        }
 4784|  1.04k|    }();
 4785|  1.04k|    using src_type = decltype(src);
 4786|       |
 4787|  1.04k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.04k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.04k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.04k|                                     "Cannot read a string_view from "
 4796|  1.04k|                                     "this source range (would require "
 4797|  1.04k|                                     "transcoding)");
 4798|  1.04k|    }
 4799|  1.04k|    else {
 4800|  1.04k|        const auto view = src.view();
 4801|  1.04k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.04k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 112, False: 930]
  ------------------
 4804|    112|            return unexpected_scan_error(
 4805|    112|                scan_error::invalid_scanned_value,
 4806|    112|                "Invalid encoding in scanned string_view");
 4807|    112|        }
 4808|       |
 4809|    930|        return SCN_MOVE(result);
  ------------------
  |  |  928|    930|    static_cast<    \
  |  |  929|    930|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.04k|    }
 4811|  1.04k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  1.04k|    auto src = [&]() {
 4776|  1.04k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.04k|            return make_contiguous_buffer(
 4778|  1.04k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.04k|        }
 4780|  1.04k|        else {
 4781|  1.04k|            return make_contiguous_buffer(
 4782|  1.04k|                ranges::subrange{range.begin(), result});
 4783|  1.04k|        }
 4784|  1.04k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  3.00k|    {
 4902|  3.00k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  3.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.48k, False: 516]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.48k|    }                                                  \
  |  |  |  | 3671|  3.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    516|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    516|        return read_string_view_impl(range, it, value);
 4904|  3.00k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5623|  2.49k|    {
 5624|  2.49k|        reader_error_handler eh{};
 5625|  2.49k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  2.49k|            detail::check_code_point_type_specs(specs, eh);
 5627|  2.49k|        }
 5628|  2.49k|        else {
 5629|  2.49k|            detail::check_char_type_specs(specs, eh);
 5630|  2.49k|        }
 5631|  2.49k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.05k, False: 436]
  |  |  ------------------
  ------------------
 5632|  2.05k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  2.05k|        }
 5634|    436|        return {};
 5635|  2.49k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  8.37k|    {
  763|  8.37k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  8.37k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.23k|    {
  754|  1.23k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  2.79k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.79k|              cvref<T> obj = *get<T>(fn);
  745|  2.79k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.79k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.79k|              }
  748|  2.79k|              else {
  749|  2.79k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.79k|              }
  751|  2.79k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.79k|    {
  684|  2.79k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.79k|            return static_cast<T*>(s.m_cp);
  686|  2.79k|        }
  687|  2.79k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.79k|            return static_cast<T*>(s.m_p);
  689|  2.79k|        }
  690|  2.79k|        else {
  691|  2.79k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.79k|        }
  693|  2.79k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  1.23k|        {
  662|  1.23k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5618|  1.32k|    {
 5619|  1.32k|        return false;
 5620|  1.32k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|     70|    {
 1780|     70|        auto stdloc = loc.get<std::locale>();
 1781|     70|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     70|        grouping = numpunct.grouping();
 1783|     70|        thousands_sep =
 1784|     70|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 70]
  ------------------
 1785|     70|        decimal_point = numpunct.decimal_point();
 1786|     70|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|     86|{
 1717|     86|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 86, False: 0]
  ------------------
 1718|     86|        return std::use_facet<Facet>(stdloc);
 1719|     86|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     86|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  3.47k|{
 2349|  3.47k|    size_t count{0};
 2350|  3.47k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  3.47k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  3.47k|    });
 2353|  3.47k|    return count;
 2354|  3.47k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  3.47k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  3.47k|    auto it = input.begin();
 1448|  10.3k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 6.84k, False: 3.47k]
  ------------------
 1449|  6.84k|        auto res = get_next_code_point(
 1450|  6.84k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  6.84k|        cb(res.value);
 1452|  6.84k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  6.84k|    }
 1454|  3.47k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   450k|{
 1169|   450k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   450k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   450k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   450k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   450k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 450k]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   450k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 450k]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   450k|    return {input.begin() + len,
 1181|   450k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   450k|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  3.47k|    {
  754|  3.47k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  6.84k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.84k|              cvref<T> obj = *get<T>(fn);
  745|  6.84k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.84k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.84k|              }
  748|  6.84k|              else {
  749|  6.84k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.84k|              }
  751|  6.84k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  6.84k|    {
  684|  6.84k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.84k|            return static_cast<T*>(s.m_cp);
  686|  6.84k|        }
  687|  6.84k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.84k|            return static_cast<T*>(s.m_p);
  689|  6.84k|        }
  690|  6.84k|        else {
  691|  6.84k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.84k|        }
  693|  6.84k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  6.84k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  6.84k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  6.84k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  3.47k|        {
  662|  3.47k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  2.10k|    {
 1582|  2.10k|        return m_view;
 1583|  2.10k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  2.21k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2420|    350|    {
 2421|    350|        return m_multibyte_left;
 2422|    350|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2425|  23.0k|    {
 2426|  23.0k|        return *m_current;
 2427|  23.0k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2434|  16.7k|    {
 2435|  16.7k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  16.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  16.7k|        _increment_current();
 2437|  16.7k|        return *this;
 2438|  16.7k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2667|  16.7k|    {
 2668|  16.7k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 16.7k, False: 0]
  ------------------
 2669|  16.7k|            auto cplen = _get_cp_length_at_current();
 2670|  16.7k|            m_multibyte_left = cplen - 1;
 2671|  16.7k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  16.7k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  16.7k|        ++m_current;
 2678|  16.7k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2638|  16.7k|    {
 2639|  16.7k|        return static_cast<difference_type>(
 2640|  16.7k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  16.7k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2644|  16.7k|    {
 2645|  16.7k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.7k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  16.7k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 16.7k, False: 0]
  ------------------
 2650|  16.7k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  16.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  16.7k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  16.7k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  16.7k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  5.08k|{
 1857|  5.08k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  5.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  5.08k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  5.08k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  5.08k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 124, False: 4.96k]
  ------------------
 1862|    124|            return unexpected(eof_error::eof);
 1863|    124|        }
 1864|       |
 1865|  4.96k|        return ranges::next(range.begin(), count);
 1866|  5.08k|    }
 1867|  5.08k|    else {
 1868|  5.08k|        auto it = range.begin();
 1869|  5.08k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  5.08k|            return ranges::next(it, count);
 1871|  5.08k|        }
 1872|       |
 1873|  5.08k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  5.08k|            if (it == range.end()) {
 1875|  5.08k|                return unexpected(eof_error::eof);
 1876|  5.08k|            }
 1877|  5.08k|        }
 1878|       |
 1879|  5.08k|        return it;
 1880|  5.08k|    }
 1881|  5.08k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  5.87k|    {
 2531|  5.87k|        return !(a == b);
 2532|  5.87k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  6.45k|    {
 2523|  6.45k|        return a.m_current == b.m_current;
 2524|  6.45k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2429|  1.50k|    {
 2430|  1.50k|        return *m_current;
 2431|  1.50k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1889|  6.10k|    {
 1890|  6.10k|        return !codepoint.empty();
 1891|  6.10k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1682|    346|{
 1683|    346|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|    346|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|    346|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|    346|        return string_view_wrapper{SCN_FWD(range)};
 1687|    346|    }
 1688|    346|    else {
 1689|    346|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|    346|    }
 1691|    346|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EELPv0EEEOT_:
 1536|    346|    {
 1537|    346|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|    346|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1620|    346|    {
 1621|    346|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    346|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    346|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    346|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    346|            m_storage.reset();
 1627|    346|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    346|        }
 1629|    346|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|    346|                                          std::basic_string<CharT>>) {
 1631|    346|            m_storage.emplace(SCN_FWD(range));
 1632|    346|            m_view = string_view_type{*m_storage};
 1633|    346|        }
 1634|    346|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|    346|                                          typename detail::basic_scan_buffer<
 1636|    346|                                              value_t>::forward_iterator> &&
 1637|    346|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|    346|            auto beg_seg = range.begin().contiguous_segment();
 1639|    346|            auto end_seg = range.end().contiguous_segment();
 1640|    346|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    346|                             detail::to_address(end_seg.end()))) {
 1642|    346|                auto& str = m_storage.emplace();
 1643|    346|                str.reserve(range.end().position() - range.begin().position());
 1644|    346|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    346|                m_view = string_view_type{str};
 1646|    346|                return;
 1647|    346|            }
 1648|       |
 1649|    346|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    346|                                                            end_seg.data());
 1651|    346|            m_storage.reset();
 1652|    346|        }
 1653|    346|        else {
 1654|    346|            auto& str = m_storage.emplace();
 1655|    346|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|    346|                str.reserve(range.size());
 1657|    346|            }
 1658|    346|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|    346|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    346|                          std::back_inserter(str));
 1661|    346|            }
 1662|    346|            else {
 1663|    346|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    346|                     ++it) {
 1665|    346|                    str.push_back(*it);
 1666|    346|                }
 1667|    346|            }
 1668|    346|            m_view = string_view_type{str};
 1669|    346|        }
 1670|    346|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2381|  7.07k|    {
 2382|  7.07k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2412|  24.1k|    {
 2413|  24.1k|        return m_current;
 2414|  24.1k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  2.23k|{
 2117|  2.23k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.23k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.23k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.23k|        auto buf = make_contiguous_buffer(range);
 2121|  2.23k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.23k|        return ranges::next(range.begin(),
 2123|  2.23k|                            ranges::distance(buf.view().begin(), it));
 2124|  2.23k|    }
 2125|  2.23k|    else {
 2126|  2.23k|        auto it = range.begin();
 2127|       |
 2128|  2.23k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.23k|            auto seg = get_contiguous_beginning(range);
 2130|  2.23k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.23k|                seg_it != seg.end()) {
 2132|  2.23k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  2.23k|            }
 2134|  2.23k|            ranges::advance(it, seg.size());
 2135|  2.23k|        }
 2136|       |
 2137|  2.23k|        return read_while_code_point(
 2138|  2.23k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.23k|    }
 2140|  2.23k|}
_ZN3scn2v34impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2081|  2.23k|{
 2082|  2.23k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.23k|}
_ZN3scn2v34impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2060|  2.23k|{
 2061|  2.23k|    auto it = range.begin();
 2062|  3.26k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 2.41k, False: 852]
  ------------------
 2063|  2.41k|        const auto val =
 2064|  2.41k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  2.41k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.41k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.41k, False: 0]
  |  |  ------------------
  ------------------
 2066|  2.41k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  2.41k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  2.41k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.38k, False: 1.03k]
  ------------------
 2069|  1.38k|                return it;
 2070|  1.38k|            }
 2071|  2.41k|        }
 2072|  1.03k|        it = val.iterator;
 2073|  1.03k|    }
 2074|       |
 2075|    852|    return it;
 2076|  2.23k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  48.3k|{
 1899|  48.3k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  48.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  48.3k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  48.3k|    auto it = range.begin();
 1903|  48.3k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  48.3k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  48.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 48.3k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  48.3k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 48.3k, False: 0]
  ------------------
 1912|  48.3k|        ++it;
 1913|  48.3k|        return {it, string_type(1, *range.begin())};
 1914|  48.3k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  48.3k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  67.3k|{
  944|  67.3k|    return is_range_eof(r.begin(), r.end());
  945|  67.3k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   511k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   511k|    {
  937|   511k|        return begin == end;
  938|   511k|    }
  939|   511k|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    820|    {
  190|    820|        i = std::move(bound);
  191|    820|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  48.3k|    {
 1890|  48.3k|        return !codepoint.empty();
 1891|  48.3k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  2.23k|    {
  754|  2.23k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  2.41k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.41k|              cvref<T> obj = *get<T>(fn);
  745|  2.41k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.41k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.41k|              }
  748|  2.41k|              else {
  749|  2.41k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.41k|              }
  751|  2.41k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  2.41k|    {
  684|  2.41k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.41k|            return static_cast<T*>(s.m_cp);
  686|  2.41k|        }
  687|  2.41k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.41k|            return static_cast<T*>(s.m_p);
  689|  2.41k|        }
  690|  2.41k|        else {
  691|  2.41k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.41k|        }
  693|  2.41k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2138|  2.41k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  2.23k|        {
  662|  2.23k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  19.0k|{
  950|  19.0k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.0k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  19.0k|    return eof_error::good;
  954|  19.0k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  2.68k|    {
 2832|  2.68k|        return take_width_view{r, n};
 2833|  2.68k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2800|  2.68k|    {
 2801|  2.68k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2713|  2.68k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5698|    104|    {
 5699|    104|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 84, False: 20]
  ------------------
 5700|    104|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 20]
  ------------------
 5701|     84|            return read_default(range, value, loc);
 5702|     84|        }
 5703|       |
 5704|     20|        reader_impl_for_int<CharT> reader{};
 5705|     20|        using integer_type =
 5706|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     20|        integer_type tmp_value{};
 5708|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     20|        value = static_cast<integer_type>(value);
 5710|     20|        return ret;
 5711|    104|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5682|     84|    {
 5683|     84|        SCN_UNUSED(loc);
  ------------------
  |  |  909|     84|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|     84|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|     84|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|     84|        }
 5687|     84|        else {
 5688|     84|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|     84|        }
 5690|     84|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5563|     84|    {
 5564|     84|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|     84|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     84|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     84|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 84]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     84|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     84|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|     84|        ch = *range.begin();
 5566|     84|        return it;
 5567|     84|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|    766|{
 1846|    766|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    766|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 766]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|    766|    return ranges::next(range.begin());
 1851|    766|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|    766|{
  950|    766|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|    766|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 766]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|    766|    return eof_error::good;
  954|    766|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|    766|{
  944|    766|    return is_range_eof(r.begin(), r.end());
  945|    766|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  6.90k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  6.90k|    {
  937|  6.90k|        return begin == end;
  938|  6.90k|    }
  939|  6.90k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  22.2k|        {
 2770|  22.2k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 350, False: 21.8k]
  |  Branch (2770:39): [True: 350, False: 0]
  ------------------
 2771|  22.2k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 210, False: 21.6k]
  ------------------
 2772|  22.2k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2815|  9.86k|    {
 2816|  9.86k|        return sentinel<true>{m_base.get().end()};
 2817|  9.86k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2716|  24.0k|    {
 2717|  24.0k|        return view;
 2718|  24.0k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2750|  9.86k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|    800|    {
  296|    800|        ++x;
  297|    800|        return x;
  298|    800|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2809|  7.07k|    {
 2810|  7.07k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  7.07k|                                      m_count};
 2812|  7.07k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    138|    {
 3539|    138|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    138|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    138|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    138|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    138|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    138|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    138|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    138|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 138]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    138|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 138]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    138|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    138|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 124, False: 14]
  |  |  ------------------
  ------------------
 3565|    124|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    124|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    124|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    124|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    124|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 124, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    124|    }                                                  \
  |  |  |  | 3671|    124|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     14|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     14|            localized_number_formatting_options<CharT>{loc};
 3586|     14|#endif
 3587|       |
 3588|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    342|{
 3326|    342|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    342|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    342|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    342|        parse_integer_base_prefix(
 3331|    342|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    342|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 342]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    342|    else {
 3343|    342|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 342]
  |  Branch (3343:13): [True: 342, False: 0]
  ------------------
 3344|    342|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 342, False: 0]
  ------------------
 3345|    342|            digits_begin_it = base_prefix_begin_it;
 3346|    342|        }
 3347|    342|    }
 3348|       |
 3349|    342|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 342, False: 0]
  ------------------
 3350|    342|        sign = sign_type::plus_sign;
 3351|    342|    }
 3352|    342|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    342|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    342|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|    446|{
 3141|    446|    auto r = read_one_of_code_unit(range, "+-");
 3142|    446|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 446, False: 0]
  ------------------
 3143|    446|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 446, False: 0]
  ------------------
 3144|    446|            return std::pair{range.begin(), sign_type::default_sign};
 3145|    446|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|    446|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|    446|{
 2272|    446|    auto it = read_code_unit(range);
 2273|    446|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 446]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|    892|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 892, False: 446]
  ------------------
 2278|    892|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 892]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|    892|    }
 2282|       |
 2283|    446|    return unexpected(parse_error::error);
 2284|    446|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    342|{
 3293|    342|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 336]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     12|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 12, False: 330]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     12|            bool zero_parsed = false;
 3302|     12|            auto it = apply_opt(
 3303|     12|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     12|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|     96|        case 16:
  ------------------
  |  Branch (3307:9): [True: 96, False: 246]
  ------------------
 3308|       |            // allow 0x/0X
 3309|     96|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|     96|                    false};
 3311|       |
 3312|     22|        case 0:
  ------------------
  |  Branch (3312:9): [True: 22, False: 320]
  ------------------
 3313|       |            // detect base
 3314|     22|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    206|        default:
  ------------------
  |  Branch (3316:9): [True: 206, False: 136]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    206|            return {range.begin(), base, false};
 3319|    342|    }
 3320|    342|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    114|{
 2291|    114|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 114, False: 0]
  ------------------
 2292|    114|        return range.begin();
 2293|    114|    }
 2294|      0|    return *result;
 2295|    114|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     28|{
 3244|     28|    return read_matching_string_classic_nocase(range, "0b");
 3245|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|    484|{
 2231|    484|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|    484|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|    484|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|    484|        if (range.size() < str.size()) {
 2236|    484|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|    484|        }
 2238|    484|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|    484|            return unexpected(parse_error::error);
 2240|    484|        }
 2241|    484|        return ranges::next(range.begin(), str.size());
 2242|    484|    }
 2243|    484|    else {
 2244|    484|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    484|            if (ch < 'A' || ch > 'Z') {
 2246|    484|                return ch;
 2247|    484|            }
 2248|    484|            return static_cast<char_type>(ch +
 2249|    484|                                          static_cast<char_type>('a' - 'A'));
 2250|    484|        };
 2251|       |
 2252|    484|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    484|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    484|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    484|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    484|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 82, False: 402]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     82|    }                                                  \
  |  |  |  | 3671|    484|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    402|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    402|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    402|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 402, False: 0]
  |  |  ------------------
  ------------------
 2257|    402|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    402|                    return ascii_tolower(a) ==
 2259|    402|                           static_cast<detail::char_t<Range>>(b);
 2260|    402|                }))) {
 2261|    402|            return unexpected(parse_error::error);
 2262|    402|        }
 2263|       |
 2264|      0|        return it;
 2265|    402|    }
 2266|    484|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|    484|{
 1857|    484|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    484|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    484|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    484|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    484|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    484|        if (sz < count) {
 1862|    484|            return unexpected(eof_error::eof);
 1863|    484|        }
 1864|       |
 1865|    484|        return ranges::next(range.begin(), count);
 1866|    484|    }
 1867|    484|    else {
 1868|    484|        auto it = range.begin();
 1869|    484|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 484]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  1.56k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.16k, False: 402]
  ------------------
 1874|  1.16k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 82, False: 1.07k]
  ------------------
 1875|     82|                return unexpected(eof_error::eof);
 1876|     82|            }
 1877|  1.16k|        }
 1878|       |
 1879|    402|        return it;
 1880|    484|    }
 1881|    484|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|    484|{
 1095|    484|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    484|        return r.size();
 1097|    484|    }
 1098|    484|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    484|                           ranges::const_iterator_t<Range>,
 1100|    484|                           typename detail::basic_scan_buffer<
 1101|    484|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    484|        if constexpr (ranges::common_range<Range>) {
 1103|    484|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    484|        }
 1105|    484|        else {
 1106|    484|            if (r.begin().stores_parent()) {
 1107|    484|                return static_cast<size_t>(
 1108|    484|                    r.begin().parent()->chars_available() -
 1109|    484|                    r.begin().position());
 1110|    484|            }
 1111|    484|            return r.begin().contiguous_segment().size();
 1112|    484|        }
 1113|    484|    }
 1114|    484|    else {
 1115|    484|        return 0;
 1116|    484|    }
 1117|    484|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2244|    402|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    402|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 32, False: 370]
  |  Branch (2245:29): [True: 370, False: 0]
  ------------------
 2246|    402|                return ch;
 2247|    402|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    402|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     34|{
 2146|     34|    auto it = read_code_unit(range);
 2147|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2152|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     34|        return unexpected(parse_error::error);
 2154|     34|    }
 2155|       |
 2156|      0|    return *it;
 2157|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     34|{
 1846|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     34|    return ranges::next(range.begin());
 1851|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  6.13k|{
  944|  6.13k|    return is_range_eof(r.begin(), r.end());
  945|  6.13k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    118|{
 3251|    118|    return read_matching_string_classic_nocase(range, "0x");
 3252|    118|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     22|{
 3274|     22|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 22]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     22|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 22]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     22|    {
 3281|     22|        bool zero_parsed{false};
 3282|     22|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 22]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     22|    }
 3286|     22|    return {range.begin(), 10, false};
 3287|     22|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    314|{
 3360|    314|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    314|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    314|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    314|            return unexpected_scan_error(
 3365|    314|                scan_error::invalid_scanned_value,
 3366|    314|                "Failed to parse integer: No digits found");
 3367|    314|        }
 3368|    314|        return range.end();
 3369|    314|    }
 3370|    314|    else {
 3371|    314|        return read_while1_code_unit(range,
 3372|    314|                                     [&](char_type ch) noexcept {
 3373|    314|                                         return char_to_int(ch) < base;
 3374|    314|                                     })
 3375|    314|            .transform_error(map_parse_error_to_scan_error(
 3376|    314|                scan_error::invalid_scanned_value,
 3377|    314|                "Failed to parse integer: No digits found"));
 3378|    314|    }
 3379|    314|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|    418|{
 1996|    418|    auto it = read_while_code_unit(range, pred);
 1997|    418|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 418, False: 0]
  ------------------
 1998|    418|        return unexpected(parse_error::error);
 1999|    418|    }
 2000|      0|    return it;
 2001|    418|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|    418|{
 1976|    418|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    418|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|    418|{
 1957|    418|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    418|        return std::find_if(range.begin(), range.end(), pred);
 1959|    418|    }
 1960|    418|    else {
 1961|    418|        auto first = range.begin();
 1962|    418|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 418, False: 0]
  ------------------
 1963|    418|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 418, False: 0]
  ------------------
 1964|    418|                return first;
 1965|    418|            }
 1966|    418|        }
 1967|      0|        return first;
 1968|    418|    }
 1969|    418|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  10.5k|        {
 2781|  10.5k|            return !(y == x);
 2782|  10.5k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_:
  753|    314|    {
  754|    314|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|    314|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    314|              cvref<T> obj = *get<T>(fn);
  745|    314|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    314|                  obj(static_cast<decltype(args)>(args)...);
  747|    314|              }
  748|    314|              else {
  749|    314|                  return obj(static_cast<decltype(args)>(args)...);
  750|    314|              }
  751|    314|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    314|    {
  684|    314|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    314|            return static_cast<T*>(s.m_cp);
  686|    314|        }
  687|    314|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    314|            return static_cast<T*>(s.m_p);
  689|    314|        }
  690|    314|        else {
  691|    314|            return reinterpret_cast<T*>(s.m_fp);
  692|    314|        }
  693|    314|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3372|    314|                                     [&](char_type ch) noexcept {
 3373|    314|                                         return char_to_int(ch) < base;
 3374|    314|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_LPv0EEEPSP_:
  661|    314|        {
  662|    314|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     28|{
 3390|     28|    std::basic_string<CharT> output;
 3391|     28|    std::string thsep_indices;
 3392|     28|    auto it = range.begin();
 3393|     28|    bool digit_matched = false;
 3394|     28|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 28, False: 0]
  ------------------
 3395|     28|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 28]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     28|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 28, False: 0]
  ------------------
 3400|     28|            break;
 3401|     28|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     28|    }
 3407|     28|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 3408|     28|        return unexpected_scan_error(
 3409|     28|            scan_error::invalid_scanned_value,
 3410|     28|            "Failed to parse integer: No digits found");
 3411|     28|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     28|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2416|  22.8k|    {
 2417|  22.8k|        return m_count;
 2418|  22.8k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5698|    330|    {
 5699|    330|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 310, False: 20]
  ------------------
 5700|    330|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 20]
  ------------------
 5701|    310|            return read_default(range, value, loc);
 5702|    310|        }
 5703|       |
 5704|     20|        reader_impl_for_int<CharT> reader{};
 5705|     20|        using integer_type =
 5706|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     20|        integer_type tmp_value{};
 5708|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     20|        value = static_cast<integer_type>(value);
 5710|     20|        return ret;
 5711|    330|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5682|    804|    {
 5683|    804|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    804|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    804|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    804|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    804|        }
 5687|    804|        else {
 5688|    804|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    804|        }
 5690|    804|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5563|    804|    {
 5564|    804|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    804|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    804|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    804|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 804]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    804|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    804|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    804|        ch = *range.begin();
 5566|    804|        return it;
 5567|    804|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  5.84k|{
 1846|  5.84k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.84k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  5.84k|    return ranges::next(range.begin());
 1851|  5.84k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   389k|    {
  296|   389k|        ++x;
  297|   389k|        return x;
  298|   389k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    364|    {
 3539|    364|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    364|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    364|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    364|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    364|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    364|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    364|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 364]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    364|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 364]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    364|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    364|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 350, False: 14]
  |  |  ------------------
  ------------------
 3565|    350|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    350|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    350|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    350|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    350|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 350]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    350|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    350|                    parse_integer_digits_without_thsep(
 3567|    350|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    350|                        prefix_result.parsed_base));
 3569|       |
 3570|    350|            auto buf = make_contiguous_buffer(
 3571|    350|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    350|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    350|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    350|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    350|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    350|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 350, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    350|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    350|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    350|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    350|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    350|    }                                                  \
  |  |  |  | 3671|    350|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    350|        }
 3580|       |
 3581|     14|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     14|            localized_number_formatting_options<CharT>{loc};
 3586|     14|#endif
 3587|       |
 3588|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.50k|{
 3326|  2.50k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  2.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.50k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.50k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.50k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.50k|        parse_integer_base_prefix(
 3331|  2.50k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.50k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.50k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.50k|    else {
 3343|  2.50k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.50k]
  ------------------
 3344|  2.50k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.50k, False: 0]
  ------------------
 3345|  2.50k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.50k|        }
 3347|  2.50k|    }
 3348|       |
 3349|  2.50k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.50k, False: 0]
  ------------------
 3350|  2.50k|        sign = sign_type::plus_sign;
 3351|  2.50k|    }
 3352|  2.50k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.50k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.50k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.33k|{
 3141|  3.33k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.33k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.33k, False: 0]
  ------------------
 3143|  3.33k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.33k, False: 0]
  ------------------
 3144|  3.33k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.33k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.33k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.33k|{
 2272|  3.33k|    auto it = read_code_unit(range);
 2273|  3.33k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.33k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  6.66k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 6.66k, False: 3.33k]
  ------------------
 2278|  6.66k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 6.66k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  6.66k|    }
 2282|       |
 2283|  3.33k|    return unexpected(parse_error::error);
 2284|  3.33k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.50k|{
 3293|  2.50k|    switch (base) {
 3294|     12|        case 2:
  ------------------
  |  Branch (3294:9): [True: 12, False: 2.49k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     12|                    false};
 3298|       |
 3299|     10|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 10, False: 2.49k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     10|            bool zero_parsed = false;
 3302|     10|            auto it = apply_opt(
 3303|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     10|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    822|        case 16:
  ------------------
  |  Branch (3307:9): [True: 822, False: 1.68k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    822|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    822|                    false};
 3311|       |
 3312|     16|        case 0:
  ------------------
  |  Branch (3312:9): [True: 16, False: 2.48k]
  ------------------
 3313|       |            // detect base
 3314|     16|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.64k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.64k, False: 860]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.64k|            return {range.begin(), base, false};
 3319|  2.50k|    }
 3320|  2.50k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    844|{
 2291|    844|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 844, False: 0]
  ------------------
 2292|    844|        return range.begin();
 2293|    844|    }
 2294|      0|    return *result;
 2295|    844|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     28|{
 3244|     28|    return read_matching_string_classic_nocase(range, "0b");
 3245|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.36k|{
 2231|  3.36k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.36k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.36k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.36k|        if (range.size() < str.size()) {
 2236|  3.36k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  3.36k|        }
 2238|  3.36k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  3.36k|            return unexpected(parse_error::error);
 2240|  3.36k|        }
 2241|  3.36k|        return ranges::next(range.begin(), str.size());
 2242|  3.36k|    }
 2243|  3.36k|    else {
 2244|  3.36k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.36k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.36k|                return ch;
 2247|  3.36k|            }
 2248|  3.36k|            return static_cast<char_type>(ch +
 2249|  3.36k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.36k|        };
 2251|       |
 2252|  3.36k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  3.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 3.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      4|    }                                                  \
  |  |  |  | 3671|  3.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  3.36k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.36k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.36k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.36k, False: 0]
  |  |  ------------------
  ------------------
 2257|  3.36k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.36k|                    return ascii_tolower(a) ==
 2259|  3.36k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.36k|                }))) {
 2261|  3.36k|            return unexpected(parse_error::error);
 2262|  3.36k|        }
 2263|       |
 2264|      0|        return it;
 2265|  3.36k|    }
 2266|  3.36k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  3.36k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.36k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 44, False: 3.32k]
  |  Branch (2245:29): [True: 3.32k, False: 0]
  ------------------
 2246|  3.36k|                return ch;
 2247|  3.36k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.36k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     26|{
 3258|     26|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 26]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     26|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 26]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     26|    return unexpected(parse_error::error);
 3268|     26|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.70k|{
 2146|  1.70k|    auto it = read_code_unit(range);
 2147|  1.70k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.70k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.70k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.70k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.70k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.70k|        return unexpected(parse_error::error);
 2154|  1.70k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.70k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    838|{
 3251|    838|    return read_matching_string_classic_nocase(range, "0x");
 3252|    838|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     16|{
 3274|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 16]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 16]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     16|    {
 3281|     16|        bool zero_parsed{false};
 3282|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 16]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     16|    }
 3286|     16|    return {range.begin(), 10, false};
 3287|     16|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.47k|{
 3360|  2.47k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.47k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.47k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.47k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.47k|        return range.end();
 3369|  2.47k|    }
 3370|  2.47k|    else {
 3371|  2.47k|        return read_while1_code_unit(range,
 3372|  2.47k|                                     [&](char_type ch) noexcept {
 3373|  2.47k|                                         return char_to_int(ch) < base;
 3374|  2.47k|                                     })
 3375|  2.47k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.47k|                scan_error::invalid_scanned_value,
 3377|  2.47k|                "Failed to parse integer: No digits found"));
 3378|  2.47k|    }
 3379|  2.47k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     28|{
 3390|     28|    std::basic_string<CharT> output;
 3391|     28|    std::string thsep_indices;
 3392|     28|    auto it = range.begin();
 3393|     28|    bool digit_matched = false;
 3394|     28|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 28, False: 0]
  ------------------
 3395|     28|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 28]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     28|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 28, False: 0]
  ------------------
 3400|     28|            break;
 3401|     28|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     28|    }
 3407|     28|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 3408|     28|        return unexpected_scan_error(
 3409|     28|            scan_error::invalid_scanned_value,
 3410|     28|            "Failed to parse integer: No digits found");
 3411|     28|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     28|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  10.0k|{
 1683|  10.0k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  10.0k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  10.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  10.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  10.0k|    }
 1688|  10.0k|    else {
 1689|  10.0k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  10.0k|    }
 1691|  10.0k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  10.0k|    {
 1490|  10.0k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  11.7k|    {
 1503|  11.7k|        return sv;
 1504|  11.7k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|    490|{
 5951|    490|    using char_type = detail::char_t<Range>;
 5952|    490|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    490|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 490, False: 0]
  ------------------
 5955|    490|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    490|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    490|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 432, False: 58]
  ------------------
 5959|    432|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|    432|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 66, False: 366]
  ------------------
 5962|     66|                auto prefix_width =
 5963|     66|                    static_cast<std::ptrdiff_t>(
 5964|     66|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|     66|                    ranges::distance(range.begin(), it);
 5966|     66|                return result_type{it, prefix_width};
 5967|     66|            }
 5968|    366|            return result_type{it, 0};
 5969|    432|        }
 5970|       |
 5971|     58|        auto max_width_view = take_width(range, max_width);
 5972|     58|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|     58|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 58, False: 0]
  ------------------
 5975|     58|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|     58|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|     58|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    494|{
 1976|    494|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    494|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|    650|{
 1957|    650|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    650|        return std::find_if(range.begin(), range.end(), pred);
 1959|    650|    }
 1960|    650|    else {
 1961|    650|        auto first = range.begin();
 1962|    650|        for (; first != range.end(); ++first) {
 1963|    650|            if (pred(*first)) {
 1964|    650|                return first;
 1965|    650|            }
 1966|    650|        }
 1967|    650|        return first;
 1968|    650|    }
 1969|    650|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_:
  753|    490|    {
  754|    490|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    950|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    950|              cvref<T> obj = *get<T>(fn);
  745|    950|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    950|                  obj(static_cast<decltype(args)>(args)...);
  747|    950|              }
  748|    950|              else {
  749|    950|                  return obj(static_cast<decltype(args)>(args)...);
  750|    950|              }
  751|    950|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    950|    {
  684|    950|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    950|            return static_cast<T*>(s.m_cp);
  686|    950|        }
  687|    950|        else if constexpr (std::is_object_v<T>) {
  688|    950|            return static_cast<T*>(s.m_p);
  689|    950|        }
  690|    950|        else {
  691|    950|            return reinterpret_cast<T*>(s.m_fp);
  692|    950|        }
  693|    950|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    950|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSH_:
  666|    490|        {
  667|    490|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|     88|{
 1976|     88|    return read_until_code_unit(range, std::not_fn(pred));
 1977|     88|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    184|{
 1957|    184|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    184|        return std::find_if(range.begin(), range.end(), pred);
 1959|    184|    }
 1960|    184|    else {
 1961|    184|        auto first = range.begin();
 1962|  1.57k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.46k, False: 110]
  ------------------
 1963|  1.46k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 74, False: 1.39k]
  ------------------
 1964|     74|                return first;
 1965|     74|            }
 1966|  1.46k|        }
 1967|    110|        return first;
 1968|    184|    }
 1969|    184|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    140|{
 2951|    140|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 140]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    140|    return read_while_classic_space(range);
 2962|    140|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    140|{
 2117|    140|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    140|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    140|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    140|        auto buf = make_contiguous_buffer(range);
 2121|    140|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    140|        return ranges::next(range.begin(),
 2123|    140|                            ranges::distance(buf.view().begin(), it));
 2124|    140|    }
 2125|    140|    else {
 2126|    140|        auto it = range.begin();
 2127|       |
 2128|    140|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    140|            auto seg = get_contiguous_beginning(range);
 2130|    140|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    140|                seg_it != seg.end()) {
 2132|    140|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|    140|            }
 2134|    140|            ranges::advance(it, seg.size());
 2135|    140|        }
 2136|       |
 2137|    140|        return read_while_code_point(
 2138|    140|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    140|    }
 2140|    140|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    176|{
 2082|    176|    return read_until_code_point(range, std::not_fn(pred));
 2083|    176|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|    236|{
 2061|    236|    auto it = range.begin();
 2062|    626|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 590, False: 36]
  ------------------
 2063|    590|        const auto val =
 2064|    590|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|    590|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|    590|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 590, False: 0]
  |  |  ------------------
  ------------------
 2066|    590|            const auto cp = detail::decode_code_point_exhaustive(
 2067|    590|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|    590|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 200, False: 390]
  ------------------
 2069|    200|                return it;
 2070|    200|            }
 2071|    590|        }
 2072|    390|        it = val.iterator;
 2073|    390|    }
 2074|       |
 2075|     36|    return it;
 2076|    236|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  6.10k|{
 1899|  6.10k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  6.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  6.10k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  6.10k|    auto it = range.begin();
 1903|  6.10k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  6.10k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  6.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.10k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  6.10k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 6.10k, False: 0]
  ------------------
 1912|  6.10k|        ++it;
 1913|  6.10k|        return {it, string_type(1, *range.begin())};
 1914|  6.10k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  6.10k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    140|    {
  754|    140|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|    158|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    158|              cvref<T> obj = *get<T>(fn);
  745|    158|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    158|                  obj(static_cast<decltype(args)>(args)...);
  747|    158|              }
  748|    158|              else {
  749|    158|                  return obj(static_cast<decltype(args)>(args)...);
  750|    158|              }
  751|    158|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    158|    {
  684|    158|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    158|            return static_cast<T*>(s.m_cp);
  686|    158|        }
  687|    158|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    158|            return static_cast<T*>(s.m_p);
  689|    158|        }
  690|    158|        else {
  691|    158|            return reinterpret_cast<T*>(s.m_fp);
  692|    158|        }
  693|    158|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|    158|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    140|        {
  662|    140|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  6.73k|{
 2951|  6.73k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 6.33k, False: 404]
  ------------------
 2952|  6.33k|        auto it = read_while_classic_space(range);
 2953|  6.33k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  6.33k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.33k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  6.33k|        return it;
 2959|  6.33k|    }
 2960|       |
 2961|    404|    return read_while_classic_space(range);
 2962|  6.73k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  8.97k|{
 2117|  8.97k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  8.97k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  8.97k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  8.97k|        auto buf = make_contiguous_buffer(range);
 2121|  8.97k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  8.97k|        return ranges::next(range.begin(),
 2123|  8.97k|                            ranges::distance(buf.view().begin(), it));
 2124|  8.97k|    }
 2125|  8.97k|    else {
 2126|  8.97k|        auto it = range.begin();
 2127|       |
 2128|  8.97k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  8.97k|            auto seg = get_contiguous_beginning(range);
 2130|  8.97k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  8.97k|                seg_it != seg.end()) {
 2132|  8.97k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  8.97k|            }
 2134|  8.97k|            ranges::advance(it, seg.size());
 2135|  8.97k|        }
 2136|       |
 2137|  8.97k|        return read_while_code_point(
 2138|  8.97k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  8.97k|    }
 2140|  8.97k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  9.13k|{
 2082|  9.13k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  9.13k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  11.6k|{
 2061|  11.6k|    auto it = range.begin();
 2062|  48.6k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 45.8k, False: 2.74k]
  ------------------
 2063|  45.8k|        const auto val =
 2064|  45.8k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  45.8k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  45.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 45.8k, False: 0]
  |  |  ------------------
  ------------------
 2066|  45.8k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  45.8k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  45.8k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 8.93k, False: 36.9k]
  ------------------
 2069|  8.93k|                return it;
 2070|  8.93k|            }
 2071|  45.8k|        }
 2072|  36.9k|        it = val.iterator;
 2073|  36.9k|    }
 2074|       |
 2075|  2.74k|    return it;
 2076|  11.6k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  8.97k|    {
  754|  8.97k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  10.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.3k|              cvref<T> obj = *get<T>(fn);
  745|  10.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  10.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.3k|              }
  748|  10.3k|              else {
  749|  10.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.3k|              }
  751|  10.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  10.3k|    {
  684|  10.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  10.3k|            return static_cast<T*>(s.m_cp);
  686|  10.3k|        }
  687|  10.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  10.3k|            return static_cast<T*>(s.m_p);
  689|  10.3k|        }
  690|  10.3k|        else {
  691|  10.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  10.3k|        }
  693|  10.3k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  10.3k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  8.97k|        {
  662|  8.97k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.06k|    {
 3040|  5.06k|        reader_error_handler eh{};
 3041|  5.06k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.06k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.13k, False: 928]
  |  |  ------------------
  ------------------
 3043|  4.13k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.13k|        }
 3045|    928|        return {};
 3046|  5.06k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|  5.06k|    {
 3051|  5.06k|        return static_cast<Derived&>(*this);
 3052|  5.06k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  5.06k|    {
 3485|  5.06k|        detail::check_int_type_specs(specs, eh);
 3486|  5.06k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  1.91k|    {
 3035|  1.91k|        return true;
 3036|  1.91k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    118|    {
 3539|    118|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    118|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    118|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    118|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 118]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    118|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    118|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    118|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    118|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 118]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    118|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 118]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    118|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    118|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 104, False: 14]
  |  |  ------------------
  ------------------
 3565|    104|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 104, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    104|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    104|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    104|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    104|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    104|    }                                                  \
  |  |  |  | 3671|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     14|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     14|            localized_number_formatting_options<CharT>{loc};
 3586|     14|#endif
 3587|       |
 3588|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    344|    {
 3539|    344|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    344|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    344|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 344]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    344|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 344]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    344|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    344|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 330, False: 14]
  |  |  ------------------
  ------------------
 3565|    330|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    330|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    330|                    parse_integer_digits_without_thsep(
 3567|    330|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    330|                        prefix_result.parsed_base));
 3569|       |
 3570|    330|            auto buf = make_contiguous_buffer(
 3571|    330|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    330|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    330|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 330, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    330|    }                                                  \
  |  |  |  | 3671|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    330|        }
 3580|       |
 3581|     14|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     14|            localized_number_formatting_options<CharT>{loc};
 3586|     14|#endif
 3587|       |
 3588|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     86|    {
 3539|     86|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     86|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     86|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     86|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     86|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 86]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     86|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     86|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     86|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     86|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 86]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     86|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 86]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     86|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     86|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 86, False: 0]
  |  |  ------------------
  ------------------
 3565|     86|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     86|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     86|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     86|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     86|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 86, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     86|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     86|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     86|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     86|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     86|    }                                                  \
  |  |  |  | 3671|     86|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    806|    {
 3539|    806|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    806|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    806|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    806|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    806|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 806]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    806|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    806|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    806|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    806|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 806]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    806|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 806]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    806|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    806|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 806, False: 0]
  |  |  ------------------
  ------------------
 3565|    806|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    806|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    806|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    806|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    806|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 806]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    806|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    806|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    806|                    parse_integer_digits_without_thsep(
 3567|    806|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    806|                        prefix_result.parsed_base));
 3569|       |
 3570|    806|            auto buf = make_contiguous_buffer(
 3571|    806|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    806|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    806|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    806|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    806|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    806|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 806, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    806|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    806|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    806|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    806|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    806|    }                                                  \
  |  |  |  | 3671|    806|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    806|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  2.53k|    {
 3040|  2.53k|        reader_error_handler eh{};
 3041|  2.53k|        get_derived().check_specs_impl(specs, eh);
 3042|  2.53k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 442]
  |  |  ------------------
  ------------------
 3043|  2.09k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  2.09k|        }
 3045|    442|        return {};
 3046|  2.53k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|  2.53k|    {
 3051|  2.53k|        return static_cast<Derived&>(*this);
 3052|  2.53k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  2.53k|    {
 4145|  2.53k|        detail::check_float_type_specs(specs, eh);
 4146|  2.53k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|    936|    {
 3035|    936|        return true;
 3036|    936|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|    438|    {
 4217|    438|        unsigned options{};
 4218|    438|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 14, False: 424]
  ------------------
 4219|     14|            options |= float_reader_base::allow_thsep;
 4220|     14|        }
 4221|       |
 4222|    438|        SCN_GCC_COMPAT_PUSH
 4223|    438|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    438|        switch (specs.type) {
 4226|      8|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 8, False: 430]
  ------------------
 4227|      8|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 4, False: 434]
  ------------------
 4230|      4|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     18|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 18, False: 420]
  ------------------
 4233|     18|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      4|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 4, False: 434]
  ------------------
 4236|      4|                return options | float_reader_base::allow_scientific |
 4237|      4|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    404|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 404, False: 34]
  ------------------
 4240|    404|                return options | float_reader_base::allow_scientific |
 4241|    404|                       float_reader_base::allow_fixed |
 4242|    404|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 438]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    438|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    438|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    438|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|    438|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|    932|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.86k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|    820|    {
 4057|    820|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 820, False: 0]
  ------------------
 4058|    820|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 820, False: 0]
  ------------------
 4059|    820|            return;
 4060|    820|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|    236|    {
 1587|    236|        return m_storage.has_value();
 1588|    236|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|    118|    {
 1592|    118|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    118|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    118|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    118|        return *m_storage;
 1594|    118|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    104|    {
  763|    104|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    104|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      6|    {
 3679|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      6|        return read_source_impl(range);
 3685|      6|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    104|    {
 3705|    104|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 104]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    104|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    104|        auto it = sign_result.first;
 3708|    104|        m_sign = sign_result.second;
 3709|       |
 3710|    104|        auto digits_begin = it;
 3711|    104|        auto r = ranges::subrange{it, range.end()};
 3712|    104|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    104|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    104|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    104|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    104|                SCN_TRY_ASSIGN(
 3717|    104|                    it,
 3718|    104|                    do_read_source_impl(
 3719|    104|                        r,
 3720|    104|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    104|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    104|            }
 3723|    104|            else {
 3724|    104|                auto cb = [&](const auto& rr)
 3725|    104|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    104|                    auto res = read_all(rr);
 3727|    104|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    104|                        return unexpected_scan_error(
 3729|    104|                            scan_error::invalid_scanned_value,
 3730|    104|                            "Invalid float value");
 3731|    104|                    }
 3732|    104|                    return res;
 3733|    104|                };
 3734|    104|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    104|            }
 3736|    104|        }
 3737|    104|        else {
 3738|    104|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 104, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    104|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    104|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    104|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    104|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    104|    }                                                  \
  |  | 3671|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    104|    {
 4000|    104|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    104|        const bool allowed_nonhex =
 4002|    104|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    104|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    104|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 104, False: 0]
  |  Branch (4005:45): [True: 0, False: 104]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    104|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 104]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    104|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 104, False: 0]
  |  Branch (4014:45): [True: 0, False: 104]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    104|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 104]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    104|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 96, False: 8]
  |  Branch (4021:28): [True: 6, False: 90]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      6|            auto it = range.begin();
 4025|       |
 4026|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 6]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      6|            else {
 4031|      6|                m_kind = float_kind::hex_without_prefix;
 4032|      6|            }
 4033|       |
 4034|      6|            return read_hex(ranges::subrange{it, range.end()});
 4035|      6|        }
 4036|     98|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 8, False: 90]
  |  Branch (4036:29): [True: 8, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      8|            m_kind = float_kind::generic;
 4040|      8|            return read_regular_float(range);
 4041|      8|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|     90|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|     90|        m_kind = float_kind::generic;
 4052|     90|        return read_regular(range);
 4053|     90|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    104|    {
 3811|    104|        auto it = range.begin();
 3812|    104|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 104, False: 0]
  ------------------
 3813|    104|            return unexpected(r.error());
 3814|    104|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    104|    {
 3834|    104|        auto it = range.begin();
 3835|    104|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 104, False: 0]
  ------------------
 3836|    104|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    104|                scan_error::invalid_scanned_value,
 3838|    104|                "Invalid floating-point NaN value"));
 3839|    104|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|     96|    {
 3804|     96|        return read_matching_string_classic_nocase(range, "0x");
 3805|     96|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      6|    {
 3904|      6|        auto it = range.begin();
 3905|       |
 3906|      6|        std::ptrdiff_t digits_count = 0;
 3907|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3909|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      6|                scan_error::invalid_scanned_value,
 3911|      6|                "Invalid hexadecimal floating-point value"));
 3912|      6|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      6|    {
 3789|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      6|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      6|        return read_while1_code_unit(
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      6|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|     98|    {
 3944|     98|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     98|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 92, False: 6]
  |  Branch (3945:50): [True: 2, False: 90]
  ------------------
 3946|       |
 3947|     98|        auto it = ranges::begin(range);
 3948|     98|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     98|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     98|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 0]
  |  |  ------------------
  ------------------
 3952|     98|            return r.transform_error(
 3953|     98|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     98|                                              "Invalid floating-point value"));
 3955|     98|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|     98|    {
 3774|     98|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98]
  |  |  |  Branch (859:45): [True: 0, False: 98]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     98|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     98|        return read_while1_code_unit(
 3783|     98|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     98|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|     98|    {
  754|     98|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|     98|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     98|              cvref<T> obj = *get<T>(fn);
  745|     98|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     98|                  obj(static_cast<decltype(args)>(args)...);
  747|     98|              }
  748|     98|              else {
  749|     98|                  return obj(static_cast<decltype(args)>(args)...);
  750|     98|              }
  751|     98|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|     98|    {
  684|     98|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     98|            return static_cast<T*>(s.m_cp);
  686|     98|        }
  687|     98|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     98|            return static_cast<T*>(s.m_p);
  689|     98|        }
  690|     98|        else {
  691|     98|            return reinterpret_cast<T*>(s.m_fp);
  692|     98|        }
  693|     98|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3783|     98|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|     98|        {
  662|     98|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|     98|    {
 3665|     98|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|     98|        return read_source_impl(range);
 3671|     98|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    828|    {
  763|    828|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    828|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    828|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    828|    {
 3705|    828|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    828|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    828|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    828|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    828|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 828]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    828|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    828|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    828|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    828|        auto it = sign_result.first;
 3708|    828|        m_sign = sign_result.second;
 3709|       |
 3710|    828|        auto digits_begin = it;
 3711|    828|        auto r = ranges::subrange{it, range.end()};
 3712|    828|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    828|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    828|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 828]
  |  |  |  Branch (859:45): [True: 0, False: 828]
  |  |  |  Branch (859:45): [True: 0, False: 828]
  |  |  ------------------
  ------------------
 3715|    828|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    828|            else {
 3724|    828|                auto cb = [&](const auto& rr)
 3725|    828|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    828|                    auto res = read_all(rr);
 3727|    828|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    828|                        return unexpected_scan_error(
 3729|    828|                            scan_error::invalid_scanned_value,
 3730|    828|                            "Invalid float value");
 3731|    828|                    }
 3732|    828|                    return res;
 3733|    828|                };
 3734|    828|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|    828|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    828|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    828|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8, False: 820]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      8|    }                                                  \
  |  | 3671|    828|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    828|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    820|            }
 3736|    828|        }
 3737|    820|        else {
 3738|    820|            SCN_TRY_ASSIGN(
 3739|    820|                it,
 3740|    820|                do_read_source_impl(
 3741|    820|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    820|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    820|        }
 3744|       |
 3745|    820|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    820|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    820|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    820|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 820, False: 0]
  |  Branch (3747:48): [True: 820, False: 0]
  ------------------
 3748|    820|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 820, False: 0]
  ------------------
 3749|    820|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 820, False: 0]
  ------------------
 3750|    820|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    820|        }
 3752|       |
 3753|    820|        handle_separators();
 3754|       |
 3755|    820|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 820]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    820|        return it;
 3768|    820|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    828|    {
 3811|    828|        auto it = range.begin();
 3812|    828|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 828, False: 0]
  ------------------
 3813|    828|            return unexpected(r.error());
 3814|    828|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    828|    {
 3834|    828|        auto it = range.begin();
 3835|    828|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 828, False: 0]
  ------------------
 3836|    828|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    828|                scan_error::invalid_scanned_value,
 3838|    828|                "Invalid floating-point NaN value"));
 3839|    828|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    820|    {
 3804|    820|        return read_matching_string_classic_nocase(range, "0x");
 3805|    820|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|      8|{
 1996|      8|    auto it = read_while_code_unit(range, pred);
 1997|      8|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 8, False: 0]
  ------------------
 1998|      8|        return unexpected(parse_error::error);
 1999|      8|    }
 2000|      0|    return it;
 2001|      8|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|      8|    {
 3944|      8|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|      8|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 6, False: 2]
  |  Branch (3945:50): [True: 2, False: 4]
  ------------------
 3946|       |
 3947|      8|        auto it = ranges::begin(range);
 3948|      8|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|      8|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|      8|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 3952|      8|            return r.transform_error(
 3953|      8|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|      8|                                              "Invalid floating-point value"));
 3955|      8|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|      8|    {
 3774|      8|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8]
  |  |  |  Branch (859:45): [True: 0, False: 8]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|      8|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|      8|        return read_while1_code_unit(
 3783|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|      8|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    828|    {
 4000|    828|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    828|        const bool allowed_nonhex =
 4002|    828|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    828|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    828|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 828, False: 0]
  |  Branch (4005:45): [True: 0, False: 828]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    828|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 828]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    828|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 828, False: 0]
  |  Branch (4014:45): [True: 0, False: 828]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    828|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 828]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    828|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 820, False: 8]
  |  Branch (4021:28): [True: 12, False: 808]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     12|            auto it = range.begin();
 4025|       |
 4026|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 12]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     12|            else {
 4031|     12|                m_kind = float_kind::hex_without_prefix;
 4032|     12|            }
 4033|       |
 4034|     12|            return read_hex(ranges::subrange{it, range.end()});
 4035|     12|        }
 4036|    816|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 8, False: 808]
  |  Branch (4036:29): [True: 8, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      8|            m_kind = float_kind::generic;
 4040|      8|            return read_regular_float(range);
 4041|      8|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    808|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    808|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 808]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    808|        m_kind = float_kind::generic;
 4052|    808|        return read_regular(range);
 4053|    808|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    820|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    820|                    auto res = read_all(rr);
 3727|    820|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    820|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 820]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    820|                    return res;
 3733|    820|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    820|{
 1839|    820|    return ranges::next(range.begin(), range.end());
 1840|    820|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    820|    {
  313|    820|        ranges::advance(x, bound);
  314|    820|        return x;
  315|    820|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    820|    {
  275|    820|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    820|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|    820|    {
 1577|    820|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    820|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    820|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|    820|    {
 1621|    820|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    820|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    820|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    820|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    820|            m_storage.reset();
 1627|    820|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    820|        }
 1629|    820|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    820|                                          std::basic_string<CharT>>) {
 1631|    820|            m_storage.emplace(SCN_FWD(range));
 1632|    820|            m_view = string_view_type{*m_storage};
 1633|    820|        }
 1634|    820|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    820|                                          typename detail::basic_scan_buffer<
 1636|    820|                                              value_t>::forward_iterator> &&
 1637|    820|                           ranges::common_range<Range>) {
 1638|    820|            auto beg_seg = range.begin().contiguous_segment();
 1639|    820|            auto end_seg = range.end().contiguous_segment();
 1640|    820|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    820|                             detail::to_address(end_seg.end()))) {
 1642|    820|                auto& str = m_storage.emplace();
 1643|    820|                str.reserve(range.end().position() - range.begin().position());
 1644|    820|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    820|                m_view = string_view_type{str};
 1646|    820|                return;
 1647|    820|            }
 1648|       |
 1649|    820|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    820|                                                            end_seg.data());
 1651|    820|            m_storage.reset();
 1652|    820|        }
 1653|    820|        else {
 1654|    820|            auto& str = m_storage.emplace();
 1655|    820|            if constexpr (ranges::sized_range<Range>) {
 1656|    820|                str.reserve(range.size());
 1657|    820|            }
 1658|    820|            if constexpr (ranges::common_range<Range>) {
 1659|    820|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    820|                          std::back_inserter(str));
 1661|    820|            }
 1662|    820|            else {
 1663|    820|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    820|                     ++it) {
 1665|    820|                    str.push_back(*it);
 1666|    820|                }
 1667|    820|            }
 1668|    820|            m_view = string_view_type{str};
 1669|    820|        }
 1670|    820|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    820|    {
 3665|    820|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    820|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 820]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    820|        return read_source_impl(range);
 3671|    820|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    820|    {
 3691|    820|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    820|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    820|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    820|        const std::ptrdiff_t sign_len =
 3694|    820|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 820]
  ------------------
 3695|       |
 3696|    820|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|    820|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    820|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    820|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    820|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 820, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    820|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    820|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    820|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    820|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    820|    }                                                  \
  |  |  |  | 3671|    820|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    820|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    104|    {
 4170|    104|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    104|#if !SCN_DISABLE_LOCALE
 4173|    104|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 6, False: 98]
  ------------------
 4174|      6|            return read_impl<Range>(
 4175|      6|                range, rd,
 4176|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      6|                },
 4179|      6|                value, loc);
 4180|      6|        }
 4181|     98|#endif
 4182|       |
 4183|     98|        return read_impl<Range>(
 4184|     98|            range, rd,
 4185|     98|            [](float_reader<CharT>& r, auto&&... args) {
 4186|     98|                return r.read_source(SCN_FWD(args)...);
 4187|     98|            },
 4188|     98|            value);
 4189|    104|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    104|    {
 4206|    104|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    104|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 104, False: 0]
  |  |  ------------------
  ------------------
 4208|    104|            return unexpected(r.error());
 4209|    104|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      6|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSL_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|     98|    {
  754|     98|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|     98|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     98|              cvref<T> obj = *get<T>(fn);
  745|     98|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     98|                  obj(static_cast<decltype(args)>(args)...);
  747|     98|              }
  748|     98|              else {
  749|     98|                  return obj(static_cast<decltype(args)>(args)...);
  750|     98|              }
  751|     98|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|     98|    {
  684|     98|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     98|            return static_cast<T*>(s.m_cp);
  686|     98|        }
  687|     98|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     98|            return static_cast<T*>(s.m_p);
  689|     98|        }
  690|     98|        else {
  691|     98|            return reinterpret_cast<T*>(s.m_fp);
  692|     98|        }
  693|     98|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|     98|            [](float_reader<CharT>& r, auto&&... args) {
 4186|     98|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|     98|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|     98|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSL_:
  661|     98|        {
  662|     98|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    334|    {
 4170|    334|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    334|#if !SCN_DISABLE_LOCALE
 4173|    334|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 326]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    326|#endif
 4182|       |
 4183|    326|        return read_impl<Range>(
 4184|    326|            range, rd,
 4185|    326|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    326|                return r.read_source(SCN_FWD(args)...);
 4187|    326|            },
 4188|    326|            value);
 4189|    334|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    828|    {
 4206|    828|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    828|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    828|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 820]
  |  |  ------------------
  ------------------
 4208|      8|            return unexpected(r.error());
 4209|      8|        }
 4210|       |
 4211|    820|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|    820|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    820|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    820|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    820|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 820, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    820|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    820|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    820|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    820|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    820|    }                                                  \
  |  |  |  | 3671|    820|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    820|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    326|    {
  754|    326|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    326|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    326|              cvref<T> obj = *get<T>(fn);
  745|    326|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    326|                  obj(static_cast<decltype(args)>(args)...);
  747|    326|              }
  748|    326|              else {
  749|    326|                  return obj(static_cast<decltype(args)>(args)...);
  750|    326|              }
  751|    326|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    326|    {
  684|    326|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    326|            return static_cast<T*>(s.m_cp);
  686|    326|        }
  687|    326|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    326|            return static_cast<T*>(s.m_p);
  689|    326|        }
  690|    326|        else {
  691|    326|            return reinterpret_cast<T*>(s.m_fp);
  692|    326|        }
  693|    326|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    326|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    326|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    326|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    326|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    326|        {
  662|    326|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5808|  2.98k|{
 5809|  2.98k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  2.98k|        return reader_impl_for_bool<CharT>{};
 5811|  2.98k|    }
 5812|  2.98k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  2.98k|        return reader_impl_for_char<CharT>{};
 5814|  2.98k|    }
 5815|  2.98k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  2.98k|        return reader_impl_for_wchar<CharT>{};
 5817|  2.98k|    }
 5818|  2.98k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  2.98k|        return reader_impl_for_code_point<CharT>{};
 5820|  2.98k|    }
 5821|  2.98k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  2.98k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  2.98k|        return reader_impl_for_string<CharT>{};
 5824|  2.98k|    }
 5825|  2.98k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  2.98k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  2.98k|        return reader_impl_for_string<CharT>{};
 5828|  2.98k|    }
 5829|  2.98k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  2.98k|                       std::is_same_v<T, wregex_matches>) {
 5831|  2.98k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  2.98k|    }
 5833|  2.98k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  2.98k|        return reader_impl_for_voidptr<CharT>{};
 5835|  2.98k|    }
 5836|  2.98k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  2.98k|        return reader_impl_for_float<CharT>{};
 5838|  2.98k|    }
 5839|  2.98k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  2.98k|                       !std::is_same_v<T, wchar_t> &&
 5841|  2.98k|                       !std::is_same_v<T, char32_t> &&
 5842|  2.98k|                       !std::is_same_v<T, bool>) {
 5843|  2.98k|        return reader_impl_for_int<CharT>{};
 5844|  2.98k|    }
 5845|  2.98k|    else {
 5846|  2.98k|        return reader_impl_for_monostate<CharT>{};
 5847|  2.98k|    }
 5848|  2.98k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  8.95k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  7.47k|    {
 3040|  7.47k|        reader_error_handler eh{};
 3041|  7.47k|        get_derived().check_specs_impl(specs, eh);
 3042|  7.47k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  7.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 234, False: 7.24k]
  |  |  ------------------
  ------------------
 3043|    234|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    234|        }
 3045|  7.24k|        return {};
 3046|  7.47k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  7.47k|    {
 3051|  7.47k|        return static_cast<Derived&>(*this);
 3052|  7.47k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  7.47k|    {
 5210|  7.47k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  7.47k|        SCN_GCC_PUSH
 5213|  7.47k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  7.47k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  7.47k|        SCN_CLANG_PUSH
 5217|  7.47k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  7.47k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  7.47k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 228, False: 7.24k]
  ------------------
 5221|  1.18k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.18k, False: 6.28k]
  ------------------
 5222|  1.18k|                m_type = reader_type::word;
 5223|  1.18k|                break;
 5224|       |
 5225|    228|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 228, False: 7.24k]
  ------------------
 5226|    228|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 84, False: 144]
  ------------------
 5227|    228|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 102, False: 42]
  ------------------
 5228|    186|                    m_type = reader_type::custom_word;
 5229|    186|                }
 5230|     42|                else {
 5231|     42|                    m_type = reader_type::word;
 5232|     42|                }
 5233|    228|                break;
 5234|      0|            }
 5235|       |
 5236|     54|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 54, False: 7.42k]
  ------------------
 5237|     54|                m_type = reader_type::character;
 5238|     54|                break;
 5239|       |
 5240|    516|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 516, False: 6.96k]
  ------------------
 5241|    516|                m_type = reader_type::character_set;
 5242|    516|                break;
 5243|       |
 5244|  5.08k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 5.08k, False: 2.39k]
  ------------------
 5245|  5.08k|                m_type = reader_type::regex;
 5246|  5.08k|                break;
 5247|       |
 5248|    180|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 180, False: 7.29k]
  ------------------
 5249|    180|                m_type = reader_type::regex_escaped;
 5250|    180|                break;
 5251|  7.47k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  7.47k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  10.1k|    {
 5259|  10.1k|        return m_type == reader_type::word;
 5260|  10.1k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  5.40k|{
 1132|  5.40k|    auto it = src.begin();
 1133|  46.1k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 42.1k, False: 4.00k]
  ------------------
 1134|  42.1k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  42.1k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 42.1k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  42.1k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 42.1k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  42.1k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  42.1k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  42.1k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.39k, False: 40.7k]
  ------------------
 1144|  1.39k|            return false;
 1145|  1.39k|        }
 1146|  40.7k|        it += len;
 1147|  40.7k|    }
 1148|  4.00k|    return true;
 1149|  5.40k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    118|{
 2993|    118|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    118|        if (source.stores_allocated_string()) {
 2995|    118|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    118|        }
 2997|    118|        else {
 2998|    118|            dest.assign(source.view());
 2999|    118|        }
 3000|    118|    }
 3001|    118|    else {
 3002|    118|        return transcode_impl(source.view(), dest);
 3003|    118|    }
 3004|       |
 3005|      0|    return {};
 3006|    118|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  1.00k|{
 2968|  1.00k|    dst.clear();
 2969|  1.00k|    transcode_valid_to_string(src, dst);
 2970|  1.00k|    return {};
 2971|  1.00k|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  1.00k|{
 1403|  1.00k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  1.00k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  1.00k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  1.00k|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  1.00k|            std::u32string tmp;
 1410|  1.00k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  1.00k|            return transcode_to_string_impl_32to16<true>(
 1412|  1.00k|                std::u32string_view{tmp}, dest);
 1413|  1.00k|        }
 1414|  1.00k|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|  1.00k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  1.00k|        }
 1417|  1.00k|    }
 1418|  1.00k|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|  1.00k|        if constexpr (sizeof(DestCharT) == 1) {
 1420|  1.00k|            std::u32string tmp;
 1421|  1.00k|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|  1.00k|            return transcode_to_string_impl_32to8<true>(
 1423|  1.00k|                std::u32string_view{tmp}, dest);
 1424|  1.00k|        }
 1425|  1.00k|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|  1.00k|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|  1.00k|        }
 1428|  1.00k|    }
 1429|  1.00k|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|  1.00k|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|  1.00k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|  1.00k|        }
 1433|  1.00k|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|  1.00k|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|  1.00k|        }
 1436|  1.00k|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|  1.00k|{
 1294|  1.00k|    static_assert(sizeof(SourceCharT) == 4);
 1295|  1.00k|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  8.04k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 8.04k, False: 1.00k]
  ------------------
 1298|  8.04k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  8.04k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  8.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  8.04k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 6.62k, False: 1.42k]
  ------------------
 1306|  6.62k|            dest.push_back(static_cast<char>(cp));
 1307|  6.62k|        }
 1308|  1.42k|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 126, False: 1.29k]
  ------------------
 1309|    126|            dest.push_back(
 1310|    126|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|    126|            dest.push_back(
 1312|    126|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|    126|        }
 1314|  1.29k|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 858, False: 438]
  ------------------
 1315|    858|            dest.push_back(
 1316|    858|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|    858|            dest.push_back(static_cast<char>(
 1318|    858|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|    858|            dest.push_back(
 1320|    858|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|    858|        }
 1322|    438|        else {
 1323|    438|            dest.push_back(
 1324|    438|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    438|            dest.push_back(static_cast<char>(
 1326|    438|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    438|            dest.push_back(static_cast<char>(
 1328|    438|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    438|            dest.push_back(
 1330|    438|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    438|        }
 1332|  8.04k|    }
 1333|  1.00k|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|    516|        {
 5103|    516|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 156, False: 360]
  ------------------
 5104|    156|                return {};
 5105|    156|            }
 5106|       |
 5107|    360|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|    360|            auto it = detail::to_address(charset_string.begin());
 5109|    360|            auto set = detail::parse_presentation_set(
 5110|    360|                it, detail::to_address(charset_string.end()), nonascii);
 5111|    360|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|    360|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|    360|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|    360|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|    360|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|    360|            std::sort(nonascii.extra_ranges.begin(),
 5118|    360|                      nonascii.extra_ranges.end());
 5119|    360|            return {};
 5120|    360|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|  4.22k|        {
 5138|  4.22k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 1.14k, False: 3.08k]
  ------------------
 5139|  1.14k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  1.14k|            }
 5141|       |
 5142|  3.08k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|  4.22k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  1.14k|        {
 5086|       |            // TODO: binary search?
 5087|  1.14k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 1.14k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  1.14k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  1.14k|            return std::find_if(
 5093|  1.14k|                       nonascii.extra_ranges.begin(),
 5094|  1.14k|                       nonascii.extra_ranges.end(),
 5095|  1.14k|                       [cp_val](const auto& pair) noexcept {
 5096|  1.14k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  1.14k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  1.14k|                       }) != nonascii.extra_ranges.end();
 5099|  1.14k|        }
_ZZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  9.97k|                       [cp_val](const auto& pair) noexcept {
 5096|  9.97k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 9.87k, False: 108]
  ------------------
 5097|  9.97k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 1.08k, False: 8.78k]
  ------------------
 5098|  9.97k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  4.47k|        {
 5076|  4.47k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  4.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  4.47k|            const auto val =
 5078|  4.47k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  4.47k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  4.47k|                    (val % 8)) &
 5081|  4.47k|                   1u;
 5082|  4.47k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  1.39k|        {
 5129|  1.39k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 12, False: 1.38k]
  ------------------
 5130|     12|                return false;
 5131|     12|            }
 5132|       |
 5133|  1.38k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  1.39k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|    516|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    184|    {
 5277|    184|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    184|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    184|        return read_impl(range, specs, value);
 5279|    184|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    184|    {
 5295|    184|        SCN_CLANG_PUSH
 5296|    184|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    184|        switch (m_type) {
 5299|     88|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 88, False: 96]
  ------------------
 5300|     88|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 164]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     16|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 16, False: 168]
  ------------------
 5307|     16|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|     54|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 54, False: 130]
  ------------------
 5310|     54|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|     54|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 182]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 180]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 184]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    184|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    184|        }
 5331|       |
 5332|    184|        SCN_CLANG_POP
 5333|    184|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|     88|    {
 4820|     88|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|     88|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    124|{
 4752|    124|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    124|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    124|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 52, False: 72]
  ------------------
 4756|     52|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     52|                                     "Invalid encoding in scanned string");
 4758|     52|    }
 4759|     72|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     72|    static_cast<    \
  |  |  929|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     72|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     72|    return SCN_MOVE(result);
  ------------------
  |  |  928|     72|    static_cast<    \
  |  |  929|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     72|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    264|{
 2088|    264|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    264|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    264|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    264|        auto buf = make_contiguous_buffer(range);
 2092|    264|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    264|        return ranges::next(range.begin(),
 2094|    264|                            ranges::distance(buf.view().begin(), it));
 2095|    264|    }
 2096|    264|    else {
 2097|    264|        auto it = range.begin();
 2098|       |
 2099|    264|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    264|            auto seg = get_contiguous_beginning(range);
 2101|    264|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    264|                seg_it != seg.end()) {
 2103|    264|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|    264|            }
 2105|    264|            ranges::advance(it, seg.size());
 2106|    264|        }
 2107|       |
 2108|    264|        return read_until_code_point(
 2109|    264|            ranges::subrange{it, range.end()},
 2110|    264|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    264|    }
 2112|    264|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    264|{
 2061|    264|    auto it = range.begin();
 2062|  5.73k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 5.51k, False: 222]
  ------------------
 2063|  5.51k|        const auto val =
 2064|  5.51k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  5.51k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  5.51k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.51k, False: 0]
  |  |  ------------------
  ------------------
 2066|  5.51k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  5.51k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  5.51k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 42, False: 5.47k]
  ------------------
 2069|     42|                return it;
 2070|     42|            }
 2071|  5.51k|        }
 2072|  5.47k|        it = val.iterator;
 2073|  5.47k|    }
 2074|       |
 2075|    222|    return it;
 2076|    264|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    264|    {
  754|    264|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  5.51k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.51k|              cvref<T> obj = *get<T>(fn);
  745|  5.51k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.51k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.51k|              }
  748|  5.51k|              else {
  749|  5.51k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.51k|              }
  751|  5.51k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  5.51k|    {
  684|  5.51k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.51k|            return static_cast<T*>(s.m_cp);
  686|  5.51k|        }
  687|  5.51k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.51k|            return static_cast<T*>(s.m_p);
  689|  5.51k|        }
  690|  5.51k|        else {
  691|  5.51k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.51k|        }
  693|  5.51k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  5.51k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    264|        {
  662|    264|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     20|    {
 4841|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 20, False: 0]
  ------------------
 4842|     20|            return read_string_impl(
 4843|     20|                range,
 4844|     20|                read_until_code_unit(
 4845|     20|                    range,
 4846|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     20|                        SourceCharT ch) { return ch == until; }),
 4848|     20|                value);
 4849|     20|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|    350|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    350|                  obj(static_cast<decltype(args)>(args)...);
  747|    350|              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|    350|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    350|            return static_cast<T*>(s.m_cp);
  686|    350|        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    350|            return static_cast<T*>(s.m_p);
  689|    350|        }
  690|    350|        else {
  691|    350|            return reinterpret_cast<T*>(s.m_fp);
  692|    350|        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     16|    {
 4947|     16|        return read_impl(
 4948|     16|            range,
 4949|     16|            [&](const auto& rng) {
 4950|     16|                return read_string_impl(rng, read_all(rng), value);
 4951|     16|            },
 4952|     16|            detail::priority_tag<1>{});
 4953|     16|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     16|    {
 4974|     16|        return read_cb(range);
 4975|     16|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     16|            [&](const auto& rng) {
 4950|     16|                return read_string_impl(rng, read_all(rng), value);
 4951|     16|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|     48|{
 1839|     48|    return ranges::next(range.begin(), range.end());
 1840|     48|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     48|    {
  313|     48|        ranges::advance(x, bound);
  314|     48|        return x;
  315|     48|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     48|    {
  275|     48|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     48|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     48|    {
  203|    684|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 636, False: 48]
  ------------------
  204|    636|            ++i;
  205|    636|        }
  206|     48|    }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|     54|    {
 5048|     54|        auto it = read_source_impl(range, {specs});
 5049|     54|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     54|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 46]
  |  |  ------------------
  ------------------
 5050|      8|            return unexpected(it.error());
 5051|      8|        }
 5052|       |
 5053|     46|        return read_string_impl(range, *it, value);
 5054|     54|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5152|    162|    {
 5153|    162|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    162|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    162|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 162]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    162|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    162|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 96, False: 66]
  ------------------
 5163|     96|            const auto cb = [&](char32_t cp) {
 5164|     96|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|     96|            };
 5166|       |
 5167|     96|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 60, False: 36]
  ------------------
 5168|     60|                auto it = read_until_code_point(range, cb);
 5169|     60|                return check_nonempty(it, range);
 5170|     60|            }
 5171|     36|            auto it = read_while_code_point(range, cb);
 5172|     36|            return check_nonempty(it, range);
 5173|     96|        }
 5174|       |
 5175|     66|        const auto cb = [&](SourceCharT ch) {
 5176|     66|            return cb_wrapper.on_ascii_only(ch);
 5177|     66|        };
 5178|       |
 5179|     66|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 36, False: 30]
  ------------------
 5180|     36|            auto it = read_until_code_unit(range, cb);
 5181|     36|            return check_nonempty(it, range);
 5182|     36|        }
 5183|     30|        auto it = read_while_code_unit(range, cb);
 5184|     30|        return check_nonempty(it, range);
 5185|     66|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|     96|    {
  754|     96|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|    432|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    432|              cvref<T> obj = *get<T>(fn);
  745|    432|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    432|                  obj(static_cast<decltype(args)>(args)...);
  747|    432|              }
  748|    432|              else {
  749|    432|                  return obj(static_cast<decltype(args)>(args)...);
  750|    432|              }
  751|    432|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|    432|    {
  684|    432|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    432|            return static_cast<T*>(s.m_cp);
  686|    432|        }
  687|    432|        else if constexpr (std::is_object_v<T>) {
  688|    432|            return static_cast<T*>(s.m_p);
  689|    432|        }
  690|    432|        else {
  691|    432|            return reinterpret_cast<T*>(s.m_fp);
  692|    432|        }
  693|    432|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|    432|            const auto cb = [&](char32_t cp) {
 5164|    432|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    432|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|     96|        {
  667|     96|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5190|    162|    {
 5191|    162|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 24, False: 138]
  ------------------
 5192|     24|            return unexpected_scan_error(
 5193|     24|                scan_error::invalid_scanned_value,
 5194|     24|                "No characters matched in [character set]");
 5195|     24|        }
 5196|       |
 5197|    138|        return it;
 5198|    162|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_LPv0EEEOSL_:
  753|     66|    {
  754|     66|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|    168|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    168|              cvref<T> obj = *get<T>(fn);
  745|    168|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    168|                  obj(static_cast<decltype(args)>(args)...);
  747|    168|              }
  748|    168|              else {
  749|    168|                  return obj(static_cast<decltype(args)>(args)...);
  750|    168|              }
  751|    168|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|    168|    {
  684|    168|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    168|            return static_cast<T*>(s.m_cp);
  686|    168|        }
  687|    168|        else if constexpr (std::is_object_v<T>) {
  688|    168|            return static_cast<T*>(s.m_p);
  689|    168|        }
  690|    168|        else {
  691|    168|            return reinterpret_cast<T*>(s.m_fp);
  692|    168|        }
  693|    168|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlwE_clEw:
 5175|    168|        const auto cb = [&](SourceCharT ch) {
 5176|    168|            return cb_wrapper.on_ascii_only(ch);
 5177|    168|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_LPv0EEEPKSL_:
  666|     66|        {
  667|     66|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|     46|{
 4752|     46|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|     46|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|     46|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 46]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|     46|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     46|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     46|    return SCN_MOVE(result);
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     46|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|      6|    {
 4891|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|      6|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|     18|    {
 4913|     18|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|     36|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|     18|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|     18|            return unexpected_scan_error(
 4916|     18|                scan_error::invalid_scanned_value,
 4917|     18|                "Regex backend doesn't support wide strings as input");
 4918|     18|        }
 4919|     18|        else {
 4920|     18|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 18, False: 0]
  ------------------
 4921|     18|                return unexpected_scan_error(
 4922|     18|                    scan_error::invalid_scanned_value,
 4923|     18|                    "Cannot use regex with a non-contiguous source "
 4924|     18|                    "range");
 4925|     18|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|     18|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|     18|{
  959|     18|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|     18|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|     18|        return true;
  962|     18|    }
  963|     18|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|     18|                           ranges::const_iterator_t<Range>,
  965|     18|                           typename detail::basic_scan_buffer<
  966|     18|                               detail::char_t<Range>>::forward_iterator>) {
  967|     18|        auto beg = r.begin();
  968|     18|        if (!beg.stores_parent()) {
  969|     18|            return true;
  970|     18|        }
  971|     18|        return beg.parent()->is_contiguous();
  972|     18|    }
  973|     18|    else {
  974|     18|        return false;
  975|     18|    }
  976|     18|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  2.22k|    {
 5277|  2.22k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.22k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  2.22k|        return read_impl(range, specs, value);
 5279|  2.22k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  2.22k|    {
 5295|  2.22k|        SCN_CLANG_PUSH
 5296|  2.22k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  2.22k|        switch (m_type) {
 5299|    320|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 320, False: 1.90k]
  ------------------
 5300|    320|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     40|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 40, False: 2.18k]
  ------------------
 5303|     40|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     40|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 2.22k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    118|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 118, False: 2.10k]
  ------------------
 5310|    118|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    118|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  1.69k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 1.69k, False: 534]
  ------------------
 5315|  1.69k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  1.69k|                    range, specs.charset_string<SourceCharT>(),
 5317|  1.69k|                    specs.regexp_flags, value);
 5318|       |
 5319|     56|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 56, False: 2.16k]
  ------------------
 5320|     56|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     56|                    range,
 5322|     56|                    get_unescaped_regex_pattern(
 5323|     56|                        specs.charset_string<SourceCharT>()),
 5324|     56|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 2.22k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  2.22k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  2.22k|        }
 5331|       |
 5332|  2.22k|        SCN_CLANG_POP
 5333|  2.22k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    814|    {
 4820|    814|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    814|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    854|{
 4752|    854|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    854|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    854|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 282, False: 572]
  ------------------
 4756|    282|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    282|                                     "Invalid encoding in scanned string");
 4758|    282|    }
 4759|    572|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    572|    static_cast<    \
  |  |  929|    572|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    572|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 572]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    572|    return SCN_MOVE(result);
  ------------------
  |  |  928|    572|    static_cast<    \
  |  |  929|    572|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    572|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    884|{
 3012|    884|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    884|        dest.assign(source.view());
 3014|    884|    }
 3015|    884|    else {
 3016|    884|        return transcode_impl(source.view(), dest);
 3017|    884|    }
 3018|       |
 3019|      0|    return {};
 3020|    884|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.44k|{
 2088|  2.44k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.44k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.44k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.44k|        auto buf = make_contiguous_buffer(range);
 2092|  2.44k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.44k|        return ranges::next(range.begin(),
 2094|  2.44k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.44k|    }
 2096|  2.44k|    else {
 2097|  2.44k|        auto it = range.begin();
 2098|       |
 2099|  2.44k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  2.44k|            auto seg = get_contiguous_beginning(range);
 2101|  2.44k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.44k|                seg_it != seg.end()) {
 2103|  2.44k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.44k|            }
 2105|  2.44k|            ranges::advance(it, seg.size());
 2106|  2.44k|        }
 2107|       |
 2108|  2.44k|        return read_until_code_point(
 2109|  2.44k|            ranges::subrange{it, range.end()},
 2110|  2.44k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.44k|    }
 2112|  2.44k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  2.44k|    {
  754|  2.44k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  31.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.7k|              cvref<T> obj = *get<T>(fn);
  745|  31.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  31.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.7k|              }
  748|  31.7k|              else {
  749|  31.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.7k|              }
  751|  31.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  31.7k|    {
  684|  31.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  31.7k|            return static_cast<T*>(s.m_cp);
  686|  31.7k|        }
  687|  31.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  31.7k|            return static_cast<T*>(s.m_p);
  689|  31.7k|        }
  690|  31.7k|        else {
  691|  31.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  31.7k|        }
  693|  31.7k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  31.7k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  2.44k|        {
  662|  2.44k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     40|    {
 4841|     40|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 40, False: 0]
  ------------------
 4842|     40|            return read_string_impl(
 4843|     40|                range,
 4844|     40|                read_until_code_unit(
 4845|     40|                    range,
 4846|     40|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     40|                        SourceCharT ch) { return ch == until; }),
 4848|     40|                value);
 4849|     40|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     40|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     40|    {
  754|     40|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    490|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    490|              cvref<T> obj = *get<T>(fn);
  745|    490|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    490|                  obj(static_cast<decltype(args)>(args)...);
  747|    490|              }
  748|    490|              else {
  749|    490|                  return obj(static_cast<decltype(args)>(args)...);
  750|    490|              }
  751|    490|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    490|    {
  684|    490|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    490|            return static_cast<T*>(s.m_cp);
  686|    490|        }
  687|    490|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    490|            return static_cast<T*>(s.m_p);
  689|    490|        }
  690|    490|        else {
  691|    490|            return reinterpret_cast<T*>(s.m_fp);
  692|    490|        }
  693|    490|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    490|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     40|        {
  662|     40|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    118|    {
 5048|    118|        auto it = read_source_impl(range, {specs});
 5049|    118|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 100]
  |  |  ------------------
  ------------------
 5050|     18|            return unexpected(it.error());
 5051|     18|        }
 5052|       |
 5053|    100|        return read_string_impl(range, *it, value);
 5054|    118|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|    354|    {
 5153|    354|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    354|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    354|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    354|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    354|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 264, False: 90]
  ------------------
 5163|    264|            const auto cb = [&](char32_t cp) {
 5164|    264|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    264|            };
 5166|       |
 5167|    264|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 96, False: 168]
  ------------------
 5168|     96|                auto it = read_until_code_point(range, cb);
 5169|     96|                return check_nonempty(it, range);
 5170|     96|            }
 5171|    168|            auto it = read_while_code_point(range, cb);
 5172|    168|            return check_nonempty(it, range);
 5173|    264|        }
 5174|       |
 5175|     90|        const auto cb = [&](SourceCharT ch) {
 5176|     90|            return cb_wrapper.on_ascii_only(ch);
 5177|     90|        };
 5178|       |
 5179|     90|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 36, False: 54]
  ------------------
 5180|     36|            auto it = read_until_code_unit(range, cb);
 5181|     36|            return check_nonempty(it, range);
 5182|     36|        }
 5183|     54|        auto it = read_while_code_unit(range, cb);
 5184|     54|        return check_nonempty(it, range);
 5185|     90|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|    264|    {
  754|    264|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|  3.79k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.79k|              cvref<T> obj = *get<T>(fn);
  745|  3.79k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.79k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.79k|              }
  748|  3.79k|              else {
  749|  3.79k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.79k|              }
  751|  3.79k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  3.79k|    {
  684|  3.79k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.79k|            return static_cast<T*>(s.m_cp);
  686|  3.79k|        }
  687|  3.79k|        else if constexpr (std::is_object_v<T>) {
  688|  3.79k|            return static_cast<T*>(s.m_p);
  689|  3.79k|        }
  690|  3.79k|        else {
  691|  3.79k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.79k|        }
  693|  3.79k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  3.79k|            const auto cb = [&](char32_t cp) {
 5164|  3.79k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  3.79k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|    264|        {
  667|    264|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|    354|    {
 5191|    354|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 54, False: 300]
  ------------------
 5192|     54|            return unexpected_scan_error(
 5193|     54|                scan_error::invalid_scanned_value,
 5194|     54|                "No characters matched in [character set]");
 5195|     54|        }
 5196|       |
 5197|    300|        return it;
 5198|    354|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|     90|    {
  754|     90|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  1.23k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.23k|              cvref<T> obj = *get<T>(fn);
  745|  1.23k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.23k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.23k|              }
  748|  1.23k|              else {
  749|  1.23k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.23k|              }
  751|  1.23k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  1.23k|    {
  684|  1.23k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.23k|            return static_cast<T*>(s.m_cp);
  686|  1.23k|        }
  687|  1.23k|        else if constexpr (std::is_object_v<T>) {
  688|  1.23k|            return static_cast<T*>(s.m_p);
  689|  1.23k|        }
  690|  1.23k|        else {
  691|  1.23k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.23k|        }
  693|  1.23k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  1.23k|        const auto cb = [&](SourceCharT ch) {
 5176|  1.23k|            return cb_wrapper.on_ascii_only(ch);
 5177|  1.23k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|     90|        {
  667|     90|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    442|{
 4752|    442|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    442|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    442|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 130, False: 312]
  ------------------
 4756|    130|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    130|                                     "Invalid encoding in scanned string");
 4758|    130|    }
 4759|    312|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    312|    static_cast<    \
  |  |  929|    312|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    312|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 312]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    312|    return SCN_MOVE(result);
  ------------------
  |  |  928|    312|    static_cast<    \
  |  |  929|    312|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    312|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  1.74k|    {
 4891|  1.74k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  1.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.40k, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.40k|    }                                                  \
  |  |  |  | 3671|  1.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    342|        return read_string_impl(range, it, value);
 4893|  1.74k|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|  5.23k|    {
 4913|  5.23k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  10.4k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  5.23k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  5.23k|            return unexpected_scan_error(
 4916|  5.23k|                scan_error::invalid_scanned_value,
 4917|  5.23k|                "Regex backend doesn't support wide strings as input");
 4918|  5.23k|        }
 4919|  5.23k|        else {
 4920|  5.23k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 5.23k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  5.23k|            auto input = get_as_contiguous(range);
 4928|  5.23k|            SCN_TRY(it,
  ------------------
  |  | 3672|  5.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.21k, False: 1.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.21k|    }                                                  \
  |  |  |  | 3671|  5.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  1.02k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  1.02k|            return ranges::next(range.begin(),
 4931|  1.02k|                                ranges::distance(input.begin(), it));
 4932|  5.23k|        }
 4933|  5.23k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  5.23k|{
  959|  5.23k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  5.23k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  5.23k|        return true;
  962|  5.23k|    }
  963|  5.23k|    else if constexpr (std::is_same_v<
  964|  5.23k|                           ranges::const_iterator_t<Range>,
  965|  5.23k|                           typename detail::basic_scan_buffer<
  966|  5.23k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  5.23k|        auto beg = r.begin();
  968|  5.23k|        if (!beg.stores_parent()) {
  969|  5.23k|            return true;
  970|  5.23k|        }
  971|  5.23k|        return beg.parent()->is_contiguous();
  972|  5.23k|    }
  973|  5.23k|    else {
  974|  5.23k|        return false;
  975|  5.23k|    }
  976|  5.23k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  5.23k|{
 1065|  5.23k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  5.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  5.23k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  5.23k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  5.23k|        return r;
 1070|  5.23k|    }
 1071|  5.23k|    else if constexpr (std::is_same_v<
 1072|  5.23k|                           ranges::const_iterator_t<Range>,
 1073|  5.23k|                           typename detail::basic_scan_buffer<
 1074|  5.23k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  5.23k|        if constexpr (ranges::common_range<Range>) {
 1076|  5.23k|            return detail::make_string_view_from_pointers(
 1077|  5.23k|                r.begin().to_contiguous_segment_iterator(),
 1078|  5.23k|                r.end().to_contiguous_segment_iterator());
 1079|  5.23k|        }
 1080|  5.23k|        else {
 1081|  5.23k|            return r.begin().contiguous_segment();
 1082|  5.23k|        }
 1083|  5.23k|    }
 1084|  5.23k|    else {
 1085|  5.23k|        SCN_EXPECT(false);
 1086|  5.23k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  5.23k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  5.23k|    }
 1090|  5.23k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  5.23k|{
  981|  5.23k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  5.23k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  5.23k|        return true;
  984|  5.23k|    }
  985|  5.23k|    else if constexpr (std::is_same_v<
  986|  5.23k|                           ranges::const_iterator_t<Range>,
  987|  5.23k|                           typename detail::basic_scan_buffer<
  988|  5.23k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  5.23k|        auto beg = r.begin();
  990|  5.23k|        if (beg.contiguous_segment().empty()) {
  991|  5.23k|            return false;
  992|  5.23k|        }
  993|  5.23k|        if constexpr (ranges::common_range<Range>) {
  994|  5.23k|            return beg.contiguous_segment().end() ==
  995|  5.23k|                   ranges::end(r).contiguous_segment().end();
  996|  5.23k|        }
  997|  5.23k|        else {
  998|  5.23k|            if (beg.stores_parent()) {
  999|  5.23k|                return beg.contiguous_segment().end() ==
 1000|  5.23k|                       beg.parent()->current_view().end();
 1001|  5.23k|            }
 1002|  5.23k|            return true;
 1003|  5.23k|        }
 1004|  5.23k|    }
 1005|  5.23k|    else {
 1006|  5.23k|        return false;
 1007|  5.23k|    }
 1008|  5.23k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  5.23k|{
 4346|  5.23k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  5.23k|                  ranges::borrowed_range<Input> &&
 4348|  5.23k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  5.23k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  5.23k|    std::basic_regex<CharT> re{};
 4352|  5.23k|    try {
 4353|  5.23k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  5.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  5.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  5.23k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  5.23k|                                     re_flags | std::regex_constants::nosubs};
 4356|  5.23k|    }
 4357|  5.23k|    catch (const std::regex_error& err) {
 4358|  2.10k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  2.10k|                                     "Invalid regex");
 4360|  2.10k|    }
 4361|       |
 4362|  3.13k|    std::match_results<const CharT*> matches{};
 4363|  3.13k|    try {
 4364|  3.13k|        bool found = std::regex_search(input.data(),
 4365|  3.13k|                                       input.data() + input.size(), matches, re,
 4366|  3.13k|                                       std::regex_constants::match_continuous);
 4367|  3.13k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 2.10k, False: 1.02k]
  |  Branch (4367:23): [True: 0, False: 1.02k]
  ------------------
 4368|  2.10k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  2.10k|                                         "Regular expression didn't match");
 4370|  2.10k|        }
 4371|  3.13k|    }
 4372|  3.13k|    catch (const std::regex_error& err) {
 4373|      6|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|      6|                                     "Regex matching failed with an error");
 4375|      6|    }
 4376|       |
 4377|  1.02k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  3.13k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  2.98k|{
 5809|  2.98k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  2.98k|        return reader_impl_for_bool<CharT>{};
 5811|  2.98k|    }
 5812|  2.98k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  2.98k|        return reader_impl_for_char<CharT>{};
 5814|  2.98k|    }
 5815|  2.98k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  2.98k|        return reader_impl_for_wchar<CharT>{};
 5817|  2.98k|    }
 5818|  2.98k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  2.98k|        return reader_impl_for_code_point<CharT>{};
 5820|  2.98k|    }
 5821|  2.98k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  2.98k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  2.98k|        return reader_impl_for_string<CharT>{};
 5824|  2.98k|    }
 5825|  2.98k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  2.98k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  2.98k|        return reader_impl_for_string<CharT>{};
 5828|  2.98k|    }
 5829|  2.98k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  2.98k|                       std::is_same_v<T, wregex_matches>) {
 5831|  2.98k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  2.98k|    }
 5833|  2.98k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  2.98k|        return reader_impl_for_voidptr<CharT>{};
 5835|  2.98k|    }
 5836|  2.98k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  2.98k|        return reader_impl_for_float<CharT>{};
 5838|  2.98k|    }
 5839|  2.98k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  2.98k|                       !std::is_same_v<T, wchar_t> &&
 5841|  2.98k|                       !std::is_same_v<T, char32_t> &&
 5842|  2.98k|                       !std::is_same_v<T, bool>) {
 5843|  2.98k|        return reader_impl_for_int<CharT>{};
 5844|  2.98k|    }
 5845|  2.98k|    else {
 5846|  2.98k|        return reader_impl_for_monostate<CharT>{};
 5847|  2.98k|    }
 5848|  2.98k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    118|{
 2993|    118|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    118|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 118, False: 0]
  ------------------
 2995|    118|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    118|    static_cast<    \
  |  |  929|    118|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    118|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    118|    }
 3001|    118|    else {
 3002|    118|        return transcode_impl(source.view(), dest);
 3003|    118|    }
 3004|       |
 3005|    118|    return {};
 3006|    118|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    184|    {
 5277|    184|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    184|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    184|        return read_impl(range, specs, value);
 5279|    184|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    184|    {
 5295|    184|        SCN_CLANG_PUSH
 5296|    184|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    184|        switch (m_type) {
 5299|     88|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 88, False: 96]
  ------------------
 5300|     88|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 164]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     16|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 16, False: 168]
  ------------------
 5307|     16|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|     54|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 54, False: 130]
  ------------------
 5310|     54|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|     54|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 182]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 180]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 184]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    184|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    184|        }
 5331|       |
 5332|    184|        SCN_CLANG_POP
 5333|    184|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|     88|    {
 4820|     88|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|     88|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    124|{
 4752|    124|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    124|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    124|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 52, False: 72]
  ------------------
 4756|     52|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|     52|                                     "Invalid encoding in scanned string");
 4758|     52|    }
 4759|     72|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     72|    static_cast<    \
  |  |  929|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     72|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     72|    return SCN_MOVE(result);
  ------------------
  |  |  928|     72|    static_cast<    \
  |  |  929|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     72|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     20|    {
 4841|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 20, False: 0]
  ------------------
 4842|     20|            return read_string_impl(
 4843|     20|                range,
 4844|     20|                read_until_code_unit(
 4845|     20|                    range,
 4846|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     20|                        SourceCharT ch) { return ch == until; }),
 4848|     20|                value);
 4849|     20|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|    350|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    350|                  obj(static_cast<decltype(args)>(args)...);
  747|    350|              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|    350|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    350|            return static_cast<T*>(s.m_cp);
  686|    350|        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    350|            return static_cast<T*>(s.m_p);
  689|    350|        }
  690|    350|        else {
  691|    350|            return reinterpret_cast<T*>(s.m_fp);
  692|    350|        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     16|    {
 4947|     16|        return read_impl(
 4948|     16|            range,
 4949|     16|            [&](const auto& rng) {
 4950|     16|                return read_string_impl(rng, read_all(rng), value);
 4951|     16|            },
 4952|     16|            detail::priority_tag<1>{});
 4953|     16|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     16|    {
 4974|     16|        return read_cb(range);
 4975|     16|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     16|            [&](const auto& rng) {
 4950|     16|                return read_string_impl(rng, read_all(rng), value);
 4951|     16|            },
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|     54|    {
 5048|     54|        auto it = read_source_impl(range, {specs});
 5049|     54|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     54|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 46]
  |  |  ------------------
  ------------------
 5050|      8|            return unexpected(it.error());
 5051|      8|        }
 5052|       |
 5053|     46|        return read_string_impl(range, *it, value);
 5054|     54|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|     46|{
 4752|     46|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|     46|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|     46|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 46]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|     46|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     46|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     46|    return SCN_MOVE(result);
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     46|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|      6|    {
 4891|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|      6|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  2.22k|    {
 5277|  2.22k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.22k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  2.22k|        return read_impl(range, specs, value);
 5279|  2.22k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  2.22k|    {
 5295|  2.22k|        SCN_CLANG_PUSH
 5296|  2.22k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  2.22k|        switch (m_type) {
 5299|    320|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 320, False: 1.90k]
  ------------------
 5300|    320|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     40|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 40, False: 2.18k]
  ------------------
 5303|     40|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     40|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 2.22k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    118|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 118, False: 2.10k]
  ------------------
 5310|    118|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    118|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  1.69k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 1.69k, False: 534]
  ------------------
 5315|  1.69k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  1.69k|                    range, specs.charset_string<SourceCharT>(),
 5317|  1.69k|                    specs.regexp_flags, value);
 5318|       |
 5319|     56|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 56, False: 2.16k]
  ------------------
 5320|     56|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     56|                    range,
 5322|     56|                    get_unescaped_regex_pattern(
 5323|     56|                        specs.charset_string<SourceCharT>()),
 5324|     56|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 2.22k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  2.22k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  2.22k|        }
 5331|       |
 5332|  2.22k|        SCN_CLANG_POP
 5333|  2.22k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    814|    {
 4820|    814|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    814|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    854|{
 4752|    854|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    854|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    854|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 282, False: 572]
  ------------------
 4756|    282|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    282|                                     "Invalid encoding in scanned string");
 4758|    282|    }
 4759|    572|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    572|    static_cast<    \
  |  |  929|    572|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    572|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 572]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    572|    return SCN_MOVE(result);
  ------------------
  |  |  928|    572|    static_cast<    \
  |  |  929|    572|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    572|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    884|{
 3012|    884|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    884|        dest.assign(source.view());
 3014|    884|    }
 3015|    884|    else {
 3016|    884|        return transcode_impl(source.view(), dest);
 3017|    884|    }
 3018|       |
 3019|    884|    return {};
 3020|    884|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     40|    {
 4841|     40|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 40, False: 0]
  ------------------
 4842|     40|            return read_string_impl(
 4843|     40|                range,
 4844|     40|                read_until_code_unit(
 4845|     40|                    range,
 4846|     40|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     40|                        SourceCharT ch) { return ch == until; }),
 4848|     40|                value);
 4849|     40|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     40|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     40|    {
  754|     40|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    490|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    490|              cvref<T> obj = *get<T>(fn);
  745|    490|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    490|                  obj(static_cast<decltype(args)>(args)...);
  747|    490|              }
  748|    490|              else {
  749|    490|                  return obj(static_cast<decltype(args)>(args)...);
  750|    490|              }
  751|    490|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    490|    {
  684|    490|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    490|            return static_cast<T*>(s.m_cp);
  686|    490|        }
  687|    490|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    490|            return static_cast<T*>(s.m_p);
  689|    490|        }
  690|    490|        else {
  691|    490|            return reinterpret_cast<T*>(s.m_fp);
  692|    490|        }
  693|    490|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    490|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     40|        {
  662|     40|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    118|    {
 5048|    118|        auto it = read_source_impl(range, {specs});
 5049|    118|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 100]
  |  |  ------------------
  ------------------
 5050|     18|            return unexpected(it.error());
 5051|     18|        }
 5052|       |
 5053|    100|        return read_string_impl(range, *it, value);
 5054|    118|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    442|{
 4752|    442|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    442|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    442|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 130, False: 312]
  ------------------
 4756|    130|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    130|                                     "Invalid encoding in scanned string");
 4758|    130|    }
 4759|    312|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    312|    static_cast<    \
  |  |  929|    312|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    312|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 312]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    312|    return SCN_MOVE(result);
  ------------------
  |  |  928|    312|    static_cast<    \
  |  |  929|    312|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    312|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  1.74k|    {
 4891|  1.74k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  1.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.40k, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.40k|    }                                                  \
  |  |  |  | 3671|  1.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    342|        return read_string_impl(range, it, value);
 4893|  1.74k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  2.98k|{
 5809|  2.98k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  2.98k|        return reader_impl_for_bool<CharT>{};
 5811|  2.98k|    }
 5812|  2.98k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  2.98k|        return reader_impl_for_char<CharT>{};
 5814|  2.98k|    }
 5815|  2.98k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  2.98k|        return reader_impl_for_wchar<CharT>{};
 5817|  2.98k|    }
 5818|  2.98k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  2.98k|        return reader_impl_for_code_point<CharT>{};
 5820|  2.98k|    }
 5821|  2.98k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  2.98k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  2.98k|        return reader_impl_for_string<CharT>{};
 5824|  2.98k|    }
 5825|  2.98k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  2.98k|                       std::is_same_v<T, std::wstring>) {
 5827|  2.98k|        return reader_impl_for_string<CharT>{};
 5828|  2.98k|    }
 5829|  2.98k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  2.98k|                       std::is_same_v<T, wregex_matches>) {
 5831|  2.98k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  2.98k|    }
 5833|  2.98k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  2.98k|        return reader_impl_for_voidptr<CharT>{};
 5835|  2.98k|    }
 5836|  2.98k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  2.98k|        return reader_impl_for_float<CharT>{};
 5838|  2.98k|    }
 5839|  2.98k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  2.98k|                       !std::is_same_v<T, wchar_t> &&
 5841|  2.98k|                       !std::is_same_v<T, char32_t> &&
 5842|  2.98k|                       !std::is_same_v<T, bool>) {
 5843|  2.98k|        return reader_impl_for_int<CharT>{};
 5844|  2.98k|    }
 5845|  2.98k|    else {
 5846|  2.98k|        return reader_impl_for_monostate<CharT>{};
 5847|  2.98k|    }
 5848|  2.98k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    184|    {
 5277|    184|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    184|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    184|        return read_impl(range, specs, value);
 5279|    184|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    184|    {
 5295|    184|        SCN_CLANG_PUSH
 5296|    184|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    184|        switch (m_type) {
 5299|     88|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 88, False: 96]
  ------------------
 5300|     88|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 20, False: 164]
  ------------------
 5303|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     20|                                                                   value);
 5305|       |
 5306|     16|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 16, False: 168]
  ------------------
 5307|     16|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|     54|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 54, False: 130]
  ------------------
 5310|     54|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|     54|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 182]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 4, False: 180]
  ------------------
 5320|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      4|                    range,
 5322|      4|                    get_unescaped_regex_pattern(
 5323|      4|                        specs.charset_string<SourceCharT>()),
 5324|      4|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 184]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    184|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    184|        }
 5331|       |
 5332|    184|        SCN_CLANG_POP
 5333|    184|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|     88|    {
 4827|     88|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|     88|                                     value);
 4829|     88|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    124|{
 4773|    124|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    124|    auto src = [&]() {
 4776|    124|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    124|            return make_contiguous_buffer(
 4778|    124|                ranges::subrange{range.begin().base(), result.base()});
 4779|    124|        }
 4780|    124|        else {
 4781|    124|            return make_contiguous_buffer(
 4782|    124|                ranges::subrange{range.begin(), result});
 4783|    124|        }
 4784|    124|    }();
 4785|    124|    using src_type = decltype(src);
 4786|       |
 4787|    124|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    124|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    124|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    124|                                     "Cannot read a string_view from "
 4796|    124|                                     "this source range (would require "
 4797|    124|                                     "transcoding)");
 4798|    124|    }
 4799|    124|    else {
 4800|    124|        const auto view = src.view();
 4801|    124|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    124|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 52, False: 72]
  ------------------
 4804|     52|            return unexpected_scan_error(
 4805|     52|                scan_error::invalid_scanned_value,
 4806|     52|                "Invalid encoding in scanned string_view");
 4807|     52|        }
 4808|       |
 4809|     72|        return SCN_MOVE(result);
  ------------------
  |  |  928|     72|    static_cast<    \
  |  |  929|     72|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    124|    }
 4811|    124|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    124|    auto src = [&]() {
 4776|    124|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    124|            return make_contiguous_buffer(
 4778|    124|                ranges::subrange{range.begin().base(), result.base()});
 4779|    124|        }
 4780|    124|        else {
 4781|    124|            return make_contiguous_buffer(
 4782|    124|                ranges::subrange{range.begin(), result});
 4783|    124|        }
 4784|    124|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     20|    {
 4863|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 20, False: 0]
  ------------------
 4864|     20|            return read_string_view_impl(
 4865|     20|                range,
 4866|     20|                read_until_code_unit(
 4867|     20|                    range,
 4868|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     20|                        SourceCharT ch) { return ch == until; }),
 4870|     20|                value);
 4871|     20|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_:
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|    350|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    350|                  obj(static_cast<decltype(args)>(args)...);
  747|    350|              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|    350|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    350|            return static_cast<T*>(s.m_cp);
  686|    350|        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    350|            return static_cast<T*>(s.m_p);
  689|    350|        }
  690|    350|        else {
  691|    350|            return reinterpret_cast<T*>(s.m_fp);
  692|    350|        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4869|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     16|    {
 4959|     16|        return read_impl(
 4960|     16|            range,
 4961|     16|            [&](const auto& rng) {
 4962|     16|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     16|            },
 4964|     16|            detail::priority_tag<1>{});
 4965|     16|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     16|    {
 4974|     16|        return read_cb(range);
 4975|     16|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     16|            [&](const auto& rng) {
 4962|     16|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     16|            },
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5061|     54|    {
 5062|     54|        auto it = read_source_impl(range, {specs});
 5063|     54|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     54|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 46]
  |  |  ------------------
  ------------------
 5064|      8|            return unexpected(it.error());
 5065|      8|        }
 5066|       |
 5067|     46|        return read_string_view_impl(range, *it, value);
 5068|     54|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4772|     46|{
 4773|     46|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|     46|    auto src = [&]() {
 4776|     46|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|     46|            return make_contiguous_buffer(
 4778|     46|                ranges::subrange{range.begin().base(), result.base()});
 4779|     46|        }
 4780|     46|        else {
 4781|     46|            return make_contiguous_buffer(
 4782|     46|                ranges::subrange{range.begin(), result});
 4783|     46|        }
 4784|     46|    }();
 4785|     46|    using src_type = decltype(src);
 4786|       |
 4787|     46|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|     46|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|     46|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|     46|                                     "Cannot read a string_view from "
 4796|     46|                                     "this source range (would require "
 4797|     46|                                     "transcoding)");
 4798|     46|    }
 4799|     46|    else {
 4800|     46|        const auto view = src.view();
 4801|     46|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|     46|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 46]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|     46|        return SCN_MOVE(result);
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|     46|    }
 4811|     46|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4775|     46|    auto src = [&]() {
 4776|     46|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|     46|            return make_contiguous_buffer(
 4778|     46|                ranges::subrange{range.begin().base(), result.base()});
 4779|     46|        }
 4780|     46|        else {
 4781|     46|            return make_contiguous_buffer(
 4782|     46|                ranges::subrange{range.begin(), result});
 4783|     46|        }
 4784|     46|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|      6|    {
 4902|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|      6|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  2.22k|    {
 5277|  2.22k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.22k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  2.22k|        return read_impl(range, specs, value);
 5279|  2.22k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  2.22k|    {
 5295|  2.22k|        SCN_CLANG_PUSH
 5296|  2.22k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  2.22k|        switch (m_type) {
 5299|    320|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 320, False: 1.90k]
  ------------------
 5300|    320|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     40|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 40, False: 2.18k]
  ------------------
 5303|     40|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     40|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 2.22k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    118|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 118, False: 2.10k]
  ------------------
 5310|    118|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    118|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  1.69k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 1.69k, False: 534]
  ------------------
 5315|  1.69k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  1.69k|                    range, specs.charset_string<SourceCharT>(),
 5317|  1.69k|                    specs.regexp_flags, value);
 5318|       |
 5319|     56|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 56, False: 2.16k]
  ------------------
 5320|     56|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     56|                    range,
 5322|     56|                    get_unescaped_regex_pattern(
 5323|     56|                        specs.charset_string<SourceCharT>()),
 5324|     56|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 2.22k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  2.22k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  2.22k|        }
 5331|       |
 5332|  2.22k|        SCN_CLANG_POP
 5333|  2.22k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    814|    {
 4827|    814|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    814|                                     value);
 4829|    814|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|    854|{
 4773|    854|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    854|    auto src = [&]() {
 4776|    854|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    854|            return make_contiguous_buffer(
 4778|    854|                ranges::subrange{range.begin().base(), result.base()});
 4779|    854|        }
 4780|    854|        else {
 4781|    854|            return make_contiguous_buffer(
 4782|    854|                ranges::subrange{range.begin(), result});
 4783|    854|        }
 4784|    854|    }();
 4785|    854|    using src_type = decltype(src);
 4786|       |
 4787|    854|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    854|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    854|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    854|                                     "Cannot read a string_view from "
 4796|    854|                                     "this source range (would require "
 4797|    854|                                     "transcoding)");
 4798|    854|    }
 4799|    854|    else {
 4800|    854|        const auto view = src.view();
 4801|    854|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    854|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 282, False: 572]
  ------------------
 4804|    282|            return unexpected_scan_error(
 4805|    282|                scan_error::invalid_scanned_value,
 4806|    282|                "Invalid encoding in scanned string_view");
 4807|    282|        }
 4808|       |
 4809|    572|        return SCN_MOVE(result);
  ------------------
  |  |  928|    572|    static_cast<    \
  |  |  929|    572|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    854|    }
 4811|    854|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|    854|    auto src = [&]() {
 4776|    854|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    854|            return make_contiguous_buffer(
 4778|    854|                ranges::subrange{range.begin().base(), result.base()});
 4779|    854|        }
 4780|    854|        else {
 4781|    854|            return make_contiguous_buffer(
 4782|    854|                ranges::subrange{range.begin(), result});
 4783|    854|        }
 4784|    854|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     40|    {
 4863|     40|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 40, False: 0]
  ------------------
 4864|     40|            return read_string_view_impl(
 4865|     40|                range,
 4866|     40|                read_until_code_unit(
 4867|     40|                    range,
 4868|     40|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     40|                        SourceCharT ch) { return ch == until; }),
 4870|     40|                value);
 4871|     40|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     40|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_:
  753|     40|    {
  754|     40|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES14_w:
  743|    490|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    490|              cvref<T> obj = *get<T>(fn);
  745|    490|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    490|                  obj(static_cast<decltype(args)>(args)...);
  747|    490|              }
  748|    490|              else {
  749|    490|                  return obj(static_cast<decltype(args)>(args)...);
  750|    490|              }
  751|    490|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    490|    {
  684|    490|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    490|            return static_cast<T*>(s.m_cp);
  686|    490|        }
  687|    490|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    490|            return static_cast<T*>(s.m_p);
  689|    490|        }
  690|    490|        else {
  691|    490|            return reinterpret_cast<T*>(s.m_fp);
  692|    490|        }
  693|    490|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4869|    490|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     40|        {
  662|     40|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    118|    {
 5062|    118|        auto it = read_source_impl(range, {specs});
 5063|    118|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 100]
  |  |  ------------------
  ------------------
 5064|     18|            return unexpected(it.error());
 5065|     18|        }
 5066|       |
 5067|    100|        return read_string_view_impl(range, *it, value);
 5068|    118|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|    442|{
 4773|    442|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    442|    auto src = [&]() {
 4776|    442|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    442|            return make_contiguous_buffer(
 4778|    442|                ranges::subrange{range.begin().base(), result.base()});
 4779|    442|        }
 4780|    442|        else {
 4781|    442|            return make_contiguous_buffer(
 4782|    442|                ranges::subrange{range.begin(), result});
 4783|    442|        }
 4784|    442|    }();
 4785|    442|    using src_type = decltype(src);
 4786|       |
 4787|    442|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    442|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    442|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    442|                                     "Cannot read a string_view from "
 4796|    442|                                     "this source range (would require "
 4797|    442|                                     "transcoding)");
 4798|    442|    }
 4799|    442|    else {
 4800|    442|        const auto view = src.view();
 4801|    442|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    442|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 130, False: 312]
  ------------------
 4804|    130|            return unexpected_scan_error(
 4805|    130|                scan_error::invalid_scanned_value,
 4806|    130|                "Invalid encoding in scanned string_view");
 4807|    130|        }
 4808|       |
 4809|    312|        return SCN_MOVE(result);
  ------------------
  |  |  928|    312|    static_cast<    \
  |  |  929|    312|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    442|    }
 4811|    442|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|    442|    auto src = [&]() {
 4776|    442|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    442|            return make_contiguous_buffer(
 4778|    442|                ranges::subrange{range.begin().base(), result.base()});
 4779|    442|        }
 4780|    442|        else {
 4781|    442|            return make_contiguous_buffer(
 4782|    442|                ranges::subrange{range.begin(), result});
 4783|    442|        }
 4784|    442|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  1.74k|    {
 4902|  1.74k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  1.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.40k, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.40k|    }                                                  \
  |  |  |  | 3671|  1.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    342|        return read_string_view_impl(range, it, value);
 4904|  1.74k|    }
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  6.04k|{
 1683|  6.04k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  6.04k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  6.04k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  6.04k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  6.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  6.04k|    }
 1688|  6.04k|    else {
 1689|  6.04k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  6.04k|    }
 1691|  6.04k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  6.04k|    {
 1490|  6.04k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|    886|    {
 4100|    886|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 886]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    886|        return std::copysign(value, T{1.0});
 4104|    886|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|    820|    {
 4100|    820|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 820]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    820|        return std::copysign(value, T{1.0});
 4104|    820|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  5.63k|{
 5795|  5.63k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.63k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  5.63k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 626, False: 5.00k]
  ------------------
 5800|    626|        return range.begin();
 5801|    626|    }
 5802|       |
 5803|  5.00k|    return skip_classic_whitespace(range);
 5804|  5.63k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    626|    {
 3528|    626|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    626|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    626|        return read_default_with_base(range, value, 10);
 3530|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    626|    {
 3528|    626|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    626|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    626|        return read_default_with_base(range, value, 10);
 3530|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5747|  1.12k|    {
 5748|  1.12k|        return true;
 5749|  1.12k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    876|    {
 5765|    876|        detail::format_specs specs{};
 5766|    876|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    876|        std::uintptr_t intvalue{};
 5769|    876|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    876|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    876|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    876|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 876, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    876|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    876|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    876|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    876|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    876|    }                                                  \
  |  |  |  | 3671|    876|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    876|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.39k|    {
 3035|  1.39k|        return true;
 3036|  1.39k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    626|    {
 5504|    626|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    626|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    626|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    626|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5348|  1.12k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|  1.01k|    {
 5355|  1.01k|        scan_error err{scan_error::invalid_scanned_value,
 5356|  1.01k|                       "Failed to read boolean"};
 5357|       |
 5358|  1.01k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 894, False: 116]
  ------------------
 5359|    894|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 894]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    894|            else {
 5363|    894|                err = r.error();
 5364|    894|            }
 5365|    894|        }
 5366|       |
 5367|  1.01k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 988, False: 22]
  ------------------
 5368|    988|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 988]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    988|            else {
 5372|    988|                err = r.error();
 5373|    988|            }
 5374|    988|        }
 5375|       |
 5376|  1.01k|        return unexpected(err);
 5377|  1.01k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    910|    {
 5384|    910|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 910]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    910|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 910]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    910|        return unexpected_scan_error(
 5394|    910|            scan_error::invalid_scanned_value,
 5395|    910|            "Failed to read numeric boolean value: No match");
 5396|    910|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|    988|    {
 5402|    988|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 988]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    988|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 988]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    988|        return unexpected_scan_error(
 5412|    988|            scan_error::invalid_scanned_value,
 5413|    988|            "Failed to read textual boolean value: No match");
 5414|    988|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  1.97k|{
 2194|  1.97k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 102, False: 1.87k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    102|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    102|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    102|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    102|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    102|    }                                                  \
  |  |  |  | 3671|  1.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.87k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.87k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.87k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.87k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.87k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.87k, False: 0]
  |  |  ------------------
  ------------------
 2201|  1.87k|            return unexpected(parse_error::error);
 2202|  1.87k|        }
 2203|      0|        return it;
 2204|  1.87k|    }
 2205|  1.87k|    else {
 2206|  1.87k|        auto range_it = range.begin();
 2207|  1.87k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  1.87k|            if (SCN_UNLIKELY(*range_it !=
 2209|  1.87k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.87k|                return unexpected(parse_error::error);
 2211|  1.87k|            }
 2212|  1.87k|        }
 2213|  1.87k|        return it;
 2214|  1.87k|    }
 2215|  1.87k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|    626|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.12k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    626|    {
 4152|    626|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    626|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    626|        float_reader<CharT> rd{};
 4155|    626|        return read_impl<Range>(
 4156|    626|            range, rd,
 4157|    626|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    626|                return r.read_source(SCN_FWD(args)...);
 4159|    626|            },
 4160|    626|            value);
 4161|    626|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    626|    {
  754|    626|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    626|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    626|              cvref<T> obj = *get<T>(fn);
  745|    626|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    626|                  obj(static_cast<decltype(args)>(args)...);
  747|    626|              }
  748|    626|              else {
  749|    626|                  return obj(static_cast<decltype(args)>(args)...);
  750|    626|              }
  751|    626|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    626|    {
  684|    626|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    626|            return static_cast<T*>(s.m_cp);
  686|    626|        }
  687|    626|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    626|            return static_cast<T*>(s.m_p);
  689|    626|        }
  690|    626|        else {
  691|    626|            return reinterpret_cast<T*>(s.m_fp);
  692|    626|        }
  693|    626|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    626|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    626|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    626|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|    626|        {
  662|    626|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    626|    {
 5266|    626|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    626|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    626|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    626|    {
 5266|    626|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    626|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    626|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    626|    {
 5871|    626|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    626|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    626|                          basic_contiguous_scan_context<char_type>>) {
 5875|    626|            auto rd = make_reader<T, char_type>();
 5876|    626|            return impl(rd, range, value);
 5877|    626|        }
 5878|    626|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    626|            auto rd = make_reader<T, char_type>();
 5880|    626|            if (!is_segment_contiguous(range)) {
 5881|    626|                return impl(rd, range, value);
 5882|    626|            }
 5883|    626|            auto crange = get_as_contiguous(range);
 5884|    626|            SCN_TRY(it, impl(rd, crange, value));
 5885|    626|            return ranges::next(range.begin(),
 5886|    626|                                ranges::distance(crange.begin(), it));
 5887|    626|        }
 5888|    626|        else {
 5889|    626|            SCN_EXPECT(false);
 5890|    626|            SCN_UNREACHABLE;
 5891|    626|        }
 5892|    626|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    626|    {
 5863|    626|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    626|                        .transform_error(make_eof_scan_error));
 5865|    626|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    626|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    626|    {
 5266|    626|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    626|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    626|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    626|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  84.6k|    {
 2879|  84.6k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   181k|    {
 2883|   181k|        return m_current;
 2884|   181k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   132k|    {
 2888|   132k|        return m_range.end();
 2889|   132k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|  36.0k|{
 1221|       |    // TODO: optimize
 1222|  36.0k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|  36.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|  36.0k|    auto res = get_next_code_point(str);
 1224|  36.0k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|  36.0k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  39.3k|    {
 2903|  39.3k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  39.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  39.3k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  39.3k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 39.3k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  39.3k|        }
 2909|  39.3k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  39.3k|    static_cast<    \
  |  |  929|  39.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  39.3k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  56.3k|    {
 2893|  56.3k|        return ranges::subrange{begin(), end()};
 2894|  56.3k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  6.04k|{
 2117|  6.04k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  6.04k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  6.04k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  6.04k|        auto buf = make_contiguous_buffer(range);
 2121|  6.04k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  6.04k|        return ranges::next(range.begin(),
 2123|  6.04k|                            ranges::distance(buf.view().begin(), it));
 2124|  6.04k|    }
 2125|  6.04k|    else {
 2126|  6.04k|        auto it = range.begin();
 2127|       |
 2128|  6.04k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  6.04k|            auto seg = get_contiguous_beginning(range);
 2130|  6.04k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  6.04k|                seg_it != seg.end()) {
 2132|  6.04k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  6.04k|            }
 2134|  6.04k|            ranges::advance(it, seg.size());
 2135|  6.04k|        }
 2136|       |
 2137|  6.04k|        return read_while_code_point(
 2138|  6.04k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  6.04k|    }
 2140|  6.04k|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  3.51k|    {
 6037|  3.51k|        const bool need_skipped_width =
 6038|  3.51k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 46, False: 3.47k]
  |  Branch (6038:33): [True: 3.47k, False: 0]
  ------------------
 6039|  3.51k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  3.51k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 184, False: 3.33k]
  ------------------
 6043|  3.51k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 504, False: 2.83k]
  ------------------
 6044|    688|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    688|                             need_skipped_width);
 6046|    688|        }
 6047|  2.83k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 2.71k, False: 118]
  |  Branch (6047:56): [True: 1.87k, False: 836]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.87k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 1.87k, False: 0]
  ------------------
 6051|  1.87k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  1.87k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  1.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 1.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    174|    }                                                  \
  |  |  |  | 3671|  1.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  1.70k|                                  .transform_error(make_eof_scan_error));
 6054|  1.70k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  1.87k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|    954|        return result_type{rng.begin(), 0};
 6070|  2.83k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    688|{
 5951|    688|    using char_type = detail::char_t<Range>;
 5952|    688|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    688|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 458, False: 230]
  ------------------
 5955|    458|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    458|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    458|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 458]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    458|        auto max_width_view = take_width(range, max_width);
 5972|    458|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    458|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 458, False: 0]
  ------------------
 5975|    458|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    458|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    458|    }
 5979|       |
 5980|    230|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    230|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 230]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|    230|    auto max_width_view = take_width(range, max_width);
 5994|    230|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    230|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 230, False: 0]
  ------------------
 5997|    230|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    230|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    230|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_:
  753|    458|    {
  754|    458|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|    640|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    640|              cvref<T> obj = *get<T>(fn);
  745|    640|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    640|                  obj(static_cast<decltype(args)>(args)...);
  747|    640|              }
  748|    640|              else {
  749|    640|                  return obj(static_cast<decltype(args)>(args)...);
  750|    640|              }
  751|    640|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    640|    {
  684|    640|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    640|            return static_cast<T*>(s.m_cp);
  686|    640|        }
  687|    640|        else if constexpr (std::is_object_v<T>) {
  688|    640|            return static_cast<T*>(s.m_p);
  689|    640|        }
  690|    640|        else {
  691|    640|            return reinterpret_cast<T*>(s.m_fp);
  692|    640|        }
  693|    640|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|    640|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSJ_:
  666|    458|        {
  667|    458|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    458|{
 1976|    458|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    458|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    458|{
 1957|    458|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    458|        return std::find_if(range.begin(), range.end(), pred);
 1959|    458|    }
 1960|    458|    else {
 1961|    458|        auto first = range.begin();
 1962|    694|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 640, False: 54]
  ------------------
 1963|    640|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 404, False: 236]
  ------------------
 1964|    404|                return first;
 1965|    404|            }
 1966|    640|        }
 1967|     54|        return first;
 1968|    458|    }
 1969|    458|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2809|  4.44k|    {
 2810|  4.44k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  4.44k|                                      m_count};
 2812|  4.44k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2716|  17.9k|    {
 2717|  17.9k|        return view;
 2718|  17.9k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  4.44k|    {
 2382|  4.44k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  6.14k|        {
 2781|  6.14k|            return !(y == x);
 2782|  6.14k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  11.7k|        {
 2770|  11.7k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 784, False: 10.9k]
  |  Branch (2770:39): [True: 454, False: 330]
  ------------------
 2771|  11.7k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 11.2k]
  ------------------
 2772|  11.7k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|    784|    {
 2421|    784|        return m_multibyte_left;
 2422|    784|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2815|  9.11k|    {
 2816|  9.11k|        return sentinel<true>{m_base.get().end()};
 2817|  9.11k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  9.11k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  8.09k|    {
 2426|  8.09k|        return *m_current;
 2427|  8.09k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  9.42k|    {
 2435|  9.42k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  9.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  9.42k|        _increment_current();
 2437|  9.42k|        return *this;
 2438|  9.42k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  9.42k|    {
 2668|  9.42k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 5.19k, False: 4.23k]
  ------------------
 2669|  5.19k|            auto cplen = _get_cp_length_at_current();
 2670|  5.19k|            m_multibyte_left = cplen - 1;
 2671|  5.19k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  5.19k|        }
 2673|  4.23k|        else {
 2674|  4.23k|            --m_multibyte_left;
 2675|  4.23k|        }
 2676|       |
 2677|  9.42k|        ++m_current;
 2678|  9.42k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  5.19k|    {
 2639|  5.19k|        return static_cast<difference_type>(
 2640|  5.19k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  5.19k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  5.19k|    {
 2645|  5.19k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  5.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.19k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  5.19k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 2.89k, False: 2.30k]
  ------------------
 2650|  2.89k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  2.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  2.89k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  2.89k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  2.89k|        }
 2654|       |
 2655|  2.30k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  2.30k|                                           cplen);
 2657|  2.30k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.30k]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|  2.30k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  2.30k|        return static_cast<difference_type>(
 2663|  2.30k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  2.30k|    }
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2036|    230|{
 2037|    230|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    230|    auto it = range.begin();
 2040|    230|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 230, False: 0]
  ------------------
 2041|    230|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    230|                                           needle.size());
 2043|    230|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 52, False: 178]
  ------------------
 2044|     52|            return it;
 2045|     52|        }
 2046|    178|        static_assert(
 2047|    178|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    178|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 178, False: 0]
  ------------------
 2049|    178|            return it;
 2050|    178|        }
 2051|      0|        it = *r;
 2052|      0|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1856|    230|{
 1857|    230|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    230|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    230|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    230|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    230|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    230|        if (sz < count) {
 1862|    230|            return unexpected(eof_error::eof);
 1863|    230|        }
 1864|       |
 1865|    230|        return ranges::next(range.begin(), count);
 1866|    230|    }
 1867|    230|    else {
 1868|    230|        auto it = range.begin();
 1869|    230|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 230]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|    924|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 746, False: 178]
  ------------------
 1874|    746|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 52, False: 694]
  ------------------
 1875|     52|                return unexpected(eof_error::eof);
 1876|     52|            }
 1877|    746|        }
 1878|       |
 1879|    178|        return it;
 1880|    230|    }
 1881|    230|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1094|    230|{
 1095|    230|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    230|        return r.size();
 1097|    230|    }
 1098|    230|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    230|                           ranges::const_iterator_t<Range>,
 1100|    230|                           typename detail::basic_scan_buffer<
 1101|    230|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    230|        if constexpr (ranges::common_range<Range>) {
 1103|    230|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    230|        }
 1105|    230|        else {
 1106|    230|            if (r.begin().stores_parent()) {
 1107|    230|                return static_cast<size_t>(
 1108|    230|                    r.begin().parent()->chars_available() -
 1109|    230|                    r.begin().position());
 1110|    230|            }
 1111|    230|            return r.begin().contiguous_segment().size();
 1112|    230|        }
 1113|    230|    }
 1114|    230|    else {
 1115|    230|        return 0;
 1116|    230|    }
 1117|    230|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  1.87k|    {
  268|  1.87k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.87k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.87k|    {
  161|  1.87k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.87k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.87k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.87k|        else {
  169|  1.87k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.87k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.87k|        }
  173|  1.87k|    }
_ZN3scn2v34impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2530|  5.80k|    {
 2531|  5.80k|        return !(a == b);
 2532|  5.80k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2522|  5.80k|    {
 2523|  5.80k|        return a.m_current == b.m_current;
 2524|  5.80k|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  2.56k|    {
 2832|  2.56k|        return take_width_view{r, n};
 2833|  2.56k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2800|  2.56k|    {
 2801|  2.56k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2713|  2.56k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.87k|{
 2951|  1.87k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.87k, False: 0]
  ------------------
 2952|  1.87k|        auto it = read_while_classic_space(range);
 2953|  1.87k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.87k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 1.70k]
  |  |  ------------------
  ------------------
 2955|    174|            return unexpected(e);
 2956|    174|        }
 2957|       |
 2958|  1.70k|        return it;
 2959|  1.87k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.87k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.87k|{
 2117|  1.87k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.87k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.87k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.87k|        auto buf = make_contiguous_buffer(range);
 2121|  1.87k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.87k|        return ranges::next(range.begin(),
 2123|  1.87k|                            ranges::distance(buf.view().begin(), it));
 2124|  1.87k|    }
 2125|  1.87k|    else {
 2126|  1.87k|        auto it = range.begin();
 2127|       |
 2128|  1.87k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.87k|            auto seg = get_contiguous_beginning(range);
 2130|  1.87k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.87k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 1.87k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  1.87k|            ranges::advance(it, seg.size());
 2135|  1.87k|        }
 2136|       |
 2137|  1.87k|        return read_while_code_point(
 2138|  1.87k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.87k|    }
 2140|  1.87k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1038|  1.87k|{
 1039|  1.87k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  1.87k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  1.87k|        return r;
 1042|  1.87k|    }
 1043|  1.87k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  1.87k|                           ranges::const_iterator_t<Range>,
 1045|  1.87k|                           typename detail::basic_scan_buffer<
 1046|  1.87k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  1.87k|        if constexpr (ranges::common_range<Range>) {
 1048|  1.87k|            auto seg = r.begin().contiguous_segment();
 1049|  1.87k|            auto dist =
 1050|  1.87k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  1.87k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  1.87k|        }
 1053|  1.87k|        else {
 1054|  1.87k|            return r.begin().contiguous_segment();
 1055|  1.87k|        }
 1056|  1.87k|    }
 1057|  1.87k|    else {
 1058|  1.87k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.87k|    }
 1060|  1.87k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.87k|{
 2082|  1.87k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.87k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.87k|{
 2061|  1.87k|    auto it = range.begin();
 2062|  3.13k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 2.95k, False: 174]
  ------------------
 2063|  2.95k|        const auto val =
 2064|  2.95k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  2.95k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.95k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.95k, False: 0]
  |  |  ------------------
  ------------------
 2066|  2.95k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  2.95k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  2.95k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.70k, False: 1.25k]
  ------------------
 2069|  1.70k|                return it;
 2070|  1.70k|            }
 2071|  2.95k|        }
 2072|  1.25k|        it = val.iterator;
 2073|  1.25k|    }
 2074|       |
 2075|    174|    return it;
 2076|  1.87k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  2.95k|{
 1899|  2.95k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  2.95k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  2.95k|    auto it = range.begin();
 1903|  2.95k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  2.95k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.95k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  2.95k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 2.23k, False: 724]
  ------------------
 1912|  2.23k|        ++it;
 1913|  2.23k|        return {it, string_type(1, *range.begin())};
 1914|  2.23k|    }
 1915|       |
 1916|    724|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|    724|    return {it, string_type{range.begin(), it}};
 1918|  2.95k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  4.83k|{
  944|  4.83k|    return is_range_eof(r.begin(), r.end());
  945|  4.83k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  4.83k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  4.83k|    {
  937|  4.83k|        return begin == end;
  938|  4.83k|    }
  939|  4.83k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    724|    {
  283|    724|        return n - fn::impl_i_n_s(i, n, bound);
  284|    724|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    724|    {
  227|    724|        constexpr iter_difference_t<I> zero{0};
  228|    724|        iter_difference_t<I> counter{0};
  229|       |
  230|    724|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 724]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    724|        else {
  237|  2.81k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 2.08k, False: 724]
  |  Branch (237:34): [True: 2.08k, False: 0]
  ------------------
  238|  2.08k|                ++i;
  239|  2.08k|                ++counter;
  240|  2.08k|            }
  241|    724|        }
  242|       |
  243|    724|        return counter;
  244|    724|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1889|  2.95k|    {
 1890|  2.95k|        return !codepoint.empty();
 1891|  2.95k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  1.87k|    {
  754|  1.87k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  2.95k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.95k|              cvref<T> obj = *get<T>(fn);
  745|  2.95k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.95k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.95k|              }
  748|  2.95k|              else {
  749|  2.95k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.95k|              }
  751|  2.95k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.95k|    {
  684|  2.95k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.95k|            return static_cast<T*>(s.m_cp);
  686|  2.95k|        }
  687|  2.95k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.95k|            return static_cast<T*>(s.m_p);
  689|  2.95k|        }
  690|  2.95k|        else {
  691|  2.95k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.95k|        }
  693|  2.95k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  2.95k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  1.87k|        {
  662|  1.87k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.87k|{
  950|  1.87k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 1.70k]
  |  |  ------------------
  ------------------
  951|    174|        return eof_error::eof;
  952|    174|    }
  953|  1.70k|    return eof_error::good;
  954|  1.87k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  13.6k|    {
 2413|  13.6k|        return m_current;
 2414|  13.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  14.1k|    {
 2417|  14.1k|        return m_count;
 2418|  14.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  14.4k|    {
 6037|  14.4k|        const bool need_skipped_width =
 6038|  14.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 1.87k, False: 12.5k]
  |  Branch (6038:33): [True: 0, False: 12.5k]
  ------------------
 6039|  14.4k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  14.4k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 146, False: 14.2k]
  ------------------
 6043|  14.4k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 1.16k, False: 13.1k]
  ------------------
 6044|  1.31k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  1.31k|                             need_skipped_width);
 6046|  1.31k|        }
 6047|  13.1k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 12.4k, False: 710]
  |  Branch (6047:56): [True: 1.64k, False: 10.7k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.64k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.64k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.28k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.64k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.64k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.64k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.64k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.28k|                            make_eof_scan_error));
 6058|       |
 6059|  3.28k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.01k, False: 624]
  ------------------
 6060|  1.01k|                return result_type{
 6061|  1.01k|                    it,
 6062|  1.01k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.01k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.01k|                                             .view())};
 6065|  1.01k|            }
 6066|    624|            return result_type{it, 0};
 6067|  3.28k|        }
 6068|       |
 6069|  11.4k|        return result_type{rng.begin(), 0};
 6070|  13.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  4.07k|    {
 6079|  4.07k|        const bool need_skipped_width =
 6080|  4.07k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 472, False: 3.60k]
  |  Branch (6080:33): [True: 1.05k, False: 2.54k]
  ------------------
 6081|  4.07k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  4.07k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 306, False: 3.76k]
  ------------------
 6084|  4.07k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 312, False: 3.45k]
  ------------------
 6085|    618|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 224, False: 394]
  ------------------
 6086|    618|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 98, False: 126]
  ------------------
 6087|     98|                return result_type{rng.begin(), 0};
 6088|     98|            }
 6089|    520|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    520|                             specs.fill, need_skipped_width);
 6091|    618|        }
 6092|  3.45k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 3.32k, False: 134]
  ------------------
 6093|  3.45k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 3.02k, False: 300]
  ------------------
 6094|  3.45k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 202, False: 2.82k]
  |  Branch (6094:35): [True: 178, False: 24]
  ------------------
 6095|  3.02k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 560, False: 2.28k]
  ------------------
 6096|  2.84k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 460, False: 100]
  ------------------
 6097|    638|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 460, False: 178]
  ------------------
 6098|    460|                const auto initial_width =
 6099|    460|                    specs.precision - prefix_width - value_width;
 6100|    460|                auto max_width_view = take_width(rng, initial_width);
 6101|    460|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 460]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    460|                                  .transform_error(make_eof_scan_error));
 6103|    460|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    460|            }
 6105|    356|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    178|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    178|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    178|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    178|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 178]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    178|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    178|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|    356|                            make_eof_scan_error));
 6107|       |
 6108|    356|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 178, False: 0]
  ------------------
 6109|    178|                return result_type{
 6110|    178|                    it,
 6111|    178|                    calculate_text_width(make_contiguous_buffer(
 6112|    178|                                             ranges::subrange{rng.begin(), it})
 6113|    178|                                             .view())};
 6114|    178|            }
 6115|      0|            return result_type{it, 0};
 6116|    356|        }
 6117|  2.81k|        return result_type{rng.begin(), 0};
 6118|  3.45k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6192|  4.96k|    {
 6193|  4.96k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  4.96k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  4.96k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.96k|            auto rd = make_reader<T, char_type>();
 6198|  4.96k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.38k, False: 576]
  |  |  ------------------
  ------------------
 6199|  4.38k|                return unexpected(e);
 6200|  4.38k|            }
 6201|       |
 6202|    576|            return impl(rd, range, value);
 6203|  4.96k|        }
 6204|  4.96k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  4.96k|            auto rd = make_reader<T, char_type>();
 6206|  4.96k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  4.96k|                return unexpected(e);
 6208|  4.96k|            }
 6209|       |
 6210|  4.96k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  4.96k|                specs.width != 0) {
 6212|  4.96k|                return impl(rd, range, value);
 6213|  4.96k|            }
 6214|       |
 6215|  4.96k|            auto crange = get_as_contiguous(range);
 6216|  4.96k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  4.96k|            return ranges::next(range.begin(),
 6218|  4.96k|                                ranges::distance(crange.begin(), it));
 6219|  4.96k|        }
 6220|  4.96k|        else {
 6221|  4.96k|            SCN_EXPECT(false);
 6222|  4.96k|            SCN_UNREACHABLE;
 6223|  4.96k|        }
 6224|  4.96k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    576|    {
 6124|    576|        const bool need_skipped_width =
 6125|    576|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 186, False: 390]
  |  Branch (6125:33): [True: 292, False: 98]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    576|        auto it = rng.begin();
 6129|    576|        std::ptrdiff_t prefix_width = 0;
 6130|    576|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 294, False: 282]
  ------------------
 6131|    294|            auto max_width_view = take_width(rng, specs.precision);
 6132|    294|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     24|    }                                                  \
  |  |  |  | 3671|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    270|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    270|            it = prefix_result.first.base();
 6135|    270|            prefix_width = prefix_result.second;
 6136|    270|        }
 6137|    282|        else {
 6138|    282|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    282|            std::tie(it, prefix_width) = prefix_result;
 6140|    282|        }
 6141|    552|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    552|        std::ptrdiff_t value_width = 0;
 6145|    552|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 270, False: 282]
  ------------------
 6146|    270|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 264]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    264|            const auto initial_width = specs.precision - prefix_width;
 6154|    264|            auto max_width_view =
 6155|    264|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    264|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 264, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    264|    }                                                  \
  |  |  |  | 3671|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    282|        else {
 6161|    282|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 282, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    282|    }                                                  \
  |  | 3671|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6192|  4.96k|    {
 6193|  4.96k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  4.96k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  4.96k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.96k|            auto rd = make_reader<T, char_type>();
 6198|  4.96k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.38k, False: 576]
  |  |  ------------------
  ------------------
 6199|  4.38k|                return unexpected(e);
 6200|  4.38k|            }
 6201|       |
 6202|    576|            return impl(rd, range, value);
 6203|  4.96k|        }
 6204|  4.96k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  4.96k|            auto rd = make_reader<T, char_type>();
 6206|  4.96k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  4.96k|                return unexpected(e);
 6208|  4.96k|            }
 6209|       |
 6210|  4.96k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  4.96k|                specs.width != 0) {
 6212|  4.96k|                return impl(rd, range, value);
 6213|  4.96k|            }
 6214|       |
 6215|  4.96k|            auto crange = get_as_contiguous(range);
 6216|  4.96k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  4.96k|            return ranges::next(range.begin(),
 6218|  4.96k|                                ranges::distance(crange.begin(), it));
 6219|  4.96k|        }
 6220|  4.96k|        else {
 6221|  4.96k|            SCN_EXPECT(false);
 6222|  4.96k|            SCN_UNREACHABLE;
 6223|  4.96k|        }
 6224|  4.96k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    576|    {
 6124|    576|        const bool need_skipped_width =
 6125|    576|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 186, False: 390]
  |  Branch (6125:33): [True: 292, False: 98]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    576|        auto it = rng.begin();
 6129|    576|        std::ptrdiff_t prefix_width = 0;
 6130|    576|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 294, False: 282]
  ------------------
 6131|    294|            auto max_width_view = take_width(rng, specs.precision);
 6132|    294|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     24|    }                                                  \
  |  |  |  | 3671|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    270|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    270|            it = prefix_result.first.base();
 6135|    270|            prefix_width = prefix_result.second;
 6136|    270|        }
 6137|    282|        else {
 6138|    282|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    282|            std::tie(it, prefix_width) = prefix_result;
 6140|    282|        }
 6141|    552|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    552|        std::ptrdiff_t value_width = 0;
 6145|    552|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 270, False: 282]
  ------------------
 6146|    270|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 264]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    264|            const auto initial_width = specs.precision - prefix_width;
 6154|    264|            auto max_width_view =
 6155|    264|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    264|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 264, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    264|    }                                                  \
  |  |  |  | 3671|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    282|        else {
 6161|    282|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 282, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    282|    }                                                  \
  |  | 3671|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6192|  4.92k|    {
 6193|  4.92k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  4.92k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  4.92k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.92k|            auto rd = make_reader<T, char_type>();
 6198|  4.92k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.42k, False: 502]
  |  |  ------------------
  ------------------
 6199|  4.42k|                return unexpected(e);
 6200|  4.42k|            }
 6201|       |
 6202|    502|            return impl(rd, range, value);
 6203|  4.92k|        }
 6204|  4.92k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  4.92k|            auto rd = make_reader<T, char_type>();
 6206|  4.92k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  4.92k|                return unexpected(e);
 6208|  4.92k|            }
 6209|       |
 6210|  4.92k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  4.92k|                specs.width != 0) {
 6212|  4.92k|                return impl(rd, range, value);
 6213|  4.92k|            }
 6214|       |
 6215|  4.92k|            auto crange = get_as_contiguous(range);
 6216|  4.92k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  4.92k|            return ranges::next(range.begin(),
 6218|  4.92k|                                ranges::distance(crange.begin(), it));
 6219|  4.92k|        }
 6220|  4.92k|        else {
 6221|  4.92k|            SCN_EXPECT(false);
 6222|  4.92k|            SCN_UNREACHABLE;
 6223|  4.92k|        }
 6224|  4.92k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5752|  4.92k|    {
 5753|  4.92k|        reader_error_handler eh{};
 5754|  4.92k|        detail::check_pointer_type_specs(specs, eh);
 5755|  4.92k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.42k, False: 502]
  |  |  ------------------
  ------------------
 5756|  4.42k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  4.42k|        }
 5758|    502|        return {};
 5759|  4.92k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    502|    {
 6124|    502|        const bool need_skipped_width =
 6125|    502|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 180, False: 322]
  |  Branch (6125:33): [True: 250, False: 72]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    502|        auto it = rng.begin();
 6129|    502|        std::ptrdiff_t prefix_width = 0;
 6130|    502|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 252, False: 250]
  ------------------
 6131|    252|            auto max_width_view = take_width(rng, specs.precision);
 6132|    252|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    236|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    236|            it = prefix_result.first.base();
 6135|    236|            prefix_width = prefix_result.second;
 6136|    236|        }
 6137|    250|        else {
 6138|    250|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    250|            std::tie(it, prefix_width) = prefix_result;
 6140|    250|        }
 6141|    486|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    486|        std::ptrdiff_t value_width = 0;
 6145|    486|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 236, False: 250]
  ------------------
 6146|    236|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 232]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    232|            const auto initial_width = specs.precision - prefix_width;
 6154|    232|            auto max_width_view =
 6155|    232|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    232|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    232|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    232|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    232|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    232|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    232|    }                                                  \
  |  |  |  | 3671|    232|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    250|        else {
 6161|    250|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 250, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    250|    }                                                  \
  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    232|    {
 5782|    232|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    232|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    232|        return read_default(range, value, loc);
 5784|    232|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    232|    {
 5765|    232|        detail::format_specs specs{};
 5766|    232|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    232|        std::uintptr_t intvalue{};
 5769|    232|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    232|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    232|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    232|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    232|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    232|    }                                                  \
  |  |  |  | 3671|    232|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    232|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    250|    {
 5782|    250|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    250|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    250|        return read_default(range, value, loc);
 5784|    250|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6192|  4.96k|    {
 6193|  4.96k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  4.96k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  4.96k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.96k|            auto rd = make_reader<T, char_type>();
 6198|  4.96k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.18k, False: 772]
  |  |  ------------------
  ------------------
 6199|  4.18k|                return unexpected(e);
 6200|  4.18k|            }
 6201|       |
 6202|    772|            return impl(rd, range, value);
 6203|  4.96k|        }
 6204|  4.96k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  4.96k|            auto rd = make_reader<T, char_type>();
 6206|  4.96k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  4.96k|                return unexpected(e);
 6208|  4.96k|            }
 6209|       |
 6210|  4.96k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  4.96k|                specs.width != 0) {
 6212|  4.96k|                return impl(rd, range, value);
 6213|  4.96k|            }
 6214|       |
 6215|  4.96k|            auto crange = get_as_contiguous(range);
 6216|  4.96k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  4.96k|            return ranges::next(range.begin(),
 6218|  4.96k|                                ranges::distance(crange.begin(), it));
 6219|  4.96k|        }
 6220|  4.96k|        else {
 6221|  4.96k|            SCN_EXPECT(false);
 6222|  4.96k|            SCN_UNREACHABLE;
 6223|  4.96k|        }
 6224|  4.96k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  4.96k|    {
 3040|  4.96k|        reader_error_handler eh{};
 3041|  4.96k|        get_derived().check_specs_impl(specs, eh);
 3042|  4.96k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.18k, False: 772]
  |  |  ------------------
  ------------------
 3043|  4.18k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.18k|        }
 3045|    772|        return {};
 3046|  4.96k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  4.96k|    {
 3051|  4.96k|        return static_cast<Derived&>(*this);
 3052|  4.96k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  4.96k|    {
 5497|  4.96k|        detail::check_bool_type_specs(specs, eh);
 5498|  4.96k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    772|    {
 6124|    772|        const bool need_skipped_width =
 6125|    772|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 196, False: 576]
  |  Branch (6125:33): [True: 360, False: 216]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    772|        auto it = rng.begin();
 6129|    772|        std::ptrdiff_t prefix_width = 0;
 6130|    772|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 364, False: 408]
  ------------------
 6131|    364|            auto max_width_view = take_width(rng, specs.precision);
 6132|    364|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    364|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    364|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    364|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     28|    }                                                  \
  |  |  |  | 3671|    364|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    336|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    336|            it = prefix_result.first.base();
 6135|    336|            prefix_width = prefix_result.second;
 6136|    336|        }
 6137|    408|        else {
 6138|    408|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    408|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    408|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    408|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 408]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    408|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    408|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    408|            std::tie(it, prefix_width) = prefix_result;
 6140|    408|        }
 6141|    744|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    744|        std::ptrdiff_t value_width = 0;
 6145|    744|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 336, False: 408]
  ------------------
 6146|    336|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 330]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    330|            const auto initial_width = specs.precision - prefix_width;
 6154|    330|            auto max_width_view =
 6155|    330|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    330|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    330|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 330, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    330|    }                                                  \
  |  |  |  | 3671|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    408|        else {
 6161|    408|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    408|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    408|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 408, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    408|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    408|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    408|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    408|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    408|    }                                                  \
  |  | 3671|    408|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    408|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    330|    {
 5516|    330|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    330|#if !SCN_DISABLE_LOCALE
 5519|    330|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 12, False: 318]
  ------------------
 5520|     12|            return rd.read_localized(range, loc, value);
 5521|     12|        }
 5522|    318|#endif
 5523|       |
 5524|    318|        return rd.read_classic(range, value);
 5525|    330|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5528|    738|    {
 5529|    738|        SCN_GCC_COMPAT_PUSH
 5530|    738|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    738|        switch (specs.type) {
 5533|    190|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 190, False: 548]
  ------------------
 5534|    190|                return bool_reader_base::allow_text;
 5535|       |
 5536|     12|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 12, False: 726]
  ------------------
 5537|     20|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 8, False: 730]
  ------------------
 5538|     26|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 732]
  ------------------
 5539|     38|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 12, False: 726]
  ------------------
 5540|     54|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 16, False: 722]
  ------------------
 5541|     58|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 734]
  ------------------
 5542|     58|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    490|            default:
  ------------------
  |  Branch (5544:13): [True: 490, False: 248]
  ------------------
 5545|    490|                return bool_reader_base::allow_text |
 5546|    490|                       bool_reader_base::allow_numeric;
 5547|    738|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    738|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     12|    {
 5428|     12|        scan_error err{scan_error::invalid_scanned_value,
 5429|     12|                       "Failed to read boolean"};
 5430|       |
 5431|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 10, False: 2]
  ------------------
 5432|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 10]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     10|            else {
 5436|     10|                err = r.error();
 5437|     10|            }
 5438|     10|        }
 5439|       |
 5440|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 10, False: 2]
  ------------------
 5441|     10|            auto stdloc = loc.get<std::locale>();
 5442|     10|            const auto& numpunct =
 5443|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     10|            const auto truename = numpunct.truename();
 5445|     10|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     10|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 10]
  ------------------
 5448|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     10|            else {
 5452|     10|                err = r.error();
 5453|     10|            }
 5454|     10|        }
 5455|       |
 5456|     12|        return unexpected(err);
 5457|     12|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    264|    {
 5384|    264|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 264]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    264|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 264]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    264|        return unexpected_scan_error(
 5394|    264|            scan_error::invalid_scanned_value,
 5395|    264|            "Failed to read numeric boolean value: No match");
 5396|    264|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    528|{
 2146|    528|    auto it = read_code_unit(range);
 2147|    528|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    528|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 528]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    528|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    528|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 528, False: 0]
  |  |  ------------------
  ------------------
 2152|    528|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    528|        return unexpected(parse_error::error);
 2154|    528|    }
 2155|       |
 2156|      0|    return *it;
 2157|    528|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5467|     10|    {
 5468|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     10|        const auto shorter = std::pair{
 5470|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 10, False: 0]
  ------------------
 5471|     10|        const auto longer = std::pair{
 5472|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 10]
  ------------------
 5473|       |
 5474|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 10]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 10]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     10|                                     "read_textual: No match");
 5485|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     10|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2185|     10|        return unexpected(parse_error::error);
 2186|     10|    }
 2187|      0|    return it;
 2188|     10|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    608|{
 1857|    608|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    608|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    608|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    608|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    608|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    608|        if (sz < count) {
 1862|    608|            return unexpected(eof_error::eof);
 1863|    608|        }
 1864|       |
 1865|    608|        return ranges::next(range.begin(), count);
 1866|    608|    }
 1867|    608|    else {
 1868|    608|        auto it = range.begin();
 1869|    608|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 608]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  3.00k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.52k, False: 474]
  ------------------
 1874|  2.52k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 134, False: 2.39k]
  ------------------
 1875|    134|                return unexpected(eof_error::eof);
 1876|    134|            }
 1877|  2.52k|        }
 1878|       |
 1879|    474|        return it;
 1880|    608|    }
 1881|    608|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    608|{
 1095|    608|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    608|        return r.size();
 1097|    608|    }
 1098|    608|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    608|                           ranges::const_iterator_t<Range>,
 1100|    608|                           typename detail::basic_scan_buffer<
 1101|    608|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    608|        if constexpr (ranges::common_range<Range>) {
 1103|    608|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    608|        }
 1105|    608|        else {
 1106|    608|            if (r.begin().stores_parent()) {
 1107|    608|                return static_cast<size_t>(
 1108|    608|                    r.begin().parent()->chars_available() -
 1109|    608|                    r.begin().position());
 1110|    608|            }
 1111|    608|            return r.begin().contiguous_segment().size();
 1112|    608|        }
 1113|    608|    }
 1114|    608|    else {
 1115|    608|        return 0;
 1116|    608|    }
 1117|    608|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    318|    {
 5355|    318|        scan_error err{scan_error::invalid_scanned_value,
 5356|    318|                       "Failed to read boolean"};
 5357|       |
 5358|    318|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 254, False: 64]
  ------------------
 5359|    254|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 254]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    254|            else {
 5363|    254|                err = r.error();
 5364|    254|            }
 5365|    254|        }
 5366|       |
 5367|    318|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 294, False: 24]
  ------------------
 5368|    294|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 294]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    294|            else {
 5372|    294|                err = r.error();
 5373|    294|            }
 5374|    294|        }
 5375|       |
 5376|    318|        return unexpected(err);
 5377|    318|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    294|    {
 5402|    294|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 294]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    294|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 294]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    294|        return unexpected_scan_error(
 5412|    294|            scan_error::invalid_scanned_value,
 5413|    294|            "Failed to read textual boolean value: No match");
 5414|    294|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    588|{
 2194|    588|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    588|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    588|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    588|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    588|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 124, False: 464]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    124|    }                                                  \
  |  |  |  | 3671|    588|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    464|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    464|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    464|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    464|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    464|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    464|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    464|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 464, False: 0]
  |  |  ------------------
  ------------------
 2201|    464|            return unexpected(parse_error::error);
 2202|    464|        }
 2203|      0|        return it;
 2204|    464|    }
 2205|    464|    else {
 2206|    464|        auto range_it = range.begin();
 2207|    464|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|    464|            if (SCN_UNLIKELY(*range_it !=
 2209|    464|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    464|                return unexpected(parse_error::error);
 2211|    464|            }
 2212|    464|        }
 2213|    464|        return it;
 2214|    464|    }
 2215|    464|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    408|    {
 5516|    408|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    408|#if !SCN_DISABLE_LOCALE
 5519|    408|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 24, False: 384]
  ------------------
 5520|     24|            return rd.read_localized(range, loc, value);
 5521|     24|        }
 5522|    384|#endif
 5523|       |
 5524|    384|        return rd.read_classic(range, value);
 5525|    408|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     24|    {
 5428|     24|        scan_error err{scan_error::invalid_scanned_value,
 5429|     24|                       "Failed to read boolean"};
 5430|       |
 5431|     24|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 16, False: 8]
  ------------------
 5432|     16|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 16]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     16|            else {
 5436|     16|                err = r.error();
 5437|     16|            }
 5438|     16|        }
 5439|       |
 5440|     24|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 14, False: 10]
  ------------------
 5441|     14|            auto stdloc = loc.get<std::locale>();
 5442|     14|            const auto& numpunct =
 5443|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     14|            const auto truename = numpunct.truename();
 5445|     14|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     14|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 14]
  ------------------
 5448|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     14|            else {
 5452|     14|                err = r.error();
 5453|     14|            }
 5454|     14|        }
 5455|       |
 5456|     24|        return unexpected(err);
 5457|     24|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5467|     14|    {
 5468|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     14|        const auto shorter = std::pair{
 5470|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 14, False: 0]
  ------------------
 5471|     14|        const auto longer = std::pair{
 5472|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 14]
  ------------------
 5473|       |
 5474|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 14]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 14]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     14|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     14|                                     "read_textual: No match");
 5485|     14|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     28|{
 2179|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 26]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     26|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     26|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     26|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     26|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 2185|     26|        return unexpected(parse_error::error);
 2186|     26|    }
 2187|      0|    return it;
 2188|     26|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6192|  4.92k|    {
 6193|  4.92k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  4.92k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  4.92k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.92k|            auto rd = make_reader<T, char_type>();
 6198|  4.92k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.37k, False: 552]
  |  |  ------------------
  ------------------
 6199|  4.37k|                return unexpected(e);
 6200|  4.37k|            }
 6201|       |
 6202|    552|            return impl(rd, range, value);
 6203|  4.92k|        }
 6204|  4.92k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  4.92k|            auto rd = make_reader<T, char_type>();
 6206|  4.92k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  4.92k|                return unexpected(e);
 6208|  4.92k|            }
 6209|       |
 6210|  4.92k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  4.92k|                specs.width != 0) {
 6212|  4.92k|                return impl(rd, range, value);
 6213|  4.92k|            }
 6214|       |
 6215|  4.92k|            auto crange = get_as_contiguous(range);
 6216|  4.92k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  4.92k|            return ranges::next(range.begin(),
 6218|  4.92k|                                ranges::distance(crange.begin(), it));
 6219|  4.92k|        }
 6220|  4.92k|        else {
 6221|  4.92k|            SCN_EXPECT(false);
 6222|  4.92k|            SCN_UNREACHABLE;
 6223|  4.92k|        }
 6224|  4.92k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    552|    {
 6124|    552|        const bool need_skipped_width =
 6125|    552|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 182, False: 370]
  |  Branch (6125:33): [True: 282, False: 88]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    552|        auto it = rng.begin();
 6129|    552|        std::ptrdiff_t prefix_width = 0;
 6130|    552|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 284, False: 268]
  ------------------
 6131|    284|            auto max_width_view = take_width(rng, specs.precision);
 6132|    284|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 284]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    284|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    284|            it = prefix_result.first.base();
 6135|    284|            prefix_width = prefix_result.second;
 6136|    284|        }
 6137|    268|        else {
 6138|    268|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    268|            std::tie(it, prefix_width) = prefix_result;
 6140|    268|        }
 6141|    552|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    552|        std::ptrdiff_t value_width = 0;
 6145|    552|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 284, False: 268]
  ------------------
 6146|    284|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 278]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    278|            const auto initial_width = specs.precision - prefix_width;
 6154|    278|            auto max_width_view =
 6155|    278|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    278|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 246]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    246|            it = w_it.base();
 6158|    246|            value_width = initial_width - w_it.count();
 6159|    246|        }
 6160|    268|        else {
 6161|    268|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22, False: 246]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     22|    }                                                  \
  |  | 3671|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    246|                                             specs, value, loc));
 6163|       |
 6164|    246|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 176, False: 70]
  ------------------
 6165|    176|                value_width = calculate_text_width(
 6166|    176|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    176|                        .view());
 6168|    176|            }
 6169|    246|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    492|        std::ptrdiff_t postfix_width = 0;
 6173|    492|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 492, False: 0]
  ------------------
 6174|    492|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    492|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    492|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    492|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    492|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 492]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    492|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    492|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    492|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    492|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    492|                                 value_width));
 6178|    492|            std::tie(it, postfix_width) = postfix_result;
 6179|    492|        }
 6180|       |
 6181|    492|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    492|                                                 value_width, postfix_width);
 6183|    492|            !e) {
  ------------------
  |  Branch (6183:13): [True: 156, False: 336]
  ------------------
 6184|    156|            return unexpected(e);
 6185|    156|        }
 6186|       |
 6187|    336|        return it;
 6188|    492|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|  4.96k|    {
 6193|  4.96k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  4.96k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  4.96k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.96k|            auto rd = make_reader<T, char_type>();
 6198|  4.96k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.38k, False: 574]
  |  |  ------------------
  ------------------
 6199|  4.38k|                return unexpected(e);
 6200|  4.38k|            }
 6201|       |
 6202|    574|            return impl(rd, range, value);
 6203|  4.96k|        }
 6204|  4.96k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  4.96k|            auto rd = make_reader<T, char_type>();
 6206|  4.96k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  4.96k|                return unexpected(e);
 6208|  4.96k|            }
 6209|       |
 6210|  4.96k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  4.96k|                specs.width != 0) {
 6212|  4.96k|                return impl(rd, range, value);
 6213|  4.96k|            }
 6214|       |
 6215|  4.96k|            auto crange = get_as_contiguous(range);
 6216|  4.96k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  4.96k|            return ranges::next(range.begin(),
 6218|  4.96k|                                ranges::distance(crange.begin(), it));
 6219|  4.96k|        }
 6220|  4.96k|        else {
 6221|  4.96k|            SCN_EXPECT(false);
 6222|  4.96k|            SCN_UNREACHABLE;
 6223|  4.96k|        }
 6224|  4.96k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    574|    {
 6124|    574|        const bool need_skipped_width =
 6125|    574|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 190, False: 384]
  |  Branch (6125:33): [True: 286, False: 98]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    574|        auto it = rng.begin();
 6129|    574|        std::ptrdiff_t prefix_width = 0;
 6130|    574|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 290, False: 284]
  ------------------
 6131|    290|            auto max_width_view = take_width(rng, specs.precision);
 6132|    290|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    290|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    290|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    290|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|    290|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    268|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    268|            it = prefix_result.first.base();
 6135|    268|            prefix_width = prefix_result.second;
 6136|    268|        }
 6137|    284|        else {
 6138|    284|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 284]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    284|            std::tie(it, prefix_width) = prefix_result;
 6140|    284|        }
 6141|    552|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    552|        std::ptrdiff_t value_width = 0;
 6145|    552|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 268, False: 284]
  ------------------
 6146|    268|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 8, False: 260]
  ------------------
 6147|      8|                return unexpected_scan_error(
 6148|      8|                    scan_error::invalid_scanned_value,
 6149|      8|                    "Too many fill characters before value, "
 6150|      8|                    "precision exceeded before reading value");
 6151|      8|            }
 6152|       |
 6153|    260|            const auto initial_width = specs.precision - prefix_width;
 6154|    260|            auto max_width_view =
 6155|    260|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    260|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    260|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 260, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    260|    }                                                  \
  |  |  |  | 3671|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    284|        else {
 6161|    284|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 284, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    284|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    284|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    284|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    284|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    284|    }                                                  \
  |  | 3671|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  4.92k|    {
 6193|  4.92k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  4.92k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  4.92k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.92k|            auto rd = make_reader<T, char_type>();
 6198|  4.92k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 4.79k]
  |  |  ------------------
  ------------------
 6199|    126|                return unexpected(e);
 6200|    126|            }
 6201|       |
 6202|  4.79k|            return impl(rd, range, value);
 6203|  4.92k|        }
 6204|  4.92k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  4.92k|            auto rd = make_reader<T, char_type>();
 6206|  4.92k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  4.92k|                return unexpected(e);
 6208|  4.92k|            }
 6209|       |
 6210|  4.92k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  4.92k|                specs.width != 0) {
 6212|  4.92k|                return impl(rd, range, value);
 6213|  4.92k|            }
 6214|       |
 6215|  4.92k|            auto crange = get_as_contiguous(range);
 6216|  4.92k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  4.92k|            return ranges::next(range.begin(),
 6218|  4.92k|                                ranges::distance(crange.begin(), it));
 6219|  4.92k|        }
 6220|  4.92k|        else {
 6221|  4.92k|            SCN_EXPECT(false);
 6222|  4.92k|            SCN_UNREACHABLE;
 6223|  4.92k|        }
 6224|  4.92k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  4.79k|    {
 6124|  4.79k|        const bool need_skipped_width =
 6125|  4.79k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 268, False: 4.52k]
  |  Branch (6125:33): [True: 570, False: 3.95k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  4.79k|        auto it = rng.begin();
 6129|  4.79k|        std::ptrdiff_t prefix_width = 0;
 6130|  4.79k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 580, False: 4.21k]
  ------------------
 6131|    580|            auto max_width_view = take_width(rng, specs.precision);
 6132|    580|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    580|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    580|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    580|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    580|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 560]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    580|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    560|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    560|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    560|            it = prefix_result.first.base();
 6135|    560|            prefix_width = prefix_result.second;
 6136|    560|        }
 6137|  4.21k|        else {
 6138|  4.21k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  4.21k|            std::tie(it, prefix_width) = prefix_result;
 6140|  4.21k|        }
 6141|  4.77k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  4.77k|        std::ptrdiff_t value_width = 0;
 6145|  4.77k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 560, False: 4.21k]
  ------------------
 6146|    560|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 554]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    554|            const auto initial_width = specs.precision - prefix_width;
 6154|    554|            auto max_width_view =
 6155|    554|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    554|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    554|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    554|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    554|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    554|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 186, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    186|    }                                                  \
  |  |  |  | 3671|    554|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    368|            it = w_it.base();
 6158|    368|            value_width = initial_width - w_it.count();
 6159|    368|        }
 6160|  4.21k|        else {
 6161|  4.21k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.98k, False: 1.22k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.98k|    }                                                  \
  |  | 3671|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.22k|                                             specs, value, loc));
 6163|       |
 6164|  1.22k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 220, False: 1.00k]
  ------------------
 6165|    220|                value_width = calculate_text_width(
 6166|    220|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    220|                        .view());
 6168|    220|            }
 6169|  1.22k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.59k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.59k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.19k, False: 402]
  ------------------
 6174|  1.19k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.19k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.19k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.19k|                                 value_width));
 6178|  1.19k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.19k|        }
 6180|       |
 6181|  1.59k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.59k|                                                 value_width, postfix_width);
 6183|  1.59k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 122, False: 1.47k]
  ------------------
 6184|    122|            return unexpected(e);
 6185|    122|        }
 6186|       |
 6187|  1.47k|        return it;
 6188|  1.59k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  4.92k|    {
 6193|  4.92k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  4.92k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  4.92k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.92k|            auto rd = make_reader<T, char_type>();
 6198|  4.92k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 4.79k]
  |  |  ------------------
  ------------------
 6199|    126|                return unexpected(e);
 6200|    126|            }
 6201|       |
 6202|  4.79k|            return impl(rd, range, value);
 6203|  4.92k|        }
 6204|  4.92k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  4.92k|            auto rd = make_reader<T, char_type>();
 6206|  4.92k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  4.92k|                return unexpected(e);
 6208|  4.92k|            }
 6209|       |
 6210|  4.92k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  4.92k|                specs.width != 0) {
 6212|  4.92k|                return impl(rd, range, value);
 6213|  4.92k|            }
 6214|       |
 6215|  4.92k|            auto crange = get_as_contiguous(range);
 6216|  4.92k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  4.92k|            return ranges::next(range.begin(),
 6218|  4.92k|                                ranges::distance(crange.begin(), it));
 6219|  4.92k|        }
 6220|  4.92k|        else {
 6221|  4.92k|            SCN_EXPECT(false);
 6222|  4.92k|            SCN_UNREACHABLE;
 6223|  4.92k|        }
 6224|  4.92k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  4.79k|    {
 6124|  4.79k|        const bool need_skipped_width =
 6125|  4.79k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 268, False: 4.52k]
  |  Branch (6125:33): [True: 570, False: 3.95k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  4.79k|        auto it = rng.begin();
 6129|  4.79k|        std::ptrdiff_t prefix_width = 0;
 6130|  4.79k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 580, False: 4.21k]
  ------------------
 6131|    580|            auto max_width_view = take_width(rng, specs.precision);
 6132|    580|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    580|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    580|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    580|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    580|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 560]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    580|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    560|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    560|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    560|            it = prefix_result.first.base();
 6135|    560|            prefix_width = prefix_result.second;
 6136|    560|        }
 6137|  4.21k|        else {
 6138|  4.21k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  4.21k|            std::tie(it, prefix_width) = prefix_result;
 6140|  4.21k|        }
 6141|  4.77k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  4.77k|        std::ptrdiff_t value_width = 0;
 6145|  4.77k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 560, False: 4.21k]
  ------------------
 6146|    560|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 554]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    554|            const auto initial_width = specs.precision - prefix_width;
 6154|    554|            auto max_width_view =
 6155|    554|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    554|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    554|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    554|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    554|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    554|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 186, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    186|    }                                                  \
  |  |  |  | 3671|    554|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    368|            it = w_it.base();
 6158|    368|            value_width = initial_width - w_it.count();
 6159|    368|        }
 6160|  4.21k|        else {
 6161|  4.21k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.98k, False: 1.22k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.98k|    }                                                  \
  |  | 3671|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.22k|                                             specs, value, loc));
 6163|       |
 6164|  1.22k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 220, False: 1.00k]
  ------------------
 6165|    220|                value_width = calculate_text_width(
 6166|    220|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    220|                        .view());
 6168|    220|            }
 6169|  1.22k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.59k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.59k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.19k, False: 402]
  ------------------
 6174|  1.19k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.19k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.19k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.19k|                                 value_width));
 6178|  1.19k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.19k|        }
 6180|       |
 6181|  1.59k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.59k|                                                 value_width, postfix_width);
 6183|  1.59k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 122, False: 1.47k]
  ------------------
 6184|    122|            return unexpected(e);
 6185|    122|        }
 6186|       |
 6187|  1.47k|        return it;
 6188|  1.59k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  4.92k|    {
 6193|  4.92k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  4.92k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  4.92k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.92k|            auto rd = make_reader<T, char_type>();
 6198|  4.92k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 4.79k]
  |  |  ------------------
  ------------------
 6199|    126|                return unexpected(e);
 6200|    126|            }
 6201|       |
 6202|  4.79k|            return impl(rd, range, value);
 6203|  4.92k|        }
 6204|  4.92k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  4.92k|            auto rd = make_reader<T, char_type>();
 6206|  4.92k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  4.92k|                return unexpected(e);
 6208|  4.92k|            }
 6209|       |
 6210|  4.92k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  4.92k|                specs.width != 0) {
 6212|  4.92k|                return impl(rd, range, value);
 6213|  4.92k|            }
 6214|       |
 6215|  4.92k|            auto crange = get_as_contiguous(range);
 6216|  4.92k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  4.92k|            return ranges::next(range.begin(),
 6218|  4.92k|                                ranges::distance(crange.begin(), it));
 6219|  4.92k|        }
 6220|  4.92k|        else {
 6221|  4.92k|            SCN_EXPECT(false);
 6222|  4.92k|            SCN_UNREACHABLE;
 6223|  4.92k|        }
 6224|  4.92k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  4.79k|    {
 6124|  4.79k|        const bool need_skipped_width =
 6125|  4.79k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 268, False: 4.52k]
  |  Branch (6125:33): [True: 570, False: 3.95k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  4.79k|        auto it = rng.begin();
 6129|  4.79k|        std::ptrdiff_t prefix_width = 0;
 6130|  4.79k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 580, False: 4.21k]
  ------------------
 6131|    580|            auto max_width_view = take_width(rng, specs.precision);
 6132|    580|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    580|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    580|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    580|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    580|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 560]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    580|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    560|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    560|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    560|            it = prefix_result.first.base();
 6135|    560|            prefix_width = prefix_result.second;
 6136|    560|        }
 6137|  4.21k|        else {
 6138|  4.21k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  4.21k|            std::tie(it, prefix_width) = prefix_result;
 6140|  4.21k|        }
 6141|  4.77k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  4.77k|        std::ptrdiff_t value_width = 0;
 6145|  4.77k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 560, False: 4.21k]
  ------------------
 6146|    560|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 554]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    554|            const auto initial_width = specs.precision - prefix_width;
 6154|    554|            auto max_width_view =
 6155|    554|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    554|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    554|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    554|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    554|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    554|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 186, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    186|    }                                                  \
  |  |  |  | 3671|    554|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    368|            it = w_it.base();
 6158|    368|            value_width = initial_width - w_it.count();
 6159|    368|        }
 6160|  4.21k|        else {
 6161|  4.21k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.98k, False: 1.22k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.98k|    }                                                  \
  |  | 3671|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.22k|                                             specs, value, loc));
 6163|       |
 6164|  1.22k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 220, False: 1.00k]
  ------------------
 6165|    220|                value_width = calculate_text_width(
 6166|    220|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    220|                        .view());
 6168|    220|            }
 6169|  1.22k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.59k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.59k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.19k, False: 402]
  ------------------
 6174|  1.19k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.19k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.19k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.19k|                                 value_width));
 6178|  1.19k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.19k|        }
 6180|       |
 6181|  1.59k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.59k|                                                 value_width, postfix_width);
 6183|  1.59k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 122, False: 1.47k]
  ------------------
 6184|    122|            return unexpected(e);
 6185|    122|        }
 6186|       |
 6187|  1.47k|        return it;
 6188|  1.59k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  4.44k|{
 5795|  4.44k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.44k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  4.44k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 494, False: 3.95k]
  ------------------
 5800|    494|        return range.begin();
 5801|    494|    }
 5802|       |
 5803|  3.95k|    return skip_classic_whitespace(range);
 5804|  4.44k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5870|    494|    {
 5871|    494|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    494|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    494|                          basic_contiguous_scan_context<char_type>>) {
 5875|    494|            auto rd = make_reader<T, char_type>();
 5876|    494|            return impl(rd, range, value);
 5877|    494|        }
 5878|    494|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    494|            auto rd = make_reader<T, char_type>();
 5880|    494|            if (!is_segment_contiguous(range)) {
 5881|    494|                return impl(rd, range, value);
 5882|    494|            }
 5883|    494|            auto crange = get_as_contiguous(range);
 5884|    494|            SCN_TRY(it, impl(rd, crange, value));
 5885|    494|            return ranges::next(range.begin(),
 5886|    494|                                ranges::distance(crange.begin(), it));
 5887|    494|        }
 5888|    494|        else {
 5889|    494|            SCN_EXPECT(false);
 5890|    494|            SCN_UNREACHABLE;
 5891|    494|        }
 5892|    494|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    494|    {
 5863|    494|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 494]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    494|                        .transform_error(make_eof_scan_error));
 5865|    494|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    494|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    494|    {
 3528|    494|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    494|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    494|        return read_default_with_base(range, value, 10);
 3530|    494|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    494|    {
 3492|    494|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 494]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    494|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    494|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    494|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    494|                return unexpected_scan_error(
 3498|    494|                    scan_error::invalid_scanned_value,
 3499|    494|                    "Unexpected '-' sign when parsing an "
 3500|    494|                    "unsigned value");
 3501|    494|            }
 3502|    494|        }
 3503|       |
 3504|    494|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 494]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|    988|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 494]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|    988|                parse_integer_digits_without_thsep(
 3511|    988|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|    988|                    prefix_result.parsed_base));
 3513|       |
 3514|    988|        auto buf = make_contiguous_buffer(
 3515|    988|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|    988|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 494, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    494|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    494|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    494|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    494|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    494|    }                                                  \
  |  |  |  | 3671|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|    988|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5870|    494|    {
 5871|    494|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    494|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    494|                          basic_contiguous_scan_context<char_type>>) {
 5875|    494|            auto rd = make_reader<T, char_type>();
 5876|    494|            return impl(rd, range, value);
 5877|    494|        }
 5878|    494|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    494|            auto rd = make_reader<T, char_type>();
 5880|    494|            if (!is_segment_contiguous(range)) {
 5881|    494|                return impl(rd, range, value);
 5882|    494|            }
 5883|    494|            auto crange = get_as_contiguous(range);
 5884|    494|            SCN_TRY(it, impl(rd, crange, value));
 5885|    494|            return ranges::next(range.begin(),
 5886|    494|                                ranges::distance(crange.begin(), it));
 5887|    494|        }
 5888|    494|        else {
 5889|    494|            SCN_EXPECT(false);
 5890|    494|            SCN_UNREACHABLE;
 5891|    494|        }
 5892|    494|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    494|    {
 5863|    494|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 494]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    494|                        .transform_error(make_eof_scan_error));
 5865|    494|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    494|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    494|    {
 3528|    494|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    494|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    494|        return read_default_with_base(range, value, 10);
 3530|    494|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    494|    {
 3492|    494|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 494]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    494|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    494|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    494|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 494]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    494|        }
 3503|       |
 3504|    494|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 494]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|    988|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 494]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|    988|                parse_integer_digits_without_thsep(
 3511|    988|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|    988|                    prefix_result.parsed_base));
 3513|       |
 3514|    988|        auto buf = make_contiguous_buffer(
 3515|    988|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|    988|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 494, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    494|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    494|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    494|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    494|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    494|    }                                                  \
  |  |  |  | 3671|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|    988|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5870|    494|    {
 5871|    494|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    494|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    494|                          basic_contiguous_scan_context<char_type>>) {
 5875|    494|            auto rd = make_reader<T, char_type>();
 5876|    494|            return impl(rd, range, value);
 5877|    494|        }
 5878|    494|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    494|            auto rd = make_reader<T, char_type>();
 5880|    494|            if (!is_segment_contiguous(range)) {
 5881|    494|                return impl(rd, range, value);
 5882|    494|            }
 5883|    494|            auto crange = get_as_contiguous(range);
 5884|    494|            SCN_TRY(it, impl(rd, crange, value));
 5885|    494|            return ranges::next(range.begin(),
 5886|    494|                                ranges::distance(crange.begin(), it));
 5887|    494|        }
 5888|    494|        else {
 5889|    494|            SCN_EXPECT(false);
 5890|    494|            SCN_UNREACHABLE;
 5891|    494|        }
 5892|    494|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    494|    {
 5863|    494|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 494]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    494|                        .transform_error(make_eof_scan_error));
 5865|    494|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    494|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5747|    894|    {
 5748|    894|        return true;
 5749|    894|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    806|    {
 5765|    806|        detail::format_specs specs{};
 5766|    806|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    806|        std::uintptr_t intvalue{};
 5769|    806|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    806|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    806|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    806|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    806|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 806, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    806|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    806|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    806|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    806|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    806|    }                                                  \
  |  |  |  | 3671|    806|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    806|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5870|    494|    {
 5871|    494|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    494|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    494|                          basic_contiguous_scan_context<char_type>>) {
 5875|    494|            auto rd = make_reader<T, char_type>();
 5876|    494|            return impl(rd, range, value);
 5877|    494|        }
 5878|    494|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    494|            auto rd = make_reader<T, char_type>();
 5880|    494|            if (!is_segment_contiguous(range)) {
 5881|    494|                return impl(rd, range, value);
 5882|    494|            }
 5883|    494|            auto crange = get_as_contiguous(range);
 5884|    494|            SCN_TRY(it, impl(rd, crange, value));
 5885|    494|            return ranges::next(range.begin(),
 5886|    494|                                ranges::distance(crange.begin(), it));
 5887|    494|        }
 5888|    494|        else {
 5889|    494|            SCN_EXPECT(false);
 5890|    494|            SCN_UNREACHABLE;
 5891|    494|        }
 5892|    494|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    494|    {
 5863|    494|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 494]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    494|                        .transform_error(make_eof_scan_error));
 5865|    494|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    494|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|  1.04k|    {
 3035|  1.04k|        return true;
 3036|  1.04k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    494|    {
 5504|    494|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    494|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    494|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    494|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|    874|    {
 5355|    874|        scan_error err{scan_error::invalid_scanned_value,
 5356|    874|                       "Failed to read boolean"};
 5357|       |
 5358|    874|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 824, False: 50]
  ------------------
 5359|    824|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 824]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    824|            else {
 5363|    824|                err = r.error();
 5364|    824|            }
 5365|    824|        }
 5366|       |
 5367|    874|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 854, False: 20]
  ------------------
 5368|    854|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 854]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    854|            else {
 5372|    854|                err = r.error();
 5373|    854|            }
 5374|    854|        }
 5375|       |
 5376|    874|        return unexpected(err);
 5377|    874|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    840|    {
 5384|    840|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 840]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    840|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 840]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    840|        return unexpected_scan_error(
 5394|    840|            scan_error::invalid_scanned_value,
 5395|    840|            "Failed to read numeric boolean value: No match");
 5396|    840|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|    854|    {
 5402|    854|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 854]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    854|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 854]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    854|        return unexpected_scan_error(
 5412|    854|            scan_error::invalid_scanned_value,
 5413|    854|            "Failed to read textual boolean value: No match");
 5414|    854|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  1.70k|{
 2194|  1.70k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.70k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.70k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.70k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 118, False: 1.59k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    118|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    118|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    118|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    118|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    118|    }                                                  \
  |  |  |  | 3671|  1.70k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.59k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.59k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.59k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.59k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.59k|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|  1.59k|            return unexpected(parse_error::error);
 2202|  1.59k|        }
 2203|  1.59k|        return it;
 2204|  1.59k|    }
 2205|  1.59k|    else {
 2206|  1.59k|        auto range_it = range.begin();
 2207|  1.59k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 1.59k, False: 0]
  ------------------
 2208|  1.59k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  1.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.59k, False: 0]
  |  |  ------------------
  ------------------
 2209|  1.59k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.59k|                return unexpected(parse_error::error);
 2211|  1.59k|            }
 2212|  1.59k|        }
 2213|      0|        return it;
 2214|  1.59k|    }
 2215|  1.59k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5870|    494|    {
 5871|    494|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    494|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    494|                          basic_contiguous_scan_context<char_type>>) {
 5875|    494|            auto rd = make_reader<T, char_type>();
 5876|    494|            return impl(rd, range, value);
 5877|    494|        }
 5878|    494|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    494|            auto rd = make_reader<T, char_type>();
 5880|    494|            if (!is_segment_contiguous(range)) {
 5881|    494|                return impl(rd, range, value);
 5882|    494|            }
 5883|    494|            auto crange = get_as_contiguous(range);
 5884|    494|            SCN_TRY(it, impl(rd, crange, value));
 5885|    494|            return ranges::next(range.begin(),
 5886|    494|                                ranges::distance(crange.begin(), it));
 5887|    494|        }
 5888|    494|        else {
 5889|    494|            SCN_EXPECT(false);
 5890|    494|            SCN_UNREACHABLE;
 5891|    494|        }
 5892|    494|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    494|    {
 5863|    494|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 494]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    494|                        .transform_error(make_eof_scan_error));
 5865|    494|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    494|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|    494|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|    494|    {
 5871|    494|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    494|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    494|                          basic_contiguous_scan_context<char_type>>) {
 5875|    494|            auto rd = make_reader<T, char_type>();
 5876|    494|            return impl(rd, range, value);
 5877|    494|        }
 5878|    494|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    494|            auto rd = make_reader<T, char_type>();
 5880|    494|            if (!is_segment_contiguous(range)) {
 5881|    494|                return impl(rd, range, value);
 5882|    494|            }
 5883|    494|            auto crange = get_as_contiguous(range);
 5884|    494|            SCN_TRY(it, impl(rd, crange, value));
 5885|    494|            return ranges::next(range.begin(),
 5886|    494|                                ranges::distance(crange.begin(), it));
 5887|    494|        }
 5888|    494|        else {
 5889|    494|            SCN_EXPECT(false);
 5890|    494|            SCN_UNREACHABLE;
 5891|    494|        }
 5892|    494|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    494|    {
 5863|    494|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 494]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    494|                        .transform_error(make_eof_scan_error));
 5865|    494|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    494|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    494|    {
 4152|    494|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    494|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    494|        float_reader<CharT> rd{};
 4155|    494|        return read_impl<Range>(
 4156|    494|            range, rd,
 4157|    494|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    494|                return r.read_source(SCN_FWD(args)...);
 4159|    494|            },
 4160|    494|            value);
 4161|    494|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    494|    {
  754|    494|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    494|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    494|              cvref<T> obj = *get<T>(fn);
  745|    494|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    494|                  obj(static_cast<decltype(args)>(args)...);
  747|    494|              }
  748|    494|              else {
  749|    494|                  return obj(static_cast<decltype(args)>(args)...);
  750|    494|              }
  751|    494|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    494|    {
  684|    494|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    494|            return static_cast<T*>(s.m_cp);
  686|    494|        }
  687|    494|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    494|            return static_cast<T*>(s.m_p);
  689|    494|        }
  690|    494|        else {
  691|    494|            return reinterpret_cast<T*>(s.m_fp);
  692|    494|        }
  693|    494|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    494|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    494|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    494|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    494|        {
  662|    494|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    494|    {
 5871|    494|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    494|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    494|                          basic_contiguous_scan_context<char_type>>) {
 5875|    494|            auto rd = make_reader<T, char_type>();
 5876|    494|            return impl(rd, range, value);
 5877|    494|        }
 5878|    494|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    494|            auto rd = make_reader<T, char_type>();
 5880|    494|            if (!is_segment_contiguous(range)) {
 5881|    494|                return impl(rd, range, value);
 5882|    494|            }
 5883|    494|            auto crange = get_as_contiguous(range);
 5884|    494|            SCN_TRY(it, impl(rd, crange, value));
 5885|    494|            return ranges::next(range.begin(),
 5886|    494|                                ranges::distance(crange.begin(), it));
 5887|    494|        }
 5888|    494|        else {
 5889|    494|            SCN_EXPECT(false);
 5890|    494|            SCN_UNREACHABLE;
 5891|    494|        }
 5892|    494|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    494|    {
 5863|    494|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 494]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    494|                        .transform_error(make_eof_scan_error));
 5865|    494|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    494|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    494|    {
 5266|    494|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    494|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    494|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    494|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    494|    {
 5871|    494|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    494|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    494|                          basic_contiguous_scan_context<char_type>>) {
 5875|    494|            auto rd = make_reader<T, char_type>();
 5876|    494|            return impl(rd, range, value);
 5877|    494|        }
 5878|    494|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    494|            auto rd = make_reader<T, char_type>();
 5880|    494|            if (!is_segment_contiguous(range)) {
 5881|    494|                return impl(rd, range, value);
 5882|    494|            }
 5883|    494|            auto crange = get_as_contiguous(range);
 5884|    494|            SCN_TRY(it, impl(rd, crange, value));
 5885|    494|            return ranges::next(range.begin(),
 5886|    494|                                ranges::distance(crange.begin(), it));
 5887|    494|        }
 5888|    494|        else {
 5889|    494|            SCN_EXPECT(false);
 5890|    494|            SCN_UNREACHABLE;
 5891|    494|        }
 5892|    494|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    494|    {
 5863|    494|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 494]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    494|                        .transform_error(make_eof_scan_error));
 5865|    494|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    494|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    494|    {
 5266|    494|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    494|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    494|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    494|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    494|    {
 5871|    494|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    494|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    494|                          basic_contiguous_scan_context<char_type>>) {
 5875|    494|            auto rd = make_reader<T, char_type>();
 5876|    494|            return impl(rd, range, value);
 5877|    494|        }
 5878|    494|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    494|            auto rd = make_reader<T, char_type>();
 5880|    494|            if (!is_segment_contiguous(range)) {
 5881|    494|                return impl(rd, range, value);
 5882|    494|            }
 5883|    494|            auto crange = get_as_contiguous(range);
 5884|    494|            SCN_TRY(it, impl(rd, crange, value));
 5885|    494|            return ranges::next(range.begin(),
 5886|    494|                                ranges::distance(crange.begin(), it));
 5887|    494|        }
 5888|    494|        else {
 5889|    494|            SCN_EXPECT(false);
 5890|    494|            SCN_UNREACHABLE;
 5891|    494|        }
 5892|    494|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    494|    {
 5863|    494|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 494]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    494|                        .transform_error(make_eof_scan_error));
 5865|    494|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    494|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    494|    {
 5266|    494|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    494|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    494|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    494|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   169k|    {
 2879|   169k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   644k|    {
 2883|   644k|        return m_current;
 2884|   644k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   862k|    {
 2888|   862k|        return m_range.end();
 2889|   862k|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   443k|{
 1221|       |    // TODO: optimize
 1222|   443k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   443k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   443k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   443k|    auto res = get_next_code_point(str);
 1224|   443k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   443k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   388k|    {
 2903|   388k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   388k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   388k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   388k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   388k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 388k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   388k|        }
 2909|   388k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   388k|    static_cast<    \
  |  |  929|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   388k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  29.5k|    {
 2893|  29.5k|        return ranges::subrange{begin(), end()};
 2894|  29.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  1.26k|    {
 6037|  1.26k|        const bool need_skipped_width =
 6038|  1.26k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 34, False: 1.22k]
  |  Branch (6038:33): [True: 1.22k, False: 0]
  ------------------
 6039|  1.26k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.26k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 36, False: 1.22k]
  ------------------
 6043|  1.26k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 198, False: 1.02k]
  ------------------
 6044|    234|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    234|                             need_skipped_width);
 6046|    234|        }
 6047|  1.02k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 976, False: 52]
  |  Branch (6047:56): [True: 670, False: 306]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|    670|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 670, False: 0]
  ------------------
 6051|    670|                auto max_width_view = take_width(rng, specs.precision);
 6052|    670|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|    670|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    670|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    670|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    670|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|    670|                                  .transform_error(make_eof_scan_error));
 6054|    670|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|    670|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|    358|        return result_type{rng.begin(), 0};
 6070|  1.02k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    234|{
 5951|    234|    using char_type = detail::char_t<Range>;
 5952|    234|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    234|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 234, False: 0]
  ------------------
 5955|    234|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    234|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    234|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 234]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    234|        auto max_width_view = take_width(range, max_width);
 5972|    234|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    234|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 234, False: 0]
  ------------------
 5975|    234|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    234|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    234|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_:
  753|    234|    {
  754|    234|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|    280|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    280|              cvref<T> obj = *get<T>(fn);
  745|    280|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    280|                  obj(static_cast<decltype(args)>(args)...);
  747|    280|              }
  748|    280|              else {
  749|    280|                  return obj(static_cast<decltype(args)>(args)...);
  750|    280|              }
  751|    280|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    280|    {
  684|    280|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    280|            return static_cast<T*>(s.m_cp);
  686|    280|        }
  687|    280|        else if constexpr (std::is_object_v<T>) {
  688|    280|            return static_cast<T*>(s.m_p);
  689|    280|        }
  690|    280|        else {
  691|    280|            return reinterpret_cast<T*>(s.m_fp);
  692|    280|        }
  693|    280|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    280|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSJ_:
  666|    234|        {
  667|    234|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    234|{
 1976|    234|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    234|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    234|{
 1957|    234|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    234|        return std::find_if(range.begin(), range.end(), pred);
 1959|    234|    }
 1960|    234|    else {
 1961|    234|        auto first = range.begin();
 1962|    314|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 280, False: 34]
  ------------------
 1963|    280|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 200, False: 80]
  ------------------
 1964|    200|                return first;
 1965|    200|            }
 1966|    280|        }
 1967|     34|        return first;
 1968|    234|    }
 1969|    234|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2809|  1.57k|    {
 2810|  1.57k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  1.57k|                                      m_count};
 2812|  1.57k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2716|  5.47k|    {
 2717|  5.47k|        return view;
 2718|  5.47k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  1.57k|    {
 2382|  1.57k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|    984|        {
 2781|    984|            return !(y == x);
 2782|    984|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  2.32k|        {
 2770|  2.32k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 34, False: 2.29k]
  |  Branch (2770:39): [True: 34, False: 0]
  ------------------
 2771|  2.32k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 2.29k]
  ------------------
 2772|  2.32k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|     34|    {
 2421|     34|        return m_multibyte_left;
 2422|     34|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2815|  2.32k|    {
 2816|  2.32k|        return sentinel<true>{m_base.get().end()};
 2817|  2.32k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  2.32k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  1.62k|    {
 2426|  1.62k|        return *m_current;
 2427|  1.62k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|    750|    {
 2435|    750|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|    750|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|    750|        _increment_current();
 2437|    750|        return *this;
 2438|    750|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|    750|    {
 2668|    750|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 750, False: 0]
  ------------------
 2669|    750|            auto cplen = _get_cp_length_at_current();
 2670|    750|            m_multibyte_left = cplen - 1;
 2671|    750|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|    750|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|    750|        ++m_current;
 2678|    750|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|    750|    {
 2639|    750|        return static_cast<difference_type>(
 2640|    750|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|    750|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|    750|    {
 2645|    750|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|    750|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 750]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|    750|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 750, False: 0]
  ------------------
 2650|    750|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|    750|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|    750|            auto cp = static_cast<char32_t>(*m_current);
 2652|    750|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|    750|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|    904|    {
 2832|    904|        return take_width_view{r, n};
 2833|    904|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2800|    904|    {
 2801|    904|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2713|    904|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|    670|{
 2951|    670|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 670, False: 0]
  ------------------
 2952|    670|        auto it = read_while_classic_space(range);
 2953|    670|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|    670|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|    670|        return it;
 2959|    670|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|    670|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|    670|{
 2117|    670|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    670|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    670|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    670|        auto buf = make_contiguous_buffer(range);
 2121|    670|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    670|        return ranges::next(range.begin(),
 2123|    670|                            ranges::distance(buf.view().begin(), it));
 2124|    670|    }
 2125|    670|    else {
 2126|    670|        auto it = range.begin();
 2127|       |
 2128|    670|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    670|            auto seg = get_contiguous_beginning(range);
 2130|    670|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    670|                seg_it != seg.end()) {
 2132|    670|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|    670|            }
 2134|    670|            ranges::advance(it, seg.size());
 2135|    670|        }
 2136|       |
 2137|    670|        return read_while_code_point(
 2138|    670|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    670|    }
 2140|    670|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|    670|{
 2082|    670|    return read_until_code_point(range, std::not_fn(pred));
 2083|    670|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|    670|{
 2061|    670|    auto it = range.begin();
 2062|    670|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 670, False: 0]
  ------------------
 2063|    670|        const auto val =
 2064|    670|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|    670|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|    670|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 670, False: 0]
  |  |  ------------------
  ------------------
 2066|    670|            const auto cp = detail::decode_code_point_exhaustive(
 2067|    670|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|    670|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 670, False: 0]
  ------------------
 2069|    670|                return it;
 2070|    670|            }
 2071|    670|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|    670|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|    670|{
 1899|    670|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|    670|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    670|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|    670|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|    670|    auto it = range.begin();
 1903|    670|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|    670|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|    670|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 670, False: 0]
  ------------------
 1912|    670|        ++it;
 1913|    670|        return {it, string_type(1, *range.begin())};
 1914|    670|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|    670|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  1.34k|{
  944|  1.34k|    return is_range_eof(r.begin(), r.end());
  945|  1.34k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  1.34k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.34k|    {
  937|  1.34k|        return begin == end;
  938|  1.34k|    }
  939|  1.34k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1889|    670|    {
 1890|    670|        return !codepoint.empty();
 1891|    670|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|    670|    {
  754|    670|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|    670|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    670|              cvref<T> obj = *get<T>(fn);
  745|    670|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    670|                  obj(static_cast<decltype(args)>(args)...);
  747|    670|              }
  748|    670|              else {
  749|    670|                  return obj(static_cast<decltype(args)>(args)...);
  750|    670|              }
  751|    670|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|    670|    {
  684|    670|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    670|            return static_cast<T*>(s.m_cp);
  686|    670|        }
  687|    670|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    670|            return static_cast<T*>(s.m_p);
  689|    670|        }
  690|    670|        else {
  691|    670|            return reinterpret_cast<T*>(s.m_fp);
  692|    670|        }
  693|    670|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|    670|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|    670|        {
  662|    670|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|    670|{
  950|    670|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|    670|    return eof_error::good;
  954|    670|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  3.19k|    {
 2413|  3.19k|        return m_current;
 2414|  3.19k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  3.22k|    {
 2417|  3.22k|        return m_count;
 2418|  3.22k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  8.73k|    {
 6037|  8.73k|        const bool need_skipped_width =
 6038|  8.73k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 4.01k, False: 4.71k]
  |  Branch (6038:33): [True: 0, False: 4.71k]
  ------------------
 6039|  8.73k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  8.73k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 54, False: 8.68k]
  ------------------
 6043|  8.73k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 252, False: 8.42k]
  ------------------
 6044|    306|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    306|                             need_skipped_width);
 6046|    306|        }
 6047|  8.42k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 8.07k, False: 350]
  |  Branch (6047:56): [True: 2.38k, False: 5.69k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.38k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 2.38k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  4.76k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  2.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.38k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  4.76k|                            make_eof_scan_error));
 6058|       |
 6059|  4.76k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.92k, False: 452]
  ------------------
 6060|  1.92k|                return result_type{
 6061|  1.92k|                    it,
 6062|  1.92k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.92k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.92k|                                             .view())};
 6065|  1.92k|            }
 6066|    452|            return result_type{it, 0};
 6067|  4.76k|        }
 6068|       |
 6069|  6.04k|        return result_type{rng.begin(), 0};
 6070|  8.42k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  1.79k|    {
 6079|  1.79k|        const bool need_skipped_width =
 6080|  1.79k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 570, False: 1.22k]
  |  Branch (6080:33): [True: 322, False: 906]
  ------------------
 6081|  1.79k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.79k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 92, False: 1.70k]
  ------------------
 6084|  1.79k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 136, False: 1.57k]
  ------------------
 6085|    228|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 66, False: 162]
  ------------------
 6086|    228|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 44, False: 22]
  ------------------
 6087|     44|                return result_type{rng.begin(), 0};
 6088|     44|            }
 6089|    184|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    184|                             specs.fill, need_skipped_width);
 6091|    228|        }
 6092|  1.57k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.55k, False: 18]
  ------------------
 6093|  1.57k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 1.35k, False: 198]
  ------------------
 6094|  1.57k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 414, False: 940]
  |  Branch (6094:35): [True: 404, False: 10]
  ------------------
 6095|  1.35k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 226, False: 724]
  ------------------
 6096|    950|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 140, False: 86]
  ------------------
 6097|    544|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 140, False: 404]
  ------------------
 6098|    140|                const auto initial_width =
 6099|    140|                    specs.precision - prefix_width - value_width;
 6100|    140|                auto max_width_view = take_width(rng, initial_width);
 6101|    140|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    140|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    140|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    140|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 140]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    140|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    140|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    140|                                  .transform_error(make_eof_scan_error));
 6103|    140|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    140|            }
 6105|    808|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|    808|                            make_eof_scan_error));
 6107|       |
 6108|    808|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 404, False: 0]
  ------------------
 6109|    404|                return result_type{
 6110|    404|                    it,
 6111|    404|                    calculate_text_width(make_contiguous_buffer(
 6112|    404|                                             ranges::subrange{rng.begin(), it})
 6113|    404|                                             .view())};
 6114|    404|            }
 6115|      0|            return result_type{it, 0};
 6116|    808|        }
 6117|  1.02k|        return result_type{rng.begin(), 0};
 6118|  1.57k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6192|  2.53k|    {
 6193|  2.53k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.53k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.53k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.53k|            auto rd = make_reader<T, char_type>();
 6198|  2.53k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.06k, False: 464]
  |  |  ------------------
  ------------------
 6199|  2.06k|                return unexpected(e);
 6200|  2.06k|            }
 6201|       |
 6202|    464|            return impl(rd, range, value);
 6203|  2.53k|        }
 6204|  2.53k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.53k|            auto rd = make_reader<T, char_type>();
 6206|  2.53k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.53k|                return unexpected(e);
 6208|  2.53k|            }
 6209|       |
 6210|  2.53k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.53k|                specs.width != 0) {
 6212|  2.53k|                return impl(rd, range, value);
 6213|  2.53k|            }
 6214|       |
 6215|  2.53k|            auto crange = get_as_contiguous(range);
 6216|  2.53k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.53k|            return ranges::next(range.begin(),
 6218|  2.53k|                                ranges::distance(crange.begin(), it));
 6219|  2.53k|        }
 6220|  2.53k|        else {
 6221|  2.53k|            SCN_EXPECT(false);
 6222|  2.53k|            SCN_UNREACHABLE;
 6223|  2.53k|        }
 6224|  2.53k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    464|    {
 6124|    464|        const bool need_skipped_width =
 6125|    464|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 250, False: 214]
  |  Branch (6125:33): [True: 118, False: 96]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    464|        auto it = rng.begin();
 6129|    464|        std::ptrdiff_t prefix_width = 0;
 6130|    464|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 120, False: 344]
  ------------------
 6131|    120|            auto max_width_view = take_width(rng, specs.precision);
 6132|    120|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    120|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    120|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    120|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 120]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    120|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    120|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    120|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    120|            it = prefix_result.first.base();
 6135|    120|            prefix_width = prefix_result.second;
 6136|    120|        }
 6137|    344|        else {
 6138|    344|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    344|            std::tie(it, prefix_width) = prefix_result;
 6140|    344|        }
 6141|    464|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    464|        std::ptrdiff_t value_width = 0;
 6145|    464|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 120, False: 344]
  ------------------
 6146|    120|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 118]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    118|            const auto initial_width = specs.precision - prefix_width;
 6154|    118|            auto max_width_view =
 6155|    118|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    118|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    118|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    118|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    118|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 118, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    118|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    118|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    118|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    118|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    118|    }                                                  \
  |  |  |  | 3671|    118|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    344|        else {
 6161|    344|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 344, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    344|    }                                                  \
  |  | 3671|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6192|  2.53k|    {
 6193|  2.53k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.53k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.53k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.53k|            auto rd = make_reader<T, char_type>();
 6198|  2.53k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.06k, False: 464]
  |  |  ------------------
  ------------------
 6199|  2.06k|                return unexpected(e);
 6200|  2.06k|            }
 6201|       |
 6202|    464|            return impl(rd, range, value);
 6203|  2.53k|        }
 6204|  2.53k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.53k|            auto rd = make_reader<T, char_type>();
 6206|  2.53k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.53k|                return unexpected(e);
 6208|  2.53k|            }
 6209|       |
 6210|  2.53k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.53k|                specs.width != 0) {
 6212|  2.53k|                return impl(rd, range, value);
 6213|  2.53k|            }
 6214|       |
 6215|  2.53k|            auto crange = get_as_contiguous(range);
 6216|  2.53k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.53k|            return ranges::next(range.begin(),
 6218|  2.53k|                                ranges::distance(crange.begin(), it));
 6219|  2.53k|        }
 6220|  2.53k|        else {
 6221|  2.53k|            SCN_EXPECT(false);
 6222|  2.53k|            SCN_UNREACHABLE;
 6223|  2.53k|        }
 6224|  2.53k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    464|    {
 6124|    464|        const bool need_skipped_width =
 6125|    464|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 250, False: 214]
  |  Branch (6125:33): [True: 118, False: 96]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    464|        auto it = rng.begin();
 6129|    464|        std::ptrdiff_t prefix_width = 0;
 6130|    464|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 120, False: 344]
  ------------------
 6131|    120|            auto max_width_view = take_width(rng, specs.precision);
 6132|    120|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    120|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    120|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    120|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 120]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    120|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    120|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    120|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    120|            it = prefix_result.first.base();
 6135|    120|            prefix_width = prefix_result.second;
 6136|    120|        }
 6137|    344|        else {
 6138|    344|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    344|            std::tie(it, prefix_width) = prefix_result;
 6140|    344|        }
 6141|    464|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    464|        std::ptrdiff_t value_width = 0;
 6145|    464|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 120, False: 344]
  ------------------
 6146|    120|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 118]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    118|            const auto initial_width = specs.precision - prefix_width;
 6154|    118|            auto max_width_view =
 6155|    118|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    118|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    118|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    118|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    118|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 118, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    118|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    118|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    118|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    118|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    118|    }                                                  \
  |  |  |  | 3671|    118|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    344|        else {
 6161|    344|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 344, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    344|    }                                                  \
  |  | 3671|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6192|  2.49k|    {
 6193|  2.49k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.49k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.49k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.49k|            auto rd = make_reader<T, char_type>();
 6198|  2.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 400]
  |  |  ------------------
  ------------------
 6199|  2.09k|                return unexpected(e);
 6200|  2.09k|            }
 6201|       |
 6202|    400|            return impl(rd, range, value);
 6203|  2.49k|        }
 6204|  2.49k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.49k|            auto rd = make_reader<T, char_type>();
 6206|  2.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.49k|                return unexpected(e);
 6208|  2.49k|            }
 6209|       |
 6210|  2.49k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.49k|                specs.width != 0) {
 6212|  2.49k|                return impl(rd, range, value);
 6213|  2.49k|            }
 6214|       |
 6215|  2.49k|            auto crange = get_as_contiguous(range);
 6216|  2.49k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.49k|            return ranges::next(range.begin(),
 6218|  2.49k|                                ranges::distance(crange.begin(), it));
 6219|  2.49k|        }
 6220|  2.49k|        else {
 6221|  2.49k|            SCN_EXPECT(false);
 6222|  2.49k|            SCN_UNREACHABLE;
 6223|  2.49k|        }
 6224|  2.49k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5752|  2.49k|    {
 5753|  2.49k|        reader_error_handler eh{};
 5754|  2.49k|        detail::check_pointer_type_specs(specs, eh);
 5755|  2.49k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 400]
  |  |  ------------------
  ------------------
 5756|  2.09k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  2.09k|        }
 5758|    400|        return {};
 5759|  2.49k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    400|    {
 6124|    400|        const bool need_skipped_width =
 6125|    400|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 246, False: 154]
  |  Branch (6125:33): [True: 86, False: 68]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    400|        auto it = rng.begin();
 6129|    400|        std::ptrdiff_t prefix_width = 0;
 6130|    400|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 88, False: 312]
  ------------------
 6131|     88|            auto max_width_view = take_width(rng, specs.precision);
 6132|     88|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|     88|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     88|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     88|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     88|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 88]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     88|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|     88|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|     88|            it = prefix_result.first.base();
 6135|     88|            prefix_width = prefix_result.second;
 6136|     88|        }
 6137|    312|        else {
 6138|    312|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    312|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    312|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    312|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 312]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    312|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    312|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    312|            std::tie(it, prefix_width) = prefix_result;
 6140|    312|        }
 6141|    400|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    400|        std::ptrdiff_t value_width = 0;
 6145|    400|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 88, False: 312]
  ------------------
 6146|     88|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 86]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|     86|            const auto initial_width = specs.precision - prefix_width;
 6154|     86|            auto max_width_view =
 6155|     86|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|     86|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|     86|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     86|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     86|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     86|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 86, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     86|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     86|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     86|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     86|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     86|    }                                                  \
  |  |  |  | 3671|     86|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    312|        else {
 6161|    312|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    312|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    312|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 312, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    312|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    312|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    312|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    312|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    312|    }                                                  \
  |  | 3671|    312|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    312|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|     86|    {
 5782|     86|        SCN_UNUSED(specs);
  ------------------
  |  |  909|     86|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|     86|        return read_default(range, value, loc);
 5784|     86|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|     86|    {
 5765|     86|        detail::format_specs specs{};
 5766|     86|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|     86|        std::uintptr_t intvalue{};
 5769|     86|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|     86|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     86|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     86|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     86|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 86, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     86|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     86|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     86|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     86|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     86|    }                                                  \
  |  |  |  | 3671|     86|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|     86|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    312|    {
 5782|    312|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    312|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    312|        return read_default(range, value, loc);
 5784|    312|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6192|  2.53k|    {
 6193|  2.53k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.53k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.53k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.53k|            auto rd = make_reader<T, char_type>();
 6198|  2.53k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.98k, False: 548]
  |  |  ------------------
  ------------------
 6199|  1.98k|                return unexpected(e);
 6200|  1.98k|            }
 6201|       |
 6202|    548|            return impl(rd, range, value);
 6203|  2.53k|        }
 6204|  2.53k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.53k|            auto rd = make_reader<T, char_type>();
 6206|  2.53k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.53k|                return unexpected(e);
 6208|  2.53k|            }
 6209|       |
 6210|  2.53k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.53k|                specs.width != 0) {
 6212|  2.53k|                return impl(rd, range, value);
 6213|  2.53k|            }
 6214|       |
 6215|  2.53k|            auto crange = get_as_contiguous(range);
 6216|  2.53k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.53k|            return ranges::next(range.begin(),
 6218|  2.53k|                                ranges::distance(crange.begin(), it));
 6219|  2.53k|        }
 6220|  2.53k|        else {
 6221|  2.53k|            SCN_EXPECT(false);
 6222|  2.53k|            SCN_UNREACHABLE;
 6223|  2.53k|        }
 6224|  2.53k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  2.53k|    {
 3040|  2.53k|        reader_error_handler eh{};
 3041|  2.53k|        get_derived().check_specs_impl(specs, eh);
 3042|  2.53k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.98k, False: 548]
  |  |  ------------------
  ------------------
 3043|  1.98k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  1.98k|        }
 3045|    548|        return {};
 3046|  2.53k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|  2.53k|    {
 3051|  2.53k|        return static_cast<Derived&>(*this);
 3052|  2.53k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  2.53k|    {
 5497|  2.53k|        detail::check_bool_type_specs(specs, eh);
 5498|  2.53k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    548|    {
 6124|    548|        const bool need_skipped_width =
 6125|    548|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 264, False: 284]
  |  Branch (6125:33): [True: 146, False: 138]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    548|        auto it = rng.begin();
 6129|    548|        std::ptrdiff_t prefix_width = 0;
 6130|    548|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 150, False: 398]
  ------------------
 6131|    150|            auto max_width_view = take_width(rng, specs.precision);
 6132|    150|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    150|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    150|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    150|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    150|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    150|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    150|            it = prefix_result.first.base();
 6135|    150|            prefix_width = prefix_result.second;
 6136|    150|        }
 6137|    398|        else {
 6138|    398|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    398|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    398|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    398|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    398|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 398]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    398|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    398|            std::tie(it, prefix_width) = prefix_result;
 6140|    398|        }
 6141|    548|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    548|        std::ptrdiff_t value_width = 0;
 6145|    548|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 150, False: 398]
  ------------------
 6146|    150|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 146]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    146|            const auto initial_width = specs.precision - prefix_width;
 6154|    146|            auto max_width_view =
 6155|    146|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    146|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    146|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    146|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    146|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    146|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 146, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    146|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    146|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    146|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    146|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    146|    }                                                  \
  |  |  |  | 3671|    146|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    398|        else {
 6161|    398|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    398|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    398|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    398|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 398, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    398|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    398|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    398|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    398|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    398|    }                                                  \
  |  | 3671|    398|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    146|    {
 5516|    146|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    146|#if !SCN_DISABLE_LOCALE
 5519|    146|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 18, False: 128]
  ------------------
 5520|     18|            return rd.read_localized(range, loc, value);
 5521|     18|        }
 5522|    128|#endif
 5523|       |
 5524|    128|        return rd.read_classic(range, value);
 5525|    146|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5528|    544|    {
 5529|    544|        SCN_GCC_COMPAT_PUSH
 5530|    544|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    544|        switch (specs.type) {
 5533|     80|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 80, False: 464]
  ------------------
 5534|     80|                return bool_reader_base::allow_text;
 5535|       |
 5536|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 14, False: 530]
  ------------------
 5537|     22|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 8, False: 536]
  ------------------
 5538|     30|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 8, False: 536]
  ------------------
 5539|     40|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 10, False: 534]
  ------------------
 5540|     48|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 8, False: 536]
  ------------------
 5541|     60|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 12, False: 532]
  ------------------
 5542|     60|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    404|            default:
  ------------------
  |  Branch (5544:13): [True: 404, False: 140]
  ------------------
 5545|    404|                return bool_reader_base::allow_text |
 5546|    404|                       bool_reader_base::allow_numeric;
 5547|    544|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    544|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     18|    {
 5428|     18|        scan_error err{scan_error::invalid_scanned_value,
 5429|     18|                       "Failed to read boolean"};
 5430|       |
 5431|     18|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 14, False: 4]
  ------------------
 5432|     14|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 14]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     14|            else {
 5436|     14|                err = r.error();
 5437|     14|            }
 5438|     14|        }
 5439|       |
 5440|     18|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 10, False: 8]
  ------------------
 5441|     10|            auto stdloc = loc.get<std::locale>();
 5442|     10|            const auto& numpunct =
 5443|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     10|            const auto truename = numpunct.truename();
 5445|     10|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     10|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 10]
  ------------------
 5448|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     10|            else {
 5452|     10|                err = r.error();
 5453|     10|            }
 5454|     10|        }
 5455|       |
 5456|     18|        return unexpected(err);
 5457|     18|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    118|    {
 5384|    118|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 118]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    118|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 118]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    118|        return unexpected_scan_error(
 5394|    118|            scan_error::invalid_scanned_value,
 5395|    118|            "Failed to read numeric boolean value: No match");
 5396|    118|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    236|{
 2146|    236|    auto it = read_code_unit(range);
 2147|    236|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 236]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    236|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 236, False: 0]
  |  |  ------------------
  ------------------
 2152|    236|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    236|        return unexpected(parse_error::error);
 2154|    236|    }
 2155|       |
 2156|      0|    return *it;
 2157|    236|}
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5467|     10|    {
 5468|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     10|        const auto shorter = std::pair{
 5470|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 10, False: 0]
  ------------------
 5471|     10|        const auto longer = std::pair{
 5472|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 10]
  ------------------
 5473|       |
 5474|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 10]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 10]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     10|                                     "read_textual: No match");
 5485|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      6|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      6|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      6|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      6|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 2185|      6|        return unexpected(parse_error::error);
 2186|      6|    }
 2187|      0|    return it;
 2188|      6|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    236|{
 1857|    236|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    236|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    236|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    236|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    236|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    236|        if (sz < count) {
 1862|    236|            return unexpected(eof_error::eof);
 1863|    236|        }
 1864|       |
 1865|    236|        return ranges::next(range.begin(), count);
 1866|    236|    }
 1867|    236|    else {
 1868|    236|        auto it = range.begin();
 1869|    236|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 236]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  1.14k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 970, False: 174]
  ------------------
 1874|    970|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 62, False: 908]
  ------------------
 1875|     62|                return unexpected(eof_error::eof);
 1876|     62|            }
 1877|    970|        }
 1878|       |
 1879|    174|        return it;
 1880|    236|    }
 1881|    236|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    236|{
 1095|    236|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    236|        return r.size();
 1097|    236|    }
 1098|    236|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    236|                           ranges::const_iterator_t<Range>,
 1100|    236|                           typename detail::basic_scan_buffer<
 1101|    236|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    236|        if constexpr (ranges::common_range<Range>) {
 1103|    236|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    236|        }
 1105|    236|        else {
 1106|    236|            if (r.begin().stores_parent()) {
 1107|    236|                return static_cast<size_t>(
 1108|    236|                    r.begin().parent()->chars_available() -
 1109|    236|                    r.begin().position());
 1110|    236|            }
 1111|    236|            return r.begin().contiguous_segment().size();
 1112|    236|        }
 1113|    236|    }
 1114|    236|    else {
 1115|    236|        return 0;
 1116|    236|    }
 1117|    236|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    128|    {
 5355|    128|        scan_error err{scan_error::invalid_scanned_value,
 5356|    128|                       "Failed to read boolean"};
 5357|       |
 5358|    128|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 104, False: 24]
  ------------------
 5359|    104|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 104]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    104|            else {
 5363|    104|                err = r.error();
 5364|    104|            }
 5365|    104|        }
 5366|       |
 5367|    128|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 108, False: 20]
  ------------------
 5368|    108|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 108]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    108|            else {
 5372|    108|                err = r.error();
 5373|    108|            }
 5374|    108|        }
 5375|       |
 5376|    128|        return unexpected(err);
 5377|    128|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    108|    {
 5402|    108|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 108]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    108|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 108]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    108|        return unexpected_scan_error(
 5412|    108|            scan_error::invalid_scanned_value,
 5413|    108|            "Failed to read textual boolean value: No match");
 5414|    108|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    216|{
 2194|    216|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    216|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    216|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    216|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48, False: 168]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     48|    }                                                  \
  |  |  |  | 3671|    216|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    168|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    168|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    168|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    168|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    168|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|    168|            return unexpected(parse_error::error);
 2202|    168|        }
 2203|    168|        return it;
 2204|    168|    }
 2205|    168|    else {
 2206|    168|        auto range_it = range.begin();
 2207|    168|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 168, False: 0]
  ------------------
 2208|    168|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 168, False: 0]
  |  |  ------------------
  ------------------
 2209|    168|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    168|                return unexpected(parse_error::error);
 2211|    168|            }
 2212|    168|        }
 2213|      0|        return it;
 2214|    168|    }
 2215|    168|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    398|    {
 5516|    398|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    398|#if !SCN_DISABLE_LOCALE
 5519|    398|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 18, False: 380]
  ------------------
 5520|     18|            return rd.read_localized(range, loc, value);
 5521|     18|        }
 5522|    380|#endif
 5523|       |
 5524|    380|        return rd.read_classic(range, value);
 5525|    398|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     18|    {
 5428|     18|        scan_error err{scan_error::invalid_scanned_value,
 5429|     18|                       "Failed to read boolean"};
 5430|       |
 5431|     18|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 16, False: 2]
  ------------------
 5432|     16|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 16]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     16|            else {
 5436|     16|                err = r.error();
 5437|     16|            }
 5438|     16|        }
 5439|       |
 5440|     18|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 6, False: 12]
  ------------------
 5441|      6|            auto stdloc = loc.get<std::locale>();
 5442|      6|            const auto& numpunct =
 5443|      6|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      6|            const auto truename = numpunct.truename();
 5445|      6|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      6|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 6]
  ------------------
 5448|      6|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      6|            else {
 5452|      6|                err = r.error();
 5453|      6|            }
 5454|      6|        }
 5455|       |
 5456|     18|        return unexpected(err);
 5457|     18|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5467|      6|    {
 5468|      6|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      6|        const auto shorter = std::pair{
 5470|      6|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 6, False: 0]
  ------------------
 5471|      6|        const auto longer = std::pair{
 5472|      6|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 6]
  ------------------
 5473|       |
 5474|      6|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 6]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      6|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 6]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      6|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      6|                                     "read_textual: No match");
 5485|      6|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     12|{
 2179|     12|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     10|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2185|     10|        return unexpected(parse_error::error);
 2186|     10|    }
 2187|      0|    return it;
 2188|     10|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6192|  2.49k|    {
 6193|  2.49k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.49k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.49k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.49k|            auto rd = make_reader<T, char_type>();
 6198|  2.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.05k, False: 436]
  |  |  ------------------
  ------------------
 6199|  2.05k|                return unexpected(e);
 6200|  2.05k|            }
 6201|       |
 6202|    436|            return impl(rd, range, value);
 6203|  2.49k|        }
 6204|  2.49k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.49k|            auto rd = make_reader<T, char_type>();
 6206|  2.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.49k|                return unexpected(e);
 6208|  2.49k|            }
 6209|       |
 6210|  2.49k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.49k|                specs.width != 0) {
 6212|  2.49k|                return impl(rd, range, value);
 6213|  2.49k|            }
 6214|       |
 6215|  2.49k|            auto crange = get_as_contiguous(range);
 6216|  2.49k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.49k|            return ranges::next(range.begin(),
 6218|  2.49k|                                ranges::distance(crange.begin(), it));
 6219|  2.49k|        }
 6220|  2.49k|        else {
 6221|  2.49k|            SCN_EXPECT(false);
 6222|  2.49k|            SCN_UNREACHABLE;
 6223|  2.49k|        }
 6224|  2.49k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    436|    {
 6124|    436|        const bool need_skipped_width =
 6125|    436|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 248, False: 188]
  |  Branch (6125:33): [True: 104, False: 84]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    436|        auto it = rng.begin();
 6129|    436|        std::ptrdiff_t prefix_width = 0;
 6130|    436|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 106, False: 330]
  ------------------
 6131|    106|            auto max_width_view = take_width(rng, specs.precision);
 6132|    106|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 106]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    106|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    106|            it = prefix_result.first.base();
 6135|    106|            prefix_width = prefix_result.second;
 6136|    106|        }
 6137|    330|        else {
 6138|    330|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    330|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    330|            std::tie(it, prefix_width) = prefix_result;
 6140|    330|        }
 6141|    436|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    436|        std::ptrdiff_t value_width = 0;
 6145|    436|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 106, False: 330]
  ------------------
 6146|    106|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 104]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    104|            const auto initial_width = specs.precision - prefix_width;
 6154|    104|            auto max_width_view =
 6155|    104|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    104|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 84]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     84|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     84|            it = w_it.base();
 6158|     84|            value_width = initial_width - w_it.count();
 6159|     84|        }
 6160|    330|        else {
 6161|    330|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20, False: 310]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     20|    }                                                  \
  |  | 3671|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    310|                                             specs, value, loc));
 6163|       |
 6164|    310|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 244, False: 66]
  ------------------
 6165|    244|                value_width = calculate_text_width(
 6166|    244|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    244|                        .view());
 6168|    244|            }
 6169|    310|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    394|        std::ptrdiff_t postfix_width = 0;
 6173|    394|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 394, False: 0]
  ------------------
 6174|    394|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    394|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    394|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    394|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    394|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    394|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    394|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    394|                                 value_width));
 6178|    394|            std::tie(it, postfix_width) = postfix_result;
 6179|    394|        }
 6180|       |
 6181|    394|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    394|                                                 value_width, postfix_width);
 6183|    394|            !e) {
  ------------------
  |  Branch (6183:13): [True: 242, False: 152]
  ------------------
 6184|    242|            return unexpected(e);
 6185|    242|        }
 6186|       |
 6187|    152|        return it;
 6188|    394|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|  2.53k|    {
 6193|  2.53k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.53k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.53k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.53k|            auto rd = make_reader<T, char_type>();
 6198|  2.53k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 442]
  |  |  ------------------
  ------------------
 6199|  2.09k|                return unexpected(e);
 6200|  2.09k|            }
 6201|       |
 6202|    442|            return impl(rd, range, value);
 6203|  2.53k|        }
 6204|  2.53k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.53k|            auto rd = make_reader<T, char_type>();
 6206|  2.53k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.53k|                return unexpected(e);
 6208|  2.53k|            }
 6209|       |
 6210|  2.53k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.53k|                specs.width != 0) {
 6212|  2.53k|                return impl(rd, range, value);
 6213|  2.53k|            }
 6214|       |
 6215|  2.53k|            auto crange = get_as_contiguous(range);
 6216|  2.53k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.53k|            return ranges::next(range.begin(),
 6218|  2.53k|                                ranges::distance(crange.begin(), it));
 6219|  2.53k|        }
 6220|  2.53k|        else {
 6221|  2.53k|            SCN_EXPECT(false);
 6222|  2.53k|            SCN_UNREACHABLE;
 6223|  2.53k|        }
 6224|  2.53k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    442|    {
 6124|    442|        const bool need_skipped_width =
 6125|    442|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 254, False: 188]
  |  Branch (6125:33): [True: 104, False: 84]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    442|        auto it = rng.begin();
 6129|    442|        std::ptrdiff_t prefix_width = 0;
 6130|    442|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 108, False: 334]
  ------------------
 6131|    108|            auto max_width_view = take_width(rng, specs.precision);
 6132|    108|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    108|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    108|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    108|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    108|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    108|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    108|            it = prefix_result.first.base();
 6135|    108|            prefix_width = prefix_result.second;
 6136|    108|        }
 6137|    334|        else {
 6138|    334|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 334]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    334|            std::tie(it, prefix_width) = prefix_result;
 6140|    334|        }
 6141|    442|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    442|        std::ptrdiff_t value_width = 0;
 6145|    442|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 108, False: 334]
  ------------------
 6146|    108|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 104]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    104|            const auto initial_width = specs.precision - prefix_width;
 6154|    104|            auto max_width_view =
 6155|    104|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    104|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 104, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    104|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    104|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    104|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    104|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    104|    }                                                  \
  |  |  |  | 3671|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    334|        else {
 6161|    334|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 334, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    334|    }                                                  \
  |  | 3671|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  2.49k|    {
 6193|  2.49k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.49k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.49k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.49k|            auto rd = make_reader<T, char_type>();
 6198|  2.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 2.41k]
  |  |  ------------------
  ------------------
 6199|     78|                return unexpected(e);
 6200|     78|            }
 6201|       |
 6202|  2.41k|            return impl(rd, range, value);
 6203|  2.49k|        }
 6204|  2.49k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.49k|            auto rd = make_reader<T, char_type>();
 6206|  2.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.49k|                return unexpected(e);
 6208|  2.49k|            }
 6209|       |
 6210|  2.49k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.49k|                specs.width != 0) {
 6212|  2.49k|                return impl(rd, range, value);
 6213|  2.49k|            }
 6214|       |
 6215|  2.49k|            auto crange = get_as_contiguous(range);
 6216|  2.49k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.49k|            return ranges::next(range.begin(),
 6218|  2.49k|                                ranges::distance(crange.begin(), it));
 6219|  2.49k|        }
 6220|  2.49k|        else {
 6221|  2.49k|            SCN_EXPECT(false);
 6222|  2.49k|            SCN_UNREACHABLE;
 6223|  2.49k|        }
 6224|  2.49k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  2.41k|    {
 6124|  2.41k|        const bool need_skipped_width =
 6125|  2.41k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 846, False: 1.56k]
  |  Branch (6125:33): [True: 184, False: 1.38k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  2.41k|        auto it = rng.begin();
 6129|  2.41k|        std::ptrdiff_t prefix_width = 0;
 6130|  2.41k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 190, False: 2.22k]
  ------------------
 6131|    190|            auto max_width_view = take_width(rng, specs.precision);
 6132|    190|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 190]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    190|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    190|            it = prefix_result.first.base();
 6135|    190|            prefix_width = prefix_result.second;
 6136|    190|        }
 6137|  2.22k|        else {
 6138|  2.22k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  2.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  2.22k|            std::tie(it, prefix_width) = prefix_result;
 6140|  2.22k|        }
 6141|  2.41k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  2.41k|        std::ptrdiff_t value_width = 0;
 6145|  2.41k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 190, False: 2.22k]
  ------------------
 6146|    190|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 184]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    184|            const auto initial_width = specs.precision - prefix_width;
 6154|    184|            auto max_width_view =
 6155|    184|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    184|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    184|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    184|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    184|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    184|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 66, False: 118]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     66|    }                                                  \
  |  |  |  | 3671|    184|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    118|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    118|            it = w_it.base();
 6158|    118|            value_width = initial_width - w_it.count();
 6159|    118|        }
 6160|  2.22k|        else {
 6161|  2.22k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  2.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.59k, False: 630]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  1.59k|    }                                                  \
  |  | 3671|  2.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    630|                                             specs, value, loc));
 6163|       |
 6164|    630|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 300, False: 330]
  ------------------
 6165|    300|                value_width = calculate_text_width(
 6166|    300|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    300|                        .view());
 6168|    300|            }
 6169|    630|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    748|        std::ptrdiff_t postfix_width = 0;
 6173|    748|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 468, False: 280]
  ------------------
 6174|    468|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    468|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    468|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    468|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 468]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    468|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    468|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    468|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    468|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    468|                                 value_width));
 6178|    468|            std::tie(it, postfix_width) = postfix_result;
 6179|    468|        }
 6180|       |
 6181|    748|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    748|                                                 value_width, postfix_width);
 6183|    748|            !e) {
  ------------------
  |  Branch (6183:13): [True: 88, False: 660]
  ------------------
 6184|     88|            return unexpected(e);
 6185|     88|        }
 6186|       |
 6187|    660|        return it;
 6188|    748|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  2.49k|    {
 6193|  2.49k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.49k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.49k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.49k|            auto rd = make_reader<T, char_type>();
 6198|  2.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 2.41k]
  |  |  ------------------
  ------------------
 6199|     78|                return unexpected(e);
 6200|     78|            }
 6201|       |
 6202|  2.41k|            return impl(rd, range, value);
 6203|  2.49k|        }
 6204|  2.49k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.49k|            auto rd = make_reader<T, char_type>();
 6206|  2.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.49k|                return unexpected(e);
 6208|  2.49k|            }
 6209|       |
 6210|  2.49k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.49k|                specs.width != 0) {
 6212|  2.49k|                return impl(rd, range, value);
 6213|  2.49k|            }
 6214|       |
 6215|  2.49k|            auto crange = get_as_contiguous(range);
 6216|  2.49k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.49k|            return ranges::next(range.begin(),
 6218|  2.49k|                                ranges::distance(crange.begin(), it));
 6219|  2.49k|        }
 6220|  2.49k|        else {
 6221|  2.49k|            SCN_EXPECT(false);
 6222|  2.49k|            SCN_UNREACHABLE;
 6223|  2.49k|        }
 6224|  2.49k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  2.41k|    {
 6124|  2.41k|        const bool need_skipped_width =
 6125|  2.41k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 846, False: 1.56k]
  |  Branch (6125:33): [True: 184, False: 1.38k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  2.41k|        auto it = rng.begin();
 6129|  2.41k|        std::ptrdiff_t prefix_width = 0;
 6130|  2.41k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 190, False: 2.22k]
  ------------------
 6131|    190|            auto max_width_view = take_width(rng, specs.precision);
 6132|    190|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 190]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    190|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    190|            it = prefix_result.first.base();
 6135|    190|            prefix_width = prefix_result.second;
 6136|    190|        }
 6137|  2.22k|        else {
 6138|  2.22k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  2.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  2.22k|            std::tie(it, prefix_width) = prefix_result;
 6140|  2.22k|        }
 6141|  2.41k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  2.41k|        std::ptrdiff_t value_width = 0;
 6145|  2.41k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 190, False: 2.22k]
  ------------------
 6146|    190|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 184]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    184|            const auto initial_width = specs.precision - prefix_width;
 6154|    184|            auto max_width_view =
 6155|    184|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    184|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    184|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    184|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    184|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    184|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 66, False: 118]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     66|    }                                                  \
  |  |  |  | 3671|    184|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    118|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    118|            it = w_it.base();
 6158|    118|            value_width = initial_width - w_it.count();
 6159|    118|        }
 6160|  2.22k|        else {
 6161|  2.22k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  2.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.59k, False: 630]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  1.59k|    }                                                  \
  |  | 3671|  2.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    630|                                             specs, value, loc));
 6163|       |
 6164|    630|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 300, False: 330]
  ------------------
 6165|    300|                value_width = calculate_text_width(
 6166|    300|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    300|                        .view());
 6168|    300|            }
 6169|    630|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    748|        std::ptrdiff_t postfix_width = 0;
 6173|    748|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 468, False: 280]
  ------------------
 6174|    468|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    468|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    468|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    468|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 468]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    468|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    468|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    468|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    468|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    468|                                 value_width));
 6178|    468|            std::tie(it, postfix_width) = postfix_result;
 6179|    468|        }
 6180|       |
 6181|    748|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    748|                                                 value_width, postfix_width);
 6183|    748|            !e) {
  ------------------
  |  Branch (6183:13): [True: 88, False: 660]
  ------------------
 6184|     88|            return unexpected(e);
 6185|     88|        }
 6186|       |
 6187|    660|        return it;
 6188|    748|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  2.49k|    {
 6193|  2.49k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  2.49k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  2.49k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  2.49k|            auto rd = make_reader<T, char_type>();
 6198|  2.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 2.41k]
  |  |  ------------------
  ------------------
 6199|     78|                return unexpected(e);
 6200|     78|            }
 6201|       |
 6202|  2.41k|            return impl(rd, range, value);
 6203|  2.49k|        }
 6204|  2.49k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  2.49k|            auto rd = make_reader<T, char_type>();
 6206|  2.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  2.49k|                return unexpected(e);
 6208|  2.49k|            }
 6209|       |
 6210|  2.49k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  2.49k|                specs.width != 0) {
 6212|  2.49k|                return impl(rd, range, value);
 6213|  2.49k|            }
 6214|       |
 6215|  2.49k|            auto crange = get_as_contiguous(range);
 6216|  2.49k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  2.49k|            return ranges::next(range.begin(),
 6218|  2.49k|                                ranges::distance(crange.begin(), it));
 6219|  2.49k|        }
 6220|  2.49k|        else {
 6221|  2.49k|            SCN_EXPECT(false);
 6222|  2.49k|            SCN_UNREACHABLE;
 6223|  2.49k|        }
 6224|  2.49k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  2.41k|    {
 6124|  2.41k|        const bool need_skipped_width =
 6125|  2.41k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 846, False: 1.56k]
  |  Branch (6125:33): [True: 184, False: 1.38k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  2.41k|        auto it = rng.begin();
 6129|  2.41k|        std::ptrdiff_t prefix_width = 0;
 6130|  2.41k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 190, False: 2.22k]
  ------------------
 6131|    190|            auto max_width_view = take_width(rng, specs.precision);
 6132|    190|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 190]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    190|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    190|            it = prefix_result.first.base();
 6135|    190|            prefix_width = prefix_result.second;
 6136|    190|        }
 6137|  2.22k|        else {
 6138|  2.22k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  2.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  2.22k|            std::tie(it, prefix_width) = prefix_result;
 6140|  2.22k|        }
 6141|  2.41k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  2.41k|        std::ptrdiff_t value_width = 0;
 6145|  2.41k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 190, False: 2.22k]
  ------------------
 6146|    190|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 184]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    184|            const auto initial_width = specs.precision - prefix_width;
 6154|    184|            auto max_width_view =
 6155|    184|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    184|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    184|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    184|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    184|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    184|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 66, False: 118]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     66|    }                                                  \
  |  |  |  | 3671|    184|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    118|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    118|            it = w_it.base();
 6158|    118|            value_width = initial_width - w_it.count();
 6159|    118|        }
 6160|  2.22k|        else {
 6161|  2.22k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  2.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.59k, False: 630]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  1.59k|    }                                                  \
  |  | 3671|  2.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    630|                                             specs, value, loc));
 6163|       |
 6164|    630|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 300, False: 330]
  ------------------
 6165|    300|                value_width = calculate_text_width(
 6166|    300|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    300|                        .view());
 6168|    300|            }
 6169|    630|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    748|        std::ptrdiff_t postfix_width = 0;
 6173|    748|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 468, False: 280]
  ------------------
 6174|    468|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    468|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    468|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    468|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 468]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    468|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    468|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    468|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    468|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    468|                                 value_width));
 6178|    468|            std::tie(it, postfix_width) = postfix_result;
 6179|    468|        }
 6180|       |
 6181|    748|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    748|                                                 value_width, postfix_width);
 6183|    748|            !e) {
  ------------------
  |  Branch (6183:13): [True: 88, False: 660]
  ------------------
 6184|     88|            return unexpected(e);
 6185|     88|        }
 6186|       |
 6187|    660|        return it;
 6188|    748|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    626|    {
 3492|    626|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    626|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    626|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    626|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    626|                return unexpected_scan_error(
 3498|    626|                    scan_error::invalid_scanned_value,
 3499|    626|                    "Unexpected '-' sign when parsing an "
 3500|    626|                    "unsigned value");
 3501|    626|            }
 3502|    626|        }
 3503|       |
 3504|    626|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 626]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.25k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.25k|                parse_integer_digits_without_thsep(
 3511|  1.25k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.25k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.25k|        auto buf = make_contiguous_buffer(
 3515|  1.25k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.25k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 626, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    626|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    626|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    626|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    626|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    626|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.25k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    626|    {
 3492|    626|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    626|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    626|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    626|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 626]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    626|        }
 3503|       |
 3504|    626|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 626]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.25k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.25k|                parse_integer_digits_without_thsep(
 3511|  1.25k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.25k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.25k|        auto buf = make_contiguous_buffer(
 3515|  1.25k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.25k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    626|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    626|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    626|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 626, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    626|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    626|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    626|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    626|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    626|    }                                                  \
  |  |  |  | 3671|    626|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.25k|    }

LLVMFuzzerTestOneInput:
   68|  4.70k|{
   69|  4.70k|    scn::fuzz::run(data, size);
   70|  4.70k|    return 0;
   71|  4.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  4.70k|{
   52|  4.70k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 4.70k]
  |  Branch (52:35): [True: 0, False: 4.70k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  4.70k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  4.70k|    run_for_source(sv);
   59|  4.70k|    run_for_source(wsv_reinterpret);
   60|  4.70k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 4.70k, False: 0]
  ------------------
   61|  4.70k|        run_for_source(wsv_transcode);
   62|  4.70k|    }
   63|  4.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  4.70k|{
   37|  4.70k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  4.70k|    run_for_type<char_type>(source);
   40|  4.70k|    run_for_type<int>(source);
   41|  4.70k|    run_for_type<unsigned>(source);
   42|  4.70k|    run_for_type<double>(source);
   43|  4.70k|    run_for_type<bool>(source);
   44|  4.70k|    run_for_type<void*>(source);
   45|  4.70k|    run_for_type<std::string>(source);
   46|  4.70k|    run_for_type<std::wstring>(source);
   47|  4.70k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  4.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.70k|{
   25|  4.70k|    {
   26|  4.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.70k|    }
   28|  4.70k|    {
   29|  4.70k|        auto _ =
   30|  4.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.70k|    }
   32|  4.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.70k|{
   25|  4.70k|    {
   26|  4.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.70k|    }
   28|  4.70k|    {
   29|  4.70k|        auto _ =
   30|  4.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.70k|    }
   32|  4.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.70k|{
   25|  4.70k|    {
   26|  4.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.70k|    }
   28|  4.70k|    {
   29|  4.70k|        auto _ =
   30|  4.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.70k|    }
   32|  4.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.70k|{
   25|  4.70k|    {
   26|  4.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.70k|    }
   28|  4.70k|    {
   29|  4.70k|        auto _ =
   30|  4.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.70k|    }
   32|  4.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.70k|{
   25|  4.70k|    {
   26|  4.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.70k|    }
   28|  4.70k|    {
   29|  4.70k|        auto _ =
   30|  4.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.70k|    }
   32|  4.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  4.70k|{
   25|  4.70k|    {
   26|  4.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.70k|    }
   28|  4.70k|    {
   29|  4.70k|        auto _ =
   30|  4.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.70k|    }
   32|  4.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  4.70k|{
   25|  4.70k|    {
   26|  4.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.70k|    }
   28|  4.70k|    {
   29|  4.70k|        auto _ =
   30|  4.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.70k|    }
   32|  4.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  4.70k|{
   25|  4.70k|    {
   26|  4.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.70k|    }
   28|  4.70k|    {
   29|  4.70k|        auto _ =
   30|  4.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.70k|    }
   32|  4.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  4.70k|{
   25|  4.70k|    {
   26|  4.70k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.70k|    }
   28|  4.70k|    {
   29|  4.70k|        auto _ =
   30|  4.70k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.70k|    }
   32|  4.70k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  9.41k|{
   37|  9.41k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  9.41k|    run_for_type<char_type>(source);
   40|  9.41k|    run_for_type<int>(source);
   41|  9.41k|    run_for_type<unsigned>(source);
   42|  9.41k|    run_for_type<double>(source);
   43|  9.41k|    run_for_type<bool>(source);
   44|  9.41k|    run_for_type<void*>(source);
   45|  9.41k|    run_for_type<std::string>(source);
   46|  9.41k|    run_for_type<std::wstring>(source);
   47|  9.41k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  9.41k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  9.41k|{
   25|  9.41k|    {
   26|  9.41k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.41k|    }
   28|  9.41k|    {
   29|  9.41k|        auto _ =
   30|  9.41k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.41k|    }
   32|  9.41k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  9.41k|{
   25|  9.41k|    {
   26|  9.41k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.41k|    }
   28|  9.41k|    {
   29|  9.41k|        auto _ =
   30|  9.41k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.41k|    }
   32|  9.41k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  9.41k|{
   25|  9.41k|    {
   26|  9.41k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.41k|    }
   28|  9.41k|    {
   29|  9.41k|        auto _ =
   30|  9.41k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.41k|    }
   32|  9.41k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  9.41k|{
   25|  9.41k|    {
   26|  9.41k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.41k|    }
   28|  9.41k|    {
   29|  9.41k|        auto _ =
   30|  9.41k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.41k|    }
   32|  9.41k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  9.41k|{
   25|  9.41k|    {
   26|  9.41k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.41k|    }
   28|  9.41k|    {
   29|  9.41k|        auto _ =
   30|  9.41k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.41k|    }
   32|  9.41k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  9.41k|{
   25|  9.41k|    {
   26|  9.41k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.41k|    }
   28|  9.41k|    {
   29|  9.41k|        auto _ =
   30|  9.41k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.41k|    }
   32|  9.41k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  9.41k|{
   25|  9.41k|    {
   26|  9.41k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.41k|    }
   28|  9.41k|    {
   29|  9.41k|        auto _ =
   30|  9.41k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.41k|    }
   32|  9.41k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  9.41k|{
   25|  9.41k|    {
   26|  9.41k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.41k|    }
   28|  9.41k|    {
   29|  9.41k|        auto _ =
   30|  9.41k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.41k|    }
   32|  9.41k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  9.41k|{
   25|  9.41k|    {
   26|  9.41k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.41k|    }
   28|  9.41k|    {
   29|  9.41k|        auto _ =
   30|  9.41k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.41k|    }
   32|  9.41k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  4.70k|{
   52|  4.70k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  4.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  4.70k|    string_buffer.resize(size);
   56|  4.70k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  4.70k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  4.70k|    const auto wsv_reinterpret_size =
   61|  4.70k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 92, False: 4.61k]
  ------------------
   62|  4.70k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  4.70k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  4.70k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  4.70k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  4.70k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  4.70k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  4.70k|}

